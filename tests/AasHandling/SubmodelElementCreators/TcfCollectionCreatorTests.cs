using System;
using System.IO;
using Xunit;
using AasCore.Aas3_0;
using AasDemoapp.AasHandling.SubmodelElementCreators;

namespace AasDemoapp.Tests.AasHandling.SubmodelElementCreators;

/// <summary>
/// Unit-Tests für die TcfCollectionCreator Klasse.
/// </summary>
public class TcfCollectionCreatorTests
{
    [Fact]
    public void CreateFromJson_ShouldReturnSubmodelElementCollection()
    {
        // Act
        var result = TcfCollectionCreator.CreateFromJson();

        // Assert
        Assert.NotNull(result);
        Assert.IsType<SubmodelElementCollection>(result);
    }

    [Fact]
    public void CreateFromJson_ShouldHaveCorrectIdShort()
    {
        // Act
        var result = TcfCollectionCreator.CreateFromJson();

        // Assert
        Assert.Equal("TransportCarbonFootprint", result.IdShort);
    }

    [Fact]
    public void CreateFromJson_ShouldHaveDisplayName()
    {
        // Act
        var result = TcfCollectionCreator.CreateFromJson();

        // Assert
        Assert.NotNull(result.DisplayName);
        Assert.NotEmpty(result.DisplayName);
        
        // Prüfe auf deutsche und englische Sprache
        var germanName = result.DisplayName.FirstOrDefault(dn => dn.Language == "de");
        var englishName = result.DisplayName.FirstOrDefault(dn => dn.Language == "en");
        
        Assert.NotNull(germanName);
        Assert.Equal("Transport C02-Fußabdruck", germanName.Text);
        
        Assert.NotNull(englishName);
        Assert.Equal("Transport carbon footprint", englishName.Text);
    }

    [Fact]
    public void CreateFromJson_ShouldHaveDescription()
    {
        // Act
        var result = TcfCollectionCreator.CreateFromJson();

        // Assert
        Assert.NotNull(result.Description);
        Assert.NotEmpty(result.Description);
        
        var englishDescription = result.Description.FirstOrDefault(d => d.Language == "en");
        Assert.NotNull(englishDescription);
        Assert.Equal("Balance of greenhouse gas emissions generated by a transport service of a product", englishDescription.Text);
    }

    [Fact]
    public void CreateFromJson_ShouldHaveSemanticId()
    {
        // Act
        var result = TcfCollectionCreator.CreateFromJson();

        // Assert
        Assert.NotNull(result.SemanticId);
        Assert.IsType<Reference>(result.SemanticId);
        
        var reference = (Reference)result.SemanticId;
        Assert.NotEmpty(reference.Keys);
        
        var key = reference.Keys.First();
        Assert.Equal(KeyTypes.GlobalReference, key.Type);
        Assert.Equal("https://admin-shell.io/idta/CarbonFootprint/TransportCarbonFootprint/0/9", key.Value);
    }

    [Fact]
    public void CreateFromJson_ShouldHaveValue()
    {
        // Act
        var result = TcfCollectionCreator.CreateFromJson();

        // Assert
        Assert.NotNull(result.Value);
        Assert.NotEmpty(result.Value);
    }

    [Fact]
    public void CreateFromJson_ShouldContainTCFCalculationMethodElement()
    {
        // Act
        var result = TcfCollectionCreator.CreateFromJson();

        // Assert
        var tcfCalculationMethod = result.Value?.FirstOrDefault(v => v.IdShort == "TCFCalculationMethod");
        Assert.NotNull(tcfCalculationMethod);
        Assert.Equal("PARAMETER", tcfCalculationMethod.Category);
    }

    [Fact]
    public void CreateFromJson_WhenFileNotExists_ShouldThrowException()
    {
        // Arrange - Temporär das BaseDirectory auf einen ungültigen Pfad setzen
        // Da wir die statische Methode nicht mocken können, testen wir indirekt
        // indem wir die Datei temporär verschieben
        var originalPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "AasHandling", "SubmodelElementCreators", "tcfCollection");
        var tempPath = originalPath + ".temp";

        try
        {
            if (System.IO.File.Exists(originalPath))
            {
                System.IO.File.Move(originalPath, tempPath);
            }

            // Act & Assert
            Assert.Throws<FileNotFoundException>(() => TcfCollectionCreator.CreateFromJson());
        }
        finally
        {
            // Cleanup - Datei zurück verschieben
            if (System.IO.File.Exists(tempPath))
            {
                System.IO.File.Move(tempPath, originalPath);
            }
        }
    }
}
