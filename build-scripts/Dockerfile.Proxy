# syntax=docker/dockerfile:1.7-labs


# Build stage
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
ENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1 \
  DOTNET_CLI_TELEMETRY_OPTOUT=1 \
  NUGET_XMLDOC_MODE=skip
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

# Install Node.js (LTS) and npm for SPA build
RUN apt-get update && \
  apt-get install -y curl && \
  curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && \
  apt-get install -y nodejs && \
  npm --version && node --version


# Copy the entire src directory (preserving structure)
COPY src/AasProxyService ./AasProxyService

# Restore dependencies (with NuGet cache mounts)
RUN --mount=type=cache,target=/root/.nuget/packages \
  --mount=type=cache,target=/root/.local/share/NuGet/http-cache \
  dotnet restore "AasProxyService/AasProxyService.csproj"

# Build the application
WORKDIR /src/AasProxyService
RUN --mount=type=cache,target=/root/.nuget/packages \
  dotnet build "AasProxyService.csproj" -c "$BUILD_CONFIGURATION" -o /app/build

# Publish stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN --mount=type=cache,target=/root/.nuget/packages \
  dotnet publish "AasProxyService.csproj" -c "$BUILD_CONFIGURATION" -o /app/publish /p:UseAppHost=false

# Runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS final
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "AasProxyService.dll"]
