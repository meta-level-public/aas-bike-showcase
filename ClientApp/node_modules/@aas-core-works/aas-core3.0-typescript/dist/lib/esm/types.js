/**
 * Provide an implementation of the Asset Administration Shell (AAS) V3.0.
 *
 * @remarks
 * The presented version of the Metamodel is related to the work of
 * aas-core-works, which can be found here: https://github.com/aas-core-works.
 *
 * The presented content is neither related to the IDTA nor
 * Plattform Industrie 4.0 and does not represent an official publication.
 *
 * We diverge from the book in the following points.
 *
 * We did not implement the following constraints as they are too general and can not
 * be formalized as part of the core library, but affects external components such as
 * AAS registry or AAS server:
 *
 * * Constraint AASd-022
 *
 * We did not implement the following constraints since they depend on registry and
 * de-referencing of {@link Reference} objects:
 *
 * * Constraint AASd-006
 * * Constraint AASd-007
 * * Constraint AASc-3a-003
 *
 * Some constraints are not enforceable as they depend on the wider context
 * such as language understanding, so we could not formalize them:
 *
 * * Constraint AASd-012: This constraint requires that the texts inside
 *   `Multi_language_property` shall have the same meanings in the separate languages.
 *   This cannot be tested.
 * * Constraint AASd-116: In the book, Constraint AASd-116 imposes a
 *   case-insensitive equality against `globalAssetId`. This is culturally-dependent,
 *   and depends on the system settings. For example, the case-folding
 *   for the letters "i" and "I" is different in Turkish from English.
 *
 *   We implement the constraint as case-sensitive instead to allow for interoperability
 *   across different culture settings.
 *
 * Furthermore, we diverge from the book in the following points regarding
 * the enumerations. We have to implement subsets of enumerations as sets as common
 * programming languages do not support inheritance of enumerations. The relationship
 * between the properties and the sets is defined through invariants. This causes
 * the following divergences:
 *
 * * We decided therefore to remove the enumeration `DataTypeDefRDF`
 *   and keep only {@link DataTypeDefXsd} as enumeration. Otherwise, we would have
 *   to write redundant invariants all over the meta-model because `DataTypeDefRDF`
 *   is actually never used in any type definition.
 * * The enumeration {@link AasSubmodelElements} is used in two different contexts.
 *   One context is the definition of key types in a reference. Another context is
 *   the definition of element types in a {@link SubmodelElementList}.
 *
 *   To avoid confusion, we introduce two separate enumerations for the separate contexts.
 *   Firstly, a set of {@link KeyTypes}, {@link constants!AAS_SUBMODEL_ELEMENTS_AS_KEYS} to
 *   represent the first context (key type in a reference).
 *   Secondly, the enumeration {@link AasSubmodelElements} is kept as designator
 *   for {@link SubmodelElementList.typeValueListElement}.
 * * The specification introduces several types of `Lang_string_set`.
 *   These types differ between the allowed length of their text inside the singular
 *   `Lang_string` objects. Since the native representation of `Lang_string_set` as
 *   `List` of `Lang_string` is required by specification, it is impossible to
 *   introduce separate `Lang_string_set` types. Therefore, the distinction is drawn here
 *   between the `Lang_string` types.
 *
 *   `DefinitionTypeIEC61360` is represented as a
 *   `List` of {@link LangStringDefinitionTypeIec61360}
 *
 *   `MultiLanguageNameType` is represented as a
 *   `List` of {@link LangStringNameType}
 *
 *   `PreferredNameTypeIEC61360` is represented as a
 *   `List` of {@link LangStringPreferredNameTypeIec61360}
 *
 *   `ShortNameTypeIEC61360` is represented as a
 *   `List` of {@link LangStringShortNameTypeIec61360}
 *
 *   `MultiLanguageTextType` is represented as a
 *   `List` of {@link LangStringTextType}
 *
 *   Furthermore, since `Lang_string` is not used anywhere, we rename it to
 *   {@link IAbstractLangString}.
 *
 * Concerning the data specifications, we embed them within
 * {@link IHasDataSpecification} instead of referencing them *via* an external reference.
 * The working group decided to change the rules for serialization *after* the book was
 * published. The data specifications are critical in applications, but there is no
 * possibility to access them through a data channel as they are not part of
 * an environment.
 */ // This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
/**
 * Represent runtime model type of an instance.
 */export let ModelType=/*#__PURE__*/function(ModelType){ModelType[ModelType["Extension"]=0]="Extension";ModelType[ModelType["AdministrativeInformation"]=1]="AdministrativeInformation";ModelType[ModelType["Qualifier"]=2]="Qualifier";ModelType[ModelType["AssetAdministrationShell"]=3]="AssetAdministrationShell";ModelType[ModelType["AssetInformation"]=4]="AssetInformation";ModelType[ModelType["Resource"]=5]="Resource";ModelType[ModelType["SpecificAssetId"]=6]="SpecificAssetId";ModelType[ModelType["Submodel"]=7]="Submodel";ModelType[ModelType["RelationshipElement"]=8]="RelationshipElement";ModelType[ModelType["SubmodelElementList"]=9]="SubmodelElementList";ModelType[ModelType["SubmodelElementCollection"]=10]="SubmodelElementCollection";ModelType[ModelType["Property"]=11]="Property";ModelType[ModelType["MultiLanguageProperty"]=12]="MultiLanguageProperty";ModelType[ModelType["Range"]=13]="Range";ModelType[ModelType["ReferenceElement"]=14]="ReferenceElement";ModelType[ModelType["Blob"]=15]="Blob";ModelType[ModelType["File"]=16]="File";ModelType[ModelType["AnnotatedRelationshipElement"]=17]="AnnotatedRelationshipElement";ModelType[ModelType["Entity"]=18]="Entity";ModelType[ModelType["EventPayload"]=19]="EventPayload";ModelType[ModelType["BasicEventElement"]=20]="BasicEventElement";ModelType[ModelType["Operation"]=21]="Operation";ModelType[ModelType["OperationVariable"]=22]="OperationVariable";ModelType[ModelType["Capability"]=23]="Capability";ModelType[ModelType["ConceptDescription"]=24]="ConceptDescription";ModelType[ModelType["Reference"]=25]="Reference";ModelType[ModelType["Key"]=26]="Key";ModelType[ModelType["LangStringNameType"]=27]="LangStringNameType";ModelType[ModelType["LangStringTextType"]=28]="LangStringTextType";ModelType[ModelType["Environment"]=29]="Environment";ModelType[ModelType["EmbeddedDataSpecification"]=30]="EmbeddedDataSpecification";ModelType[ModelType["LevelType"]=31]="LevelType";ModelType[ModelType["ValueReferencePair"]=32]="ValueReferencePair";ModelType[ModelType["ValueList"]=33]="ValueList";ModelType[ModelType["LangStringPreferredNameTypeIec61360"]=34]="LangStringPreferredNameTypeIec61360";ModelType[ModelType["LangStringShortNameTypeIec61360"]=35]="LangStringShortNameTypeIec61360";ModelType[ModelType["LangStringDefinitionTypeIec61360"]=36]="LangStringDefinitionTypeIec61360";ModelType[ModelType["DataSpecificationIec61360"]=37]="DataSpecificationIec61360";return ModelType;}({});/**
 * Iterate over the literals of {@link ModelType}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overModelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// Extension
yield 1;// AdministrativeInformation
yield 2;// Qualifier
yield 3;// AssetAdministrationShell
yield 4;// AssetInformation
yield 5;// Resource
yield 6;// SpecificAssetId
yield 7;// Submodel
yield 8;// RelationshipElement
yield 9;// SubmodelElementList
yield 10;// SubmodelElementCollection
yield 11;// Property
yield 12;// MultiLanguageProperty
yield 13;// Range
yield 14;// ReferenceElement
yield 15;// Blob
yield 16;// File
yield 17;// AnnotatedRelationshipElement
yield 18;// Entity
yield 19;// EventPayload
yield 20;// BasicEventElement
yield 21;// Operation
yield 22;// OperationVariable
yield 23;// Capability
yield 24;// ConceptDescription
yield 25;// Reference
yield 26;// Key
yield 27;// LangStringNameType
yield 28;// LangStringTextType
yield 29;// Environment
yield 30;// EmbeddedDataSpecification
yield 31;// LevelType
yield 32;// ValueReferencePair
yield 33;// ValueList
yield 34;// LangStringPreferredNameTypeIec61360
yield 35;// LangStringShortNameTypeIec61360
yield 36;// LangStringDefinitionTypeIec61360
yield 37;// DataSpecificationIec61360
}/**
 * Represent the most general class of an AAS model.
 */export class Class{}/**
 * Element that can have a semantic definition plus some supplemental semantic
 * definitions.
 *
 * Constraint `AASd-118`:
 * If there are ID {@link supplementalSemanticIds} defined
 * then there shall be also a main semantic ID {@link semanticId}.
 */ /**
 * Single extension of an element.
 */export class Extension extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 0;// Extension
}/**
   * Identifier of the semantic definition of the element. It is called semantic ID
   * of the element or also main semantic ID of the element.
   *
   * @remarks
   * **Note**:
   * It is recommended to use a global reference.
   */ /**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link refersTo} if it is set, or yield nothing.
   */*overRefersToOrEmpty(){if(this.refersTo!==null){yield*this.refersTo;}return;}/**
   * @returns {@link valueType} if set or the default value otherwise.
   */valueTypeOrDefault(){return this.valueType!==null?this.valueType:DataTypeDefXsd.String;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.refersTo!==null){yield*this.refersTo;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const anItem of this.supplementalSemanticIds){yield anItem;yield*anItem.descend();}}if(this.refersTo!==null){for(const anotherItem of this.refersTo){yield anotherItem;yield*anotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitExtension(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitExtensionWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformExtension(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformExtensionWithContext(this,context);}constructor(name,semanticId=null,supplementalSemanticIds=null,valueType=null,value=null,refersTo=null){super();this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.name=name;this.valueType=valueType;this.value=value;this.refersTo=refersTo;}}/**
 * Element that can be extended by proprietary extensions.
 *
 * @remarks
 * **Note**:
 * Extensions are proprietary, i.e. they do not support global interoperability.
 */ /**
 * Enumeration for denoting whether an element is a template or an instance.
 */export let ModellingKind=/*#__PURE__*/function(ModellingKind){ModellingKind[ModellingKind["Template"]=0]="Template";ModellingKind[ModellingKind["Instance"]=1]="Instance";return ModellingKind;}({});/**
 * Iterate over the literals of {@link ModellingKind}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overModellingKind(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// Template
yield 1;// Instance
}/**
 * An element with a kind is an element that can either represent a template or an
 * instance.
 *
 * @remarks
 * Default for an element is that it is representing an instance.
 */ /**
 * Administrative meta-information for an element like version
 * information.
 *
 * Constraint `AASd-005`:
 * If {@link AdministrativeInformation.version} is not specified then also {@link AdministrativeInformation.revision} shall be
 * unspecified. This means, a revision requires a version. If there is no version
 * there is no revision neither. Revision is optional.
 */export class AdministrativeInformation extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 1;// AdministrativeInformation
}/**
   * Embedded data specification.
   */ /**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.creator!==null){yield this.creator;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.embeddedDataSpecifications!==null){for(const anItem of this.embeddedDataSpecifications){yield anItem;yield*anItem.descend();}}if(this.creator!==null){yield this.creator;yield*this.creator.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitAdministrativeInformation(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitAdministrativeInformationWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformAdministrativeInformation(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformAdministrativeInformationWithContext(this,context);}constructor(embeddedDataSpecifications=null,version=null,revision=null,creator=null,templateId=null){super();this.embeddedDataSpecifications=embeddedDataSpecifications;this.version=version;this.revision=revision;this.creator=creator;this.templateId=templateId;}}/**
 * The value of a qualifiable element may be further qualified by one or more
 * qualifiers.
 *
 * Constraint `AASd-119`:
 * If any {@link Qualifier.kind} value of {@link qualifiers} is
 * equal to {@link QualifierKind.TemplateQualifier} and the qualified element
 * inherits from {@link IHasKind} then the qualified element shall be of
 * kind Template ({@link IHasKind.kind} = {@link ModellingKind.Template}).
 *
 * **Note**:
 * This constraint is checked at {@link Submodel}.
 */ /**
 * Enumeration for kinds of qualifiers.
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */export let QualifierKind=/*#__PURE__*/function(QualifierKind){QualifierKind[QualifierKind["ValueQualifier"]=0]="ValueQualifier";QualifierKind[QualifierKind["ConceptQualifier"]=1]="ConceptQualifier";QualifierKind[QualifierKind["TemplateQualifier"]=2]="TemplateQualifier";return QualifierKind;}({});/**
 * Iterate over the literals of {@link QualifierKind}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overQualifierKind(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// ValueQualifier
yield 1;// ConceptQualifier
yield 2;// TemplateQualifier
}/**
 * A qualifier is a type-value-pair that makes additional statements w.r.t. the value
 * of the element.
 *
 * Constraint `AASd-006`:
 * If both the {@link Qualifier.value} and the {@link Qualifier.valueId} of
 * a {@link Qualifier} are present then the {@link Qualifier.value} needs
 * to be identical to the value of the referenced coded value
 * in {@link Qualifier.valueId}.
 *
 * Constraint `AASd-020`:
 * The value of {@link Qualifier.value} shall be consistent to the data type as
 * defined in {@link Qualifier.valueType}.
 */export class Qualifier extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 2;// Qualifier
}/**
   * Identifier of the semantic definition of the element. It is called semantic ID
   * of the element or also main semantic ID of the element.
   *
   * @remarks
   * **Note**:
   * It is recommended to use a global reference.
   */ /**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * @returns {@link kind} if set or the default value otherwise.
   */kindOrDefault(){return this.kind!==null?this.kind:QualifierKind.ConceptQualifier;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.valueId!==null){yield this.valueId;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const anItem of this.supplementalSemanticIds){yield anItem;yield*anItem.descend();}}if(this.valueId!==null){yield this.valueId;yield*this.valueId.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitQualifier(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitQualifierWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformQualifier(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformQualifierWithContext(this,context);}constructor(type,valueType,semanticId=null,supplementalSemanticIds=null,kind=null,value=null,valueId=null){super();this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.type=type;this.valueType=valueType;this.kind=kind;this.value=value;this.valueId=valueId;}}/**
 * An asset administration shell.
 */export class AssetAdministrationShell extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 3;// AssetAdministrationShell
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Yield from {@link submodels} if it is set, or yield nothing.
   */*overSubmodelsOrEmpty(){if(this.submodels!==null){yield*this.submodels;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.administration!==null){yield this.administration;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.derivedFrom!==null){yield this.derivedFrom;}yield this.assetInformation;if(this.submodels!==null){yield*this.submodels;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.administration!==null){yield this.administration;yield*this.administration.descend();}if(this.embeddedDataSpecifications!==null){for(const yetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.derivedFrom!==null){yield this.derivedFrom;yield*this.derivedFrom.descend();}yield this.assetInformation;yield*this.assetInformation.descend();if(this.submodels!==null){for(const yetYetYetAnotherItem of this.submodels){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitAssetAdministrationShell(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitAssetAdministrationShellWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformAssetAdministrationShell(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformAssetAdministrationShellWithContext(this,context);}constructor(id,assetInformation,extensions=null,category=null,idShort=null,displayName=null,description=null,administration=null,embeddedDataSpecifications=null,derivedFrom=null,submodels=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.id=id;this.administration=administration;this.embeddedDataSpecifications=embeddedDataSpecifications;this.derivedFrom=derivedFrom;this.assetInformation=assetInformation;this.submodels=submodels;}}/**
 * In {@link AssetInformation} identifying meta data of the asset that is
 * represented by an AAS is defined.
 *
 * @remarks
 * The asset may either represent an asset type or an asset instance.
 *
 * The asset has a globally unique identifier plus – if needed – additional domain
 * specific (proprietary) identifiers. However, to support the corner case of very
 * first phase of lifecycle where a stabilised/constant_set global asset identifier
 * does not already exist, the corresponding attribute {@link AssetInformation.globalAssetId} is
 * optional.
 *
 * Constraint `AASd-116`:
 * `globalAssetId` is a reserved key. If used as value for
 * {@link SpecificAssetId.name} then {@link SpecificAssetId.value} shall be
 * identical to {@link AssetInformation.globalAssetId}.
 *
 * **Note**:
 * Constraint AASd-116 is important to enable a generic search across
 * global and specific asset IDs.
 *
 * **Note**:
 * In the book, Constraint AASd-116 imposes a
 * case-insensitive equality against `globalAssetId`. This is
 * culturally-dependent, and depends on the system settings.
 * For example, the case-folding for the letters "i" and "I" is
 * different in Turkish from English.
 *
 * We implement the constraint as case-sensitive instead to allow
 * for interoperability across different culture settings.
 *
 * Constraint `AASd-131`:
 * For {@link AssetInformation} either the {@link AssetInformation.globalAssetId} shall be
 * defined or at least one item in {@link AssetInformation.specificAssetIds}.
 */export class AssetInformation extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 4;// AssetInformation
}/**
   * Denotes whether the Asset is of kind {@link AssetKind.Type} or
   * {@link AssetKind.Instance}.
   */ /**
   * Yield from {@link specificAssetIds} if it is set, or yield nothing.
   */*overSpecificAssetIdsOrEmpty(){if(this.specificAssetIds!==null){yield*this.specificAssetIds;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.specificAssetIds!==null){yield*this.specificAssetIds;}if(this.defaultThumbnail!==null){yield this.defaultThumbnail;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.specificAssetIds!==null){for(const anItem of this.specificAssetIds){yield anItem;yield*anItem.descend();}}if(this.defaultThumbnail!==null){yield this.defaultThumbnail;yield*this.defaultThumbnail.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitAssetInformation(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitAssetInformationWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformAssetInformation(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformAssetInformationWithContext(this,context);}constructor(assetKind,globalAssetId=null,specificAssetIds=null,assetType=null,defaultThumbnail=null){super();this.assetKind=assetKind;this.globalAssetId=globalAssetId;this.specificAssetIds=specificAssetIds;this.assetType=assetType;this.defaultThumbnail=defaultThumbnail;}}/**
 * Resource represents an address to a file (a locator). The value is an URI that
 * can represent an absolute or relative path
 */export class Resource extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 5;// Resource
}/**
   * Path and name of the resource (with file extension).
   *
   * @remarks
   * The path can be absolute or relative.
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){// No descendable properties
}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){// No descendable properties
}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitResource(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitResourceWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformResource(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformResourceWithContext(this,context);}constructor(path,contentType=null){super();this.path=path;this.contentType=contentType;}}/**
 * Enumeration for denoting whether an asset is a type asset or an instance asset.
 */export let AssetKind=/*#__PURE__*/function(AssetKind){AssetKind[AssetKind["Type"]=0]="Type";AssetKind[AssetKind["Instance"]=1]="Instance";AssetKind[AssetKind["NotApplicable"]=2]="NotApplicable";return AssetKind;}({});/**
 * Iterate over the literals of {@link AssetKind}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overAssetKind(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// Type
yield 1;// Instance
yield 2;// NotApplicable
}/**
 * A specific asset ID describes a generic supplementary identifying attribute of the
 * asset.
 *
 * @remarks
 * The specific asset ID is not necessarily globally unique.
 *
 * Constraint `AASd-133`:
 * {@link SpecificAssetId.externalSubjectId} shall be an external reference,
 * i.e. {@link Reference.type} = {@link ReferenceTypes.ExternalReference}.
 */export class SpecificAssetId extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 6;// SpecificAssetId
}/**
   * Identifier of the semantic definition of the element. It is called semantic ID
   * of the element or also main semantic ID of the element.
   *
   * @remarks
   * **Note**:
   * It is recommended to use a global reference.
   */ /**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.externalSubjectId!==null){yield this.externalSubjectId;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const anItem of this.supplementalSemanticIds){yield anItem;yield*anItem.descend();}}if(this.externalSubjectId!==null){yield this.externalSubjectId;yield*this.externalSubjectId.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitSpecificAssetId(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitSpecificAssetIdWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformSpecificAssetId(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformSpecificAssetIdWithContext(this,context);}constructor(name,value,semanticId=null,supplementalSemanticIds=null,externalSubjectId=null){super();this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.name=name;this.value=value;this.externalSubjectId=externalSubjectId;}}/**
 * A submodel defines a specific aspect of the asset represented by the AAS.
 *
 * @remarks
 * A submodel is used to structure the digital representation and technical
 * functionality of an Administration Shell into distinguishable parts. Each submodel
 * refers to a well-defined domain or subject matter. Submodels can become
 * standardized and, thus, become submodels templates.
 */export class Submodel extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 7;// Submodel
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Yield from {@link submodelElements} if it is set, or yield nothing.
   */*overSubmodelElementsOrEmpty(){if(this.submodelElements!==null){yield*this.submodelElements;}return;}/**
   * @returns {@link kind} if set or the default value otherwise.
   */kindOrDefault(){return this.kind!==null?this.kind:ModellingKind.Instance;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.administration!==null){yield this.administration;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.submodelElements!==null){yield*this.submodelElements;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.administration!==null){yield this.administration;yield*this.administration.descend();}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}if(this.submodelElements!==null){for(const yetYetYetYetYetAnotherItem of this.submodelElements){yield yetYetYetYetYetAnotherItem;yield*yetYetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitSubmodel(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitSubmodelWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformSubmodel(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformSubmodelWithContext(this,context);}constructor(id,extensions=null,category=null,idShort=null,displayName=null,description=null,administration=null,kind=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,submodelElements=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.id=id;this.administration=administration;this.kind=kind;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.submodelElements=submodelElements;}}/**
 * A submodel element is an element suitable for the description and differentiation of
 * assets.
 *
 * @remarks
 * It is recommended to add a {@link IHasSemantics.semanticId} to a submodel element.
 *
 * Constraint `AASd-129`:
 * If any {@link Qualifier.kind} value of {@link qualifiers} (attribute qualifier
 * inherited via Qualifiable) is equal to {@link QualifierKind.TemplateQualifier}
 * then the submodel element shall be part of a submodel template, i.e.
 * a Submodel with {@link Submodel.kind} (attribute kind inherited via
 * {@link IHasKind}) value is equal to {@link ModellingKind.Template}.
 */ // eslint-disable-next-line @typescript-eslint/no-empty-interface
/**
 * A relationship element is used to define a relationship between two elements
 * being either referable (model reference) or external (global reference).
 */export class RelationshipElement extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 8;// RelationshipElement
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}yield this.first;yield this.second;}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}yield this.first;yield*this.first.descend();yield this.second;yield*this.second.descend();}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitRelationshipElement(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitRelationshipElementWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformRelationshipElement(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformRelationshipElementWithContext(this,context);}constructor(first,second,extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.first=first;this.second=second;}}/**
 * Enumeration of all possible elements of a {@link SubmodelElementList}.
 */export let AasSubmodelElements=/*#__PURE__*/function(AasSubmodelElements){AasSubmodelElements[AasSubmodelElements["AnnotatedRelationshipElement"]=0]="AnnotatedRelationshipElement";AasSubmodelElements[AasSubmodelElements["BasicEventElement"]=1]="BasicEventElement";AasSubmodelElements[AasSubmodelElements["Blob"]=2]="Blob";AasSubmodelElements[AasSubmodelElements["Capability"]=3]="Capability";AasSubmodelElements[AasSubmodelElements["DataElement"]=4]="DataElement";AasSubmodelElements[AasSubmodelElements["Entity"]=5]="Entity";AasSubmodelElements[AasSubmodelElements["EventElement"]=6]="EventElement";AasSubmodelElements[AasSubmodelElements["File"]=7]="File";AasSubmodelElements[AasSubmodelElements["MultiLanguageProperty"]=8]="MultiLanguageProperty";AasSubmodelElements[AasSubmodelElements["Operation"]=9]="Operation";AasSubmodelElements[AasSubmodelElements["Property"]=10]="Property";AasSubmodelElements[AasSubmodelElements["Range"]=11]="Range";AasSubmodelElements[AasSubmodelElements["ReferenceElement"]=12]="ReferenceElement";AasSubmodelElements[AasSubmodelElements["RelationshipElement"]=13]="RelationshipElement";AasSubmodelElements[AasSubmodelElements["SubmodelElement"]=14]="SubmodelElement";AasSubmodelElements[AasSubmodelElements["SubmodelElementList"]=15]="SubmodelElementList";AasSubmodelElements[AasSubmodelElements["SubmodelElementCollection"]=16]="SubmodelElementCollection";return AasSubmodelElements;}({});/**
 * Iterate over the literals of {@link AasSubmodelElements}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overAasSubmodelElements(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// AnnotatedRelationshipElement
yield 1;// BasicEventElement
yield 2;// Blob
yield 3;// Capability
yield 4;// DataElement
yield 5;// Entity
yield 6;// EventElement
yield 7;// File
yield 8;// MultiLanguageProperty
yield 9;// Operation
yield 10;// Property
yield 11;// Range
yield 12;// ReferenceElement
yield 13;// RelationshipElement
yield 14;// SubmodelElement
yield 15;// SubmodelElementList
yield 16;// SubmodelElementCollection
}/**
 * A submodel element list is an ordered list of submodel elements.
 *
 * @remarks
 * The numbering starts with zero (0).
 *
 * Constraint `AASd-107`:
 * If a first level child element in a {@link SubmodelElementList} has
 * a {@link IHasSemantics.semanticId} it
 * shall be identical to {@link SubmodelElementList.semanticIdListElement}.
 *
 * Constraint `AASd-114`:
 * If two first level child elements in a {@link SubmodelElementList} have
 * a {@link IHasSemantics.semanticId} then they shall be identical.
 *
 * Constraint `AASd-115`:
 * If a first level child element in a {@link SubmodelElementList} does not
 * specify a {@link IHasSemantics.semanticId} then the value is assumed to be
 * identical to {@link SubmodelElementList.semanticIdListElement}.
 *
 * Constraint `AASd-120`:
 * The {@link SubmodelElementList.idShort} of a {@link ISubmodelElement} being a direct child of a
 * {@link SubmodelElementList} shall not be specified.
 *
 * Constraint `AASd-108`:
 * All first level child elements in a {@link SubmodelElementList} shall have
 * the same submodel element type as specified in {@link SubmodelElementList.typeValueListElement}.
 *
 * Constraint `AASd-109`:
 * If {@link SubmodelElementList.typeValueListElement} is equal to
 * {@link AasSubmodelElements.Property} or
 * {@link AasSubmodelElements.Range}
 * {@link SubmodelElementList.valueTypeListElement} shall be set and all first
 * level child elements in the {@link SubmodelElementList} shall have
 * the value type as specified in {@link SubmodelElementList.valueTypeListElement}.
 */export class SubmodelElementList extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 9;// SubmodelElementList
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Yield from {@link value} if it is set, or yield nothing.
   */*overValueOrEmpty(){if(this.value!==null){yield*this.value;}return;}/**
   * @returns {@link orderRelevant} if set or the default value otherwise.
   */orderRelevantOrDefault(){return this.orderRelevant!==null?this.orderRelevant:true;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.semanticIdListElement!==null){yield this.semanticIdListElement;}if(this.value!==null){yield*this.value;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}if(this.semanticIdListElement!==null){yield this.semanticIdListElement;yield*this.semanticIdListElement.descend();}if(this.value!==null){for(const yetYetYetYetYetAnotherItem of this.value){yield yetYetYetYetYetAnotherItem;yield*yetYetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitSubmodelElementList(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitSubmodelElementListWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformSubmodelElementList(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformSubmodelElementListWithContext(this,context);}constructor(typeValueListElement,extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,orderRelevant=null,semanticIdListElement=null,valueTypeListElement=null,value=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.typeValueListElement=typeValueListElement;this.orderRelevant=orderRelevant;this.semanticIdListElement=semanticIdListElement;this.valueTypeListElement=valueTypeListElement;this.value=value;}}/**
 * A submodel element collection is a kind of struct, i.e. a a logical encapsulation
 * of multiple named values. It has a fixed number of submodel elements.
 */export class SubmodelElementCollection extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 10;// SubmodelElementCollection
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Yield from {@link value} if it is set, or yield nothing.
   */*overValueOrEmpty(){if(this.value!==null){yield*this.value;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.value!==null){yield*this.value;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}if(this.value!==null){for(const yetYetYetYetYetAnotherItem of this.value){yield yetYetYetYetYetAnotherItem;yield*yetYetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitSubmodelElementCollection(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitSubmodelElementCollectionWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformSubmodelElementCollection(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformSubmodelElementCollectionWithContext(this,context);}constructor(extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,value=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.value=value;}}/**
 * A data element is a submodel element that is not further composed out of
 * other submodel elements.
 *
 * @remarks
 * A data element is a submodel element that has a value. The type of value differs
 * for different subtypes of data elements.
 *
 * Constraint `AASd-090`:
 * For data elements {@link category} shall be one of the following
 * values: `CONSTANT`, `PARAMETER` or `VARIABLE`.
 *
 * Default: `VARIABLE`
 */ /**
 * A property is a data element that has a single value.
 *
 * Constraint `AASd-007`:
 * If both, the {@link Property.value} and the {@link Property.valueId} are
 * present then the value of {@link Property.value} needs to be identical to
 * the value of the referenced coded value in {@link Property.valueId}.
 */export class Property extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 11;// Property
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * @returns {@link category} if set or the default value otherwise.
   */categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.valueId!==null){yield this.valueId;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}if(this.valueId!==null){yield this.valueId;yield*this.valueId.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitProperty(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitPropertyWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformProperty(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformPropertyWithContext(this,context);}constructor(valueType,extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,value=null,valueId=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.valueType=valueType;this.value=value;this.valueId=valueId;}}/**
 * A property is a data element that has a multi-language value.
 *
 * Constraint `AASd-012`:
 * If both the {@link MultiLanguageProperty.value} and the {@link MultiLanguageProperty.valueId} are present then for each
 * string in a specific language the meaning must be the same as specified in
 * {@link MultiLanguageProperty.valueId}.
 */export class MultiLanguageProperty extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 12;// MultiLanguageProperty
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Yield from {@link value} if it is set, or yield nothing.
   */*overValueOrEmpty(){if(this.value!==null){yield*this.value;}return;}/**
   * @returns {@link category} if set or the default value otherwise.
   */categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.value!==null){yield*this.value;}if(this.valueId!==null){yield this.valueId;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}if(this.value!==null){for(const yetYetYetYetYetAnotherItem of this.value){yield yetYetYetYetYetAnotherItem;yield*yetYetYetYetYetAnotherItem.descend();}}if(this.valueId!==null){yield this.valueId;yield*this.valueId.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitMultiLanguageProperty(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitMultiLanguagePropertyWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformMultiLanguageProperty(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformMultiLanguagePropertyWithContext(this,context);}constructor(extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,value=null,valueId=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.value=value;this.valueId=valueId;}}/**
 * A range data element is a data element that defines a range with min and max.
 */export class Range extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 13;// Range
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * @returns {@link category} if set or the default value otherwise.
   */categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitRange(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitRangeWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformRange(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformRangeWithContext(this,context);}constructor(valueType,extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,min=null,max=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.valueType=valueType;this.min=min;this.max=max;}}/**
 * A reference element is a data element that defines a logical reference to another
 * element within the same or another AAS or a reference to an external object or
 * entity.
 */export class ReferenceElement extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 14;// ReferenceElement
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * @returns {@link category} if set or the default value otherwise.
   */categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.value!==null){yield this.value;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}if(this.value!==null){yield this.value;yield*this.value.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitReferenceElement(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitReferenceElementWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformReferenceElement(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformReferenceElementWithContext(this,context);}constructor(extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,value=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.value=value;}}/**
 * A {@link Blob} is a data element that represents a file that is contained with its
 * source code in the value attribute.
 */export class Blob extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 15;// Blob
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * @returns {@link category} if set or the default value otherwise.
   */categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitBlob(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitBlobWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformBlob(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformBlobWithContext(this,context);}constructor(contentType,extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,value=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.contentType=contentType;this.value=value;}}/**
 * A File is a data element that represents an address to a file (a locator).
 *
 * @remarks
 * The value is an URI that can represent an absolute or relative path.
 */export class File extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 16;// File
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * @returns {@link category} if set or the default value otherwise.
   */categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitFile(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitFileWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformFile(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformFileWithContext(this,context);}constructor(contentType,extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,value=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.contentType=contentType;this.value=value;}}/**
 * An annotated relationship element is a relationship element that can be annotated
 * with additional data elements.
 */export class AnnotatedRelationshipElement extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 17;// AnnotatedRelationshipElement
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Yield from {@link annotations} if it is set, or yield nothing.
   */*overAnnotationsOrEmpty(){if(this.annotations!==null){yield*this.annotations;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}yield this.first;yield this.second;if(this.annotations!==null){yield*this.annotations;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}yield this.first;yield*this.first.descend();yield this.second;yield*this.second.descend();if(this.annotations!==null){for(const yetYetYetYetYetAnotherItem of this.annotations){yield yetYetYetYetYetAnotherItem;yield*yetYetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitAnnotatedRelationshipElement(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitAnnotatedRelationshipElementWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformAnnotatedRelationshipElement(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformAnnotatedRelationshipElementWithContext(this,context);}constructor(first,second,extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,annotations=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.first=first;this.second=second;this.annotations=annotations;}}/**
 * An entity is a submodel element that is used to model entities.
 *
 * Constraint `AASd-014`:
 * Either the attribute {@link Entity.globalAssetId} or {@link Entity.specificAssetIds}
 * of an {@link Entity} must be set if {@link Entity.entityType} is set to
 * {@link EntityType.SelfManagedEntity}. They are not existing otherwise.
 */export class Entity extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 18;// Entity
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Yield from {@link statements} if it is set, or yield nothing.
   */*overStatementsOrEmpty(){if(this.statements!==null){yield*this.statements;}return;}/**
   * Yield from {@link specificAssetIds} if it is set, or yield nothing.
   */*overSpecificAssetIdsOrEmpty(){if(this.specificAssetIds!==null){yield*this.specificAssetIds;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.statements!==null){yield*this.statements;}if(this.specificAssetIds!==null){yield*this.specificAssetIds;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}if(this.statements!==null){for(const yetYetYetYetYetAnotherItem of this.statements){yield yetYetYetYetYetAnotherItem;yield*yetYetYetYetYetAnotherItem.descend();}}if(this.specificAssetIds!==null){for(const yetYetYetYetYetYetAnotherItem of this.specificAssetIds){yield yetYetYetYetYetYetAnotherItem;yield*yetYetYetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitEntity(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitEntityWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformEntity(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformEntityWithContext(this,context);}constructor(entityType,extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,statements=null,globalAssetId=null,specificAssetIds=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.statements=statements;this.entityType=entityType;this.globalAssetId=globalAssetId;this.specificAssetIds=specificAssetIds;}}/**
 * Enumeration for denoting whether an entity is a self-managed entity or a co-managed
 * entity.
 */export let EntityType=/*#__PURE__*/function(EntityType){EntityType[EntityType["CoManagedEntity"]=0]="CoManagedEntity";EntityType[EntityType["SelfManagedEntity"]=1]="SelfManagedEntity";return EntityType;}({});/**
 * Iterate over the literals of {@link EntityType}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overEntityType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// CoManagedEntity
yield 1;// SelfManagedEntity
}/**
 * Direction
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */export let Direction=/*#__PURE__*/function(Direction){Direction[Direction["Input"]=0]="Input";Direction[Direction["Output"]=1]="Output";return Direction;}({});/**
 * Iterate over the literals of {@link Direction}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overDirection(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// Input
yield 1;// Output
}/**
 * State of an event
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */export let StateOfEvent=/*#__PURE__*/function(StateOfEvent){StateOfEvent[StateOfEvent["On"]=0]="On";StateOfEvent[StateOfEvent["Off"]=1]="Off";return StateOfEvent;}({});/**
 * Iterate over the literals of {@link StateOfEvent}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overStateOfEvent(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// On
yield 1;// Off
}/**
 * Defines the necessary information of an event instance sent out or received.
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */export class EventPayload extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 19;// EventPayload
}/**
   * Reference to the source event element, including identification of
   * {@link AssetAdministrationShell}, {@link Submodel},
   * {@link ISubmodelElement}'s.
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){yield this.source;if(this.sourceSemanticId!==null){yield this.sourceSemanticId;}yield this.observableReference;if(this.observableSemanticId!==null){yield this.observableSemanticId;}if(this.subjectId!==null){yield this.subjectId;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){yield this.source;yield*this.source.descend();if(this.sourceSemanticId!==null){yield this.sourceSemanticId;yield*this.sourceSemanticId.descend();}yield this.observableReference;yield*this.observableReference.descend();if(this.observableSemanticId!==null){yield this.observableSemanticId;yield*this.observableSemanticId.descend();}if(this.subjectId!==null){yield this.subjectId;yield*this.subjectId.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitEventPayload(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitEventPayloadWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformEventPayload(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformEventPayloadWithContext(this,context);}constructor(source,observableReference,timeStamp,sourceSemanticId=null,observableSemanticId=null,topic=null,subjectId=null,payload=null){super();this.source=source;this.observableReference=observableReference;this.timeStamp=timeStamp;this.sourceSemanticId=sourceSemanticId;this.observableSemanticId=observableSemanticId;this.topic=topic;this.subjectId=subjectId;this.payload=payload;}}/**
 * An event element.
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */ // eslint-disable-next-line @typescript-eslint/no-empty-interface
/**
 * A basic event element.
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */export class BasicEventElement extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 20;// BasicEventElement
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}yield this.observed;if(this.messageBroker!==null){yield this.messageBroker;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}yield this.observed;yield*this.observed.descend();if(this.messageBroker!==null){yield this.messageBroker;yield*this.messageBroker.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitBasicEventElement(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitBasicEventElementWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformBasicEventElement(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformBasicEventElementWithContext(this,context);}constructor(observed,direction,state,extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,messageTopic=null,messageBroker=null,lastUpdate=null,minInterval=null,maxInterval=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.observed=observed;this.direction=direction;this.state=state;this.messageTopic=messageTopic;this.messageBroker=messageBroker;this.lastUpdate=lastUpdate;this.minInterval=minInterval;this.maxInterval=maxInterval;}}/**
 * An operation is a submodel element with input and output variables.
 *
 * Constraint `AASd-134`:
 * For an {@link Operation} the {@link IReferable.idShort} of all
 * {@link OperationVariable.value}'s in
 * {@link Operation.inputVariables}, {@link Operation.outputVariables}
 * and {@link Operation.inoutputVariables} shall be unique.
 */export class Operation extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 21;// Operation
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Yield from {@link inputVariables} if it is set, or yield nothing.
   */*overInputVariablesOrEmpty(){if(this.inputVariables!==null){yield*this.inputVariables;}return;}/**
   * Yield from {@link outputVariables} if it is set, or yield nothing.
   */*overOutputVariablesOrEmpty(){if(this.outputVariables!==null){yield*this.outputVariables;}return;}/**
   * Yield from {@link inoutputVariables} if it is set, or yield nothing.
   */*overInoutputVariablesOrEmpty(){if(this.inoutputVariables!==null){yield*this.inoutputVariables;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.inputVariables!==null){yield*this.inputVariables;}if(this.outputVariables!==null){yield*this.outputVariables;}if(this.inoutputVariables!==null){yield*this.inoutputVariables;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}if(this.inputVariables!==null){for(const yetYetYetYetYetAnotherItem of this.inputVariables){yield yetYetYetYetYetAnotherItem;yield*yetYetYetYetYetAnotherItem.descend();}}if(this.outputVariables!==null){for(const yetYetYetYetYetYetAnotherItem of this.outputVariables){yield yetYetYetYetYetYetAnotherItem;yield*yetYetYetYetYetYetAnotherItem.descend();}}if(this.inoutputVariables!==null){for(const yetYetYetYetYetYetYetAnotherItem of this.inoutputVariables){yield yetYetYetYetYetYetYetAnotherItem;yield*yetYetYetYetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitOperation(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitOperationWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformOperation(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformOperationWithContext(this,context);}constructor(extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null,inputVariables=null,outputVariables=null,inoutputVariables=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;this.inputVariables=inputVariables;this.outputVariables=outputVariables;this.inoutputVariables=inoutputVariables;}}/**
 * The value of an operation variable is a submodel element that is used as input
 * and/or output variable of an operation.
 */export class OperationVariable extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 22;// OperationVariable
}/**
   * Describes an argument or result of an operation via a submodel element
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){yield this.value;}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){yield this.value;yield*this.value.descend();}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitOperationVariable(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitOperationVariableWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformOperationVariable(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformOperationVariableWithContext(this,context);}constructor(value){super();this.value=value;}}/**
 * A capability is the implementation-independent description of the potential of an
 * asset to achieve a certain effect in the physical or virtual world.
 *
 * @remarks
 * **Note**:
 * The {@link Capability.semanticId} of a capability is typically an ontology.
 * Thus, reasoning on capabilities is enabled.
 */export class Capability extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 23;// Capability
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */*overSupplementalSemanticIdsOrEmpty(){if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}return;}/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */*overQualifiersOrEmpty(){if(this.qualifiers!==null){yield*this.qualifiers;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.semanticId!==null){yield this.semanticId;}if(this.supplementalSemanticIds!==null){yield*this.supplementalSemanticIds;}if(this.qualifiers!==null){yield*this.qualifiers;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.semanticId!==null){yield this.semanticId;yield*this.semanticId.descend();}if(this.supplementalSemanticIds!==null){for(const yetYetAnotherItem of this.supplementalSemanticIds){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.qualifiers!==null){for(const yetYetYetAnotherItem of this.qualifiers){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}if(this.embeddedDataSpecifications!==null){for(const yetYetYetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetYetYetAnotherItem;yield*yetYetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitCapability(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitCapabilityWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformCapability(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformCapabilityWithContext(this,context);}constructor(extensions=null,category=null,idShort=null,displayName=null,description=null,semanticId=null,supplementalSemanticIds=null,qualifiers=null,embeddedDataSpecifications=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.semanticId=semanticId;this.supplementalSemanticIds=supplementalSemanticIds;this.qualifiers=qualifiers;this.embeddedDataSpecifications=embeddedDataSpecifications;}}/**
 * The semantics of a property or other elements that may have a semantic description
 * is defined by a concept description.
 *
 * @remarks
 * The description of the concept should follow a standardized schema (realized as
 * data specification template).
 *
 * Constraint `AASc-3a-004`:
 * For a {@link ConceptDescription} with {@link ConceptDescription.category} `PROPERTY` or
 * `VALUE` using data specification IEC61360,
 * the {@link DataSpecificationIec61360.dataType} is mandatory and shall be
 * one of: `DATE`, `STRING`, `STRING_TRANSLATABLE`, `INTEGER_MEASURE`,
 * `INTEGER_COUNT`, `INTEGER_CURRENCY`, `REAL_MEASURE`, `REAL_COUNT`,
 * `REAL_CURRENCY`, `BOOLEAN`, `RATIONAL`, `RATIONAL_MEASURE`,
 * `TIME`, `TIMESTAMP`.
 *
 * **Note**:
 * Note: categories are deprecated since V3.0 of Part 1a of the document series
 * "Details of the Asset Administration Shell".
 *
 * Constraint `AASc-3a-005`:
 * For a {@link ConceptDescription} with {@link ConceptDescription.category} `REFERENCE`
 * using data specification template IEC61360,
 * the {@link DataSpecificationIec61360.dataType} shall be
 * one of: `STRING`, `IRI`, `IRDI`.
 *
 * **Note**:
 * Note: categories are deprecated since V3.0 of Part 1a of the document series
 * "Details of the Asset Administration Shell".
 *
 * Constraint `AASc-3a-006`:
 * For a {@link ConceptDescription} with {@link ConceptDescription.category} `DOCUMENT`
 * using data specification IEC61360,
 * the {@link DataSpecificationIec61360.dataType} shall be one of `FILE`,
 * `BLOB`, `HTML`
 *
 * **Note**:
 * Categories are deprecated since V3.0 of Part 1a of the document series
 * "Details of the Asset Administration Shell".
 *
 * Constraint `AASc-3a-007`:
 * For a {@link ConceptDescription} with {@link ConceptDescription.category} `QUALIFIER_TYPE`
 * using data specification IEC61360,
 * the {@link DataSpecificationIec61360.dataType} is mandatory and shall be
 * defined.
 *
 * **Note**:
 * Categories are deprecated since V3.0 of Part 1a of the document series
 * "Details of the Asset Administration Shell".
 *
 * Constraint `AASc-3a-008`:
 * For a {@link ConceptDescription} using data specification template IEC61360,
 * {@link DataSpecificationIec61360.definition} is mandatory and shall be
 * defined at least in English.
 *
 * Exception: The concept description describes a value, i.e.
 * {@link DataSpecificationIec61360.value} is defined.
 *
 * Constraint `AASc-3a-003`:
 * For a {@link ConceptDescription} using data specification template IEC61360,
 * referenced via {@link DataSpecificationIec61360.valueList}
 * {@link ValueReferencePair.valueId}
 * the {@link DataSpecificationIec61360.value} shall be set.
 */export class ConceptDescription extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 24;// ConceptDescription
}/**
   * An extension of the element.
   */ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */*overExtensionsOrEmpty(){if(this.extensions!==null){yield*this.extensions;}return;}/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */*overDisplayNameOrEmpty(){if(this.displayName!==null){yield*this.displayName;}return;}/**
   * Yield from {@link description} if it is set, or yield nothing.
   */*overDescriptionOrEmpty(){if(this.description!==null){yield*this.description;}return;}/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */*overEmbeddedDataSpecificationsOrEmpty(){if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}return;}/**
   * Yield from {@link isCaseOf} if it is set, or yield nothing.
   */*overIsCaseOfOrEmpty(){if(this.isCaseOf!==null){yield*this.isCaseOf;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.extensions!==null){yield*this.extensions;}if(this.displayName!==null){yield*this.displayName;}if(this.description!==null){yield*this.description;}if(this.administration!==null){yield this.administration;}if(this.embeddedDataSpecifications!==null){yield*this.embeddedDataSpecifications;}if(this.isCaseOf!==null){yield*this.isCaseOf;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.extensions!==null){for(const anItem of this.extensions){yield anItem;yield*anItem.descend();}}if(this.displayName!==null){for(const anotherItem of this.displayName){yield anotherItem;yield*anotherItem.descend();}}if(this.description!==null){for(const yetAnotherItem of this.description){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.administration!==null){yield this.administration;yield*this.administration.descend();}if(this.embeddedDataSpecifications!==null){for(const yetYetAnotherItem of this.embeddedDataSpecifications){yield yetYetAnotherItem;yield*yetYetAnotherItem.descend();}}if(this.isCaseOf!==null){for(const yetYetYetAnotherItem of this.isCaseOf){yield yetYetYetAnotherItem;yield*yetYetYetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitConceptDescription(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitConceptDescriptionWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformConceptDescription(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformConceptDescriptionWithContext(this,context);}constructor(id,extensions=null,category=null,idShort=null,displayName=null,description=null,administration=null,embeddedDataSpecifications=null,isCaseOf=null){super();this.extensions=extensions;this.idShort=idShort;this.displayName=displayName;this.category=category;this.description=description;this.id=id;this.administration=administration;this.embeddedDataSpecifications=embeddedDataSpecifications;this.isCaseOf=isCaseOf;}}/**
 * Reference types
 */export let ReferenceTypes=/*#__PURE__*/function(ReferenceTypes){ReferenceTypes[ReferenceTypes["ExternalReference"]=0]="ExternalReference";ReferenceTypes[ReferenceTypes["ModelReference"]=1]="ModelReference";return ReferenceTypes;}({});/**
 * Iterate over the literals of {@link ReferenceTypes}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overReferenceTypes(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// ExternalReference
yield 1;// ModelReference
}/**
 * Reference to either a model element of the same or another AAS or to an external
 * entity.
 *
 * @remarks
 * A reference is an ordered list of keys.
 *
 * A model reference is an ordered list of keys, each key referencing an element. The
 * complete list of keys may for example be concatenated to a path that then gives
 * unique access to an element.
 *
 * An external reference is a reference to an external entity.
 *
 * Constraint `AASd-121`:
 * For {@link Reference}'s the value of {@link Key.type} of the first key of "
 * {@link Reference.keys} shall be one of {@link constants!GLOBALLY_IDENTIFIABLES}.
 *
 * Constraint `AASd-122`:
 * For external references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ExternalReference}, the value
 * of {@link Key.type} of the first key of {@link Reference.keys} shall be one of
 * {@link constants!GENERIC_GLOBALLY_IDENTIFIABLES}.
 *
 * Constraint `AASd-123`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, the value
 * of {@link Key.type} of the first key of {@link Reference.keys} shall be one of
 * {@link constants!AAS_IDENTIFIABLES}.
 *
 * Constraint `AASd-124`:
 * For external references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ExternalReference}, the last
 * key of {@link Reference.keys} shall be either one of
 * {@link constants!GENERIC_GLOBALLY_IDENTIFIABLES} or one of
 * {@link constants!GENERIC_FRAGMENT_KEYS}.
 *
 * Constraint `AASd-125`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, with more
 * than one key in {@link Reference.keys} the value of {@link Key.type}
 * of each of the keys following the first
 * key of {@link Reference.keys} shall be one of {@link constants!FRAGMENT_KEYS}.
 *
 * **Note**:
 * Constraint AASd-125 ensures that the shortest path is used.
 *
 * Constraint `AASd-126`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, with more
 * than one key in {@link Reference.keys} the value of {@link Key.type}
 * of the last key in the reference key chain may be
 * one of {@link constants!GENERIC_FRAGMENT_KEYS} or no key at all
 * shall have a value out of {@link constants!GENERIC_FRAGMENT_KEYS}.
 *
 * Constraint `AASd-127`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, with more
 * than one key in {@link Reference.keys} a key with {@link Key.type}
 * {@link KeyTypes.FragmentReference} shall be preceded by a key with
 * {@link Key.type} {@link KeyTypes.File} or {@link KeyTypes.Blob}. All other
 * AAS fragments, i.e. {@link Key.type} values
 * out of {@link constants!AAS_SUBMODEL_ELEMENTS_AS_KEYS}, do not support fragments.
 *
 * **Note**:
 * Which kind of fragments are supported depends on the content type and the
 * specification of allowed fragment identifiers for the corresponding resource
 * being referenced via the reference.
 *
 * Constraint `AASd-128`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, the
 * {@link Key.value} of a {@link Key} preceded by a {@link Key} with
 * {@link Key.type} = {@link KeyTypes.SubmodelElementList} is an integer
 * number denoting the position in the array of the submodel element list.
 */export class Reference extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 25;// Reference
}/**
   * Type of the reference.
   *
   * @remarks
   * Denotes, whether reference is an external reference or a model reference.
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.referredSemanticId!==null){yield this.referredSemanticId;}yield*this.keys;}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.referredSemanticId!==null){yield this.referredSemanticId;yield*this.referredSemanticId.descend();}for(const anItem of this.keys){yield anItem;yield*anItem.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitReference(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitReferenceWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformReference(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformReferenceWithContext(this,context);}constructor(type,keys,referredSemanticId=null){super();this.type=type;this.keys=keys;this.referredSemanticId=referredSemanticId;}}/**
 * A key is a reference to an element by its ID.
 */export class Key extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 26;// Key
}/**
   * Denotes which kind of entity is referenced.
   *
   * @remarks
   * In case {@link type} = {@link KeyTypes.GlobalReference},
   * the key represents a reference to a source that can be globally identified.
   *
   * In case {@link type} = {@link KeyTypes.FragmentReference} the key represents
   * a bookmark or a similar local identifier within its parent element as specified
   * by the key that precedes this key.
   *
   * In all other cases the key references a model element of the same or of another AAS.
   * The name of the model element is explicitly listed.
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){// No descendable properties
}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){// No descendable properties
}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitKey(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitKeyWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformKey(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformKeyWithContext(this,context);}constructor(type,value){super();this.type=type;this.value=value;}}/**
 * Enumeration of different key value types within a key.
 */export let KeyTypes=/*#__PURE__*/function(KeyTypes){KeyTypes[KeyTypes["AnnotatedRelationshipElement"]=0]="AnnotatedRelationshipElement";KeyTypes[KeyTypes["AssetAdministrationShell"]=1]="AssetAdministrationShell";KeyTypes[KeyTypes["BasicEventElement"]=2]="BasicEventElement";KeyTypes[KeyTypes["Blob"]=3]="Blob";KeyTypes[KeyTypes["Capability"]=4]="Capability";KeyTypes[KeyTypes["ConceptDescription"]=5]="ConceptDescription";KeyTypes[KeyTypes["DataElement"]=6]="DataElement";KeyTypes[KeyTypes["Entity"]=7]="Entity";KeyTypes[KeyTypes["EventElement"]=8]="EventElement";KeyTypes[KeyTypes["File"]=9]="File";KeyTypes[KeyTypes["FragmentReference"]=10]="FragmentReference";KeyTypes[KeyTypes["GlobalReference"]=11]="GlobalReference";KeyTypes[KeyTypes["Identifiable"]=12]="Identifiable";KeyTypes[KeyTypes["MultiLanguageProperty"]=13]="MultiLanguageProperty";KeyTypes[KeyTypes["Operation"]=14]="Operation";KeyTypes[KeyTypes["Property"]=15]="Property";KeyTypes[KeyTypes["Range"]=16]="Range";KeyTypes[KeyTypes["Referable"]=17]="Referable";KeyTypes[KeyTypes["ReferenceElement"]=18]="ReferenceElement";KeyTypes[KeyTypes["RelationshipElement"]=19]="RelationshipElement";KeyTypes[KeyTypes["Submodel"]=20]="Submodel";KeyTypes[KeyTypes["SubmodelElement"]=21]="SubmodelElement";KeyTypes[KeyTypes["SubmodelElementCollection"]=22]="SubmodelElementCollection";KeyTypes[KeyTypes["SubmodelElementList"]=23]="SubmodelElementList";return KeyTypes;}({});/**
 * Iterate over the literals of {@link KeyTypes}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overKeyTypes(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// AnnotatedRelationshipElement
yield 1;// AssetAdministrationShell
yield 2;// BasicEventElement
yield 3;// Blob
yield 4;// Capability
yield 5;// ConceptDescription
yield 6;// DataElement
yield 7;// Entity
yield 8;// EventElement
yield 9;// File
yield 10;// FragmentReference
yield 11;// GlobalReference
yield 12;// Identifiable
yield 13;// MultiLanguageProperty
yield 14;// Operation
yield 15;// Property
yield 16;// Range
yield 17;// Referable
yield 18;// ReferenceElement
yield 19;// RelationshipElement
yield 20;// Submodel
yield 21;// SubmodelElement
yield 22;// SubmodelElementCollection
yield 23;// SubmodelElementList
}/**
 * Enumeration listing all XSD anySimpleTypes
 */export let DataTypeDefXsd=/*#__PURE__*/function(DataTypeDefXsd){DataTypeDefXsd[DataTypeDefXsd["AnyUri"]=0]="AnyUri";DataTypeDefXsd[DataTypeDefXsd["Base64Binary"]=1]="Base64Binary";DataTypeDefXsd[DataTypeDefXsd["Boolean"]=2]="Boolean";DataTypeDefXsd[DataTypeDefXsd["Byte"]=3]="Byte";DataTypeDefXsd[DataTypeDefXsd["Date"]=4]="Date";DataTypeDefXsd[DataTypeDefXsd["DateTime"]=5]="DateTime";DataTypeDefXsd[DataTypeDefXsd["Decimal"]=6]="Decimal";DataTypeDefXsd[DataTypeDefXsd["Double"]=7]="Double";DataTypeDefXsd[DataTypeDefXsd["Duration"]=8]="Duration";DataTypeDefXsd[DataTypeDefXsd["Float"]=9]="Float";DataTypeDefXsd[DataTypeDefXsd["GDay"]=10]="GDay";DataTypeDefXsd[DataTypeDefXsd["GMonth"]=11]="GMonth";DataTypeDefXsd[DataTypeDefXsd["GMonthDay"]=12]="GMonthDay";DataTypeDefXsd[DataTypeDefXsd["GYear"]=13]="GYear";DataTypeDefXsd[DataTypeDefXsd["GYearMonth"]=14]="GYearMonth";DataTypeDefXsd[DataTypeDefXsd["HexBinary"]=15]="HexBinary";DataTypeDefXsd[DataTypeDefXsd["Int"]=16]="Int";DataTypeDefXsd[DataTypeDefXsd["Integer"]=17]="Integer";DataTypeDefXsd[DataTypeDefXsd["Long"]=18]="Long";DataTypeDefXsd[DataTypeDefXsd["NegativeInteger"]=19]="NegativeInteger";DataTypeDefXsd[DataTypeDefXsd["NonNegativeInteger"]=20]="NonNegativeInteger";DataTypeDefXsd[DataTypeDefXsd["NonPositiveInteger"]=21]="NonPositiveInteger";DataTypeDefXsd[DataTypeDefXsd["PositiveInteger"]=22]="PositiveInteger";DataTypeDefXsd[DataTypeDefXsd["Short"]=23]="Short";DataTypeDefXsd[DataTypeDefXsd["String"]=24]="String";DataTypeDefXsd[DataTypeDefXsd["Time"]=25]="Time";DataTypeDefXsd[DataTypeDefXsd["UnsignedByte"]=26]="UnsignedByte";DataTypeDefXsd[DataTypeDefXsd["UnsignedInt"]=27]="UnsignedInt";DataTypeDefXsd[DataTypeDefXsd["UnsignedLong"]=28]="UnsignedLong";DataTypeDefXsd[DataTypeDefXsd["UnsignedShort"]=29]="UnsignedShort";return DataTypeDefXsd;}({});/**
 * Iterate over the literals of {@link DataTypeDefXsd}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overDataTypeDefXsd(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// AnyUri
yield 1;// Base64Binary
yield 2;// Boolean
yield 3;// Byte
yield 4;// Date
yield 5;// DateTime
yield 6;// Decimal
yield 7;// Double
yield 8;// Duration
yield 9;// Float
yield 10;// GDay
yield 11;// GMonth
yield 12;// GMonthDay
yield 13;// GYear
yield 14;// GYearMonth
yield 15;// HexBinary
yield 16;// Int
yield 17;// Integer
yield 18;// Long
yield 19;// NegativeInteger
yield 20;// NonNegativeInteger
yield 21;// NonPositiveInteger
yield 22;// PositiveInteger
yield 23;// Short
yield 24;// String
yield 25;// Time
yield 26;// UnsignedByte
yield 27;// UnsignedInt
yield 28;// UnsignedLong
yield 29;// UnsignedShort
}/**
 * Strings with language tags
 */ /**
 * String with length 128 maximum and minimum 1 characters and with language tags
 */export class LangStringNameType extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 27;// LangStringNameType
}/**
   * Language tag conforming to BCP 47
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){// No descendable properties
}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){// No descendable properties
}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitLangStringNameType(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitLangStringNameTypeWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformLangStringNameType(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformLangStringNameTypeWithContext(this,context);}constructor(language,text){super();this.language=language;this.text=text;}}/**
 * String with length 1023 maximum and minimum 1 characters and with language tags
 */export class LangStringTextType extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 28;// LangStringTextType
}/**
   * Language tag conforming to BCP 47
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){// No descendable properties
}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){// No descendable properties
}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitLangStringTextType(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitLangStringTextTypeWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformLangStringTextType(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformLangStringTextTypeWithContext(this,context);}constructor(language,text){super();this.language=language;this.text=text;}}/**
 * Container for the sets of different identifiables.
 *
 * @remarks
 * **Note**:
 * w.r.t. file exchange: There is exactly one environment independent on how many
 * files the contained elements are split. If the file is split then there
 * shall be no element with the same identifier in two different files.
 */export class Environment extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 29;// Environment
}/**
   * Asset administration shell
   */ /**
   * Yield from {@link assetAdministrationShells} if it is set, or yield nothing.
   */*overAssetAdministrationShellsOrEmpty(){if(this.assetAdministrationShells!==null){yield*this.assetAdministrationShells;}return;}/**
   * Yield from {@link submodels} if it is set, or yield nothing.
   */*overSubmodelsOrEmpty(){if(this.submodels!==null){yield*this.submodels;}return;}/**
   * Yield from {@link conceptDescriptions} if it is set, or yield nothing.
   */*overConceptDescriptionsOrEmpty(){if(this.conceptDescriptions!==null){yield*this.conceptDescriptions;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){if(this.assetAdministrationShells!==null){yield*this.assetAdministrationShells;}if(this.submodels!==null){yield*this.submodels;}if(this.conceptDescriptions!==null){yield*this.conceptDescriptions;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){if(this.assetAdministrationShells!==null){for(const anItem of this.assetAdministrationShells){yield anItem;yield*anItem.descend();}}if(this.submodels!==null){for(const anotherItem of this.submodels){yield anotherItem;yield*anotherItem.descend();}}if(this.conceptDescriptions!==null){for(const yetAnotherItem of this.conceptDescriptions){yield yetAnotherItem;yield*yetAnotherItem.descend();}}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitEnvironment(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitEnvironmentWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformEnvironment(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformEnvironmentWithContext(this,context);}constructor(assetAdministrationShells=null,submodels=null,conceptDescriptions=null){super();this.assetAdministrationShells=assetAdministrationShells;this.submodels=submodels;this.conceptDescriptions=conceptDescriptions;}}/**
 * Data specification content is part of a data specification template and defines
 * which additional attributes shall be added to the element instance that references
 * the data specification template and meta information about the template itself.
 *
 * Constraint `AASc-3a-050`:
 * If the {@link DataSpecificationIec61360} is used
 * for an element, the value of
 * {@link IHasDataSpecification.embeddedDataSpecifications}
 * shall contain the global reference to the IRI of the corresponding
 * data specification template
 * https://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/3/0
 */ // eslint-disable-next-line @typescript-eslint/no-empty-interface
/**
 * Embed the content of a data specification.
 */export class EmbeddedDataSpecification extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 30;// EmbeddedDataSpecification
}/**
   * Reference to the data specification
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){yield this.dataSpecification;yield this.dataSpecificationContent;}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){yield this.dataSpecification;yield*this.dataSpecification.descend();yield this.dataSpecificationContent;yield*this.dataSpecificationContent.descend();}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitEmbeddedDataSpecification(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitEmbeddedDataSpecificationWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformEmbeddedDataSpecification(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformEmbeddedDataSpecificationWithContext(this,context);}constructor(dataSpecification,dataSpecificationContent){super();this.dataSpecification=dataSpecification;this.dataSpecificationContent=dataSpecificationContent;}}export let DataTypeIec61360=/*#__PURE__*/function(DataTypeIec61360){DataTypeIec61360[DataTypeIec61360["Date"]=0]="Date";DataTypeIec61360[DataTypeIec61360["String"]=1]="String";DataTypeIec61360[DataTypeIec61360["StringTranslatable"]=2]="StringTranslatable";DataTypeIec61360[DataTypeIec61360["IntegerMeasure"]=3]="IntegerMeasure";DataTypeIec61360[DataTypeIec61360["IntegerCount"]=4]="IntegerCount";DataTypeIec61360[DataTypeIec61360["IntegerCurrency"]=5]="IntegerCurrency";DataTypeIec61360[DataTypeIec61360["RealMeasure"]=6]="RealMeasure";DataTypeIec61360[DataTypeIec61360["RealCount"]=7]="RealCount";DataTypeIec61360[DataTypeIec61360["RealCurrency"]=8]="RealCurrency";DataTypeIec61360[DataTypeIec61360["Boolean"]=9]="Boolean";DataTypeIec61360[DataTypeIec61360["Iri"]=10]="Iri";DataTypeIec61360[DataTypeIec61360["Irdi"]=11]="Irdi";DataTypeIec61360[DataTypeIec61360["Rational"]=12]="Rational";DataTypeIec61360[DataTypeIec61360["RationalMeasure"]=13]="RationalMeasure";DataTypeIec61360[DataTypeIec61360["Time"]=14]="Time";DataTypeIec61360[DataTypeIec61360["Timestamp"]=15]="Timestamp";DataTypeIec61360[DataTypeIec61360["File"]=16]="File";DataTypeIec61360[DataTypeIec61360["Html"]=17]="Html";DataTypeIec61360[DataTypeIec61360["Blob"]=18]="Blob";return DataTypeIec61360;}({});/**
 * Iterate over the literals of {@link DataTypeIec61360}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */export function*overDataTypeIec61360(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
yield 0;// Date
yield 1;// String
yield 2;// StringTranslatable
yield 3;// IntegerMeasure
yield 4;// IntegerCount
yield 5;// IntegerCurrency
yield 6;// RealMeasure
yield 7;// RealCount
yield 8;// RealCurrency
yield 9;// Boolean
yield 10;// Iri
yield 11;// Irdi
yield 12;// Rational
yield 13;// RationalMeasure
yield 14;// Time
yield 15;// Timestamp
yield 16;// File
yield 17;// Html
yield 18;// Blob
}/**
 * Value represented by up to four variants of a numeric value in a specific role:
 * `MIN`, `NOM`, `TYP` and `MAX`. True means that the value is available,
 * false means the value is not available.
 *
 * @remarks
 * EXAMPLE from [IEC61360-1]: In the case of having a property which is
 * of the LEVEL_TYPE min/max − expressing a range − only those two values
 * need to be provided.
 *
 * **Note**:
 * This is how AAS deals with the following combinations of level types:
 *
 * * Either all attributes are false. In this case the concept is mapped
 *   to a {@link Property} and level type is ignored.
 * * At most one of the attributes is set to true. In this case
 *   the concept is mapped to a {@link Property}.
 * * Min and max are set to true. In this case the concept is mapped
 *   to a {@link Range}.
 * * More than one attribute is set to true but not min and max only
 *   (see second case). In this case the concept is mapped
 *   to a {@link SubmodelElementCollection} with the corresponding
 *   number of Properties.
 *   Example: If attribute {@link LevelType.min} and {@link LevelType.nom} are set to true
 *   then the concept is mapped to a {@link SubmodelElementCollection}
 *   with two Properties within: min and nom.
 *   The data type of both Properties is the same.
 *
 * **Note**:
 * In the cases 2. and 4. the {@link Property.semanticId} of the Property
 * or Properties within the {@link SubmodelElementCollection} needs to include
 * information about the level type. Otherwise, the semantics is not described
 * in a unique way. Please refer to the specification.
 */export class LevelType extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 31;// LevelType
}/**
   * Minimum of the value
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){// No descendable properties
}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){// No descendable properties
}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitLevelType(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitLevelTypeWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformLevelType(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformLevelTypeWithContext(this,context);}constructor(min,nom,typ,max){super();this.min=min;this.nom=nom;this.typ=typ;this.max=max;}}/**
 * A value reference pair within a value list. Each value has a global unique id
 * defining its semantic.
 */export class ValueReferencePair extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 32;// ValueReferencePair
}/**
   * The value of the referenced concept definition of the value in {@link valueId}.
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){yield this.valueId;}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){yield this.valueId;yield*this.valueId.descend();}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitValueReferencePair(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitValueReferencePairWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformValueReferencePair(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformValueReferencePairWithContext(this,context);}constructor(value,valueId){super();this.value=value;this.valueId=valueId;}}/**
 * A set of value reference pairs.
 */export class ValueList extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 33;// ValueList
}/**
   * A pair of a value together with its global unique id.
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){yield*this.valueReferencePairs;}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){for(const anItem of this.valueReferencePairs){yield anItem;yield*anItem.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitValueList(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitValueListWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformValueList(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformValueListWithContext(this,context);}constructor(valueReferencePairs){super();this.valueReferencePairs=valueReferencePairs;}}/**
 * String with length 255 maximum and minimum 1 characters and with language tags
 *
 * @remarks
 * **Note**:
 * It is advised to keep the length of the name limited to 35 characters.
 */export class LangStringPreferredNameTypeIec61360 extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 34;// LangStringPreferredNameTypeIec61360
}/**
   * Language tag conforming to BCP 47
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){// No descendable properties
}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){// No descendable properties
}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitLangStringPreferredNameTypeIec61360(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitLangStringPreferredNameTypeIec61360WithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformLangStringPreferredNameTypeIec61360(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformLangStringPreferredNameTypeIec61360WithContext(this,context);}constructor(language,text){super();this.language=language;this.text=text;}}/**
 * String with length 18 maximum and minimum 1 characters and with language tags
 */export class LangStringShortNameTypeIec61360 extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 35;// LangStringShortNameTypeIec61360
}/**
   * Language tag conforming to BCP 47
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){// No descendable properties
}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){// No descendable properties
}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitLangStringShortNameTypeIec61360(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitLangStringShortNameTypeIec61360WithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformLangStringShortNameTypeIec61360(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformLangStringShortNameTypeIec61360WithContext(this,context);}constructor(language,text){super();this.language=language;this.text=text;}}/**
 * String with length 1023 maximum and minimum 1 characters and with language tags
 */export class LangStringDefinitionTypeIec61360 extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 36;// LangStringDefinitionTypeIec61360
}/**
   * Language tag conforming to BCP 47
   */ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){// No descendable properties
}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){// No descendable properties
}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitLangStringDefinitionTypeIec61360(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitLangStringDefinitionTypeIec61360WithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformLangStringDefinitionTypeIec61360(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformLangStringDefinitionTypeIec61360WithContext(this,context);}constructor(language,text){super();this.language=language;this.text=text;}}/**
 * Content of data specification template for concept descriptions for properties,
 * values and value lists conformant to IEC 61360.
 *
 * @remarks
 * **Note**:
 * IEC61360 requires also a globally unique identifier for a concept
 * description. This ID is not part of the data specification template.
 * Instead the {@link ConceptDescription.id} as inherited via
 * {@link IIdentifiable} is used. Same holds for administrative
 * information like the version and revision.
 *
 * **Note**:
 * {@link ConceptDescription.idShort} and {@link DataSpecificationIec61360.shortName} are very
 * similar. However, in this case the decision was to add
 * {@link DataSpecificationIec61360.shortName} explicitly to the data specification. Same holds for
 * {@link ConceptDescription.displayName} and
 * {@link DataSpecificationIec61360.preferredName}. Same holds for
 * {@link ConceptDescription.description} and {@link DataSpecificationIec61360.definition}.
 *
 * Constraint `AASc-3a-010`:
 * If {@link DataSpecificationIec61360.value} is not empty then {@link DataSpecificationIec61360.valueList} shall be empty
 * and vice versa.
 *
 * **Note**:
 * It is also possible that both {@link DataSpecificationIec61360.value} and {@link DataSpecificationIec61360.valueList} are
 * empty. This is the case for concept descriptions that define the semantics
 * of a property but do not have an enumeration ({@link DataSpecificationIec61360.valueList}) as
 * data type.
 *
 * **Note**:
 * Although it is possible to define a {@link ConceptDescription} for a
 * :attr:´value_list`,
 * it is not possible to reuse this {@link DataSpecificationIec61360.valueList}.
 * It is only possible to directly add a {@link DataSpecificationIec61360.valueList} as data type
 * to a specific semantic definition of a property.
 *
 * Constraint `AASc-3a-009`:
 * If {@link DataSpecificationIec61360.dataType} one of:
 * {@link DataTypeIec61360.IntegerMeasure},
 * {@link DataTypeIec61360.RealMeasure},
 * {@link DataTypeIec61360.RationalMeasure},
 * {@link DataTypeIec61360.IntegerCurrency},
 * {@link DataTypeIec61360.RealCurrency}, then {@link DataSpecificationIec61360.unit} or
 * {@link DataSpecificationIec61360.unitId} shall be defined.
 */export class DataSpecificationIec61360 extends Class{/**
   * Indicate the runtime model type of the instance.
   */modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 37;// DataSpecificationIec61360
}/**
   * Preferred name
   *
   * @remarks
   * **Note**:
   * It is advised to keep the length of the name limited to 35 characters.
   *
   * Constraint `AASc-3a-002`:
   * {@link preferredName} shall be provided at least in English.
   */ /**
   * Yield from {@link shortName} if it is set, or yield nothing.
   */*overShortNameOrEmpty(){if(this.shortName!==null){yield*this.shortName;}return;}/**
   * Yield from {@link definition} if it is set, or yield nothing.
   */*overDefinitionOrEmpty(){if(this.definition!==null){yield*this.definition;}return;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */*descendOnce(){yield*this.preferredName;if(this.shortName!==null){yield*this.shortName;}if(this.unitId!==null){yield this.unitId;}if(this.definition!==null){yield*this.definition;}if(this.valueList!==null){yield this.valueList;}if(this.levelType!==null){yield this.levelType;}}/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */*descend(){for(const anItem of this.preferredName){yield anItem;yield*anItem.descend();}if(this.shortName!==null){for(const anotherItem of this.shortName){yield anotherItem;yield*anotherItem.descend();}}if(this.unitId!==null){yield this.unitId;yield*this.unitId.descend();}if(this.definition!==null){for(const yetAnotherItem of this.definition){yield yetAnotherItem;yield*yetAnotherItem.descend();}}if(this.valueList!==null){yield this.valueList;yield*this.valueList.descend();}if(this.levelType!==null){yield this.levelType;yield*this.levelType.descend();}}/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */accept(visitor){visitor.visitDataSpecificationIec61360(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */acceptWithContext(visitor,context){visitor.visitDataSpecificationIec61360WithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */transform(transformer){return transformer.transformDataSpecificationIec61360(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */transformWithContext(transformer,context){return transformer.transformDataSpecificationIec61360WithContext(this,context);}constructor(preferredName,shortName=null,unit=null,unitId=null,sourceOfDefinition=null,symbol=null,dataType=null,definition=null,valueFormat=null,valueList=null,value=null,levelType=null){super();this.preferredName=preferredName;this.shortName=shortName;this.unit=unit;this.unitId=unitId;this.sourceOfDefinition=sourceOfDefinition;this.symbol=symbol;this.dataType=dataType;this.definition=definition;this.valueFormat=valueFormat;this.valueList=valueList;this.value=value;this.levelType=levelType;}}/**
 * Visit the instances of the model.
 */export class AbstractVisitor{/**
   * Double-dispatch on `that`.
   */visit(that){that.accept(this);}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */}/**
 * Visit the instances of the model with context.
 *
 * @typeParam ContextT - type of the visitation context
 */export class AbstractVisitorWithContext{/**
   * Double-dispatch on `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitWithContext(that,context){that.acceptWithContext(this,context);}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */}/**
 * Visit the instances of the model without action.
 *
 * @remarks
 * This visitor is not meant to be directly used. Instead, you usually
 * inherit from it, and implement only the relevant visit methods.
 */export class PassThroughVisitor extends AbstractVisitor{/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitExtension(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitAdministrativeInformation(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitQualifier(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitAssetAdministrationShell(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitAssetInformation(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitResource(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitSpecificAssetId(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitSubmodel(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitRelationshipElement(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitSubmodelElementList(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitSubmodelElementCollection(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitProperty(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitMultiLanguageProperty(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitRange(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitReferenceElement(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitBlob(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitFile(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitAnnotatedRelationshipElement(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitEntity(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitEventPayload(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitBasicEventElement(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitOperation(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitOperationVariable(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitCapability(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitConceptDescription(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitReference(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitKey(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitLangStringNameType(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitLangStringTextType(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitEnvironment(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitEmbeddedDataSpecification(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitLevelType(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitValueReferencePair(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitValueList(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitLangStringPreferredNameTypeIec61360(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitLangStringShortNameTypeIec61360(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitLangStringDefinitionTypeIec61360(that){for(const another of that.descendOnce()){this.visit(another);}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */visitDataSpecificationIec61360(that){for(const another of that.descendOnce()){this.visit(another);}}}/**
 * Visit the instances of the model without action and in context.
 *
 * @remarks
 * This visitor is not meant to be directly used. Instead, you usually
 * inherit from it, and implement only the relevant visit methods.
 */export class PassThroughVisitorWithContext extends AbstractVisitorWithContext{/**
   * Double-dispatch on `that` in `context`.
   */visitWithContext(that,context){that.acceptWithContext(this,context);}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitExtensionWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitAdministrativeInformationWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitQualifierWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitAssetAdministrationShellWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitAssetInformationWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitResourceWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitSpecificAssetIdWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitSubmodelWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitRelationshipElementWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitSubmodelElementListWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitSubmodelElementCollectionWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitPropertyWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitMultiLanguagePropertyWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitRangeWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitReferenceElementWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitBlobWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitFileWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitAnnotatedRelationshipElementWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitEntityWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitEventPayloadWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitBasicEventElementWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitOperationWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitOperationVariableWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitCapabilityWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitConceptDescriptionWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitReferenceWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitKeyWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitLangStringNameTypeWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitLangStringTextTypeWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitEnvironmentWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitEmbeddedDataSpecificationWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitLevelTypeWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitValueReferencePairWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitValueListWithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitLangStringPreferredNameTypeIec61360WithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitLangStringShortNameTypeIec61360WithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitLangStringDefinitionTypeIec61360WithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */visitDataSpecificationIec61360WithContext(that,context){for(const another of that.descendOnce()){this.visitWithContext(another,context);}}}/**
 * Transform the instance of the model.
 *
 * @typeParam T - type of the transformation result
 */export class AbstractTransformer{/**
   * Double-dispatch on `that`.
   */transform(that){return that.transform(this);}/**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */}/**
 * Transform the instances of the model in context.
 *
 * @typeParam ContextT - type of the transformation context
 * @typeParam T - type of the transformation result
 */export class AbstractTransformerWithContext{/**
   * Double-dispatch on `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the transformation
   * @returns transformed `that`
   */transformWithContext(that,context){return that.transformWithContext(this,context);}/**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the transformation
   * @returns transformed `that`
   */}/**
 * Transform the instances of the model.
 *
 * @remarks
 * If you do not override the transformation methods, they simply
 * return {@link defaultResult}.
 *
 * @typeParam T - type of the transformation result
 */export class TransformerWithDefault extends AbstractTransformer{/**
   * Default value which is returned if no override of the transformation
   */ /**
   * Initialize with the given `default` value.
   *
   * @param defaultResult - returned if no override of the transformation
   */constructor(defaultResult){super();this.defaultResult=defaultResult;}/**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodel(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRelationshipElement(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementList(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollection(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformProperty(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformMultiLanguageProperty(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRange(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceElement(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBlob(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformFile(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElement(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEntity(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperation(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapability(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */}/**
 * Transform the instances of the model in context.
 *
 * @remarks
 * If you do not override the transformation methods, they simply
 * return {@link defaultResult}.
 *
 * @typeParam ContextT - type of the visitation context
 * @typeParam T - type of the transformation result
 */export class TransformerWithDefaultAndContext extends AbstractTransformerWithContext{/**
   * Default value which is returned if no override of the transformation
   */ /**
   * Initialize with the given `default` value.
   *
   * @param defaultResult - returned if no override of the transformation
   */constructor(defaultResult){super();this.defaultResult=defaultResult;}/**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformExtensionWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformationWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifierWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShellWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformationWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResourceWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetIdWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRelationshipElementWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementListWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollectionWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformPropertyWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformMultiLanguagePropertyWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRangeWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceElementWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBlobWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformFileWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElementWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEntityWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayloadWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBasicEventElementWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariableWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapabilityWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescriptionWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKeyWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameTypeWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextTypeWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironmentWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecificationWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelTypeWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePairWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueListWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360WithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360WithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360WithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360WithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */}/**
 * Try to cast an instance of the model to {@link IHasSemantics}.
 */class AsHasSemanticsTransformer extends AbstractTransformer{transformExtension(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformQualifier(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return that;}transformSubmodel(that){return that;}transformRelationshipElement(that){return that;}transformSubmodelElementList(that){return that;}transformSubmodelElementCollection(that){return that;}transformProperty(that){return that;}transformMultiLanguageProperty(that){return that;}transformRange(that){return that;}transformReferenceElement(that){return that;}transformBlob(that){return that;}transformFile(that){return that;}transformAnnotatedRelationshipElement(that){return that;}transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return that;}transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformCapability(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_HAS_SEMANTICS_TRANSFORMER=new AsHasSemanticsTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IHasSemantics}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asHasSemantics(that){return AS_HAS_SEMANTICS_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isHasSemantics(that){return asHasSemantics(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link Extension}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asExtension(that){return that instanceof Extension?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isExtension(that){return that instanceof Extension;}/**
 * Try to cast an instance of the model to {@link IHasExtensions}.
 */class AsHasExtensionsTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformSubmodel(that){return that;}transformRelationshipElement(that){return that;}transformSubmodelElementList(that){return that;}transformSubmodelElementCollection(that){return that;}transformProperty(that){return that;}transformMultiLanguageProperty(that){return that;}transformRange(that){return that;}transformReferenceElement(that){return that;}transformBlob(that){return that;}transformFile(that){return that;}transformAnnotatedRelationshipElement(that){return that;}transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return that;}transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformCapability(that){return that;}transformConceptDescription(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_HAS_EXTENSIONS_TRANSFORMER=new AsHasExtensionsTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IHasExtensions}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asHasExtensions(that){return AS_HAS_EXTENSIONS_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isHasExtensions(that){return asHasExtensions(that)!==null;}/**
 * Try to cast an instance of the model to {@link IReferable}.
 */class AsReferableTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformSubmodel(that){return that;}transformRelationshipElement(that){return that;}transformSubmodelElementList(that){return that;}transformSubmodelElementCollection(that){return that;}transformProperty(that){return that;}transformMultiLanguageProperty(that){return that;}transformRange(that){return that;}transformReferenceElement(that){return that;}transformBlob(that){return that;}transformFile(that){return that;}transformAnnotatedRelationshipElement(that){return that;}transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return that;}transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformCapability(that){return that;}transformConceptDescription(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_REFERABLE_TRANSFORMER=new AsReferableTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IReferable}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asReferable(that){return AS_REFERABLE_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isReferable(that){return asReferable(that)!==null;}/**
 * Try to cast an instance of the model to {@link IIdentifiable}.
 */class AsIdentifiableTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformSubmodel(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_IDENTIFIABLE_TRANSFORMER=new AsIdentifiableTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IIdentifiable}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asIdentifiable(that){return AS_IDENTIFIABLE_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isIdentifiable(that){return asIdentifiable(that)!==null;}/**
 * Try to cast an instance of the model to {@link IHasKind}.
 */class AsHasKindTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformSubmodel(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_HAS_KIND_TRANSFORMER=new AsHasKindTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IHasKind}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asHasKind(that){return AS_HAS_KIND_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isHasKind(that){return asHasKind(that)!==null;}/**
 * Try to cast an instance of the model to {@link IHasDataSpecification}.
 */class AsHasDataSpecificationTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformSubmodel(that){return that;}transformRelationshipElement(that){return that;}transformSubmodelElementList(that){return that;}transformSubmodelElementCollection(that){return that;}transformProperty(that){return that;}transformMultiLanguageProperty(that){return that;}transformRange(that){return that;}transformReferenceElement(that){return that;}transformBlob(that){return that;}transformFile(that){return that;}transformAnnotatedRelationshipElement(that){return that;}transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return that;}transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformCapability(that){return that;}transformConceptDescription(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_HAS_DATA_SPECIFICATION_TRANSFORMER=new AsHasDataSpecificationTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IHasDataSpecification}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asHasDataSpecification(that){return AS_HAS_DATA_SPECIFICATION_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isHasDataSpecification(that){return asHasDataSpecification(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link AdministrativeInformation}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asAdministrativeInformation(that){return that instanceof AdministrativeInformation?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isAdministrativeInformation(that){return that instanceof AdministrativeInformation;}/**
 * Try to cast an instance of the model to {@link IQualifiable}.
 */class AsQualifiableTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformSubmodel(that){return that;}transformRelationshipElement(that){return that;}transformSubmodelElementList(that){return that;}transformSubmodelElementCollection(that){return that;}transformProperty(that){return that;}transformMultiLanguageProperty(that){return that;}transformRange(that){return that;}transformReferenceElement(that){return that;}transformBlob(that){return that;}transformFile(that){return that;}transformAnnotatedRelationshipElement(that){return that;}transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return that;}transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformCapability(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_QUALIFIABLE_TRANSFORMER=new AsQualifiableTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IQualifiable}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asQualifiable(that){return AS_QUALIFIABLE_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isQualifiable(that){return asQualifiable(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link Qualifier}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asQualifier(that){return that instanceof Qualifier?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isQualifier(that){return that instanceof Qualifier;}/**
 * Try to cast `that` instance to
 * the class {@link AssetAdministrationShell}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asAssetAdministrationShell(that){return that instanceof AssetAdministrationShell?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isAssetAdministrationShell(that){return that instanceof AssetAdministrationShell;}/**
 * Try to cast `that` instance to
 * the class {@link AssetInformation}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asAssetInformation(that){return that instanceof AssetInformation?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isAssetInformation(that){return that instanceof AssetInformation;}/**
 * Try to cast `that` instance to
 * the class {@link Resource}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asResource(that){return that instanceof Resource?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isResource(that){return that instanceof Resource;}/**
 * Try to cast `that` instance to
 * the class {@link SpecificAssetId}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asSpecificAssetId(that){return that instanceof SpecificAssetId?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isSpecificAssetId(that){return that instanceof SpecificAssetId;}/**
 * Try to cast `that` instance to
 * the class {@link Submodel}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asSubmodel(that){return that instanceof Submodel?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isSubmodel(that){return that instanceof Submodel;}/**
 * Try to cast an instance of the model to {@link ISubmodelElement}.
 */class AsSubmodelElementTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformRelationshipElement(that){return that;}transformSubmodelElementList(that){return that;}transformSubmodelElementCollection(that){return that;}transformProperty(that){return that;}transformMultiLanguageProperty(that){return that;}transformRange(that){return that;}transformReferenceElement(that){return that;}transformBlob(that){return that;}transformFile(that){return that;}transformAnnotatedRelationshipElement(that){return that;}transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return that;}transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformCapability(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_SUBMODEL_ELEMENT_TRANSFORMER=new AsSubmodelElementTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link ISubmodelElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asSubmodelElement(that){return AS_SUBMODEL_ELEMENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isSubmodelElement(that){return asSubmodelElement(that)!==null;}/**
 * Try to cast an instance of the model to {@link IRelationshipElement}.
 */class AsRelationshipElementTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformRelationshipElement(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElement(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_RELATIONSHIP_ELEMENT_TRANSFORMER=new AsRelationshipElementTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IRelationshipElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asRelationshipElement(that){return AS_RELATIONSHIP_ELEMENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isRelationshipElement(that){return asRelationshipElement(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link SubmodelElementList}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asSubmodelElementList(that){return that instanceof SubmodelElementList?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isSubmodelElementList(that){return that instanceof SubmodelElementList;}/**
 * Try to cast `that` instance to
 * the class {@link SubmodelElementCollection}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asSubmodelElementCollection(that){return that instanceof SubmodelElementCollection?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isSubmodelElementCollection(that){return that instanceof SubmodelElementCollection;}/**
 * Try to cast an instance of the model to {@link IDataElement}.
 */class AsDataElementTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformProperty(that){return that;}transformMultiLanguageProperty(that){return that;}transformRange(that){return that;}transformReferenceElement(that){return that;}transformBlob(that){return that;}transformFile(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_DATA_ELEMENT_TRANSFORMER=new AsDataElementTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IDataElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asDataElement(that){return AS_DATA_ELEMENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isDataElement(that){return asDataElement(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link Property}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asProperty(that){return that instanceof Property?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isProperty(that){return that instanceof Property;}/**
 * Try to cast `that` instance to
 * the class {@link MultiLanguageProperty}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asMultiLanguageProperty(that){return that instanceof MultiLanguageProperty?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isMultiLanguageProperty(that){return that instanceof MultiLanguageProperty;}/**
 * Try to cast `that` instance to
 * the class {@link Range}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asRange(that){return that instanceof Range?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isRange(that){return that instanceof Range;}/**
 * Try to cast `that` instance to
 * the class {@link ReferenceElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asReferenceElement(that){return that instanceof ReferenceElement?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isReferenceElement(that){return that instanceof ReferenceElement;}/**
 * Try to cast `that` instance to
 * the class {@link Blob}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asBlob(that){return that instanceof Blob?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isBlob(that){return that instanceof Blob;}/**
 * Try to cast `that` instance to
 * the class {@link File}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asFile(that){return that instanceof File?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isFile(that){return that instanceof File;}/**
 * Try to cast `that` instance to
 * the class {@link AnnotatedRelationshipElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asAnnotatedRelationshipElement(that){return that instanceof AnnotatedRelationshipElement?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isAnnotatedRelationshipElement(that){return that instanceof AnnotatedRelationshipElement;}/**
 * Try to cast `that` instance to
 * the class {@link Entity}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asEntity(that){return that instanceof Entity?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isEntity(that){return that instanceof Entity;}/**
 * Try to cast `that` instance to
 * the class {@link EventPayload}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asEventPayload(that){return that instanceof EventPayload?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isEventPayload(that){return that instanceof EventPayload;}/**
 * Try to cast an instance of the model to {@link IEventElement}.
 */class AsEventElementTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_EVENT_ELEMENT_TRANSFORMER=new AsEventElementTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IEventElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asEventElement(that){return AS_EVENT_ELEMENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isEventElement(that){return asEventElement(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link BasicEventElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asBasicEventElement(that){return that instanceof BasicEventElement?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isBasicEventElement(that){return that instanceof BasicEventElement;}/**
 * Try to cast `that` instance to
 * the class {@link Operation}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asOperation(that){return that instanceof Operation?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isOperation(that){return that instanceof Operation;}/**
 * Try to cast `that` instance to
 * the class {@link OperationVariable}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asOperationVariable(that){return that instanceof OperationVariable?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isOperationVariable(that){return that instanceof OperationVariable;}/**
 * Try to cast `that` instance to
 * the class {@link Capability}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asCapability(that){return that instanceof Capability?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isCapability(that){return that instanceof Capability;}/**
 * Try to cast `that` instance to
 * the class {@link ConceptDescription}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asConceptDescription(that){return that instanceof ConceptDescription?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isConceptDescription(that){return that instanceof ConceptDescription;}/**
 * Try to cast `that` instance to
 * the class {@link Reference}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asReference(that){return that instanceof Reference?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isReference(that){return that instanceof Reference;}/**
 * Try to cast `that` instance to
 * the class {@link Key}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asKey(that){return that instanceof Key?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isKey(that){return that instanceof Key;}/**
 * Try to cast an instance of the model to {@link IAbstractLangString}.
 */class AsAbstractLangStringTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return that;}transformLangStringTextType(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return that;}transformLangStringShortNameTypeIec61360(that){return that;}transformLangStringDefinitionTypeIec61360(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}const AS_ABSTRACT_LANG_STRING_TRANSFORMER=new AsAbstractLangStringTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IAbstractLangString}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asAbstractLangString(that){return AS_ABSTRACT_LANG_STRING_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isAbstractLangString(that){return asAbstractLangString(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringNameType}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asLangStringNameType(that){return that instanceof LangStringNameType?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isLangStringNameType(that){return that instanceof LangStringNameType;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringTextType}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asLangStringTextType(that){return that instanceof LangStringTextType?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isLangStringTextType(that){return that instanceof LangStringTextType;}/**
 * Try to cast `that` instance to
 * the class {@link Environment}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asEnvironment(that){return that instanceof Environment?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isEnvironment(that){return that instanceof Environment;}/**
 * Try to cast an instance of the model to {@link IDataSpecificationContent}.
 */class AsDataSpecificationContentTransformer extends AbstractTransformer{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360(that){return that;}}const AS_DATA_SPECIFICATION_CONTENT_TRANSFORMER=new AsDataSpecificationContentTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IDataSpecificationContent}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asDataSpecificationContent(that){return AS_DATA_SPECIFICATION_CONTENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isDataSpecificationContent(that){return asDataSpecificationContent(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link EmbeddedDataSpecification}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asEmbeddedDataSpecification(that){return that instanceof EmbeddedDataSpecification?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isEmbeddedDataSpecification(that){return that instanceof EmbeddedDataSpecification;}/**
 * Try to cast `that` instance to
 * the class {@link LevelType}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asLevelType(that){return that instanceof LevelType?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isLevelType(that){return that instanceof LevelType;}/**
 * Try to cast `that` instance to
 * the class {@link ValueReferencePair}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asValueReferencePair(that){return that instanceof ValueReferencePair?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isValueReferencePair(that){return that instanceof ValueReferencePair;}/**
 * Try to cast `that` instance to
 * the class {@link ValueList}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asValueList(that){return that instanceof ValueList?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isValueList(that){return that instanceof ValueList;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringPreferredNameTypeIec61360}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asLangStringPreferredNameTypeIec61360(that){return that instanceof LangStringPreferredNameTypeIec61360?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isLangStringPreferredNameTypeIec61360(that){return that instanceof LangStringPreferredNameTypeIec61360;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringShortNameTypeIec61360}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asLangStringShortNameTypeIec61360(that){return that instanceof LangStringShortNameTypeIec61360?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isLangStringShortNameTypeIec61360(that){return that instanceof LangStringShortNameTypeIec61360;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringDefinitionTypeIec61360}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asLangStringDefinitionTypeIec61360(that){return that instanceof LangStringDefinitionTypeIec61360?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isLangStringDefinitionTypeIec61360(that){return that instanceof LangStringDefinitionTypeIec61360;}/**
 * Try to cast `that` instance to
 * the class {@link DataSpecificationIec61360}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */export function asDataSpecificationIec61360(that){return that instanceof DataSpecificationIec61360?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */export function isDataSpecificationIec61360(that){return that instanceof DataSpecificationIec61360;}class TypeMatcher extends AbstractTransformerWithContext{/* eslint-disable @typescript-eslint/no-unused-vars */transformExtensionWithContext(that,other){return isExtension(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAdministrativeInformationWithContext(that,other){return isAdministrativeInformation(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformQualifierWithContext(that,other){return isQualifier(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetAdministrationShellWithContext(that,other){return isAssetAdministrationShell(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAssetInformationWithContext(that,other){return isAssetInformation(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformResourceWithContext(that,other){return isResource(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSpecificAssetIdWithContext(that,other){return isSpecificAssetId(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelWithContext(that,other){return isSubmodel(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRelationshipElementWithContext(that,other){return isRelationshipElement(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementListWithContext(that,other){return isSubmodelElementList(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformSubmodelElementCollectionWithContext(that,other){return isSubmodelElementCollection(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformPropertyWithContext(that,other){return isProperty(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformMultiLanguagePropertyWithContext(that,other){return isMultiLanguageProperty(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformRangeWithContext(that,other){return isRange(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceElementWithContext(that,other){return isReferenceElement(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBlobWithContext(that,other){return isBlob(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformFileWithContext(that,other){return isFile(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformAnnotatedRelationshipElementWithContext(that,other){return isAnnotatedRelationshipElement(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEntityWithContext(that,other){return isEntity(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEventPayloadWithContext(that,other){return isEventPayload(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformBasicEventElementWithContext(that,other){return isBasicEventElement(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationWithContext(that,other){return isOperation(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformOperationVariableWithContext(that,other){return isOperationVariable(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformCapabilityWithContext(that,other){return isCapability(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformConceptDescriptionWithContext(that,other){return isConceptDescription(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformReferenceWithContext(that,other){return isReference(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformKeyWithContext(that,other){return isKey(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringNameTypeWithContext(that,other){return isLangStringNameType(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringTextTypeWithContext(that,other){return isLangStringTextType(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEnvironmentWithContext(that,other){return isEnvironment(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformEmbeddedDataSpecificationWithContext(that,other){return isEmbeddedDataSpecification(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLevelTypeWithContext(that,other){return isLevelType(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueReferencePairWithContext(that,other){return isValueReferencePair(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformValueListWithContext(that,other){return isValueList(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringPreferredNameTypeIec61360WithContext(that,other){return isLangStringPreferredNameTypeIec61360(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringShortNameTypeIec61360WithContext(that,other){return isLangStringShortNameTypeIec61360(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformLangStringDefinitionTypeIec61360WithContext(that,other){return isLangStringDefinitionTypeIec61360(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */transformDataSpecificationIec61360WithContext(that,other){return isDataSpecificationIec61360(other);}/* eslint-enable @typescript-eslint/no-unused-vars */}const TYPE_MATCHER=new TypeMatcher();/**
 * Check whether the type of `that` matches the type of `other` instance.
 *
 * @remarks
 * We check with `is*` function. Hence, if the class of `other` is a subclass of
 * the class of `that`, we confirm the match.
 *
 * @param that - standard instance
 * @param other - instance whose type is compared against `that`
 */export function typesMatch(that,other){return TYPE_MATCHER.transformWithContext(that,other);}// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
//# sourceMappingURL=types.js.map