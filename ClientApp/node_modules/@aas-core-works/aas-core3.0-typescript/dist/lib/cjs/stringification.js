"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.aasSubmodelElementsFromString = aasSubmodelElementsFromString;
exports.aasSubmodelElementsToString = aasSubmodelElementsToString;
exports.assetKindFromString = assetKindFromString;
exports.assetKindToString = assetKindToString;
exports.dataTypeDefXsdFromString = dataTypeDefXsdFromString;
exports.dataTypeDefXsdToString = dataTypeDefXsdToString;
exports.dataTypeIec61360FromString = dataTypeIec61360FromString;
exports.dataTypeIec61360ToString = dataTypeIec61360ToString;
exports.directionFromString = directionFromString;
exports.directionToString = directionToString;
exports.entityTypeFromString = entityTypeFromString;
exports.entityTypeToString = entityTypeToString;
exports.keyTypesFromString = keyTypesFromString;
exports.keyTypesToString = keyTypesToString;
exports.modelTypeFromString = modelTypeFromString;
exports.modelTypeToString = modelTypeToString;
exports.modellingKindFromString = modellingKindFromString;
exports.modellingKindToString = modellingKindToString;
exports.mustAasSubmodelElementsToString = mustAasSubmodelElementsToString;
exports.mustAssetKindToString = mustAssetKindToString;
exports.mustDataTypeDefXsdToString = mustDataTypeDefXsdToString;
exports.mustDataTypeIec61360ToString = mustDataTypeIec61360ToString;
exports.mustDirectionToString = mustDirectionToString;
exports.mustEntityTypeToString = mustEntityTypeToString;
exports.mustKeyTypesToString = mustKeyTypesToString;
exports.mustModelTypeToString = mustModelTypeToString;
exports.mustModellingKindToString = mustModellingKindToString;
exports.mustQualifierKindToString = mustQualifierKindToString;
exports.mustReferenceTypesToString = mustReferenceTypesToString;
exports.mustStateOfEventToString = mustStateOfEventToString;
exports.qualifierKindFromString = qualifierKindFromString;
exports.qualifierKindToString = qualifierKindToString;
exports.referenceTypesFromString = referenceTypesFromString;
exports.referenceTypesToString = referenceTypesToString;
exports.stateOfEventFromString = stateOfEventFromString;
exports.stateOfEventToString = stateOfEventToString;
var AasTypes = _interopRequireWildcard(require("./types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * De/serialize enumerations from and to string representations.
 */

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

var MODEL_TYPE_FROM_STRING = new Map([["Extension", AasTypes.ModelType.Extension], ["AdministrativeInformation", AasTypes.ModelType.AdministrativeInformation], ["Qualifier", AasTypes.ModelType.Qualifier], ["AssetAdministrationShell", AasTypes.ModelType.AssetAdministrationShell], ["AssetInformation", AasTypes.ModelType.AssetInformation], ["Resource", AasTypes.ModelType.Resource], ["SpecificAssetId", AasTypes.ModelType.SpecificAssetId], ["Submodel", AasTypes.ModelType.Submodel], ["RelationshipElement", AasTypes.ModelType.RelationshipElement], ["SubmodelElementList", AasTypes.ModelType.SubmodelElementList], ["SubmodelElementCollection", AasTypes.ModelType.SubmodelElementCollection], ["Property", AasTypes.ModelType.Property], ["MultiLanguageProperty", AasTypes.ModelType.MultiLanguageProperty], ["Range", AasTypes.ModelType.Range], ["ReferenceElement", AasTypes.ModelType.ReferenceElement], ["Blob", AasTypes.ModelType.Blob], ["File", AasTypes.ModelType.File], ["AnnotatedRelationshipElement", AasTypes.ModelType.AnnotatedRelationshipElement], ["Entity", AasTypes.ModelType.Entity], ["EventPayload", AasTypes.ModelType.EventPayload], ["BasicEventElement", AasTypes.ModelType.BasicEventElement], ["Operation", AasTypes.ModelType.Operation], ["OperationVariable", AasTypes.ModelType.OperationVariable], ["Capability", AasTypes.ModelType.Capability], ["ConceptDescription", AasTypes.ModelType.ConceptDescription], ["Reference", AasTypes.ModelType.Reference], ["Key", AasTypes.ModelType.Key], ["LangStringNameType", AasTypes.ModelType.LangStringNameType], ["LangStringTextType", AasTypes.ModelType.LangStringTextType], ["Environment", AasTypes.ModelType.Environment], ["EmbeddedDataSpecification", AasTypes.ModelType.EmbeddedDataSpecification], ["LevelType", AasTypes.ModelType.LevelType], ["ValueReferencePair", AasTypes.ModelType.ValueReferencePair], ["ValueList", AasTypes.ModelType.ValueList], ["LangStringPreferredNameTypeIec61360", AasTypes.ModelType.LangStringPreferredNameTypeIec61360], ["LangStringShortNameTypeIec61360", AasTypes.ModelType.LangStringShortNameTypeIec61360], ["LangStringDefinitionTypeIec61360", AasTypes.ModelType.LangStringDefinitionTypeIec61360], ["DataSpecificationIec61360", AasTypes.ModelType.DataSpecificationIec61360]]);

/**
 * Parse `text` as a string representation of {@link types!ModelType}.
 *
 * @param text - string representation of {@link types!ModelType}
 * @returns literal of {@link types!ModelType}, if valid, and `null` otherwise
 */
function modelTypeFromString(text) {
  var result = MODEL_TYPE_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var MODEL_TYPE_TO_STRING = new Map([[AasTypes.ModelType.Extension, "Extension"], [AasTypes.ModelType.AdministrativeInformation, "AdministrativeInformation"], [AasTypes.ModelType.Qualifier, "Qualifier"], [AasTypes.ModelType.AssetAdministrationShell, "AssetAdministrationShell"], [AasTypes.ModelType.AssetInformation, "AssetInformation"], [AasTypes.ModelType.Resource, "Resource"], [AasTypes.ModelType.SpecificAssetId, "SpecificAssetId"], [AasTypes.ModelType.Submodel, "Submodel"], [AasTypes.ModelType.RelationshipElement, "RelationshipElement"], [AasTypes.ModelType.SubmodelElementList, "SubmodelElementList"], [AasTypes.ModelType.SubmodelElementCollection, "SubmodelElementCollection"], [AasTypes.ModelType.Property, "Property"], [AasTypes.ModelType.MultiLanguageProperty, "MultiLanguageProperty"], [AasTypes.ModelType.Range, "Range"], [AasTypes.ModelType.ReferenceElement, "ReferenceElement"], [AasTypes.ModelType.Blob, "Blob"], [AasTypes.ModelType.File, "File"], [AasTypes.ModelType.AnnotatedRelationshipElement, "AnnotatedRelationshipElement"], [AasTypes.ModelType.Entity, "Entity"], [AasTypes.ModelType.EventPayload, "EventPayload"], [AasTypes.ModelType.BasicEventElement, "BasicEventElement"], [AasTypes.ModelType.Operation, "Operation"], [AasTypes.ModelType.OperationVariable, "OperationVariable"], [AasTypes.ModelType.Capability, "Capability"], [AasTypes.ModelType.ConceptDescription, "ConceptDescription"], [AasTypes.ModelType.Reference, "Reference"], [AasTypes.ModelType.Key, "Key"], [AasTypes.ModelType.LangStringNameType, "LangStringNameType"], [AasTypes.ModelType.LangStringTextType, "LangStringTextType"], [AasTypes.ModelType.Environment, "Environment"], [AasTypes.ModelType.EmbeddedDataSpecification, "EmbeddedDataSpecification"], [AasTypes.ModelType.LevelType, "LevelType"], [AasTypes.ModelType.ValueReferencePair, "ValueReferencePair"], [AasTypes.ModelType.ValueList, "ValueList"], [AasTypes.ModelType.LangStringPreferredNameTypeIec61360, "LangStringPreferredNameTypeIec61360"], [AasTypes.ModelType.LangStringShortNameTypeIec61360, "LangStringShortNameTypeIec61360"], [AasTypes.ModelType.LangStringDefinitionTypeIec61360, "LangStringDefinitionTypeIec61360"], [AasTypes.ModelType.DataSpecificationIec61360, "DataSpecificationIec61360"]]);

/**
 * Translate {@link types!ModelType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModelType},
 * if `value` valid, and `null` otherwise
 */
function modelTypeToString(value) {
  var result = MODEL_TYPE_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!ModelType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModelType}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustModelTypeToString(value) {
  var result = MODEL_TYPE_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of ModelType: ".concat(value));
  }
  return result;
}
var MODELLING_KIND_FROM_STRING = new Map([["Template", AasTypes.ModellingKind.Template], ["Instance", AasTypes.ModellingKind.Instance]]);

/**
 * Parse `text` as a string representation of {@link types!ModellingKind}.
 *
 * @param text - string representation of {@link types!ModellingKind}
 * @returns literal of {@link types!ModellingKind}, if valid, and `null` otherwise
 */
function modellingKindFromString(text) {
  var result = MODELLING_KIND_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var MODELLING_KIND_TO_STRING = new Map([[AasTypes.ModellingKind.Template, "Template"], [AasTypes.ModellingKind.Instance, "Instance"]]);

/**
 * Translate {@link types!ModellingKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModellingKind}, if `value` valid, and `null` otherwise
 */
function modellingKindToString(value) {
  var result = MODELLING_KIND_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!ModellingKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModellingKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustModellingKindToString(value) {
  var result = MODELLING_KIND_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of ModellingKind: ".concat(value));
  }
  return result;
}
var QUALIFIER_KIND_FROM_STRING = new Map([["ValueQualifier", AasTypes.QualifierKind.ValueQualifier], ["ConceptQualifier", AasTypes.QualifierKind.ConceptQualifier], ["TemplateQualifier", AasTypes.QualifierKind.TemplateQualifier]]);

/**
 * Parse `text` as a string representation of {@link types!QualifierKind}.
 *
 * @param text - string representation of {@link types!QualifierKind}
 * @returns literal of {@link types!QualifierKind}, if valid, and `null` otherwise
 */
function qualifierKindFromString(text) {
  var result = QUALIFIER_KIND_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var QUALIFIER_KIND_TO_STRING = new Map([[AasTypes.QualifierKind.ValueQualifier, "ValueQualifier"], [AasTypes.QualifierKind.ConceptQualifier, "ConceptQualifier"], [AasTypes.QualifierKind.TemplateQualifier, "TemplateQualifier"]]);

/**
 * Translate {@link types!QualifierKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!QualifierKind}, if `value` valid, and `null` otherwise
 */
function qualifierKindToString(value) {
  var result = QUALIFIER_KIND_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!QualifierKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!QualifierKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustQualifierKindToString(value) {
  var result = QUALIFIER_KIND_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of QualifierKind: ".concat(value));
  }
  return result;
}
var ASSET_KIND_FROM_STRING = new Map([["Type", AasTypes.AssetKind.Type], ["Instance", AasTypes.AssetKind.Instance], ["NotApplicable", AasTypes.AssetKind.NotApplicable]]);

/**
 * Parse `text` as a string representation of {@link types!AssetKind}.
 *
 * @param text - string representation of {@link types!AssetKind}
 * @returns literal of {@link types!AssetKind}, if valid, and `null` otherwise
 */
function assetKindFromString(text) {
  var result = ASSET_KIND_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var ASSET_KIND_TO_STRING = new Map([[AasTypes.AssetKind.Type, "Type"], [AasTypes.AssetKind.Instance, "Instance"], [AasTypes.AssetKind.NotApplicable, "NotApplicable"]]);

/**
 * Translate {@link types!AssetKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AssetKind}, if `value` valid, and `null` otherwise
 */
function assetKindToString(value) {
  var result = ASSET_KIND_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!AssetKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AssetKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustAssetKindToString(value) {
  var result = ASSET_KIND_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of AssetKind: ".concat(value));
  }
  return result;
}
var AAS_SUBMODEL_ELEMENTS_FROM_STRING = new Map([["AnnotatedRelationshipElement", AasTypes.AasSubmodelElements.AnnotatedRelationshipElement], ["BasicEventElement", AasTypes.AasSubmodelElements.BasicEventElement], ["Blob", AasTypes.AasSubmodelElements.Blob], ["Capability", AasTypes.AasSubmodelElements.Capability], ["DataElement", AasTypes.AasSubmodelElements.DataElement], ["Entity", AasTypes.AasSubmodelElements.Entity], ["EventElement", AasTypes.AasSubmodelElements.EventElement], ["File", AasTypes.AasSubmodelElements.File], ["MultiLanguageProperty", AasTypes.AasSubmodelElements.MultiLanguageProperty], ["Operation", AasTypes.AasSubmodelElements.Operation], ["Property", AasTypes.AasSubmodelElements.Property], ["Range", AasTypes.AasSubmodelElements.Range], ["ReferenceElement", AasTypes.AasSubmodelElements.ReferenceElement], ["RelationshipElement", AasTypes.AasSubmodelElements.RelationshipElement], ["SubmodelElement", AasTypes.AasSubmodelElements.SubmodelElement], ["SubmodelElementList", AasTypes.AasSubmodelElements.SubmodelElementList], ["SubmodelElementCollection", AasTypes.AasSubmodelElements.SubmodelElementCollection]]);

/**
 * Parse `text` as a string representation of {@link types!AasSubmodelElements}.
 *
 * @param text - string representation of {@link types!AasSubmodelElements}
 * @returns literal of {@link types!AasSubmodelElements}, if valid, and `null` otherwise
 */
function aasSubmodelElementsFromString(text) {
  var result = AAS_SUBMODEL_ELEMENTS_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var AAS_SUBMODEL_ELEMENTS_TO_STRING = new Map([[AasTypes.AasSubmodelElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement"], [AasTypes.AasSubmodelElements.BasicEventElement, "BasicEventElement"], [AasTypes.AasSubmodelElements.Blob, "Blob"], [AasTypes.AasSubmodelElements.Capability, "Capability"], [AasTypes.AasSubmodelElements.DataElement, "DataElement"], [AasTypes.AasSubmodelElements.Entity, "Entity"], [AasTypes.AasSubmodelElements.EventElement, "EventElement"], [AasTypes.AasSubmodelElements.File, "File"], [AasTypes.AasSubmodelElements.MultiLanguageProperty, "MultiLanguageProperty"], [AasTypes.AasSubmodelElements.Operation, "Operation"], [AasTypes.AasSubmodelElements.Property, "Property"], [AasTypes.AasSubmodelElements.Range, "Range"], [AasTypes.AasSubmodelElements.ReferenceElement, "ReferenceElement"], [AasTypes.AasSubmodelElements.RelationshipElement, "RelationshipElement"], [AasTypes.AasSubmodelElements.SubmodelElement, "SubmodelElement"], [AasTypes.AasSubmodelElements.SubmodelElementList, "SubmodelElementList"], [AasTypes.AasSubmodelElements.SubmodelElementCollection, "SubmodelElementCollection"]]);

/**
 * Translate {@link types!AasSubmodelElements} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AasSubmodelElements}, if `value` valid, and `null` otherwise
 */
function aasSubmodelElementsToString(value) {
  var result = AAS_SUBMODEL_ELEMENTS_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!AasSubmodelElements} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AasSubmodelElements}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustAasSubmodelElementsToString(value) {
  var result = AAS_SUBMODEL_ELEMENTS_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of AasSubmodelElements: ".concat(value));
  }
  return result;
}
var ENTITY_TYPE_FROM_STRING = new Map([["CoManagedEntity", AasTypes.EntityType.CoManagedEntity], ["SelfManagedEntity", AasTypes.EntityType.SelfManagedEntity]]);

/**
 * Parse `text` as a string representation of {@link types!EntityType}.
 *
 * @param text - string representation of {@link types!EntityType}
 * @returns literal of {@link types!EntityType}, if valid, and `null` otherwise
 */
function entityTypeFromString(text) {
  var result = ENTITY_TYPE_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var ENTITY_TYPE_TO_STRING = new Map([[AasTypes.EntityType.CoManagedEntity, "CoManagedEntity"], [AasTypes.EntityType.SelfManagedEntity, "SelfManagedEntity"]]);

/**
 * Translate {@link types!EntityType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!EntityType}, if `value` valid, and `null` otherwise
 */
function entityTypeToString(value) {
  var result = ENTITY_TYPE_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!EntityType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!EntityType}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustEntityTypeToString(value) {
  var result = ENTITY_TYPE_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of EntityType: ".concat(value));
  }
  return result;
}
var DIRECTION_FROM_STRING = new Map([["input", AasTypes.Direction.Input], ["output", AasTypes.Direction.Output]]);

/**
 * Parse `text` as a string representation of {@link types!Direction}.
 *
 * @param text - string representation of {@link types!Direction}
 * @returns literal of {@link types!Direction}, if valid, and `null` otherwise
 */
function directionFromString(text) {
  var result = DIRECTION_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var DIRECTION_TO_STRING = new Map([[AasTypes.Direction.Input, "input"], [AasTypes.Direction.Output, "output"]]);

/**
 * Translate {@link types!Direction} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!Direction}, if `value` valid, and `null` otherwise
 */
function directionToString(value) {
  var result = DIRECTION_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!Direction} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!Direction}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustDirectionToString(value) {
  var result = DIRECTION_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of Direction: ".concat(value));
  }
  return result;
}
var STATE_OF_EVENT_FROM_STRING = new Map([["on", AasTypes.StateOfEvent.On], ["off", AasTypes.StateOfEvent.Off]]);

/**
 * Parse `text` as a string representation of {@link types!StateOfEvent}.
 *
 * @param text - string representation of {@link types!StateOfEvent}
 * @returns literal of {@link types!StateOfEvent}, if valid, and `null` otherwise
 */
function stateOfEventFromString(text) {
  var result = STATE_OF_EVENT_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var STATE_OF_EVENT_TO_STRING = new Map([[AasTypes.StateOfEvent.On, "on"], [AasTypes.StateOfEvent.Off, "off"]]);

/**
 * Translate {@link types!StateOfEvent} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!StateOfEvent}, if `value` valid, and `null` otherwise
 */
function stateOfEventToString(value) {
  var result = STATE_OF_EVENT_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!StateOfEvent} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!StateOfEvent}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustStateOfEventToString(value) {
  var result = STATE_OF_EVENT_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of StateOfEvent: ".concat(value));
  }
  return result;
}
var REFERENCE_TYPES_FROM_STRING = new Map([["ExternalReference", AasTypes.ReferenceTypes.ExternalReference], ["ModelReference", AasTypes.ReferenceTypes.ModelReference]]);

/**
 * Parse `text` as a string representation of {@link types!ReferenceTypes}.
 *
 * @param text - string representation of {@link types!ReferenceTypes}
 * @returns literal of {@link types!ReferenceTypes}, if valid, and `null` otherwise
 */
function referenceTypesFromString(text) {
  var result = REFERENCE_TYPES_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var REFERENCE_TYPES_TO_STRING = new Map([[AasTypes.ReferenceTypes.ExternalReference, "ExternalReference"], [AasTypes.ReferenceTypes.ModelReference, "ModelReference"]]);

/**
 * Translate {@link types!ReferenceTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ReferenceTypes}, if `value` valid, and `null` otherwise
 */
function referenceTypesToString(value) {
  var result = REFERENCE_TYPES_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!ReferenceTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ReferenceTypes}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustReferenceTypesToString(value) {
  var result = REFERENCE_TYPES_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of ReferenceTypes: ".concat(value));
  }
  return result;
}
var KEY_TYPES_FROM_STRING = new Map([["AnnotatedRelationshipElement", AasTypes.KeyTypes.AnnotatedRelationshipElement], ["AssetAdministrationShell", AasTypes.KeyTypes.AssetAdministrationShell], ["BasicEventElement", AasTypes.KeyTypes.BasicEventElement], ["Blob", AasTypes.KeyTypes.Blob], ["Capability", AasTypes.KeyTypes.Capability], ["ConceptDescription", AasTypes.KeyTypes.ConceptDescription], ["DataElement", AasTypes.KeyTypes.DataElement], ["Entity", AasTypes.KeyTypes.Entity], ["EventElement", AasTypes.KeyTypes.EventElement], ["File", AasTypes.KeyTypes.File], ["FragmentReference", AasTypes.KeyTypes.FragmentReference], ["GlobalReference", AasTypes.KeyTypes.GlobalReference], ["Identifiable", AasTypes.KeyTypes.Identifiable], ["MultiLanguageProperty", AasTypes.KeyTypes.MultiLanguageProperty], ["Operation", AasTypes.KeyTypes.Operation], ["Property", AasTypes.KeyTypes.Property], ["Range", AasTypes.KeyTypes.Range], ["Referable", AasTypes.KeyTypes.Referable], ["ReferenceElement", AasTypes.KeyTypes.ReferenceElement], ["RelationshipElement", AasTypes.KeyTypes.RelationshipElement], ["Submodel", AasTypes.KeyTypes.Submodel], ["SubmodelElement", AasTypes.KeyTypes.SubmodelElement], ["SubmodelElementCollection", AasTypes.KeyTypes.SubmodelElementCollection], ["SubmodelElementList", AasTypes.KeyTypes.SubmodelElementList]]);

/**
 * Parse `text` as a string representation of {@link types!KeyTypes}.
 *
 * @param text - string representation of {@link types!KeyTypes}
 * @returns literal of {@link types!KeyTypes}, if valid, and `null` otherwise
 */
function keyTypesFromString(text) {
  var result = KEY_TYPES_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var KEY_TYPES_TO_STRING = new Map([[AasTypes.KeyTypes.AnnotatedRelationshipElement, "AnnotatedRelationshipElement"], [AasTypes.KeyTypes.AssetAdministrationShell, "AssetAdministrationShell"], [AasTypes.KeyTypes.BasicEventElement, "BasicEventElement"], [AasTypes.KeyTypes.Blob, "Blob"], [AasTypes.KeyTypes.Capability, "Capability"], [AasTypes.KeyTypes.ConceptDescription, "ConceptDescription"], [AasTypes.KeyTypes.DataElement, "DataElement"], [AasTypes.KeyTypes.Entity, "Entity"], [AasTypes.KeyTypes.EventElement, "EventElement"], [AasTypes.KeyTypes.File, "File"], [AasTypes.KeyTypes.FragmentReference, "FragmentReference"], [AasTypes.KeyTypes.GlobalReference, "GlobalReference"], [AasTypes.KeyTypes.Identifiable, "Identifiable"], [AasTypes.KeyTypes.MultiLanguageProperty, "MultiLanguageProperty"], [AasTypes.KeyTypes.Operation, "Operation"], [AasTypes.KeyTypes.Property, "Property"], [AasTypes.KeyTypes.Range, "Range"], [AasTypes.KeyTypes.Referable, "Referable"], [AasTypes.KeyTypes.ReferenceElement, "ReferenceElement"], [AasTypes.KeyTypes.RelationshipElement, "RelationshipElement"], [AasTypes.KeyTypes.Submodel, "Submodel"], [AasTypes.KeyTypes.SubmodelElement, "SubmodelElement"], [AasTypes.KeyTypes.SubmodelElementCollection, "SubmodelElementCollection"], [AasTypes.KeyTypes.SubmodelElementList, "SubmodelElementList"]]);

/**
 * Translate {@link types!KeyTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!KeyTypes}, if `value` valid, and `null` otherwise
 */
function keyTypesToString(value) {
  var result = KEY_TYPES_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!KeyTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!KeyTypes}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustKeyTypesToString(value) {
  var result = KEY_TYPES_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of KeyTypes: ".concat(value));
  }
  return result;
}
var DATA_TYPE_DEF_XSD_FROM_STRING = new Map([["xs:anyURI", AasTypes.DataTypeDefXsd.AnyUri], ["xs:base64Binary", AasTypes.DataTypeDefXsd.Base64Binary], ["xs:boolean", AasTypes.DataTypeDefXsd.Boolean], ["xs:byte", AasTypes.DataTypeDefXsd.Byte], ["xs:date", AasTypes.DataTypeDefXsd.Date], ["xs:dateTime", AasTypes.DataTypeDefXsd.DateTime], ["xs:decimal", AasTypes.DataTypeDefXsd.Decimal], ["xs:double", AasTypes.DataTypeDefXsd.Double], ["xs:duration", AasTypes.DataTypeDefXsd.Duration], ["xs:float", AasTypes.DataTypeDefXsd.Float], ["xs:gDay", AasTypes.DataTypeDefXsd.GDay], ["xs:gMonth", AasTypes.DataTypeDefXsd.GMonth], ["xs:gMonthDay", AasTypes.DataTypeDefXsd.GMonthDay], ["xs:gYear", AasTypes.DataTypeDefXsd.GYear], ["xs:gYearMonth", AasTypes.DataTypeDefXsd.GYearMonth], ["xs:hexBinary", AasTypes.DataTypeDefXsd.HexBinary], ["xs:int", AasTypes.DataTypeDefXsd.Int], ["xs:integer", AasTypes.DataTypeDefXsd.Integer], ["xs:long", AasTypes.DataTypeDefXsd.Long], ["xs:negativeInteger", AasTypes.DataTypeDefXsd.NegativeInteger], ["xs:nonNegativeInteger", AasTypes.DataTypeDefXsd.NonNegativeInteger], ["xs:nonPositiveInteger", AasTypes.DataTypeDefXsd.NonPositiveInteger], ["xs:positiveInteger", AasTypes.DataTypeDefXsd.PositiveInteger], ["xs:short", AasTypes.DataTypeDefXsd.Short], ["xs:string", AasTypes.DataTypeDefXsd.String], ["xs:time", AasTypes.DataTypeDefXsd.Time], ["xs:unsignedByte", AasTypes.DataTypeDefXsd.UnsignedByte], ["xs:unsignedInt", AasTypes.DataTypeDefXsd.UnsignedInt], ["xs:unsignedLong", AasTypes.DataTypeDefXsd.UnsignedLong], ["xs:unsignedShort", AasTypes.DataTypeDefXsd.UnsignedShort]]);

/**
 * Parse `text` as a string representation of {@link types!DataTypeDefXsd}.
 *
 * @param text - string representation of {@link types!DataTypeDefXsd}
 * @returns literal of {@link types!DataTypeDefXsd}, if valid, and `null` otherwise
 */
function dataTypeDefXsdFromString(text) {
  var result = DATA_TYPE_DEF_XSD_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var DATA_TYPE_DEF_XSD_TO_STRING = new Map([[AasTypes.DataTypeDefXsd.AnyUri, "xs:anyURI"], [AasTypes.DataTypeDefXsd.Base64Binary, "xs:base64Binary"], [AasTypes.DataTypeDefXsd.Boolean, "xs:boolean"], [AasTypes.DataTypeDefXsd.Byte, "xs:byte"], [AasTypes.DataTypeDefXsd.Date, "xs:date"], [AasTypes.DataTypeDefXsd.DateTime, "xs:dateTime"], [AasTypes.DataTypeDefXsd.Decimal, "xs:decimal"], [AasTypes.DataTypeDefXsd.Double, "xs:double"], [AasTypes.DataTypeDefXsd.Duration, "xs:duration"], [AasTypes.DataTypeDefXsd.Float, "xs:float"], [AasTypes.DataTypeDefXsd.GDay, "xs:gDay"], [AasTypes.DataTypeDefXsd.GMonth, "xs:gMonth"], [AasTypes.DataTypeDefXsd.GMonthDay, "xs:gMonthDay"], [AasTypes.DataTypeDefXsd.GYear, "xs:gYear"], [AasTypes.DataTypeDefXsd.GYearMonth, "xs:gYearMonth"], [AasTypes.DataTypeDefXsd.HexBinary, "xs:hexBinary"], [AasTypes.DataTypeDefXsd.Int, "xs:int"], [AasTypes.DataTypeDefXsd.Integer, "xs:integer"], [AasTypes.DataTypeDefXsd.Long, "xs:long"], [AasTypes.DataTypeDefXsd.NegativeInteger, "xs:negativeInteger"], [AasTypes.DataTypeDefXsd.NonNegativeInteger, "xs:nonNegativeInteger"], [AasTypes.DataTypeDefXsd.NonPositiveInteger, "xs:nonPositiveInteger"], [AasTypes.DataTypeDefXsd.PositiveInteger, "xs:positiveInteger"], [AasTypes.DataTypeDefXsd.Short, "xs:short"], [AasTypes.DataTypeDefXsd.String, "xs:string"], [AasTypes.DataTypeDefXsd.Time, "xs:time"], [AasTypes.DataTypeDefXsd.UnsignedByte, "xs:unsignedByte"], [AasTypes.DataTypeDefXsd.UnsignedInt, "xs:unsignedInt"], [AasTypes.DataTypeDefXsd.UnsignedLong, "xs:unsignedLong"], [AasTypes.DataTypeDefXsd.UnsignedShort, "xs:unsignedShort"]]);

/**
 * Translate {@link types!DataTypeDefXsd} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeDefXsd}, if `value` valid, and `null` otherwise
 */
function dataTypeDefXsdToString(value) {
  var result = DATA_TYPE_DEF_XSD_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!DataTypeDefXsd} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeDefXsd}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustDataTypeDefXsdToString(value) {
  var result = DATA_TYPE_DEF_XSD_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of DataTypeDefXsd: ".concat(value));
  }
  return result;
}
var DATA_TYPE_IEC_61360_FROM_STRING = new Map([["DATE", AasTypes.DataTypeIec61360.Date], ["STRING", AasTypes.DataTypeIec61360.String], ["STRING_TRANSLATABLE", AasTypes.DataTypeIec61360.StringTranslatable], ["INTEGER_MEASURE", AasTypes.DataTypeIec61360.IntegerMeasure], ["INTEGER_COUNT", AasTypes.DataTypeIec61360.IntegerCount], ["INTEGER_CURRENCY", AasTypes.DataTypeIec61360.IntegerCurrency], ["REAL_MEASURE", AasTypes.DataTypeIec61360.RealMeasure], ["REAL_COUNT", AasTypes.DataTypeIec61360.RealCount], ["REAL_CURRENCY", AasTypes.DataTypeIec61360.RealCurrency], ["BOOLEAN", AasTypes.DataTypeIec61360.Boolean], ["IRI", AasTypes.DataTypeIec61360.Iri], ["IRDI", AasTypes.DataTypeIec61360.Irdi], ["RATIONAL", AasTypes.DataTypeIec61360.Rational], ["RATIONAL_MEASURE", AasTypes.DataTypeIec61360.RationalMeasure], ["TIME", AasTypes.DataTypeIec61360.Time], ["TIMESTAMP", AasTypes.DataTypeIec61360.Timestamp], ["FILE", AasTypes.DataTypeIec61360.File], ["HTML", AasTypes.DataTypeIec61360.Html], ["BLOB", AasTypes.DataTypeIec61360.Blob]]);

/**
 * Parse `text` as a string representation of {@link types!DataTypeIec61360}.
 *
 * @param text - string representation of {@link types!DataTypeIec61360}
 * @returns literal of {@link types!DataTypeIec61360}, if valid, and `null` otherwise
 */
function dataTypeIec61360FromString(text) {
  var result = DATA_TYPE_IEC_61360_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var DATA_TYPE_IEC_61360_TO_STRING = new Map([[AasTypes.DataTypeIec61360.Date, "DATE"], [AasTypes.DataTypeIec61360.String, "STRING"], [AasTypes.DataTypeIec61360.StringTranslatable, "STRING_TRANSLATABLE"], [AasTypes.DataTypeIec61360.IntegerMeasure, "INTEGER_MEASURE"], [AasTypes.DataTypeIec61360.IntegerCount, "INTEGER_COUNT"], [AasTypes.DataTypeIec61360.IntegerCurrency, "INTEGER_CURRENCY"], [AasTypes.DataTypeIec61360.RealMeasure, "REAL_MEASURE"], [AasTypes.DataTypeIec61360.RealCount, "REAL_COUNT"], [AasTypes.DataTypeIec61360.RealCurrency, "REAL_CURRENCY"], [AasTypes.DataTypeIec61360.Boolean, "BOOLEAN"], [AasTypes.DataTypeIec61360.Iri, "IRI"], [AasTypes.DataTypeIec61360.Irdi, "IRDI"], [AasTypes.DataTypeIec61360.Rational, "RATIONAL"], [AasTypes.DataTypeIec61360.RationalMeasure, "RATIONAL_MEASURE"], [AasTypes.DataTypeIec61360.Time, "TIME"], [AasTypes.DataTypeIec61360.Timestamp, "TIMESTAMP"], [AasTypes.DataTypeIec61360.File, "FILE"], [AasTypes.DataTypeIec61360.Html, "HTML"], [AasTypes.DataTypeIec61360.Blob, "BLOB"]]);

/**
 * Translate {@link types!DataTypeIec61360} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeIec61360}, if `value` valid, and `null` otherwise
 */
function dataTypeIec61360ToString(value) {
  var result = DATA_TYPE_IEC_61360_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!DataTypeIec61360} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeIec61360}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustDataTypeIec61360ToString(value) {
  var result = DATA_TYPE_IEC_61360_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of DataTypeIec61360: ".concat(value));
  }
  return result;
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
//# sourceMappingURL=stringification.js.map