"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Either = void 0;
exports.at = at;
exports.base64Decode = base64Decode;
exports.base64Encode = base64Encode;
exports.every = every;
exports.map = map;
exports.range = range;
exports.some = some;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
var _marked = /*#__PURE__*/_regeneratorRuntime().mark(range),
  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(map);
/**
 * Provide common functions shared among the modules.
 */

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

/**
 * Create an iterator over the given range of numbers.
 *
 * @param start - inclusive start of the range
 * @param end - exclusive end of the range
 * @returns iterator over the range
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function range(start, end) {
  var i;
  return _regeneratorRuntime().wrap(function range$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        i = start;
      case 1:
        if (!(i < end)) {
          _context.next = 7;
          break;
        }
        _context.next = 4;
        return i;
      case 4:
        i++;
        _context.next = 1;
        break;
      case 7:
      case "end":
        return _context.stop();
    }
  }, _marked);
}

/**
 * Retrieve the `index`-th item from the `array`.
 *
 * @remarks
 * This is a fill for `Array.prototype.at`.
 * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at
 *
 * @param array - to get the element from
 * @param index - zero-based index of the `array`. Negative index counts back.
 * @returns item, or `undefined` if `index` out-of-bound
 * @typeParam T - type of the array items
 */
function at(array, index) {
  if (index < 0) {
    return array[array.length + index];
  } else {
    return array[index];
  }
}

/**
 * Check that all the values of the iterable are `true`.
 *
 * @param iterable - to iterate over
 * @returns `true` if all values in `iterable` are set
 */
function every(iterable) {
  // NOTE (mristin, 2022-11-24):
  // We introduce this function so that we can keep the constraint verification
  // purely functional. Unfortunately, `every` and `some` are only available
  // in arrays and not in `IterableIterator`.
  var _iterator = _createForOfIteratorHelper(iterable),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _item = _step.value;
      if (!_item) {
        return false;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return true;
}

/**
 * Check that at least one value of the iterable is `true`.
 *
 * @param iterable - to iterate over
 * @returns `true` if at least one value in `iterable` is set
 */
function some(iterable) {
  // NOTE (mristin, 2022-11-24):
  // We introduce this function so that we can keep the constraint verification
  // purely functional. Unfortunately, `every` and `some` are only available
  // in arrays and not in `IterableIterator`.
  var _iterator2 = _createForOfIteratorHelper(iterable),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _item2 = _step2.value;
      if (_item2) {
        return true;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return false;
}

/**
 * Map the items of an iterable.
 *
 * @param iterable - to be mapped
 * @param mappingFunction - to be applied on `iterable`
 * @returns mapped items of `iterable`
 * @typeParam S - type of an item of the `iterable`
 * @typeParam T - type of the transformed item of the `iterable`
 */
function map(iterable, mappingFunction) {
  var _iterator3, _step3, _item3;
  return _regeneratorRuntime().wrap(function map$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        // NOTE (mristin, 2022-11-24):
        // We introduce this function so that we can keep the constraint verification
        // purely functional.
        _iterator3 = _createForOfIteratorHelper(iterable);
        _context2.prev = 1;
        _iterator3.s();
      case 3:
        if ((_step3 = _iterator3.n()).done) {
          _context2.next = 9;
          break;
        }
        _item3 = _step3.value;
        _context2.next = 7;
        return mappingFunction(_item3);
      case 7:
        _context2.next = 3;
        break;
      case 9:
        _context2.next = 14;
        break;
      case 11:
        _context2.prev = 11;
        _context2.t0 = _context2["catch"](1);
        _iterator3.e(_context2.t0);
      case 14:
        _context2.prev = 14;
        _iterator3.f();
        return _context2.finish(14);
      case 17:
      case "end":
        return _context2.stop();
    }
  }, _marked2, null, [[1, 11, 14, 17]]);
}

/**
 * Represent either a result, or an error.
 *
 * @typeParam ValueT - type of the resulting value
 * @typeParam ErrorT - type of the error
 */
var Either = /*#__PURE__*/function () {
  function Either(value, error) {
    _classCallCheck(this, Either);
    if (value === null && error === null) {
      throw new Error("Unexpected both value and error null in an Either");
    }
    if (value !== null && error !== null) {
      throw new Error("Unexpected both value and error non-null in an Either");
    }
    this.value = value;
    this.error = error;
  }
  _createClass(Either, [{
    key: "mustValue",
    value:
    /**
     * value if something successful
     */

    /**
     * error if something failed
     */

    /**
     * Assert that value is set and return it.
     *
     * @returns {@link value}, or throw if `null`
     */
    function mustValue() {
      if (this.value === null) {
        throw new Error("Expected value to be set, but it was null");
      }
      return this.value;
    }
  }]);
  return Either;
}();
exports.Either = Either;
var BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var BASE64_LOOKUP = new Uint8Array(256);

// NOTE (mristin, 2022-11-25):
// Initialize to 255 so that we can detect invalid values in the input during decoding.
for (var i = 0; i < BASE64_LOOKUP.length; i++) {
  BASE64_LOOKUP[i] = 255;
}

// NOTE (mristin, 2022-11-25):
// Initialize valid values to the corresponding decoding points.
for (var _i = 0; _i < BASE64_CHARS.length; _i++) {
  BASE64_LOOKUP[BASE64_CHARS.charCodeAt(_i)] = _i;
}

/**
 * Encode a byte array in base64.
 *
 * @remarks
 * We provide our own implementation so that we do not run into compatibility
 * issues with node.js, different browsers etc.
 * See:
 * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer
 *
 * @param bytes - to be encoded
 * @returns `bytes` encoded as base64 text
 */
function base64Encode(bytes) {
  // NOTE (mristin, 2022-11-25):
  // This implementation is vaguely based on:
  // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js,
  // https://github.com/niklasvh/base64-arraybuffer/blob/master/src/index.ts and
  // https://github.com/beatgammit/base64-js/blob/master/index.js.

  // NOTE (mristin, 2022-11-25):
  // We assume that string concatenation is actually *faster* than joining an array
  // of strings, see:
  // https://stackoverflow.com/questions/51185/are-javascript-strings-immutable-do-i-need-a-string-builder-in-javascript

  if (bytes.length === 0) {
    return "";
  }
  var encoded = "";
  var len = bytes.length;
  for (var _i2 = 0; _i2 < len; _i2 += 3) {
    encoded += BASE64_CHARS[bytes[_i2] >> 2];
    encoded += BASE64_CHARS[(bytes[_i2] & 3) << 4 | bytes[_i2 + 1] >> 4];
    encoded += BASE64_CHARS[(bytes[_i2 + 1] & 15) << 2 | bytes[_i2 + 2] >> 6];
    encoded += BASE64_CHARS[bytes[_i2 + 2] & 63];
  }

  // NOTE (mristin, 2022-11-25):
  // We assume here that `substring` will be optimized for cases where we do not keep
  // the original reference to the string. We tested a bit with
  // https://www.measurethat.net/.

  if (len % 3 === 2) {
    encoded = encoded.substring(0, encoded.length - 1) + "=";
  } else if (len % 3 === 1) {
    encoded = encoded.substring(0, encoded.length - 2) + "==";
  } else {
    // No padding is necessary.
  }
  return encoded;
}

/**
 * Decode a base64-encoded byte array.
 *
 * @remarks
 * We provide our own implementation so that we do not run into compatibility
 * issues with node.js, different browsers etc.
 * See:
 * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer
 *
 * @param text - to be decoded
 * @returns either the array or an error, if `text` is not a valid base64 encoding
 */
function base64Decode(text) {
  // NOTE (mristin, 2022-11-25):
  // This implementation is vaguely based on:
  // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js,
  // https://github.com/niklasvh/base64-arraybuffer/blob/master/src/index.ts and
  // https://github.com/beatgammit/base64-js/blob/master/index.js.

  var len = text.length;
  var lenWoPad = len;

  // NOTE (mristin, 2022-11-25):
  // Some implementations forget the padding, so we try to be robust and check
  // for the padding manually.
  var bytesLength = text.length * 0.75;
  if (text[len - 1] === "=") {
    bytesLength--;
    lenWoPad--;
    if (text[len - 2] === "=") {
      bytesLength--;
      lenWoPad--;
    }
  }
  var bytes = new Uint8Array(bytesLength);
  var base64LookupLen = BASE64_LOOKUP.length;
  var pointer = 0;
  for (var _i3 = 0; _i3 < len; _i3 += 4) {
    // NOTE (mristin, 2022-11-25):
    // Admittedly, this is very verbose code, but we want to be efficient, so we
    // opted for performance over readability here.

    var charCode0 = text.charCodeAt(_i3);
    if (charCode0 >= base64LookupLen) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3, ": ").concat(text[_i3], " (code: ").concat(charCode0, ")"));
    }
    var encoded0 = BASE64_LOOKUP[charCode0];
    if (encoded0 === 255) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3, ": ").concat(text[_i3], " (code: ").concat(charCode0, ")"));
    }
    var charCode1 = text.charCodeAt(_i3 + 1);
    if (charCode1 >= base64LookupLen) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 1, ": ").concat(text[_i3 + 1], " (code: ").concat(charCode1, ")"));
    }
    var encoded1 = BASE64_LOOKUP[charCode1];
    if (encoded1 === 255) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 1, ": ").concat(text[_i3 + 1], " (code: ").concat(charCode1, ")"));
    }

    // We map padding to 65, which is the value of "A".
    var charCode2 = _i3 + 2 < lenWoPad ? text.charCodeAt(_i3 + 2) : 65;
    if (charCode2 >= base64LookupLen) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 2, ": ").concat(text[_i3 + 2], " (code: ").concat(charCode2, ")"));
    }
    var encoded2 = BASE64_LOOKUP[charCode2];
    if (encoded2 === 255) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 2, ": ").concat(text[_i3 + 2], " (code: ").concat(charCode2, ")"));
    }

    // We map padding to 65, which is the value of "A".
    var charCode3 = _i3 + 3 < lenWoPad ? text.charCodeAt(_i3 + 3) : 65;
    if (charCode3 >= base64LookupLen) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 3, ": ").concat(text[_i3 + 3], " (code: ").concat(charCode3, ")"));
    }
    var encoded3 = BASE64_LOOKUP[charCode3];
    if (encoded3 === 255) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 3, ": ").concat(text[_i3 + 3], " (code: ").concat(charCode3, ")"));
    }
    bytes[pointer] = encoded0 << 2 | encoded1 >> 4;
    pointer++;
    bytes[pointer] = (encoded1 & 15) << 4 | encoded2 >> 2;
    pointer++;
    bytes[pointer] = (encoded2 & 3) << 6 | encoded3 & 63;
    pointer++;
  }

  // NOTE (mristin, 2022-12-02):
  // We expect Uint8Array to silently ignore writes outside of the buffer,
  // but we still want to check here in case the underlying platform was flaky about it.
  if (bytes.length !== bytesLength) {
    throw new Error("Expected bytes to have length ".concat(bytesLength, ", but got ").concat(bytes.length));
  }
  return new Either(bytes, null);
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
//# sourceMappingURL=common.js.map