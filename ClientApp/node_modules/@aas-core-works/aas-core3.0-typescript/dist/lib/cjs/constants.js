"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VALID_CATEGORIES_FOR_DATA_ELEMENT = exports.IEC_61360_DATA_TYPES_WITH_UNIT = exports.GLOBALLY_IDENTIFIABLES = exports.GENERIC_GLOBALLY_IDENTIFIABLES = exports.GENERIC_FRAGMENT_KEYS = exports.FRAGMENT_KEYS = exports.DATA_TYPE_IEC_61360_FOR_REFERENCE = exports.DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE = exports.DATA_TYPE_IEC_61360_FOR_DOCUMENT = exports.AAS_SUBMODEL_ELEMENTS_AS_KEYS = exports.AAS_REFERABLE_NON_IDENTIFIABLES = exports.AAS_REFERABLES = exports.AAS_IDENTIFIABLES = void 0;
var AasTypes = _interopRequireWildcard(require("./types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Provide constant values of the meta-model.
 */

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

/* eslint-disable @typescript-eslint/no-unused-vars */

/**
 * Categories for {@link types!IDataElement} as defined in Constraint AASd-090
 */
var VALID_CATEGORIES_FOR_DATA_ELEMENT = new Set(["CONSTANT", "PARAMETER", "VARIABLE"]);

/**
 * Enumeration of all identifiable elements within an asset administration shell.
 */
exports.VALID_CATEGORIES_FOR_DATA_ELEMENT = VALID_CATEGORIES_FOR_DATA_ELEMENT;
var GENERIC_FRAGMENT_KEYS = new Set([AasTypes.KeyTypes.FragmentReference]);

/**
 * Enumeration of different key value types within a key.
 */
exports.GENERIC_FRAGMENT_KEYS = GENERIC_FRAGMENT_KEYS;
var GENERIC_GLOBALLY_IDENTIFIABLES = new Set([AasTypes.KeyTypes.GlobalReference]);

/**
 * Enumeration of different key value types within a key.
 */
exports.GENERIC_GLOBALLY_IDENTIFIABLES = GENERIC_GLOBALLY_IDENTIFIABLES;
var AAS_IDENTIFIABLES = new Set([AasTypes.KeyTypes.AssetAdministrationShell, AasTypes.KeyTypes.ConceptDescription, AasTypes.KeyTypes.Identifiable, AasTypes.KeyTypes.Submodel]);

/**
 * Enumeration of all submodel elements within an asset administration shell.
 */
exports.AAS_IDENTIFIABLES = AAS_IDENTIFIABLES;
var AAS_SUBMODEL_ELEMENTS_AS_KEYS = new Set([AasTypes.KeyTypes.AnnotatedRelationshipElement, AasTypes.KeyTypes.BasicEventElement, AasTypes.KeyTypes.Blob, AasTypes.KeyTypes.Capability, AasTypes.KeyTypes.DataElement, AasTypes.KeyTypes.Entity, AasTypes.KeyTypes.EventElement, AasTypes.KeyTypes.File, AasTypes.KeyTypes.MultiLanguageProperty, AasTypes.KeyTypes.Operation, AasTypes.KeyTypes.Property, AasTypes.KeyTypes.Range, AasTypes.KeyTypes.ReferenceElement, AasTypes.KeyTypes.RelationshipElement, AasTypes.KeyTypes.SubmodelElement, AasTypes.KeyTypes.SubmodelElementCollection, AasTypes.KeyTypes.SubmodelElementList]);

/**
 * Enumeration of different fragment key value types within a key.
 */
exports.AAS_SUBMODEL_ELEMENTS_AS_KEYS = AAS_SUBMODEL_ELEMENTS_AS_KEYS;
var AAS_REFERABLE_NON_IDENTIFIABLES = new Set([AasTypes.KeyTypes.AnnotatedRelationshipElement, AasTypes.KeyTypes.BasicEventElement, AasTypes.KeyTypes.Blob, AasTypes.KeyTypes.Capability, AasTypes.KeyTypes.DataElement, AasTypes.KeyTypes.Entity, AasTypes.KeyTypes.EventElement, AasTypes.KeyTypes.File, AasTypes.KeyTypes.MultiLanguageProperty, AasTypes.KeyTypes.Operation, AasTypes.KeyTypes.Property, AasTypes.KeyTypes.Range, AasTypes.KeyTypes.ReferenceElement, AasTypes.KeyTypes.RelationshipElement, AasTypes.KeyTypes.SubmodelElement, AasTypes.KeyTypes.SubmodelElementCollection, AasTypes.KeyTypes.SubmodelElementList]);

/**
 * Enumeration of referables. We need this to check that model references refer to a Referable. For example, the observed attribute of the Basic Event Element object must be a model reference to a Referable.
 */
exports.AAS_REFERABLE_NON_IDENTIFIABLES = AAS_REFERABLE_NON_IDENTIFIABLES;
var AAS_REFERABLES = new Set([AasTypes.KeyTypes.AssetAdministrationShell, AasTypes.KeyTypes.ConceptDescription, AasTypes.KeyTypes.Identifiable, AasTypes.KeyTypes.Submodel, AasTypes.KeyTypes.AnnotatedRelationshipElement, AasTypes.KeyTypes.BasicEventElement, AasTypes.KeyTypes.Blob, AasTypes.KeyTypes.Capability, AasTypes.KeyTypes.DataElement, AasTypes.KeyTypes.Entity, AasTypes.KeyTypes.EventElement, AasTypes.KeyTypes.File, AasTypes.KeyTypes.MultiLanguageProperty, AasTypes.KeyTypes.Operation, AasTypes.KeyTypes.Property, AasTypes.KeyTypes.Range, AasTypes.KeyTypes.ReferenceElement, AasTypes.KeyTypes.Referable, AasTypes.KeyTypes.RelationshipElement, AasTypes.KeyTypes.SubmodelElement, AasTypes.KeyTypes.SubmodelElementCollection, AasTypes.KeyTypes.SubmodelElementList]);

/**
 * Enumeration of all referable elements within an asset administration shell
 */
exports.AAS_REFERABLES = AAS_REFERABLES;
var GLOBALLY_IDENTIFIABLES = new Set([AasTypes.KeyTypes.GlobalReference, AasTypes.KeyTypes.AssetAdministrationShell, AasTypes.KeyTypes.ConceptDescription, AasTypes.KeyTypes.Identifiable, AasTypes.KeyTypes.Submodel]);

/**
 * Enumeration of different key value types within a key.
 */
exports.GLOBALLY_IDENTIFIABLES = GLOBALLY_IDENTIFIABLES;
var FRAGMENT_KEYS = new Set([AasTypes.KeyTypes.AnnotatedRelationshipElement, AasTypes.KeyTypes.BasicEventElement, AasTypes.KeyTypes.Blob, AasTypes.KeyTypes.Capability, AasTypes.KeyTypes.DataElement, AasTypes.KeyTypes.Entity, AasTypes.KeyTypes.EventElement, AasTypes.KeyTypes.File, AasTypes.KeyTypes.FragmentReference, AasTypes.KeyTypes.MultiLanguageProperty, AasTypes.KeyTypes.Operation, AasTypes.KeyTypes.Property, AasTypes.KeyTypes.Range, AasTypes.KeyTypes.ReferenceElement, AasTypes.KeyTypes.RelationshipElement, AasTypes.KeyTypes.SubmodelElement, AasTypes.KeyTypes.SubmodelElementCollection, AasTypes.KeyTypes.SubmodelElementList]);

/**
 * IEC 61360 data types for concept descriptions categorized with PROPERTY or VALUE.
 */
exports.FRAGMENT_KEYS = FRAGMENT_KEYS;
var DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE = new Set([AasTypes.DataTypeIec61360.Date, AasTypes.DataTypeIec61360.String, AasTypes.DataTypeIec61360.StringTranslatable, AasTypes.DataTypeIec61360.IntegerMeasure, AasTypes.DataTypeIec61360.IntegerCount, AasTypes.DataTypeIec61360.IntegerCurrency, AasTypes.DataTypeIec61360.RealMeasure, AasTypes.DataTypeIec61360.RealCount, AasTypes.DataTypeIec61360.RealCurrency, AasTypes.DataTypeIec61360.Boolean, AasTypes.DataTypeIec61360.Rational, AasTypes.DataTypeIec61360.RationalMeasure, AasTypes.DataTypeIec61360.Time, AasTypes.DataTypeIec61360.Timestamp]);

/**
 * IEC 61360 data types for concept descriptions categorized with REFERENCE.
 */
exports.DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE = DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE;
var DATA_TYPE_IEC_61360_FOR_REFERENCE = new Set([AasTypes.DataTypeIec61360.String, AasTypes.DataTypeIec61360.Iri, AasTypes.DataTypeIec61360.Irdi]);

/**
 * IEC 61360 data types for concept descriptions categorized with DOCUMENT.
 */
exports.DATA_TYPE_IEC_61360_FOR_REFERENCE = DATA_TYPE_IEC_61360_FOR_REFERENCE;
var DATA_TYPE_IEC_61360_FOR_DOCUMENT = new Set([AasTypes.DataTypeIec61360.File, AasTypes.DataTypeIec61360.Blob, AasTypes.DataTypeIec61360.Html]);

/**
 * These data types imply that the unit is defined in the data specification.
 */
exports.DATA_TYPE_IEC_61360_FOR_DOCUMENT = DATA_TYPE_IEC_61360_FOR_DOCUMENT;
var IEC_61360_DATA_TYPES_WITH_UNIT = new Set([AasTypes.DataTypeIec61360.IntegerMeasure, AasTypes.DataTypeIec61360.RealMeasure, AasTypes.DataTypeIec61360.RationalMeasure, AasTypes.DataTypeIec61360.IntegerCurrency, AasTypes.DataTypeIec61360.RealCurrency]);

/* eslint-enable @typescript-eslint/no-unused-vars */

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
exports.IEC_61360_DATA_TYPES_WITH_UNIT = IEC_61360_DATA_TYPES_WITH_UNIT;
//# sourceMappingURL=constants.js.map