"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VerificationError = exports.PropertySegment = exports.Path = exports.IndexSegment = void 0;
exports.dataSpecificationIec61360sForDocumentHaveAppropriateDataType = dataSpecificationIec61360sForDocumentHaveAppropriateDataType;
exports.dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType = dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType;
exports.dataSpecificationIec61360sForReferenceHaveAppropriateDataType = dataSpecificationIec61360sForReferenceHaveAppropriateDataType;
exports.dataSpecificationIec61360sHaveDataType = dataSpecificationIec61360sHaveDataType;
exports.dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish = dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish;
exports.dataSpecificationIec61360sHaveValue = dataSpecificationIec61360sHaveValue;
exports.extensionNamesAreUnique = extensionNamesAreUnique;
exports.idShortsAreUnique = idShortsAreUnique;
exports.idShortsOfVariablesAreUnique = idShortsOfVariablesAreUnique;
exports.isBcp47ForEnglish = isBcp47ForEnglish;
exports.isLeapYear = isLeapYear;
exports.isModelReferenceTo = isModelReferenceTo;
exports.isModelReferenceToReferable = isModelReferenceToReferable;
exports.isXsByte = isXsByte;
exports.isXsDate = isXsDate;
exports.isXsDateTime = isXsDateTime;
exports.isXsDateTimeUtc = isXsDateTimeUtc;
exports.isXsDouble = isXsDouble;
exports.isXsFloat = isXsFloat;
exports.isXsGMonthDay = isXsGMonthDay;
exports.isXsInt = isXsInt;
exports.isXsLong = isXsLong;
exports.isXsShort = isXsShort;
exports.isXsUnsignedByte = isXsUnsignedByte;
exports.isXsUnsignedInt = isXsUnsignedInt;
exports.isXsUnsignedLong = isXsUnsignedLong;
exports.isXsUnsignedShort = isXsUnsignedShort;
exports.langStringsHaveUniqueLanguages = langStringsHaveUniqueLanguages;
exports.matchesBcp47 = matchesBcp47;
exports.matchesIdShort = matchesIdShort;
exports.matchesMimeType = matchesMimeType;
exports.matchesRevisionType = matchesRevisionType;
exports.matchesRfc8089Path = matchesRfc8089Path;
exports.matchesVersionType = matchesVersionType;
exports.matchesXmlSerializableString = matchesXmlSerializableString;
exports.matchesXsAnyUri = matchesXsAnyUri;
exports.matchesXsBase64Binary = matchesXsBase64Binary;
exports.matchesXsBoolean = matchesXsBoolean;
exports.matchesXsByte = matchesXsByte;
exports.matchesXsDate = matchesXsDate;
exports.matchesXsDateTime = matchesXsDateTime;
exports.matchesXsDateTimeUtc = matchesXsDateTimeUtc;
exports.matchesXsDecimal = matchesXsDecimal;
exports.matchesXsDouble = matchesXsDouble;
exports.matchesXsDuration = matchesXsDuration;
exports.matchesXsFloat = matchesXsFloat;
exports.matchesXsGDay = matchesXsGDay;
exports.matchesXsGMonth = matchesXsGMonth;
exports.matchesXsGMonthDay = matchesXsGMonthDay;
exports.matchesXsGYear = matchesXsGYear;
exports.matchesXsGYearMonth = matchesXsGYearMonth;
exports.matchesXsHexBinary = matchesXsHexBinary;
exports.matchesXsInt = matchesXsInt;
exports.matchesXsInteger = matchesXsInteger;
exports.matchesXsLong = matchesXsLong;
exports.matchesXsNegativeInteger = matchesXsNegativeInteger;
exports.matchesXsNonNegativeInteger = matchesXsNonNegativeInteger;
exports.matchesXsNonPositiveInteger = matchesXsNonPositiveInteger;
exports.matchesXsPositiveInteger = matchesXsPositiveInteger;
exports.matchesXsShort = matchesXsShort;
exports.matchesXsString = matchesXsString;
exports.matchesXsTime = matchesXsTime;
exports.matchesXsUnsignedByte = matchesXsUnsignedByte;
exports.matchesXsUnsignedInt = matchesXsUnsignedInt;
exports.matchesXsUnsignedLong = matchesXsUnsignedLong;
exports.matchesXsUnsignedShort = matchesXsUnsignedShort;
exports.propertiesOrRangesHaveValueType = propertiesOrRangesHaveValueType;
exports.qualifierTypesAreUnique = qualifierTypesAreUnique;
exports.referenceKeyValuesEqual = referenceKeyValuesEqual;
exports.submodelElementIsOfType = submodelElementIsOfType;
exports.submodelElementsHaveIdenticalSemanticIds = submodelElementsHaveIdenticalSemanticIds;
exports.valueConsistentWithXsdType = valueConsistentWithXsdType;
exports.verify = verify;
exports.verifyBcp47LanguageTag = verifyBcp47LanguageTag;
exports.verifyBlobType = verifyBlobType;
exports.verifyContentType = verifyContentType;
exports.verifyDateTimeUtc = verifyDateTimeUtc;
exports.verifyDuration = verifyDuration;
exports.verifyIdShortType = verifyIdShortType;
exports.verifyIdentifier = verifyIdentifier;
exports.verifyLabelType = verifyLabelType;
exports.verifyMessageTopicType = verifyMessageTopicType;
exports.verifyNameType = verifyNameType;
exports.verifyNonEmptyXmlSerializableString = verifyNonEmptyXmlSerializableString;
exports.verifyPathType = verifyPathType;
exports.verifyQualifierType = verifyQualifierType;
exports.verifyRevisionType = verifyRevisionType;
exports.verifyValueDataType = verifyValueDataType;
exports.verifyValueTypeIec61360 = verifyValueTypeIec61360;
exports.verifyVersionType = verifyVersionType;
var AasCommon = _interopRequireWildcard(require("./common"));
var AasConstants = _interopRequireWildcard(require("./constants"));
var AasTypes = _interopRequireWildcard(require("./types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _marked = /*#__PURE__*/_regeneratorRuntime().mark(verifyNonEmptyXmlSerializableString),
  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(verifyDateTimeUtc),
  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(verifyDuration),
  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(verifyBlobType),
  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(verifyIdentifier),
  _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(verifyValueTypeIec61360),
  _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(verifyNameType),
  _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(verifyVersionType),
  _marked9 = /*#__PURE__*/_regeneratorRuntime().mark(verifyRevisionType),
  _marked10 = /*#__PURE__*/_regeneratorRuntime().mark(verifyLabelType),
  _marked11 = /*#__PURE__*/_regeneratorRuntime().mark(verifyMessageTopicType),
  _marked12 = /*#__PURE__*/_regeneratorRuntime().mark(verifyBcp47LanguageTag),
  _marked13 = /*#__PURE__*/_regeneratorRuntime().mark(verifyContentType),
  _marked14 = /*#__PURE__*/_regeneratorRuntime().mark(verifyPathType),
  _marked15 = /*#__PURE__*/_regeneratorRuntime().mark(verifyQualifierType),
  _marked16 = /*#__PURE__*/_regeneratorRuntime().mark(verifyValueDataType),
  _marked17 = /*#__PURE__*/_regeneratorRuntime().mark(verifyIdShortType);
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// The generated code might contain deliberately double negations. For example,
// when the constraint is formulated as a NAND and we check that the constraint
// is not fulfilled. Therefore, we disable this linting rule.
/* eslint no-extra-boolean-cast: 0 */
/**
 * Represent a property access on a path to an erroneous value.
 */
var PropertySegment = /*#__PURE__*/function () {
  /**
   * Instance containing the property
   */

  /**
   * Name of the property
   */

  function PropertySegment(instance, name) {
    _classCallCheck(this, PropertySegment);
    this.instance = instance;
    this.name = name;
  }
  _createClass(PropertySegment, [{
    key: "toString",
    value: function toString() {
      return ".".concat(this.name);
    }
  }]);
  return PropertySegment;
}();
/**
 * Represent an index access on a path to an erroneous value.
 */
exports.PropertySegment = PropertySegment;
var IndexSegment = /*#__PURE__*/function () {
  /**
   * Sequence containing the item at {@link index}
   */

  /**
   * Index of the item in the {@link sequence}
   */

  function IndexSegment(sequence, index) {
    _classCallCheck(this, IndexSegment);
    this.sequence = sequence;
    this.index = index;
  }
  _createClass(IndexSegment, [{
    key: "toString",
    value: function toString() {
      return "[".concat(this.index, "]");
    }
  }]);
  return IndexSegment;
}();
exports.IndexSegment = IndexSegment;
/**
 * Represent the relative path to the erroneous value.
 */
var Path = /*#__PURE__*/function () {
  function Path() {
    _classCallCheck(this, Path);
    _defineProperty(this, "segments", []);
  }
  _createClass(Path, [{
    key: "prepend",
    value: function prepend(segment) {
      this.segments.unshift(segment);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.segments.join("");
    }
  }]);
  return Path;
}();
/**
 * Represent a verification error in the data.
 */
exports.Path = Path;
var VerificationError = /*#__PURE__*/_createClass(
// NOTE (mristin, 2022-11-12):
// The name `VerificationError` is redundant since it lives in `verification` module,
// and it would have made more sense to call it simply `Error`. Unfortunately in this case,
// `Error` is a reserved name by JavaScript.

/**
 * Human-readable description of the error
 */

/**
 * Path to the erroneous value
 */

/**
 * Initialize with the given `message` and `path`.
 *
 * @remarks
 * If no `path` is specified, initialize with an empty path.
 */
function VerificationError(message) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  _classCallCheck(this, VerificationError);
  _defineProperty(this, "path", new Path());
  this.message = message;
  this.path = path !== null ? path : new Path();
});
exports.VerificationError = VerificationError;
function constructMatchesIdShort() {
  var pattern = "^[a-zA-Z][a-zA-Z0-9_]*$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_ID_SHORT = constructMatchesIdShort();

/**
 * Check that `text` is a valid short ID.
 */
function matchesIdShort(text) {
  return REGEXP_MATCHES_ID_SHORT.test(text);
}
function constructMatchesVersionType() {
  var pattern = "^(0|[1-9][0-9]*)$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_VERSION_TYPE = constructMatchesVersionType();

/**
 * Check that `text` is a valid version string.
 */
function matchesVersionType(text) {
  return REGEXP_MATCHES_VERSION_TYPE.test(text);
}
function constructMatchesRevisionType() {
  var pattern = "^(0|[1-9][0-9]*)$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_REVISION_TYPE = constructMatchesRevisionType();

/**
 * Check that `text` is a valid revision string.
 */
function matchesRevisionType(text) {
  return REGEXP_MATCHES_REVISION_TYPE.test(text);
}
function constructMatchesXsDateTimeUtc() {
  var digit = "[0-9]";
  var yearFrag = "-?(([1-9]".concat(digit).concat(digit).concat(digit, "+)|(0").concat(digit).concat(digit).concat(digit, "))");
  var monthFrag = "((0[1-9])|(1[0-2]))";
  var dayFrag = "((0[1-9])|([12]".concat(digit, ")|(3[01]))");
  var hourFrag = "(([01]".concat(digit, ")|(2[0-3]))");
  var minuteFrag = "[0-5]".concat(digit);
  var secondFrag = "([0-5]".concat(digit, ")(\\.").concat(digit, "+)?");
  var endOfDayFrag = "24:00:00(\\.0+)?";
  var timezoneFrag = "(Z|\\+00:00|-00:00)";
  var dateTimeLexicalRep = "".concat(yearFrag, "-").concat(monthFrag, "-").concat(dayFrag, "T((").concat(hourFrag, ":").concat(minuteFrag, ":").concat(secondFrag, ")|").concat(endOfDayFrag, ")").concat(timezoneFrag);
  var pattern = "^".concat(dateTimeLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DATE_TIME_UTC = constructMatchesXsDateTimeUtc();

/**
 * Check that `text` conforms to the pattern of an `xs:dateTime`.
 *
 * @remarks
 *
 * The time zone must be fixed to UTC. We verify only that the `text` matches
 * a pre-defined pattern. We *do not* verify that the day of month is
 * correct nor do we check for leap seconds.
 *
 * See: https://www.w3.org/TR/xmlschema-2/#dateTime
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDateTimeUtc(text) {
  return REGEXP_MATCHES_XS_DATE_TIME_UTC.test(text);
}

/**
 * Check that `value` is a valid `xs:dateTime` with
 * the time zone set to UTC.
 *
 * @param value - to be checked
 * @returns `true` if `value` is a valid `xs:dateTime` with the UTC time zone
 */
function isXsDateTimeUtc(value) {
  if (!matchesXsDateTimeUtc(value)) {
    return false;
  }
  var date = value.split("T", 1)[0];
  return isXsDate(date);
}
function constructMatchesMimeType() {
  var tchar = "[!#$%&'*+\\-.^_`|~0-9a-zA-Z]";
  var token = "(".concat(tchar, ")+");
  var type = "".concat(token);
  var subtype = "".concat(token);
  var ows = "[ \\t]*";
  var obsText = "[\\u{80}-\\u{ff}]";
  var qdText = "([\\t !#-\\[\\]-~]|".concat(obsText, ")");
  var quotedPair = "\\\\([\\t !-~]|".concat(obsText, ")");
  var quotedString = "\"(".concat(qdText, "|").concat(quotedPair, ")*\"");
  var parameter = "".concat(token, "=(").concat(token, "|").concat(quotedString, ")");
  var mediaType = "^".concat(type, "/").concat(subtype, "(").concat(ows, ";").concat(ows).concat(parameter, ")*$");
  return new RegExp(mediaType, "u");
}
var REGEXP_MATCHES_MIME_TYPE = constructMatchesMimeType();

/**
 * Check that `text` conforms to the pattern of MIME type.
 *
 * @remarks
 *
 * The definition has been taken from:
 * https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.1,
 * https://www.rfc-editor.org/rfc/rfc7230#section-3.2.3 and
 * https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6.
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesMimeType(text) {
  return REGEXP_MATCHES_MIME_TYPE.test(text);
}
function constructMatchesRfc8089Path() {
  var h16 = "[0-9A-Fa-f]{1,4}";
  var decOctet = "([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])";
  var ipv4address = "".concat(decOctet, "\\.").concat(decOctet, "\\.").concat(decOctet, "\\.").concat(decOctet);
  var ls32 = "(".concat(h16, ":").concat(h16, "|").concat(ipv4address, ")");
  var ipv6address = "((".concat(h16, ":){6}").concat(ls32, "|::(").concat(h16, ":){5}").concat(ls32, "|(").concat(h16, ")?::(").concat(h16, ":){4}").concat(ls32, "|((").concat(h16, ":)?").concat(h16, ")?::(").concat(h16, ":){3}").concat(ls32, "|((").concat(h16, ":){2}").concat(h16, ")?::(").concat(h16, ":){2}").concat(ls32, "|((").concat(h16, ":){3}").concat(h16, ")?::").concat(h16, ":").concat(ls32, "|((").concat(h16, ":){4}").concat(h16, ")?::").concat(ls32, "|((").concat(h16, ":){5}").concat(h16, ")?::").concat(h16, "|((").concat(h16, ":){6}").concat(h16, ")?::)");
  var unreserved = "[a-zA-Z0-9\\-._~]";
  var subDelims = "[!$&'()*+,;=]";
  var ipvfuture = "[vV][0-9A-Fa-f]+\\.(".concat(unreserved, "|").concat(subDelims, "|:)+");
  var ipLiteral = "\\[(".concat(ipv6address, "|").concat(ipvfuture, ")\\]");
  var pctEncoded = "%[0-9A-Fa-f][0-9A-Fa-f]";
  var regName = "(".concat(unreserved, "|").concat(pctEncoded, "|").concat(subDelims, ")*");
  var host = "(".concat(ipLiteral, "|").concat(ipv4address, "|").concat(regName, ")");
  var fileAuth = "(localhost|".concat(host, ")");
  var pchar = "(".concat(unreserved, "|").concat(pctEncoded, "|").concat(subDelims, "|[:@])");
  var segmentNz = "(".concat(pchar, ")+");
  var segment = "(".concat(pchar, ")*");
  var pathAbsolute = "/(".concat(segmentNz, "(/").concat(segment, ")*)?");
  var authPath = "(".concat(fileAuth, ")?").concat(pathAbsolute);
  var localPath = "".concat(pathAbsolute);
  var fileHierPart = "(//".concat(authPath, "|").concat(localPath, ")");
  var fileScheme = "file";
  var fileUri = "".concat(fileScheme, ":").concat(fileHierPart);
  var pattern = "^".concat(fileUri, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_RFC_8089_PATH = constructMatchesRfc8089Path();

/**
 * Check that `text` is a path conforming to the pattern of RFC 8089.
 *
 * @remarks
 *
 * The definition has been taken from:
 * https://datatracker.ietf.org/doc/html/rfc8089
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesRfc8089Path(text) {
  return REGEXP_MATCHES_RFC_8089_PATH.test(text);
}
function constructMatchesBcp47() {
  var alphanum = "[a-zA-Z0-9]";
  var singleton = "[0-9A-WY-Za-wy-z]";
  var extension = "".concat(singleton, "(-(").concat(alphanum, "){2,8})+");
  var extlang = "[a-zA-Z]{3}(-[a-zA-Z]{3}){2}";
  var irregular = "(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)";
  var regular = "(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)";
  var grandfathered = "(".concat(irregular, "|").concat(regular, ")");
  var language = "([a-zA-Z]{2,3}(-".concat(extlang, ")?|[a-zA-Z]{4}|[a-zA-Z]{5,8})");
  var script = "[a-zA-Z]{4}";
  var region = "([a-zA-Z]{2}|[0-9]{3})";
  var variant = "((".concat(alphanum, "){5,8}|[0-9](").concat(alphanum, "){3})");
  var privateuse = "[xX](-(".concat(alphanum, "){1,8})+");
  var langtag = "".concat(language, "(-").concat(script, ")?(-").concat(region, ")?(-").concat(variant, ")*(-").concat(extension, ")*(-").concat(privateuse, ")?");
  var languageTag = "(".concat(langtag, "|").concat(privateuse, "|").concat(grandfathered, ")");
  var pattern = "^".concat(languageTag, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_BCP_47 = constructMatchesBcp47();

/**
 * Check that `text` is a valid BCP 47 language tag.
 *
 * @remarks
 *
 * See: https://en.wikipedia.org/wiki/IETF_language_tag
 */
function matchesBcp47(text) {
  return REGEXP_MATCHES_BCP_47.test(text);
}

/**
 * Check that `langStrings` are specified each for a unique
 * language.
 *
 * @param langStrings - to be verified
 * @returns `true` if the check passes
 */
function langStringsHaveUniqueLanguages(langStrings) {
  var languageSet = new Set();
  var _iterator = _createForOfIteratorHelper(langStrings),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var langString = _step.value;
      if (languageSet.has(langString.language)) {
        return false;
      }
      languageSet.add(langString.language);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return true;
}

/**
 * Check that there are no duplication {@link types.Qualifier.type}'s
 * in the `qualifiers`.
 *
 * @param qualifiers - to be verified
 * @returns `true` if the check passes
 */
function qualifierTypesAreUnique(qualifiers) {
  var typeSet = new Set();
  var _iterator2 = _createForOfIteratorHelper(qualifiers),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var qualifier = _step2.value;
      if (typeSet.has(qualifier.type)) {
        return false;
      }
      typeSet.add(qualifier.type);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return true;
}
function constructMatchesXmlSerializableString() {
  var pattern = "^[\\u{9}\\u{a}\\u{d}\\u{20}-\\u{d7ff}\\u{e000}-\\u{fffd}\\u{10000}-\\u{10ffff}]*$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XML_SERIALIZABLE_STRING = constructMatchesXmlSerializableString();

/**
 * Check that `text` conforms to the pattern of the Constraint AASd-130.
 *
 * @remarks
 *
 * Ensures that encoding is possible and interoperability between different
 * serializations is possible.
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXmlSerializableString(text) {
  return REGEXP_MATCHES_XML_SERIALIZABLE_STRING.test(text);
}
function constructMatchesXsAnyUri() {
  var scheme = "[a-zA-Z][a-zA-Z0-9+\\-.]*";
  var ucschar = "[\\u{a0}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{ffef}\\u{10000}-\\u{1fffd}\\u{20000}-\\u{2fffd}\\u{30000}-\\u{3fffd}\\u{40000}-\\u{4fffd}\\u{50000}-\\u{5fffd}\\u{60000}-\\u{6fffd}\\u{70000}-\\u{7fffd}\\u{80000}-\\u{8fffd}\\u{90000}-\\u{9fffd}\\u{a0000}-\\u{afffd}\\u{b0000}-\\u{bfffd}\\u{c0000}-\\u{cfffd}\\u{d0000}-\\u{dfffd}\\u{e1000}-\\u{efffd}]";
  var iunreserved = "([a-zA-Z0-9\\-._~]|".concat(ucschar, ")");
  var pctEncoded = "%[0-9A-Fa-f][0-9A-Fa-f]";
  var subDelims = "[!$&'()*+,;=]";
  var iuserinfo = "(".concat(iunreserved, "|").concat(pctEncoded, "|").concat(subDelims, "|:)*");
  var h16 = "[0-9A-Fa-f]{1,4}";
  var decOctet = "([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])";
  var ipv4address = "".concat(decOctet, "\\.").concat(decOctet, "\\.").concat(decOctet, "\\.").concat(decOctet);
  var ls32 = "(".concat(h16, ":").concat(h16, "|").concat(ipv4address, ")");
  var ipv6address = "((".concat(h16, ":){6}").concat(ls32, "|::(").concat(h16, ":){5}").concat(ls32, "|(").concat(h16, ")?::(").concat(h16, ":){4}").concat(ls32, "|((").concat(h16, ":)?").concat(h16, ")?::(").concat(h16, ":){3}").concat(ls32, "|((").concat(h16, ":){2}").concat(h16, ")?::(").concat(h16, ":){2}").concat(ls32, "|((").concat(h16, ":){3}").concat(h16, ")?::").concat(h16, ":").concat(ls32, "|((").concat(h16, ":){4}").concat(h16, ")?::").concat(ls32, "|((").concat(h16, ":){5}").concat(h16, ")?::").concat(h16, "|((").concat(h16, ":){6}").concat(h16, ")?::)");
  var unreserved = "[a-zA-Z0-9\\-._~]";
  var ipvfuture = "[vV][0-9A-Fa-f]+\\.(".concat(unreserved, "|").concat(subDelims, "|:)+");
  var ipLiteral = "\\[(".concat(ipv6address, "|").concat(ipvfuture, ")\\]");
  var iregName = "(".concat(iunreserved, "|").concat(pctEncoded, "|").concat(subDelims, ")*");
  var ihost = "(".concat(ipLiteral, "|").concat(ipv4address, "|").concat(iregName, ")");
  var port = "[0-9]*";
  var iauthority = "(".concat(iuserinfo, "@)?").concat(ihost, "(:").concat(port, ")?");
  var ipchar = "(".concat(iunreserved, "|").concat(pctEncoded, "|").concat(subDelims, "|[:@])");
  var isegment = "(".concat(ipchar, ")*");
  var ipathAbempty = "(/".concat(isegment, ")*");
  var isegmentNz = "(".concat(ipchar, ")+");
  var ipathAbsolute = "/(".concat(isegmentNz, "(/").concat(isegment, ")*)?");
  var ipathRootless = "".concat(isegmentNz, "(/").concat(isegment, ")*");
  var ipathEmpty = "(".concat(ipchar, "){0}");
  var ihierPart = "(//".concat(iauthority).concat(ipathAbempty, "|").concat(ipathAbsolute, "|").concat(ipathRootless, "|").concat(ipathEmpty, ")");
  var iprivate = "[\\u{e000}-\\u{f8ff}\\u{f0000}-\\u{ffffd}\\u{100000}-\\u{10fffd}]";
  var iquery = "(".concat(ipchar, "|").concat(iprivate, "|[/?])*");
  var ifragment = "(".concat(ipchar, "|[/?])*");
  var isegmentNzNc = "(".concat(iunreserved, "|").concat(pctEncoded, "|").concat(subDelims, "|@)+");
  var ipathNoscheme = "".concat(isegmentNzNc, "(/").concat(isegment, ")*");
  var irelativePart = "(//".concat(iauthority).concat(ipathAbempty, "|").concat(ipathAbsolute, "|").concat(ipathNoscheme, "|").concat(ipathEmpty, ")");
  var irelativeRef = "".concat(irelativePart, "(\\?").concat(iquery, ")?(#").concat(ifragment, ")?");
  var iri = "".concat(scheme, ":").concat(ihierPart, "(\\?").concat(iquery, ")?(#").concat(ifragment, ")?");
  var iriReference = "(".concat(iri, "|").concat(irelativeRef, ")");
  var pattern = "^".concat(iriReference, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_ANY_URI = constructMatchesXsAnyUri();

/**
 * Check that `text` conforms to the pattern of an `xs:anyURI`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#anyURI and
 * https://datatracker.ietf.org/doc/html/rfc3987
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsAnyUri(text) {
  return REGEXP_MATCHES_XS_ANY_URI.test(text);
}
function constructMatchesXsBase64Binary() {
  var b04Char = "[AQgw]";
  var b04 = "".concat(b04Char, "\\u{20}?");
  var b16Char = "[AEIMQUYcgkosw048]";
  var b16 = "".concat(b16Char, "\\u{20}?");
  var b64Char = "[A-Za-z0-9+/]";
  var b64 = "".concat(b64Char, "\\u{20}?");
  var b64quad = "(".concat(b64).concat(b64).concat(b64).concat(b64, ")");
  var b64FinalQuad = "(".concat(b64).concat(b64).concat(b64).concat(b64Char, ")");
  var padded8 = "".concat(b64).concat(b04, "= ?=");
  var padded16 = "".concat(b64).concat(b64).concat(b16, "=");
  var b64final = "(".concat(b64FinalQuad, "|").concat(padded16, "|").concat(padded8, ")");
  var base64Binary = "(".concat(b64quad, "*").concat(b64final, ")?");
  var pattern = "^".concat(base64Binary, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_BASE_64_BINARY = constructMatchesXsBase64Binary();

/**
 * Check that `text` conforms to the pattern of an `xs:base64Binary`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#base64Binary
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsBase64Binary(text) {
  return REGEXP_MATCHES_XS_BASE_64_BINARY.test(text);
}
function constructMatchesXsBoolean() {
  var pattern = "^(true|false|1|0)$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_BOOLEAN = constructMatchesXsBoolean();

/**
 * Check that `text` conforms to the pattern of an `xs:boolean`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#boolean
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsBoolean(text) {
  return REGEXP_MATCHES_XS_BOOLEAN.test(text);
}
function constructMatchesXsDate() {
  var digit = "[0-9]";
  var yearFrag = "-?(([1-9]".concat(digit).concat(digit).concat(digit, "+)|(0").concat(digit).concat(digit).concat(digit, "))");
  var monthFrag = "((0[1-9])|(1[0-2]))";
  var dayFrag = "((0[1-9])|([12]".concat(digit, ")|(3[01]))");
  var minuteFrag = "[0-5]".concat(digit);
  var timezoneFrag = "(Z|(\\+|-)(0".concat(digit, "|1[0-3]):").concat(minuteFrag, "|14:00)");
  var dateLexicalRep = "".concat(yearFrag, "-").concat(monthFrag, "-").concat(dayFrag).concat(timezoneFrag, "?");
  var pattern = "^".concat(dateLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DATE = constructMatchesXsDate();

/**
 * Check that `text` conforms to the pattern of an `xs:date`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#date
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDate(text) {
  return REGEXP_MATCHES_XS_DATE.test(text);
}
function constructMatchesXsDateTime() {
  var digit = "[0-9]";
  var yearFrag = "-?(([1-9]".concat(digit).concat(digit).concat(digit, "+)|(0").concat(digit).concat(digit).concat(digit, "))");
  var monthFrag = "((0[1-9])|(1[0-2]))";
  var dayFrag = "((0[1-9])|([12]".concat(digit, ")|(3[01]))");
  var hourFrag = "(([01]".concat(digit, ")|(2[0-3]))");
  var minuteFrag = "[0-5]".concat(digit);
  var secondFrag = "([0-5]".concat(digit, ")(\\.").concat(digit, "+)?");
  var endOfDayFrag = "24:00:00(\\.0+)?";
  var timezoneFrag = "(Z|(\\+|-)(0".concat(digit, "|1[0-3]):").concat(minuteFrag, "|14:00)");
  var dateTimeLexicalRep = "".concat(yearFrag, "-").concat(monthFrag, "-").concat(dayFrag, "T((").concat(hourFrag, ":").concat(minuteFrag, ":").concat(secondFrag, ")|").concat(endOfDayFrag, ")").concat(timezoneFrag, "?");
  var pattern = "^".concat(dateTimeLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DATE_TIME = constructMatchesXsDateTime();

/**
 * Check that `text` conforms to the pattern of an `xs:dateTime`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#dateTime
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDateTime(text) {
  return REGEXP_MATCHES_XS_DATE_TIME.test(text);
}

/**
 * Check that `value` is a valid `xs:dateTime`.
 *
 * @remarks
 * Year 1 BCE is the last leap BCE year.
 * See https://www.w3.org/TR/xmlschema-2/#dateTime.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:dateTime`
 */
function isXsDateTime(value) {
  // NOTE (mristin, 2022-11-23):
  // We can not use date functions from the standard library as it does not
  // handle years BCE (*e.g.*, `-0003-01-02`).

  if (!matchesXsDateTime(value)) {
    return false;
  }
  var date = value.split("T", 1)[0];
  return isXsDate(date);
}
function constructMatchesXsDecimal() {
  var digit = "[0-9]";
  var unsignedNoDecimalPtNumeral = "".concat(digit, "+");
  var noDecimalPtNumeral = "(\\+|-)?".concat(unsignedNoDecimalPtNumeral);
  var fracFrag = "".concat(digit, "+");
  var unsignedDecimalPtNumeral = "(".concat(unsignedNoDecimalPtNumeral, "\\.").concat(fracFrag, "|\\.").concat(fracFrag, ")");
  var decimalPtNumeral = "(\\+|-)?".concat(unsignedDecimalPtNumeral);
  var decimalLexicalRep = "(".concat(decimalPtNumeral, "|").concat(noDecimalPtNumeral, ")");
  var pattern = "^".concat(decimalLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DECIMAL = constructMatchesXsDecimal();

/**
 * Check that `text` conforms to the pattern of an `xs:decimal`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#decimal
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDecimal(text) {
  return REGEXP_MATCHES_XS_DECIMAL.test(text);
}
function constructMatchesXsDouble() {
  var doubleRep = "((\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|-?INF|NaN)";
  var pattern = "^".concat(doubleRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DOUBLE = constructMatchesXsDouble();

/**
 * Check that `text` conforms to the pattern of an `xs:double`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#double
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDouble(text) {
  return REGEXP_MATCHES_XS_DOUBLE.test(text);
}
function constructMatchesXsDuration() {
  var durationRep = "-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))";
  var pattern = "^".concat(durationRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DURATION = constructMatchesXsDuration();

/**
 * Check that `text` conforms to the pattern of an `xs:duration`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#duration
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDuration(text) {
  return REGEXP_MATCHES_XS_DURATION.test(text);
}
function constructMatchesXsFloat() {
  var floatRep = "((\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|-?INF|NaN)";
  var pattern = "^".concat(floatRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_FLOAT = constructMatchesXsFloat();

/**
 * Check that `text` conforms to the pattern of an `xs:float`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#float
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsFloat(text) {
  return REGEXP_MATCHES_XS_FLOAT.test(text);
}
function constructMatchesXsGDay() {
  var gDayLexicalRep = "---(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gDayLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_DAY = constructMatchesXsGDay();

/**
 * Check that `text` conforms to the pattern of an `xs:gDay`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gDay
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGDay(text) {
  return REGEXP_MATCHES_XS_G_DAY.test(text);
}
function constructMatchesXsGMonth() {
  var gMonthLexicalRep = "--(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gMonthLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_MONTH = constructMatchesXsGMonth();

/**
 * Check that `text` conforms to the pattern of an `xs:gMonth`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gMonth
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGMonth(text) {
  return REGEXP_MATCHES_XS_G_MONTH.test(text);
}
function constructMatchesXsGMonthDay() {
  var gMonthDayRep = "--(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gMonthDayRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_MONTH_DAY = constructMatchesXsGMonthDay();

/**
 * Check that `text` conforms to the pattern of an `xs:gMonthDay`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gMonthDay
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGMonthDay(text) {
  return REGEXP_MATCHES_XS_G_MONTH_DAY.test(text);
}
function constructMatchesXsGYear() {
  var gYearRep = "-?([1-9][0-9]{3,}|0[0-9]{3})(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gYearRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_YEAR = constructMatchesXsGYear();

/**
 * Check that `text` conforms to the pattern of an `xs:gYear`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gYear
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGYear(text) {
  return REGEXP_MATCHES_XS_G_YEAR.test(text);
}
function constructMatchesXsGYearMonth() {
  var gYearMonthRep = "-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gYearMonthRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_YEAR_MONTH = constructMatchesXsGYearMonth();

/**
 * Check that `text` conforms to the pattern of an `xs:gYearMonth`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gYearMonth
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGYearMonth(text) {
  return REGEXP_MATCHES_XS_G_YEAR_MONTH.test(text);
}
function constructMatchesXsHexBinary() {
  var hexBinary = "([0-9a-fA-F]{2})*";
  var pattern = "^".concat(hexBinary, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_HEX_BINARY = constructMatchesXsHexBinary();

/**
 * Check that `text` conforms to the pattern of an `xs:hexBinary`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#hexBinary
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsHexBinary(text) {
  return REGEXP_MATCHES_XS_HEX_BINARY.test(text);
}
function constructMatchesXsTime() {
  var timeRep = "(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(timeRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_TIME = constructMatchesXsTime();

/**
 * Check that `text` conforms to the pattern of an `xs:time`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#time
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsTime(text) {
  return REGEXP_MATCHES_XS_TIME.test(text);
}
function constructMatchesXsInteger() {
  var integerRep = "[-+]?[0-9]+";
  var pattern = "^".concat(integerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_INTEGER = constructMatchesXsInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:integer`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#integer
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsInteger(text) {
  return REGEXP_MATCHES_XS_INTEGER.test(text);
}
function constructMatchesXsLong() {
  var longRep = "[-+]?0*[0-9]{1,20}";
  var pattern = "^".concat(longRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_LONG = constructMatchesXsLong();

/**
 * Check that `text` conforms to the pattern of an `xs:long`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#long
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsLong(text) {
  return REGEXP_MATCHES_XS_LONG.test(text);
}
function constructMatchesXsInt() {
  var intRep = "[-+]?0*[0-9]{1,10}";
  var pattern = "^".concat(intRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_INT = constructMatchesXsInt();

/**
 * Check that `text` conforms to the pattern of an `xs:int`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#int
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsInt(text) {
  return REGEXP_MATCHES_XS_INT.test(text);
}
function constructMatchesXsShort() {
  var shortRep = "[-+]?0*[0-9]{1,5}";
  var pattern = "^".concat(shortRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_SHORT = constructMatchesXsShort();

/**
 * Check that `text` conforms to the pattern of an `xs:short`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#short
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsShort(text) {
  return REGEXP_MATCHES_XS_SHORT.test(text);
}
function constructMatchesXsByte() {
  var byteRep = "[-+]?0*[0-9]{1,3}";
  var pattern = "^".concat(byteRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_BYTE = constructMatchesXsByte();

/**
 * Check that `text` conforms to the pattern of an `xs:byte`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#byte
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsByte(text) {
  return REGEXP_MATCHES_XS_BYTE.test(text);
}
function constructMatchesXsNonNegativeInteger() {
  var nonNegativeIntegerRep = "(-0|\\+?[0-9]+)";
  var pattern = "^".concat(nonNegativeIntegerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_NON_NEGATIVE_INTEGER = constructMatchesXsNonNegativeInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:nonNegativeInteger`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#nonNegativeInteger
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsNonNegativeInteger(text) {
  return REGEXP_MATCHES_XS_NON_NEGATIVE_INTEGER.test(text);
}
function constructMatchesXsPositiveInteger() {
  var positiveIntegerRep = "\\+?0*[1-9][0-9]*";
  var pattern = "^".concat(positiveIntegerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_POSITIVE_INTEGER = constructMatchesXsPositiveInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:positiveInteger`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#positiveInteger
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsPositiveInteger(text) {
  return REGEXP_MATCHES_XS_POSITIVE_INTEGER.test(text);
}
function constructMatchesXsUnsignedLong() {
  var unsignedLongRep = "(-0|\\+?0*[0-9]{1,20})";
  var pattern = "^".concat(unsignedLongRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_UNSIGNED_LONG = constructMatchesXsUnsignedLong();

/**
 * Check that `text` conforms to the pattern of an `xs:unsignedLong`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#unsignedLong
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsUnsignedLong(text) {
  return REGEXP_MATCHES_XS_UNSIGNED_LONG.test(text);
}
function constructMatchesXsUnsignedInt() {
  var unsignedIntRep = "(-0|\\+?0*[0-9]{1,10})";
  var pattern = "^".concat(unsignedIntRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_UNSIGNED_INT = constructMatchesXsUnsignedInt();

/**
 * Check that `text` conforms to the pattern of an `xs:unsignedInt`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#unsignedInt
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsUnsignedInt(text) {
  return REGEXP_MATCHES_XS_UNSIGNED_INT.test(text);
}
function constructMatchesXsUnsignedShort() {
  var unsignedShortRep = "(-0|\\+?0*[0-9]{1,5})";
  var pattern = "^".concat(unsignedShortRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_UNSIGNED_SHORT = constructMatchesXsUnsignedShort();

/**
 * Check that `text` conforms to the pattern of an `xs:unsignedShort`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#unsignedShort
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsUnsignedShort(text) {
  return REGEXP_MATCHES_XS_UNSIGNED_SHORT.test(text);
}
function constructMatchesXsUnsignedByte() {
  var unsignedByteRep = "(-0|\\+?0*[0-9]{1,3})";
  var pattern = "^".concat(unsignedByteRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_UNSIGNED_BYTE = constructMatchesXsUnsignedByte();

/**
 * Check that `text` conforms to the pattern of an `xs:unsignedByte`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#unsignedByte
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsUnsignedByte(text) {
  return REGEXP_MATCHES_XS_UNSIGNED_BYTE.test(text);
}
function constructMatchesXsNonPositiveInteger() {
  var nonPositiveIntegerRep = "(\\+0|0|-[0-9]+)";
  var pattern = "^".concat(nonPositiveIntegerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_NON_POSITIVE_INTEGER = constructMatchesXsNonPositiveInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:nonPositiveInteger`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#nonPositiveInteger
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsNonPositiveInteger(text) {
  return REGEXP_MATCHES_XS_NON_POSITIVE_INTEGER.test(text);
}
function constructMatchesXsNegativeInteger() {
  var negativeIntegerRep = "(-0*[1-9][0-9]*)";
  var pattern = "^".concat(negativeIntegerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_NEGATIVE_INTEGER = constructMatchesXsNegativeInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:negativeInteger`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#negativeInteger
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsNegativeInteger(text) {
  return REGEXP_MATCHES_XS_NEGATIVE_INTEGER.test(text);
}
function constructMatchesXsString() {
  var pattern = "^[\\u{9}\\u{a}\\u{d}\\u{20}-\\u{d7ff}\\u{e000}-\\u{fffd}\\u{10000}-\\u{10ffff}]*$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_STRING = constructMatchesXsString();

/**
 * Check that `text` conforms to the pattern of an `xs:string`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#string
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsString(text) {
  return REGEXP_MATCHES_XS_STRING.test(text);
}

/**
 * Check if `year` is a leap year.
 *
 * @remarks
 * Year 1 BCE is the last leap BCE year.
 * See https://www.w3.org/TR/xmlschema-2/#dateTime.
 *
 * @param year - to be checked
 * @returns `true` if `year` is a leap year.
 */
function isLeapYear(year) {
  // We consider the years B.C. to be one-off.
  //
  // See the note at: https://www.w3.org/TR/xmlschema-2///dateTime:
  // "'-0001' is the lexical representation of the year 1 Before Common Era
  // (1 BCE, sometimes written "1 BC")."
  //
  // Hence, -1 year in XML is 1 BCE, which is 0 year in astronomical years.
  if (year < 0) {
    year = -year - 1;
  }

  // See: https://en.wikipedia.org/wiki/Leap_year#Algorithm
  if (year % 4 > 0) {
    return false;
  }
  if (year % 100 > 0) {
    return true;
  }
  if (year % 400 > 0) {
    return false;
  }
  return true;
}
var DAYS_IN_MONTH = new Map([[1, 31],
// Please use isLeapYear if you need to check
// whether a concrete February has 28 or 29 days.
[2, 29], [3, 31], [4, 30], [5, 31], [6, 30], [7, 31], [8, 31], [9, 30], [10, 31], [11, 30], [12, 31]]);
var DATE_PREFIX_RE = new RegExp("^(-?[0-9]+)-([0-9]{2})-([0-9]{2})");

/**
 * Check that `value` is a valid `xs:date`.
 *
 * @remarks
 * Year 1 BCE is the last leap BCE year.
 * See https://www.w3.org/TR/xmlschema-2/#dateTime.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:date`
 */
function isXsDate(value) {
  // NOTE (mristin, 2022-11-23):
  // We can not use date functions from the standard library as it does not
  // handle years BCE (*e.g.*, `-0003-01-02`).

  if (!matchesXsDate(value)) {
    return false;
  }

  // NOTE (mristin, 2022-11-23):
  // We need to match the prefix as zone offsets are allowed in the dates. Optimally,
  // we would re-use the pattern matching from `matchesXsDate`, but this
  // would make the code generation and constraint inference for schemas much more
  // difficult. Hence, we sacrifice the efficiency a bit for the clearer code & code
  // generation.

  var match = DATE_PREFIX_RE.exec(value);
  var year = parseInt(match[1], 10);
  var month = parseInt(match[2], 10);
  var day = parseInt(match[3], 10);

  // We do not accept year zero,
  // see the note at: https://www.w3.org/TR/xmlschema-2/#dateTime
  if (year === 0) {
    return false;
  }
  if (day <= 0) {
    return false;
  }
  if (month <= 0 || month >= 13) {
    return false;
  }
  var maxDays = month === 2 ? isLeapYear(year) ? 29 : 28 : DAYS_IN_MONTH.get(month);
  if (day > maxDays) {
    return false;
  }
  return true;
}

/**
 * Check that `value` is a valid `xs:double`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:double`
 */
function isXsDouble(value) {
  // NOTE (mristin, 2022-11-23):
  // We need to check explicitly for the regular expression since
  // `parseFloat` expects `Infinity`  instead of `INF`.
  if (!matchesXsDouble(value)) {
    return false;
  }
  if (value !== "INF" && value !== "-INF" && value !== "NaN") {
    // NOTE (mristin, 2022-11-23):
    // Check that the value is not too big to be represented as a double-precision
    // floating point number.
    //
    // For example, `parseFloat("1e400")` gives `Infinity`.
    var converted = parseFloat(value);
    if (!isFinite(converted)) {
      return false;
    }
  }
  return true;
}

/**
 * Check that `value` is a valid `xs:float`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:float`
 */
function isXsFloat(value) {
  // NOTE (mristin, 2022-11-23):
  // We need to check explicitly for the regular expression since
  // `parseFloat` expects `Infinity`  instead of `INF`.
  if (!matchesXsFloat(value)) {
    return false;
  }
  if (value !== "INF" && value !== "-INF" && value !== "NaN") {
    // NOTE (mristin, 2022-11-23):
    // Check that the value is not too big to be represented as a double-precision
    // floating point number.
    //
    // For example, `parseFloat("1e400")` gives `Infinity`.
    var converted = parseFloat(value);
    if (!isFinite(converted)) {
      return false;
    }

    // NOTE (mristin, 2022-11-23):
    // TypeScript represents numbers as 64-bit floating point numbers. While there
    // is no easy way to deal with the precision, as precision is silently
    // gutted during the parsing, we can still check if the number is too large
    // to fit in a 32-bit float.
    var rounded = Math.fround(converted);
    if (!isFinite(rounded)) {
      return false;
    }
  }
  return true;
}

/**
 * Check that `value` is a valid `xs:gMonthDay`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:gMonthDay`
 */
function isXsGMonthDay(value) {
  if (!matchesXsGMonthDay(value)) {
    return false;
  }
  var month = parseInt(value.substring(2, 4), 10);
  var day = parseInt(value.substring(5, 7), 10);
  var maxDays = DAYS_IN_MONTH.get(month);
  return day <= maxDays;
}
var LONG_RE = new RegExp("^([-+])?0*([0-9]{1,20})$");
var SMALLEST_LONG_WITHOUT_SIGN_AS_STRING = "9223372036854775808";
var LARGEST_LONG_AS_STRING = "9223372036854775807";

/**
 * Check that `value` is a valid `xs:long`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:long`
 */
function isXsLong(value) {
  // NOTE (mristin, 2022-11-23):
  // We need to operate on the value as string since TypeScript represents numbers as
  // 64-bit floating-point numbers which can not capture 64-bit integers.

  var match = value.match(LONG_RE);
  if (!match) {
    return false;
  }
  var numberPart = match[2];
  var limit = match[1] === "-" ? SMALLEST_LONG_WITHOUT_SIGN_AS_STRING : LARGEST_LONG_AS_STRING;
  if (numberPart.length < limit.length) {
    return true;
  }
  if (numberPart.length > limit.length) {
    return false;
  }
  for (var i = numberPart.length - 1; i >= 0; i--) {
    var thisDigit = numberPart.charCodeAt(i);
    var limitDigit = limit.charCodeAt(i);
    if (thisDigit > limitDigit) {
      return false;
    } else if (thisDigit < limitDigit) {
      return true;
    } else {
      // Pass, we have to compare against the next digit from the left.
    }
  }

  // The number is exactly the limit.
  return true;
}

/**
 * Check that `value` is a valid `xs:int`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:int`
 */
function isXsInt(value) {
  if (!matchesXsInt(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return -2147483648 <= converted && converted <= 2147483647;
}

/**
 * Check that `value` is a valid `xs:short`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:short`
 */
function isXsShort(value) {
  if (!matchesXsShort(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return -32768 <= converted && converted <= 32767;
}

/**
 * Check that `value` is a valid `xs:byte`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:byte`
 */
function isXsByte(value) {
  if (!matchesXsByte(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return -128 <= converted && converted <= 127;
}
var UNSIGNED_LONG_RE = new RegExp("^(-0|\\+?0*([0-9]{1,20}))$");
var LARGEST_UNSIGNED_LONG_AS_STRING = "18446744073709551615";

/**
 * Check that `value` is a valid `xs:unsignedLong`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:unsignedLong`
 */
function isXsUnsignedLong(value) {
  // NOTE (mristin, 2022-11-23):
  // We need to operate on the value as string since TypeScript represents numbers as
  // 64-bit floating-point numbers which can not capture 64-bit integers.

  var match = value.match(UNSIGNED_LONG_RE);
  if (!match) {
    return false;
  }
  var numberPart = match[2];
  if (numberPart.length < LARGEST_UNSIGNED_LONG_AS_STRING.length) {
    return true;
  }
  if (numberPart.length > LARGEST_UNSIGNED_LONG_AS_STRING.length) {
    return false;
  }
  for (var i = numberPart.length - 1; i >= 0; i--) {
    var thisDigit = numberPart.charCodeAt(i);
    var limitDigit = LARGEST_UNSIGNED_LONG_AS_STRING.charCodeAt(i);
    if (thisDigit > limitDigit) {
      return false;
    } else if (thisDigit < limitDigit) {
      return true;
    } else {
      // Pass, we have to compare against the next digit from the left.
    }
  }

  // The number is exactly the limit.
  return true;
}

/**
 * Check that `value` is a valid `xs:unsignedInt`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:unsignedInt`
 */
function isXsUnsignedInt(value) {
  if (!matchesXsUnsignedInt(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return 0 <= converted && converted <= 4294967295;
}

/**
 * Check that `value` is a valid `xs:unsignedShort`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:unsignedShort`
 */
function isXsUnsignedShort(value) {
  if (!matchesXsUnsignedShort(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return 0 <= converted && converted <= 65535;
}

/**
 * Check that `value` is a valid `xs:unsignedByte`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:unsignedByte`
 */
function isXsUnsignedByte(value) {
  if (!matchesXsUnsignedByte(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return 0 <= converted && converted <= 255;
}
var DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY = new Map([[AasTypes.DataTypeDefXsd.AnyUri, matchesXsAnyUri], [AasTypes.DataTypeDefXsd.Base64Binary, matchesXsBase64Binary], [AasTypes.DataTypeDefXsd.Boolean, matchesXsBoolean], [AasTypes.DataTypeDefXsd.Byte, isXsByte], [AasTypes.DataTypeDefXsd.Date, isXsDate], [AasTypes.DataTypeDefXsd.DateTime, isXsDateTime], [AasTypes.DataTypeDefXsd.Decimal, matchesXsDecimal], [AasTypes.DataTypeDefXsd.Double, isXsDouble], [AasTypes.DataTypeDefXsd.Duration, matchesXsDuration], [AasTypes.DataTypeDefXsd.Float, isXsFloat], [AasTypes.DataTypeDefXsd.GDay, matchesXsGDay], [AasTypes.DataTypeDefXsd.GMonth, matchesXsGMonth], [AasTypes.DataTypeDefXsd.GMonthDay, isXsGMonthDay], [AasTypes.DataTypeDefXsd.GYear, matchesXsGYear], [AasTypes.DataTypeDefXsd.GYearMonth, matchesXsGYearMonth], [AasTypes.DataTypeDefXsd.HexBinary, matchesXsHexBinary], [AasTypes.DataTypeDefXsd.Int, isXsInt], [AasTypes.DataTypeDefXsd.Integer, matchesXsInteger], [AasTypes.DataTypeDefXsd.Long, isXsLong], [AasTypes.DataTypeDefXsd.NegativeInteger, matchesXsNegativeInteger], [AasTypes.DataTypeDefXsd.NonNegativeInteger, matchesXsNonNegativeInteger], [AasTypes.DataTypeDefXsd.NonPositiveInteger, matchesXsNonPositiveInteger], [AasTypes.DataTypeDefXsd.PositiveInteger, matchesXsPositiveInteger], [AasTypes.DataTypeDefXsd.Short, isXsShort], [AasTypes.DataTypeDefXsd.String, matchesXsString], [AasTypes.DataTypeDefXsd.Time, matchesXsTime], [AasTypes.DataTypeDefXsd.UnsignedByte, isXsUnsignedByte], [AasTypes.DataTypeDefXsd.UnsignedInt, isXsUnsignedInt], [AasTypes.DataTypeDefXsd.UnsignedLong, isXsUnsignedLong], [AasTypes.DataTypeDefXsd.UnsignedShort, isXsUnsignedShort]]);
function assertAllDataTypeDefXsdCovered() {
  var _iterator3 = _createForOfIteratorHelper(AasTypes.overDataTypeDefXsd()),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var literal = _step3.value;
      if (!DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY.has(literal)) {
        throw new Error("The enumeration key ".concat(literal, " of AasTypes.DataTypeDefXsd ") + "is not covered in DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY");
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}
assertAllDataTypeDefXsdCovered();

/**
 * Check that `value` is consistent with the given `valueType`.
 *
 * @param value - expected to be consistent with `valueType`
 * @param valueType - expected XSD type of `value`
 * @returns `true` if `value` consistent with `valueType`
 */
function valueConsistentWithXsdType(value, valueType) {
  var verifier = DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY.get(valueType);
  if (verifier === undefined) {
    throw new Error("The value type is invalid. Expected a literal of DataTypeDefXsd, " + "but got: ".concat(valueType));
  }
  return verifier(value);
}

/**
 * Check that the target of the model reference matches the `expectedType`.
 */
function isModelReferenceTo(reference, expectedType) {
  return reference.type == AasTypes.ReferenceTypes.ModelReference && reference.keys.length != 0 && AasCommon.at(reference.keys, -1).type == expectedType;
}

/**
 * Check that the target of the reference matches a {@link constants!AAS_REFERABLES}.
 */
function isModelReferenceToReferable(reference) {
  return reference.type == AasTypes.ReferenceTypes.ModelReference && reference.keys.length != 0 && AasConstants.AAS_REFERABLES.has(AasCommon.at(reference.keys, -1).type);
}

/**
 * Check that all {@link types.IReferable.idShort}'s are unique
 * among `referables`.
 *
 * @param referables - to be verified
 * @returns `true` if the check passes
 */
function idShortsAreUnique(referables) {
  var idShortSet = new Set();
  var _iterator4 = _createForOfIteratorHelper(referables),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var referable = _step4.value;
      if (idShortSet.has(referable.idShort)) {
        return false;
      }
      idShortSet.add(referable.idShort);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  return true;
}

/**
 * Check that all {@link types.IReferable.idShort}'s are unique
 * among values of `inputVariables`, `outputVariables`
 * and `inoutputVariables`.
 *
 * @param inputVariables - to be verified
 * @param outputVariables - to be verified
 * @param inoutputVariables - to be verified
 * @returns `true` if the check passes
 */
function idShortsOfVariablesAreUnique(inputVariables, outputVariables, inoutputVariables) {
  var idShortSet = new Set();
  if (inputVariables !== null) {
    var _iterator5 = _createForOfIteratorHelper(inputVariables),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var variable = _step5.value;
        if (variable.value.idShort !== null) {
          if (idShortSet.has(variable.value.idShort)) {
            return false;
          }
          idShortSet.add(variable.value.idShort);
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }
  if (outputVariables !== null) {
    var _iterator6 = _createForOfIteratorHelper(outputVariables),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var _variable = _step6.value;
        if (_variable.value.idShort !== null) {
          if (idShortSet.has(_variable.value.idShort)) {
            return false;
          }
          idShortSet.add(_variable.value.idShort);
        }
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
  }
  if (inoutputVariables !== null) {
    var _iterator7 = _createForOfIteratorHelper(inoutputVariables),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var _variable2 = _step7.value;
        if (_variable2.value.idShort !== null) {
          if (idShortSet.has(_variable2.value.idShort)) {
            return false;
          }
          idShortSet.add(_variable2.value.idShort);
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
  }
  return true;
}

/**
 * Check that all {@link types.Extension.name} are unique
 * among `extensions`.
 *
 * @param extensions - to be verified
 * @returns `true` if the check passes
 */
function extensionNamesAreUnique(extensions) {
  var nameSet = new Set();
  var _iterator8 = _createForOfIteratorHelper(extensions),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var extension = _step8.value;
      if (nameSet.has(extension.name)) {
        return false;
      }
      nameSet.add(extension.name);
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  return true;
}

/**
 * Check that all `elements` have the identical
 * {@link types.ISubmodelElement.semanticId}.
 *
 * @param elements - to be checked
 * @returns `true` if all the semantic IDs are identical
 */
function submodelElementsHaveIdenticalSemanticIds(elements) {
  var thatSemanticId = null;
  var _iterator9 = _createForOfIteratorHelper(elements),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var element = _step9.value;
      if (element.semanticId === null) {
        continue;
      }
      if (thatSemanticId === null) {
        thatSemanticId = element.semanticId;
        continue;
      }
      var thisSemanticId = element.semanticId;
      if (thisSemanticId.keys.length != thatSemanticId.keys.length) {
        return false;
      }
      for (var i = 0; i < thatSemanticId.keys.length; i++) {
        if (thisSemanticId.keys[i].value !== thatSemanticId.keys[i].value) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return true;
}
var AAS_SUBMODEL_ELEMENTS_TO_IS = new Map([[AasTypes.AasSubmodelElements.AnnotatedRelationshipElement, AasTypes.isAnnotatedRelationshipElement], [AasTypes.AasSubmodelElements.BasicEventElement, AasTypes.isBasicEventElement], [AasTypes.AasSubmodelElements.Blob, AasTypes.isBlob], [AasTypes.AasSubmodelElements.Capability, AasTypes.isCapability], [AasTypes.AasSubmodelElements.DataElement, AasTypes.isDataElement], [AasTypes.AasSubmodelElements.Entity, AasTypes.isEntity], [AasTypes.AasSubmodelElements.EventElement, AasTypes.isEventElement], [AasTypes.AasSubmodelElements.File, AasTypes.isFile], [AasTypes.AasSubmodelElements.MultiLanguageProperty, AasTypes.isMultiLanguageProperty], [AasTypes.AasSubmodelElements.Operation, AasTypes.isOperation], [AasTypes.AasSubmodelElements.Property, AasTypes.isProperty], [AasTypes.AasSubmodelElements.Range, AasTypes.isRange], [AasTypes.AasSubmodelElements.ReferenceElement, AasTypes.isReferenceElement], [AasTypes.AasSubmodelElements.RelationshipElement, AasTypes.isRelationshipElement], [AasTypes.AasSubmodelElements.SubmodelElement, AasTypes.isSubmodelElement], [AasTypes.AasSubmodelElements.SubmodelElementList, AasTypes.isSubmodelElementList], [AasTypes.AasSubmodelElements.SubmodelElementCollection, AasTypes.isSubmodelElementCollection]]);
function assertAllTypesCoveredInAasSubmodelElementsToIs() {
  var _iterator10 = _createForOfIteratorHelper(AasTypes.overAasSubmodelElements()),
    _step10;
  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var literal = _step10.value;
      if (!AAS_SUBMODEL_ELEMENTS_TO_IS.has(literal)) {
        throw new Error("The enumeration literal ".concat(literal, " of AasTypes.AasSubmodelElements ") + "is not covered in AAS_SUBMODEL_ELEMENTS_TO_IS");
      }
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }
}
assertAllTypesCoveredInAasSubmodelElementsToIs();

/**
 * Check that `element` is an instance of class corresponding to
 * `expectedType`.
 *
 * @param element - to be checked for type
 * @param expectedType - in the check
 * @returns `true` if `element` corresponds to `expectedType`
 */
function submodelElementIsOfType(element, expectedType) {
  var isFunc = AAS_SUBMODEL_ELEMENTS_TO_IS.get(expectedType);
  return isFunc(element);
}

/**
 * Check that `elements` which are {@link types.Property} or {@link types.Range}
 * have the given `valueType`.
 *
 * @param elements - to be verified
 * @returns `true` if the check passes
 */
function propertiesOrRangesHaveValueType(elements, valueType) {
  var _iterator11 = _createForOfIteratorHelper(elements),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var element = _step11.value;
      if (AasTypes.isProperty(element) || AasTypes.isRange(element)) {
        if (element.valueType !== valueType) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
  return true;
}

/**
 * Check that the two references, `that` and `other`,
 * are equal by comparing their {@link types.Reference.keys}
 * by {@link types.Key.value}'s.
 *
 * @param that - reference to be compared
 * @param other - to be compared against
 * @returns `true` if the key values are are equal
 */
function referenceKeyValuesEqual(that, other) {
  if (that.keys.length != other.keys.length) {
    return false;
  }
  for (var i = 0; i < that.keys.length; i++) {
    if (that.keys[i].value !== other.keys[i].value) {
      return false;
    }
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.dataType}
 * is defined appropriately for all data specifications whose content is given
 * as IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(embeddedDataSpecifications) {
  var _iterator12 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step12;
  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var embeddedDataSpecification = _step12.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (AasTypes.isDataSpecificationIec61360(content)) {
        if (content.dataType === null || !AasConstants.DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE.has(content.dataType)) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.dataType}
 * is defined appropriately for all data specifications whose content is given as
 * IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sForReferenceHaveAppropriateDataType(embeddedDataSpecifications) {
  var _iterator13 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step13;
  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var embeddedDataSpecification = _step13.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (AasTypes.isDataSpecificationIec61360(content)) {
        if (content.dataType === null || !AasConstants.DATA_TYPE_IEC_61360_FOR_REFERENCE.has(content.dataType)) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.dataType}
 * is defined appropriately for all data specifications whose content is given as
 * IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sForDocumentHaveAppropriateDataType(embeddedDataSpecifications) {
  var _iterator14 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step14;
  try {
    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      var embeddedDataSpecification = _step14.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (AasTypes.isDataSpecificationIec61360(content)) {
        if (content.dataType === null || !AasConstants.DATA_TYPE_IEC_61360_FOR_DOCUMENT.has(content.dataType)) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.dataType}
 * is defined for all data specifications whose content is given as
 * IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sHaveDataType(embeddedDataSpecifications) {
  var _iterator15 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step15;
  try {
    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
      var embeddedDataSpecification = _step15.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (AasTypes.isDataSpecificationIec61360(content)) {
        if (content.dataType === null) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator15.e(err);
  } finally {
    _iterator15.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.value}
 * is defined for all data specifications whose content is given as
 * IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sHaveValue(embeddedDataSpecifications) {
  var _iterator16 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step16;
  try {
    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
      var embeddedDataSpecification = _step16.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (AasTypes.isDataSpecificationIec61360(content)) {
        if (content.value === null) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator16.e(err);
  } finally {
    _iterator16.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.definition}
 * is defined for all data specifications whose content is given as
 * IEC 61360 at least in English.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(embeddedDataSpecifications) {
  var _iterator17 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step17;
  try {
    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
      var embeddedDataSpecification = _step17.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (AasTypes.isDataSpecificationIec61360(content)) {
        if (content.definition === null) {
          return false;
        }
        var noDefinitionInEnglish = true;
        var _iterator18 = _createForOfIteratorHelper(content.definition),
          _step18;
        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var langString = _step18.value;
            if (isBcp47ForEnglish(langString.language)) {
              noDefinitionInEnglish = false;
              break;
            }
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
        if (noDefinitionInEnglish === true) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator17.e(err);
  } finally {
    _iterator17.f();
  }
  return true;
}
function constructIsBcp47ForEnglish() {
  var pattern = "^(en|EN)(-.*)?$";
  return new RegExp(pattern, "u");
}
var REGEXP_IS_BCP_47_FOR_ENGLISH = constructIsBcp47ForEnglish();

/**
 * Check that the `text` corresponds to a BCP47 code for english.
 */
function isBcp47ForEnglish(text) {
  return REGEXP_IS_BCP_47_FOR_ENGLISH.test(text);
}

/**
 * Verify an instance of the model recursively or non-recursively (depending on the context).
 */
var Verifier = /*#__PURE__*/function (_AasTypes$AbstractTra) {
  _inherits(Verifier, _AasTypes$AbstractTra);
  var _super = _createSuper(Verifier);
  function Verifier() {
    _classCallCheck(this, Verifier);
    return _super.apply(this, arguments);
  }
  _createClass(Verifier, [{
    key: "transformExtensionWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformExtensionWithContext(that, context) {
      var _iterator19, _step19, _error4, _iterator20, _step20, error, _iterator21, _step21, _error, supplementalSemanticIdsIndex, _iterator22, _step22, item, _iterator23, _step23, _error2, refersToIndex, _iterator24, _step24, _item, _iterator25, _step25, _error3;
      return _regeneratorRuntime().wrap(function transformExtensionWithContext$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context.next = 3;
              break;
            }
            _context.next = 3;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 3:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context.next = 6;
              break;
            }
            _context.next = 6;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 6:
            if (!(that.refersTo !== null) || that.refersTo.length >= 1) {
              _context.next = 9;
              break;
            }
            _context.next = 9;
            return new VerificationError("Refers-to must be either not set or have at least one item.");
          case 9:
            if (!(that.value !== null) || valueConsistentWithXsdType(that.value, that.valueTypeOrDefault())) {
              _context.next = 12;
              break;
            }
            _context.next = 12;
            return new VerificationError("The value must match the value type.");
          case 12:
            _iterator19 = _createForOfIteratorHelper(verifyNameType(that.name));
            _context.prev = 13;
            _iterator19.s();
          case 15:
            if ((_step19 = _iterator19.n()).done) {
              _context.next = 22;
              break;
            }
            _error4 = _step19.value;
            _error4.path.prepend(new PropertySegment(that, "name"));
            _context.next = 20;
            return _error4;
          case 20:
            _context.next = 15;
            break;
          case 22:
            _context.next = 27;
            break;
          case 24:
            _context.prev = 24;
            _context.t0 = _context["catch"](13);
            _iterator19.e(_context.t0);
          case 27:
            _context.prev = 27;
            _iterator19.f();
            return _context.finish(27);
          case 30:
            if (!(that.value !== null)) {
              _context.next = 49;
              break;
            }
            _iterator20 = _createForOfIteratorHelper(verifyValueDataType(that.value));
            _context.prev = 32;
            _iterator20.s();
          case 34:
            if ((_step20 = _iterator20.n()).done) {
              _context.next = 41;
              break;
            }
            error = _step20.value;
            error.path.prepend(new PropertySegment(that, "value"));
            _context.next = 39;
            return error;
          case 39:
            _context.next = 34;
            break;
          case 41:
            _context.next = 46;
            break;
          case 43:
            _context.prev = 43;
            _context.t1 = _context["catch"](32);
            _iterator20.e(_context.t1);
          case 46:
            _context.prev = 46;
            _iterator20.f();
            return _context.finish(46);
          case 49:
            if (!(context === true)) {
              _context.next = 143;
              break;
            }
            if (!(that.semanticId !== null)) {
              _context.next = 69;
              break;
            }
            _iterator21 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context.prev = 52;
            _iterator21.s();
          case 54:
            if ((_step21 = _iterator21.n()).done) {
              _context.next = 61;
              break;
            }
            _error = _step21.value;
            _error.path.prepend(new PropertySegment(that, "semanticId"));
            _context.next = 59;
            return _error;
          case 59:
            _context.next = 54;
            break;
          case 61:
            _context.next = 66;
            break;
          case 63:
            _context.prev = 63;
            _context.t2 = _context["catch"](52);
            _iterator21.e(_context.t2);
          case 66:
            _context.prev = 66;
            _iterator21.f();
            return _context.finish(66);
          case 69:
            if (!(that.supplementalSemanticIds !== null)) {
              _context.next = 106;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator22 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context.prev = 72;
            _iterator22.s();
          case 74:
            if ((_step22 = _iterator22.n()).done) {
              _context.next = 98;
              break;
            }
            item = _step22.value;
            _iterator23 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context.prev = 77;
            _iterator23.s();
          case 79:
            if ((_step23 = _iterator23.n()).done) {
              _context.next = 87;
              break;
            }
            _error2 = _step23.value;
            _error2.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error2.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context.next = 85;
            return _error2;
          case 85:
            _context.next = 79;
            break;
          case 87:
            _context.next = 92;
            break;
          case 89:
            _context.prev = 89;
            _context.t3 = _context["catch"](77);
            _iterator23.e(_context.t3);
          case 92:
            _context.prev = 92;
            _iterator23.f();
            return _context.finish(92);
          case 95:
            supplementalSemanticIdsIndex++;
          case 96:
            _context.next = 74;
            break;
          case 98:
            _context.next = 103;
            break;
          case 100:
            _context.prev = 100;
            _context.t4 = _context["catch"](72);
            _iterator22.e(_context.t4);
          case 103:
            _context.prev = 103;
            _iterator22.f();
            return _context.finish(103);
          case 106:
            if (!(that.refersTo !== null)) {
              _context.next = 143;
              break;
            }
            refersToIndex = 0;
            _iterator24 = _createForOfIteratorHelper(that.refersTo);
            _context.prev = 109;
            _iterator24.s();
          case 111:
            if ((_step24 = _iterator24.n()).done) {
              _context.next = 135;
              break;
            }
            _item = _step24.value;
            _iterator25 = _createForOfIteratorHelper(this.transformWithContext(_item, context));
            _context.prev = 114;
            _iterator25.s();
          case 116:
            if ((_step25 = _iterator25.n()).done) {
              _context.next = 124;
              break;
            }
            _error3 = _step25.value;
            _error3.path.prepend(new IndexSegment(that.refersTo, refersToIndex));
            _error3.path.prepend(new PropertySegment(that, "refersTo"));
            _context.next = 122;
            return _error3;
          case 122:
            _context.next = 116;
            break;
          case 124:
            _context.next = 129;
            break;
          case 126:
            _context.prev = 126;
            _context.t5 = _context["catch"](114);
            _iterator25.e(_context.t5);
          case 129:
            _context.prev = 129;
            _iterator25.f();
            return _context.finish(129);
          case 132:
            refersToIndex++;
          case 133:
            _context.next = 111;
            break;
          case 135:
            _context.next = 140;
            break;
          case 137:
            _context.prev = 137;
            _context.t6 = _context["catch"](109);
            _iterator24.e(_context.t6);
          case 140:
            _context.prev = 140;
            _iterator24.f();
            return _context.finish(140);
          case 143:
          case "end":
            return _context.stop();
        }
      }, transformExtensionWithContext, this, [[13, 24, 27, 30], [32, 43, 46, 49], [52, 63, 66, 69], [72, 100, 103, 106], [77, 89, 92, 95], [109, 137, 140, 143], [114, 126, 129, 132]]);
    })
  }, {
    key: "transformAdministrativeInformationWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformAdministrativeInformationWithContext(that, context) {
      var _iterator26, _step26, error, _iterator27, _step27, _error5, _iterator28, _step28, _error6, embeddedDataSpecificationsIndex, _iterator29, _step29, item, _iterator30, _step30, _error7, _iterator31, _step31, _error8;
      return _regeneratorRuntime().wrap(function transformAdministrativeInformationWithContext$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context2.next = 3;
              break;
            }
            _context2.next = 3;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 3:
            if (!(that.revision !== null) || that.version !== null) {
              _context2.next = 6;
              break;
            }
            _context2.next = 6;
            return new VerificationError("Constraint AASd-005: If version is not specified then also " + "revision shall be unspecified. This means, a revision " + "requires a version. If there is no version there is no " + "revision either. Revision is optional.");
          case 6:
            if (!(that.version !== null)) {
              _context2.next = 25;
              break;
            }
            _iterator26 = _createForOfIteratorHelper(verifyVersionType(that.version));
            _context2.prev = 8;
            _iterator26.s();
          case 10:
            if ((_step26 = _iterator26.n()).done) {
              _context2.next = 17;
              break;
            }
            error = _step26.value;
            error.path.prepend(new PropertySegment(that, "version"));
            _context2.next = 15;
            return error;
          case 15:
            _context2.next = 10;
            break;
          case 17:
            _context2.next = 22;
            break;
          case 19:
            _context2.prev = 19;
            _context2.t0 = _context2["catch"](8);
            _iterator26.e(_context2.t0);
          case 22:
            _context2.prev = 22;
            _iterator26.f();
            return _context2.finish(22);
          case 25:
            if (!(that.revision !== null)) {
              _context2.next = 44;
              break;
            }
            _iterator27 = _createForOfIteratorHelper(verifyRevisionType(that.revision));
            _context2.prev = 27;
            _iterator27.s();
          case 29:
            if ((_step27 = _iterator27.n()).done) {
              _context2.next = 36;
              break;
            }
            _error5 = _step27.value;
            _error5.path.prepend(new PropertySegment(that, "revision"));
            _context2.next = 34;
            return _error5;
          case 34:
            _context2.next = 29;
            break;
          case 36:
            _context2.next = 41;
            break;
          case 38:
            _context2.prev = 38;
            _context2.t1 = _context2["catch"](27);
            _iterator27.e(_context2.t1);
          case 41:
            _context2.prev = 41;
            _iterator27.f();
            return _context2.finish(41);
          case 44:
            if (!(that.templateId !== null)) {
              _context2.next = 63;
              break;
            }
            _iterator28 = _createForOfIteratorHelper(verifyIdentifier(that.templateId));
            _context2.prev = 46;
            _iterator28.s();
          case 48:
            if ((_step28 = _iterator28.n()).done) {
              _context2.next = 55;
              break;
            }
            _error6 = _step28.value;
            _error6.path.prepend(new PropertySegment(that, "templateId"));
            _context2.next = 53;
            return _error6;
          case 53:
            _context2.next = 48;
            break;
          case 55:
            _context2.next = 60;
            break;
          case 57:
            _context2.prev = 57;
            _context2.t2 = _context2["catch"](46);
            _iterator28.e(_context2.t2);
          case 60:
            _context2.prev = 60;
            _iterator28.f();
            return _context2.finish(60);
          case 63:
            if (!(context === true)) {
              _context2.next = 120;
              break;
            }
            if (!(that.embeddedDataSpecifications !== null)) {
              _context2.next = 101;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator29 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context2.prev = 67;
            _iterator29.s();
          case 69:
            if ((_step29 = _iterator29.n()).done) {
              _context2.next = 93;
              break;
            }
            item = _step29.value;
            _iterator30 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context2.prev = 72;
            _iterator30.s();
          case 74:
            if ((_step30 = _iterator30.n()).done) {
              _context2.next = 82;
              break;
            }
            _error7 = _step30.value;
            _error7.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error7.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context2.next = 80;
            return _error7;
          case 80:
            _context2.next = 74;
            break;
          case 82:
            _context2.next = 87;
            break;
          case 84:
            _context2.prev = 84;
            _context2.t3 = _context2["catch"](72);
            _iterator30.e(_context2.t3);
          case 87:
            _context2.prev = 87;
            _iterator30.f();
            return _context2.finish(87);
          case 90:
            embeddedDataSpecificationsIndex++;
          case 91:
            _context2.next = 69;
            break;
          case 93:
            _context2.next = 98;
            break;
          case 95:
            _context2.prev = 95;
            _context2.t4 = _context2["catch"](67);
            _iterator29.e(_context2.t4);
          case 98:
            _context2.prev = 98;
            _iterator29.f();
            return _context2.finish(98);
          case 101:
            if (!(that.creator !== null)) {
              _context2.next = 120;
              break;
            }
            _iterator31 = _createForOfIteratorHelper(this.transformWithContext(that.creator, context));
            _context2.prev = 103;
            _iterator31.s();
          case 105:
            if ((_step31 = _iterator31.n()).done) {
              _context2.next = 112;
              break;
            }
            _error8 = _step31.value;
            _error8.path.prepend(new PropertySegment(that, "creator"));
            _context2.next = 110;
            return _error8;
          case 110:
            _context2.next = 105;
            break;
          case 112:
            _context2.next = 117;
            break;
          case 114:
            _context2.prev = 114;
            _context2.t5 = _context2["catch"](103);
            _iterator31.e(_context2.t5);
          case 117:
            _context2.prev = 117;
            _iterator31.f();
            return _context2.finish(117);
          case 120:
          case "end":
            return _context2.stop();
        }
      }, transformAdministrativeInformationWithContext, this, [[8, 19, 22, 25], [27, 38, 41, 44], [46, 57, 60, 63], [67, 95, 98, 101], [72, 84, 87, 90], [103, 114, 117, 120]]);
    })
  }, {
    key: "transformQualifierWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformQualifierWithContext(that, context) {
      var _iterator32, _step32, _error12, _iterator33, _step33, error, _iterator34, _step34, _error9, supplementalSemanticIdsIndex, _iterator35, _step35, item, _iterator36, _step36, _error10, _iterator37, _step37, _error11;
      return _regeneratorRuntime().wrap(function transformQualifierWithContext$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context3.next = 3;
              break;
            }
            _context3.next = 3;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 3:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context3.next = 6;
              break;
            }
            _context3.next = 6;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 6:
            if (!(that.value !== null) || valueConsistentWithXsdType(that.value, that.valueType)) {
              _context3.next = 9;
              break;
            }
            _context3.next = 9;
            return new VerificationError("Constraint AASd-020: The value shall be consistent to " + "the data type as defined in value type.");
          case 9:
            _iterator32 = _createForOfIteratorHelper(verifyQualifierType(that.type));
            _context3.prev = 10;
            _iterator32.s();
          case 12:
            if ((_step32 = _iterator32.n()).done) {
              _context3.next = 19;
              break;
            }
            _error12 = _step32.value;
            _error12.path.prepend(new PropertySegment(that, "type"));
            _context3.next = 17;
            return _error12;
          case 17:
            _context3.next = 12;
            break;
          case 19:
            _context3.next = 24;
            break;
          case 21:
            _context3.prev = 21;
            _context3.t0 = _context3["catch"](10);
            _iterator32.e(_context3.t0);
          case 24:
            _context3.prev = 24;
            _iterator32.f();
            return _context3.finish(24);
          case 27:
            if (!(that.value !== null)) {
              _context3.next = 46;
              break;
            }
            _iterator33 = _createForOfIteratorHelper(verifyValueDataType(that.value));
            _context3.prev = 29;
            _iterator33.s();
          case 31:
            if ((_step33 = _iterator33.n()).done) {
              _context3.next = 38;
              break;
            }
            error = _step33.value;
            error.path.prepend(new PropertySegment(that, "value"));
            _context3.next = 36;
            return error;
          case 36:
            _context3.next = 31;
            break;
          case 38:
            _context3.next = 43;
            break;
          case 40:
            _context3.prev = 40;
            _context3.t1 = _context3["catch"](29);
            _iterator33.e(_context3.t1);
          case 43:
            _context3.prev = 43;
            _iterator33.f();
            return _context3.finish(43);
          case 46:
            if (!(context === true)) {
              _context3.next = 122;
              break;
            }
            if (!(that.semanticId !== null)) {
              _context3.next = 66;
              break;
            }
            _iterator34 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context3.prev = 49;
            _iterator34.s();
          case 51:
            if ((_step34 = _iterator34.n()).done) {
              _context3.next = 58;
              break;
            }
            _error9 = _step34.value;
            _error9.path.prepend(new PropertySegment(that, "semanticId"));
            _context3.next = 56;
            return _error9;
          case 56:
            _context3.next = 51;
            break;
          case 58:
            _context3.next = 63;
            break;
          case 60:
            _context3.prev = 60;
            _context3.t2 = _context3["catch"](49);
            _iterator34.e(_context3.t2);
          case 63:
            _context3.prev = 63;
            _iterator34.f();
            return _context3.finish(63);
          case 66:
            if (!(that.supplementalSemanticIds !== null)) {
              _context3.next = 103;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator35 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context3.prev = 69;
            _iterator35.s();
          case 71:
            if ((_step35 = _iterator35.n()).done) {
              _context3.next = 95;
              break;
            }
            item = _step35.value;
            _iterator36 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context3.prev = 74;
            _iterator36.s();
          case 76:
            if ((_step36 = _iterator36.n()).done) {
              _context3.next = 84;
              break;
            }
            _error10 = _step36.value;
            _error10.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error10.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context3.next = 82;
            return _error10;
          case 82:
            _context3.next = 76;
            break;
          case 84:
            _context3.next = 89;
            break;
          case 86:
            _context3.prev = 86;
            _context3.t3 = _context3["catch"](74);
            _iterator36.e(_context3.t3);
          case 89:
            _context3.prev = 89;
            _iterator36.f();
            return _context3.finish(89);
          case 92:
            supplementalSemanticIdsIndex++;
          case 93:
            _context3.next = 71;
            break;
          case 95:
            _context3.next = 100;
            break;
          case 97:
            _context3.prev = 97;
            _context3.t4 = _context3["catch"](69);
            _iterator35.e(_context3.t4);
          case 100:
            _context3.prev = 100;
            _iterator35.f();
            return _context3.finish(100);
          case 103:
            if (!(that.valueId !== null)) {
              _context3.next = 122;
              break;
            }
            _iterator37 = _createForOfIteratorHelper(this.transformWithContext(that.valueId, context));
            _context3.prev = 105;
            _iterator37.s();
          case 107:
            if ((_step37 = _iterator37.n()).done) {
              _context3.next = 114;
              break;
            }
            _error11 = _step37.value;
            _error11.path.prepend(new PropertySegment(that, "valueId"));
            _context3.next = 112;
            return _error11;
          case 112:
            _context3.next = 107;
            break;
          case 114:
            _context3.next = 119;
            break;
          case 116:
            _context3.prev = 116;
            _context3.t5 = _context3["catch"](105);
            _iterator37.e(_context3.t5);
          case 119:
            _context3.prev = 119;
            _iterator37.f();
            return _context3.finish(119);
          case 122:
          case "end":
            return _context3.stop();
        }
      }, transformQualifierWithContext, this, [[10, 21, 24, 27], [29, 40, 43, 46], [49, 60, 63, 66], [69, 97, 100, 103], [74, 86, 89, 92], [105, 116, 119, 122]]);
    })
  }, {
    key: "transformAssetAdministrationShellWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformAssetAdministrationShellWithContext(that, context) {
      var _iterator38, _step38, error, _iterator39, _step39, _error13, _iterator40, _step40, _error22, extensionsIndex, _iterator41, _step41, item, _iterator42, _step42, _error14, displayNameIndex, _iterator43, _step43, _item2, _iterator44, _step44, _error15, descriptionIndex, _iterator45, _step45, _item3, _iterator46, _step46, _error16, _iterator47, _step47, _error17, embeddedDataSpecificationsIndex, _iterator48, _step48, _item4, _iterator49, _step49, _error18, _iterator50, _step50, _error19, _iterator51, _step51, _error21, submodelsIndex, _iterator52, _step52, _item5, _iterator53, _step53, _error20;
      return _regeneratorRuntime().wrap(function transformAssetAdministrationShellWithContext$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context4.next = 3;
              break;
            }
            _context4.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context4.next = 6;
              break;
            }
            _context4.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context4.next = 9;
              break;
            }
            _context4.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context4.next = 12;
              break;
            }
            _context4.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context4.next = 15;
              break;
            }
            _context4.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context4.next = 18;
              break;
            }
            _context4.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context4.next = 21;
              break;
            }
            _context4.next = 21;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 21:
            if (!(that.submodels !== null) || that.submodels.length >= 1) {
              _context4.next = 24;
              break;
            }
            _context4.next = 24;
            return new VerificationError("Submodels must be either not set or have at least one item.");
          case 24:
            if (!(that.derivedFrom !== null) || isModelReferenceTo(that.derivedFrom, AasTypes.KeyTypes.AssetAdministrationShell)) {
              _context4.next = 27;
              break;
            }
            _context4.next = 27;
            return new VerificationError("Derived-from must be a model reference to an asset " + "administration shell.");
          case 27:
            if (!(that.submodels !== null) || AasCommon.every(AasCommon.map(that.submodels, function (reference) {
              return isModelReferenceTo(reference, AasTypes.KeyTypes.Submodel);
            }))) {
              _context4.next = 30;
              break;
            }
            _context4.next = 30;
            return new VerificationError("All submodels must be model references to a submodel.");
          case 30:
            if (!(that.category !== null)) {
              _context4.next = 49;
              break;
            }
            _iterator38 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context4.prev = 32;
            _iterator38.s();
          case 34:
            if ((_step38 = _iterator38.n()).done) {
              _context4.next = 41;
              break;
            }
            error = _step38.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context4.next = 39;
            return error;
          case 39:
            _context4.next = 34;
            break;
          case 41:
            _context4.next = 46;
            break;
          case 43:
            _context4.prev = 43;
            _context4.t0 = _context4["catch"](32);
            _iterator38.e(_context4.t0);
          case 46:
            _context4.prev = 46;
            _iterator38.f();
            return _context4.finish(46);
          case 49:
            if (!(that.idShort !== null)) {
              _context4.next = 68;
              break;
            }
            _iterator39 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context4.prev = 51;
            _iterator39.s();
          case 53:
            if ((_step39 = _iterator39.n()).done) {
              _context4.next = 60;
              break;
            }
            _error13 = _step39.value;
            _error13.path.prepend(new PropertySegment(that, "idShort"));
            _context4.next = 58;
            return _error13;
          case 58:
            _context4.next = 53;
            break;
          case 60:
            _context4.next = 65;
            break;
          case 62:
            _context4.prev = 62;
            _context4.t1 = _context4["catch"](51);
            _iterator39.e(_context4.t1);
          case 65:
            _context4.prev = 65;
            _iterator39.f();
            return _context4.finish(65);
          case 68:
            _iterator40 = _createForOfIteratorHelper(verifyIdentifier(that.id));
            _context4.prev = 69;
            _iterator40.s();
          case 71:
            if ((_step40 = _iterator40.n()).done) {
              _context4.next = 78;
              break;
            }
            _error22 = _step40.value;
            _error22.path.prepend(new PropertySegment(that, "id"));
            _context4.next = 76;
            return _error22;
          case 76:
            _context4.next = 71;
            break;
          case 78:
            _context4.next = 83;
            break;
          case 80:
            _context4.prev = 80;
            _context4.t2 = _context4["catch"](69);
            _iterator40.e(_context4.t2);
          case 83:
            _context4.prev = 83;
            _iterator40.f();
            return _context4.finish(83);
          case 86:
            if (!(context === true)) {
              _context4.next = 328;
              break;
            }
            if (!(that.extensions !== null)) {
              _context4.next = 124;
              break;
            }
            extensionsIndex = 0;
            _iterator41 = _createForOfIteratorHelper(that.extensions);
            _context4.prev = 90;
            _iterator41.s();
          case 92:
            if ((_step41 = _iterator41.n()).done) {
              _context4.next = 116;
              break;
            }
            item = _step41.value;
            _iterator42 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context4.prev = 95;
            _iterator42.s();
          case 97:
            if ((_step42 = _iterator42.n()).done) {
              _context4.next = 105;
              break;
            }
            _error14 = _step42.value;
            _error14.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error14.path.prepend(new PropertySegment(that, "extensions"));
            _context4.next = 103;
            return _error14;
          case 103:
            _context4.next = 97;
            break;
          case 105:
            _context4.next = 110;
            break;
          case 107:
            _context4.prev = 107;
            _context4.t3 = _context4["catch"](95);
            _iterator42.e(_context4.t3);
          case 110:
            _context4.prev = 110;
            _iterator42.f();
            return _context4.finish(110);
          case 113:
            extensionsIndex++;
          case 114:
            _context4.next = 92;
            break;
          case 116:
            _context4.next = 121;
            break;
          case 118:
            _context4.prev = 118;
            _context4.t4 = _context4["catch"](90);
            _iterator41.e(_context4.t4);
          case 121:
            _context4.prev = 121;
            _iterator41.f();
            return _context4.finish(121);
          case 124:
            if (!(that.displayName !== null)) {
              _context4.next = 161;
              break;
            }
            displayNameIndex = 0;
            _iterator43 = _createForOfIteratorHelper(that.displayName);
            _context4.prev = 127;
            _iterator43.s();
          case 129:
            if ((_step43 = _iterator43.n()).done) {
              _context4.next = 153;
              break;
            }
            _item2 = _step43.value;
            _iterator44 = _createForOfIteratorHelper(this.transformWithContext(_item2, context));
            _context4.prev = 132;
            _iterator44.s();
          case 134:
            if ((_step44 = _iterator44.n()).done) {
              _context4.next = 142;
              break;
            }
            _error15 = _step44.value;
            _error15.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error15.path.prepend(new PropertySegment(that, "displayName"));
            _context4.next = 140;
            return _error15;
          case 140:
            _context4.next = 134;
            break;
          case 142:
            _context4.next = 147;
            break;
          case 144:
            _context4.prev = 144;
            _context4.t5 = _context4["catch"](132);
            _iterator44.e(_context4.t5);
          case 147:
            _context4.prev = 147;
            _iterator44.f();
            return _context4.finish(147);
          case 150:
            displayNameIndex++;
          case 151:
            _context4.next = 129;
            break;
          case 153:
            _context4.next = 158;
            break;
          case 155:
            _context4.prev = 155;
            _context4.t6 = _context4["catch"](127);
            _iterator43.e(_context4.t6);
          case 158:
            _context4.prev = 158;
            _iterator43.f();
            return _context4.finish(158);
          case 161:
            if (!(that.description !== null)) {
              _context4.next = 198;
              break;
            }
            descriptionIndex = 0;
            _iterator45 = _createForOfIteratorHelper(that.description);
            _context4.prev = 164;
            _iterator45.s();
          case 166:
            if ((_step45 = _iterator45.n()).done) {
              _context4.next = 190;
              break;
            }
            _item3 = _step45.value;
            _iterator46 = _createForOfIteratorHelper(this.transformWithContext(_item3, context));
            _context4.prev = 169;
            _iterator46.s();
          case 171:
            if ((_step46 = _iterator46.n()).done) {
              _context4.next = 179;
              break;
            }
            _error16 = _step46.value;
            _error16.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error16.path.prepend(new PropertySegment(that, "description"));
            _context4.next = 177;
            return _error16;
          case 177:
            _context4.next = 171;
            break;
          case 179:
            _context4.next = 184;
            break;
          case 181:
            _context4.prev = 181;
            _context4.t7 = _context4["catch"](169);
            _iterator46.e(_context4.t7);
          case 184:
            _context4.prev = 184;
            _iterator46.f();
            return _context4.finish(184);
          case 187:
            descriptionIndex++;
          case 188:
            _context4.next = 166;
            break;
          case 190:
            _context4.next = 195;
            break;
          case 192:
            _context4.prev = 192;
            _context4.t8 = _context4["catch"](164);
            _iterator45.e(_context4.t8);
          case 195:
            _context4.prev = 195;
            _iterator45.f();
            return _context4.finish(195);
          case 198:
            if (!(that.administration !== null)) {
              _context4.next = 217;
              break;
            }
            _iterator47 = _createForOfIteratorHelper(this.transformWithContext(that.administration, context));
            _context4.prev = 200;
            _iterator47.s();
          case 202:
            if ((_step47 = _iterator47.n()).done) {
              _context4.next = 209;
              break;
            }
            _error17 = _step47.value;
            _error17.path.prepend(new PropertySegment(that, "administration"));
            _context4.next = 207;
            return _error17;
          case 207:
            _context4.next = 202;
            break;
          case 209:
            _context4.next = 214;
            break;
          case 211:
            _context4.prev = 211;
            _context4.t9 = _context4["catch"](200);
            _iterator47.e(_context4.t9);
          case 214:
            _context4.prev = 214;
            _iterator47.f();
            return _context4.finish(214);
          case 217:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context4.next = 254;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator48 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context4.prev = 220;
            _iterator48.s();
          case 222:
            if ((_step48 = _iterator48.n()).done) {
              _context4.next = 246;
              break;
            }
            _item4 = _step48.value;
            _iterator49 = _createForOfIteratorHelper(this.transformWithContext(_item4, context));
            _context4.prev = 225;
            _iterator49.s();
          case 227:
            if ((_step49 = _iterator49.n()).done) {
              _context4.next = 235;
              break;
            }
            _error18 = _step49.value;
            _error18.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error18.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context4.next = 233;
            return _error18;
          case 233:
            _context4.next = 227;
            break;
          case 235:
            _context4.next = 240;
            break;
          case 237:
            _context4.prev = 237;
            _context4.t10 = _context4["catch"](225);
            _iterator49.e(_context4.t10);
          case 240:
            _context4.prev = 240;
            _iterator49.f();
            return _context4.finish(240);
          case 243:
            embeddedDataSpecificationsIndex++;
          case 244:
            _context4.next = 222;
            break;
          case 246:
            _context4.next = 251;
            break;
          case 248:
            _context4.prev = 248;
            _context4.t11 = _context4["catch"](220);
            _iterator48.e(_context4.t11);
          case 251:
            _context4.prev = 251;
            _iterator48.f();
            return _context4.finish(251);
          case 254:
            if (!(that.derivedFrom !== null)) {
              _context4.next = 273;
              break;
            }
            _iterator50 = _createForOfIteratorHelper(this.transformWithContext(that.derivedFrom, context));
            _context4.prev = 256;
            _iterator50.s();
          case 258:
            if ((_step50 = _iterator50.n()).done) {
              _context4.next = 265;
              break;
            }
            _error19 = _step50.value;
            _error19.path.prepend(new PropertySegment(that, "derivedFrom"));
            _context4.next = 263;
            return _error19;
          case 263:
            _context4.next = 258;
            break;
          case 265:
            _context4.next = 270;
            break;
          case 267:
            _context4.prev = 267;
            _context4.t12 = _context4["catch"](256);
            _iterator50.e(_context4.t12);
          case 270:
            _context4.prev = 270;
            _iterator50.f();
            return _context4.finish(270);
          case 273:
            _iterator51 = _createForOfIteratorHelper(this.transformWithContext(that.assetInformation, context));
            _context4.prev = 274;
            _iterator51.s();
          case 276:
            if ((_step51 = _iterator51.n()).done) {
              _context4.next = 283;
              break;
            }
            _error21 = _step51.value;
            _error21.path.prepend(new PropertySegment(that, "assetInformation"));
            _context4.next = 281;
            return _error21;
          case 281:
            _context4.next = 276;
            break;
          case 283:
            _context4.next = 288;
            break;
          case 285:
            _context4.prev = 285;
            _context4.t13 = _context4["catch"](274);
            _iterator51.e(_context4.t13);
          case 288:
            _context4.prev = 288;
            _iterator51.f();
            return _context4.finish(288);
          case 291:
            if (!(that.submodels !== null)) {
              _context4.next = 328;
              break;
            }
            submodelsIndex = 0;
            _iterator52 = _createForOfIteratorHelper(that.submodels);
            _context4.prev = 294;
            _iterator52.s();
          case 296:
            if ((_step52 = _iterator52.n()).done) {
              _context4.next = 320;
              break;
            }
            _item5 = _step52.value;
            _iterator53 = _createForOfIteratorHelper(this.transformWithContext(_item5, context));
            _context4.prev = 299;
            _iterator53.s();
          case 301:
            if ((_step53 = _iterator53.n()).done) {
              _context4.next = 309;
              break;
            }
            _error20 = _step53.value;
            _error20.path.prepend(new IndexSegment(that.submodels, submodelsIndex));
            _error20.path.prepend(new PropertySegment(that, "submodels"));
            _context4.next = 307;
            return _error20;
          case 307:
            _context4.next = 301;
            break;
          case 309:
            _context4.next = 314;
            break;
          case 311:
            _context4.prev = 311;
            _context4.t14 = _context4["catch"](299);
            _iterator53.e(_context4.t14);
          case 314:
            _context4.prev = 314;
            _iterator53.f();
            return _context4.finish(314);
          case 317:
            submodelsIndex++;
          case 318:
            _context4.next = 296;
            break;
          case 320:
            _context4.next = 325;
            break;
          case 322:
            _context4.prev = 322;
            _context4.t15 = _context4["catch"](294);
            _iterator52.e(_context4.t15);
          case 325:
            _context4.prev = 325;
            _iterator52.f();
            return _context4.finish(325);
          case 328:
          case "end":
            return _context4.stop();
        }
      }, transformAssetAdministrationShellWithContext, this, [[32, 43, 46, 49], [51, 62, 65, 68], [69, 80, 83, 86], [90, 118, 121, 124], [95, 107, 110, 113], [127, 155, 158, 161], [132, 144, 147, 150], [164, 192, 195, 198], [169, 181, 184, 187], [200, 211, 214, 217], [220, 248, 251, 254], [225, 237, 240, 243], [256, 267, 270, 273], [274, 285, 288, 291], [294, 322, 325, 328], [299, 311, 314, 317]]);
    })
  }, {
    key: "transformAssetInformationWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformAssetInformationWithContext(that, context) {
      var _iterator54, _step54, error, _iterator55, _step55, _error23, specificAssetIdsIndex, _iterator56, _step56, item, _iterator57, _step57, _error24, _iterator58, _step58, _error25;
      return _regeneratorRuntime().wrap(function transformAssetInformationWithContext$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            if (!(that.specificAssetIds !== null) || AasCommon.every(AasCommon.map(that.specificAssetIds, function (specificAssetId) {
              return specificAssetId.name != "globalAssetId" || that.globalAssetId !== null && specificAssetId.name == "globalAssetId" && specificAssetId.value == that.globalAssetId;
            }))) {
              _context5.next = 3;
              break;
            }
            _context5.next = 3;
            return new VerificationError("Constraint AASd-116: ``globalAssetId`` is a reserved key. " + "If used as value for the name of specific asset ID then " + "the value of specific asset ID shall be identical to " + "the global asset ID.");
          case 3:
            if ((that.globalAssetId !== null || that.specificAssetIds !== null) && (!(that.specificAssetIds !== null) || that.specificAssetIds.length >= 1)) {
              _context5.next = 6;
              break;
            }
            _context5.next = 6;
            return new VerificationError("Constraint AASd-131: Either the global asset ID shall be " + "defined or at least one specific asset ID.");
          case 6:
            if (!(that.specificAssetIds !== null) || that.specificAssetIds.length >= 1) {
              _context5.next = 9;
              break;
            }
            _context5.next = 9;
            return new VerificationError("Specific asset IDs must be either not set or have at least " + "one item.");
          case 9:
            if (!(that.globalAssetId !== null)) {
              _context5.next = 28;
              break;
            }
            _iterator54 = _createForOfIteratorHelper(verifyIdentifier(that.globalAssetId));
            _context5.prev = 11;
            _iterator54.s();
          case 13:
            if ((_step54 = _iterator54.n()).done) {
              _context5.next = 20;
              break;
            }
            error = _step54.value;
            error.path.prepend(new PropertySegment(that, "globalAssetId"));
            _context5.next = 18;
            return error;
          case 18:
            _context5.next = 13;
            break;
          case 20:
            _context5.next = 25;
            break;
          case 22:
            _context5.prev = 22;
            _context5.t0 = _context5["catch"](11);
            _iterator54.e(_context5.t0);
          case 25:
            _context5.prev = 25;
            _iterator54.f();
            return _context5.finish(25);
          case 28:
            if (!(that.assetType !== null)) {
              _context5.next = 47;
              break;
            }
            _iterator55 = _createForOfIteratorHelper(verifyIdentifier(that.assetType));
            _context5.prev = 30;
            _iterator55.s();
          case 32:
            if ((_step55 = _iterator55.n()).done) {
              _context5.next = 39;
              break;
            }
            _error23 = _step55.value;
            _error23.path.prepend(new PropertySegment(that, "assetType"));
            _context5.next = 37;
            return _error23;
          case 37:
            _context5.next = 32;
            break;
          case 39:
            _context5.next = 44;
            break;
          case 41:
            _context5.prev = 41;
            _context5.t1 = _context5["catch"](30);
            _iterator55.e(_context5.t1);
          case 44:
            _context5.prev = 44;
            _iterator55.f();
            return _context5.finish(44);
          case 47:
            if (!(context === true)) {
              _context5.next = 104;
              break;
            }
            if (!(that.specificAssetIds !== null)) {
              _context5.next = 85;
              break;
            }
            specificAssetIdsIndex = 0;
            _iterator56 = _createForOfIteratorHelper(that.specificAssetIds);
            _context5.prev = 51;
            _iterator56.s();
          case 53:
            if ((_step56 = _iterator56.n()).done) {
              _context5.next = 77;
              break;
            }
            item = _step56.value;
            _iterator57 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context5.prev = 56;
            _iterator57.s();
          case 58:
            if ((_step57 = _iterator57.n()).done) {
              _context5.next = 66;
              break;
            }
            _error24 = _step57.value;
            _error24.path.prepend(new IndexSegment(that.specificAssetIds, specificAssetIdsIndex));
            _error24.path.prepend(new PropertySegment(that, "specificAssetIds"));
            _context5.next = 64;
            return _error24;
          case 64:
            _context5.next = 58;
            break;
          case 66:
            _context5.next = 71;
            break;
          case 68:
            _context5.prev = 68;
            _context5.t2 = _context5["catch"](56);
            _iterator57.e(_context5.t2);
          case 71:
            _context5.prev = 71;
            _iterator57.f();
            return _context5.finish(71);
          case 74:
            specificAssetIdsIndex++;
          case 75:
            _context5.next = 53;
            break;
          case 77:
            _context5.next = 82;
            break;
          case 79:
            _context5.prev = 79;
            _context5.t3 = _context5["catch"](51);
            _iterator56.e(_context5.t3);
          case 82:
            _context5.prev = 82;
            _iterator56.f();
            return _context5.finish(82);
          case 85:
            if (!(that.defaultThumbnail !== null)) {
              _context5.next = 104;
              break;
            }
            _iterator58 = _createForOfIteratorHelper(this.transformWithContext(that.defaultThumbnail, context));
            _context5.prev = 87;
            _iterator58.s();
          case 89:
            if ((_step58 = _iterator58.n()).done) {
              _context5.next = 96;
              break;
            }
            _error25 = _step58.value;
            _error25.path.prepend(new PropertySegment(that, "defaultThumbnail"));
            _context5.next = 94;
            return _error25;
          case 94:
            _context5.next = 89;
            break;
          case 96:
            _context5.next = 101;
            break;
          case 98:
            _context5.prev = 98;
            _context5.t4 = _context5["catch"](87);
            _iterator58.e(_context5.t4);
          case 101:
            _context5.prev = 101;
            _iterator58.f();
            return _context5.finish(101);
          case 104:
          case "end":
            return _context5.stop();
        }
      }, transformAssetInformationWithContext, this, [[11, 22, 25, 28], [30, 41, 44, 47], [51, 79, 82, 85], [56, 68, 71, 74], [87, 98, 101, 104]]);
    })
  }, {
    key: "transformResourceWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformResourceWithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator59, _step59, _error26, _iterator60, _step60, error;
      return _regeneratorRuntime().wrap(function transformResourceWithContext$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _iterator59 = _createForOfIteratorHelper(verifyPathType(that.path));
            _context6.prev = 1;
            _iterator59.s();
          case 3:
            if ((_step59 = _iterator59.n()).done) {
              _context6.next = 10;
              break;
            }
            _error26 = _step59.value;
            _error26.path.prepend(new PropertySegment(that, "path"));
            _context6.next = 8;
            return _error26;
          case 8:
            _context6.next = 3;
            break;
          case 10:
            _context6.next = 15;
            break;
          case 12:
            _context6.prev = 12;
            _context6.t0 = _context6["catch"](1);
            _iterator59.e(_context6.t0);
          case 15:
            _context6.prev = 15;
            _iterator59.f();
            return _context6.finish(15);
          case 18:
            if (!(that.contentType !== null)) {
              _context6.next = 37;
              break;
            }
            _iterator60 = _createForOfIteratorHelper(verifyContentType(that.contentType));
            _context6.prev = 20;
            _iterator60.s();
          case 22:
            if ((_step60 = _iterator60.n()).done) {
              _context6.next = 29;
              break;
            }
            error = _step60.value;
            error.path.prepend(new PropertySegment(that, "contentType"));
            _context6.next = 27;
            return error;
          case 27:
            _context6.next = 22;
            break;
          case 29:
            _context6.next = 34;
            break;
          case 31:
            _context6.prev = 31;
            _context6.t1 = _context6["catch"](20);
            _iterator60.e(_context6.t1);
          case 34:
            _context6.prev = 34;
            _iterator60.f();
            return _context6.finish(34);
          case 37:
          case "end":
            return _context6.stop();
        }
      }, transformResourceWithContext, null, [[1, 12, 15, 18], [20, 31, 34, 37]]);
    })
  }, {
    key: "transformSpecificAssetIdWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformSpecificAssetIdWithContext(that, context) {
      var _iterator61, _step61, _error29, _iterator62, _step62, _error30, _iterator63, _step63, error, supplementalSemanticIdsIndex, _iterator64, _step64, item, _iterator65, _step65, _error27, _iterator66, _step66, _error28;
      return _regeneratorRuntime().wrap(function transformSpecificAssetIdWithContext$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context7.next = 3;
              break;
            }
            _context7.next = 3;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 3:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context7.next = 6;
              break;
            }
            _context7.next = 6;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 6:
            if (!(that.externalSubjectId !== null) || that.externalSubjectId.type == AasTypes.ReferenceTypes.ExternalReference) {
              _context7.next = 9;
              break;
            }
            _context7.next = 9;
            return new VerificationError("Constraint AASd-133: External subject ID shall be " + "an external reference.");
          case 9:
            _iterator61 = _createForOfIteratorHelper(verifyLabelType(that.name));
            _context7.prev = 10;
            _iterator61.s();
          case 12:
            if ((_step61 = _iterator61.n()).done) {
              _context7.next = 19;
              break;
            }
            _error29 = _step61.value;
            _error29.path.prepend(new PropertySegment(that, "name"));
            _context7.next = 17;
            return _error29;
          case 17:
            _context7.next = 12;
            break;
          case 19:
            _context7.next = 24;
            break;
          case 21:
            _context7.prev = 21;
            _context7.t0 = _context7["catch"](10);
            _iterator61.e(_context7.t0);
          case 24:
            _context7.prev = 24;
            _iterator61.f();
            return _context7.finish(24);
          case 27:
            _iterator62 = _createForOfIteratorHelper(verifyIdentifier(that.value));
            _context7.prev = 28;
            _iterator62.s();
          case 30:
            if ((_step62 = _iterator62.n()).done) {
              _context7.next = 37;
              break;
            }
            _error30 = _step62.value;
            _error30.path.prepend(new PropertySegment(that, "value"));
            _context7.next = 35;
            return _error30;
          case 35:
            _context7.next = 30;
            break;
          case 37:
            _context7.next = 42;
            break;
          case 39:
            _context7.prev = 39;
            _context7.t1 = _context7["catch"](28);
            _iterator62.e(_context7.t1);
          case 42:
            _context7.prev = 42;
            _iterator62.f();
            return _context7.finish(42);
          case 45:
            if (!(context === true)) {
              _context7.next = 121;
              break;
            }
            if (!(that.semanticId !== null)) {
              _context7.next = 65;
              break;
            }
            _iterator63 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context7.prev = 48;
            _iterator63.s();
          case 50:
            if ((_step63 = _iterator63.n()).done) {
              _context7.next = 57;
              break;
            }
            error = _step63.value;
            error.path.prepend(new PropertySegment(that, "semanticId"));
            _context7.next = 55;
            return error;
          case 55:
            _context7.next = 50;
            break;
          case 57:
            _context7.next = 62;
            break;
          case 59:
            _context7.prev = 59;
            _context7.t2 = _context7["catch"](48);
            _iterator63.e(_context7.t2);
          case 62:
            _context7.prev = 62;
            _iterator63.f();
            return _context7.finish(62);
          case 65:
            if (!(that.supplementalSemanticIds !== null)) {
              _context7.next = 102;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator64 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context7.prev = 68;
            _iterator64.s();
          case 70:
            if ((_step64 = _iterator64.n()).done) {
              _context7.next = 94;
              break;
            }
            item = _step64.value;
            _iterator65 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context7.prev = 73;
            _iterator65.s();
          case 75:
            if ((_step65 = _iterator65.n()).done) {
              _context7.next = 83;
              break;
            }
            _error27 = _step65.value;
            _error27.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error27.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context7.next = 81;
            return _error27;
          case 81:
            _context7.next = 75;
            break;
          case 83:
            _context7.next = 88;
            break;
          case 85:
            _context7.prev = 85;
            _context7.t3 = _context7["catch"](73);
            _iterator65.e(_context7.t3);
          case 88:
            _context7.prev = 88;
            _iterator65.f();
            return _context7.finish(88);
          case 91:
            supplementalSemanticIdsIndex++;
          case 92:
            _context7.next = 70;
            break;
          case 94:
            _context7.next = 99;
            break;
          case 96:
            _context7.prev = 96;
            _context7.t4 = _context7["catch"](68);
            _iterator64.e(_context7.t4);
          case 99:
            _context7.prev = 99;
            _iterator64.f();
            return _context7.finish(99);
          case 102:
            if (!(that.externalSubjectId !== null)) {
              _context7.next = 121;
              break;
            }
            _iterator66 = _createForOfIteratorHelper(this.transformWithContext(that.externalSubjectId, context));
            _context7.prev = 104;
            _iterator66.s();
          case 106:
            if ((_step66 = _iterator66.n()).done) {
              _context7.next = 113;
              break;
            }
            _error28 = _step66.value;
            _error28.path.prepend(new PropertySegment(that, "externalSubjectId"));
            _context7.next = 111;
            return _error28;
          case 111:
            _context7.next = 106;
            break;
          case 113:
            _context7.next = 118;
            break;
          case 115:
            _context7.prev = 115;
            _context7.t5 = _context7["catch"](104);
            _iterator66.e(_context7.t5);
          case 118:
            _context7.prev = 118;
            _iterator66.f();
            return _context7.finish(118);
          case 121:
          case "end":
            return _context7.stop();
        }
      }, transformSpecificAssetIdWithContext, this, [[10, 21, 24, 27], [28, 39, 42, 45], [48, 59, 62, 65], [68, 96, 99, 102], [73, 85, 88, 91], [104, 115, 118, 121]]);
    })
  }, {
    key: "transformSubmodelWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformSubmodelWithContext(that, context) {
      var _iterator67, _step67, error, _iterator68, _step68, _error31, _iterator69, _step69, _error41, extensionsIndex, _iterator70, _step70, item, _iterator71, _step71, _error32, displayNameIndex, _iterator72, _step72, _item6, _iterator73, _step73, _error33, descriptionIndex, _iterator74, _step74, _item7, _iterator75, _step75, _error34, _iterator76, _step76, _error35, _iterator77, _step77, _error36, supplementalSemanticIdsIndex, _iterator78, _step78, _item8, _iterator79, _step79, _error37, qualifiersIndex, _iterator80, _step80, _item9, _iterator81, _step81, _error38, embeddedDataSpecificationsIndex, _iterator82, _step82, _item10, _iterator83, _step83, _error39, submodelElementsIndex, _iterator84, _step84, _item11, _iterator85, _step85, _error40;
      return _regeneratorRuntime().wrap(function transformSubmodelWithContext$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context8.next = 3;
              break;
            }
            _context8.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context8.next = 6;
              break;
            }
            _context8.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context8.next = 9;
              break;
            }
            _context8.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context8.next = 12;
              break;
            }
            _context8.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context8.next = 15;
              break;
            }
            _context8.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context8.next = 18;
              break;
            }
            _context8.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context8.next = 21;
              break;
            }
            _context8.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context8.next = 24;
              break;
            }
            _context8.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context8.next = 27;
              break;
            }
            _context8.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context8.next = 30;
              break;
            }
            _context8.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context8.next = 33;
              break;
            }
            _context8.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.submodelElements !== null) || that.submodelElements.length >= 1) {
              _context8.next = 36;
              break;
            }
            _context8.next = 36;
            return new VerificationError("Submodel elements must be either not set or have at least " + "one item.");
          case 36:
            if (!(that.submodelElements !== null) || AasCommon.every(AasCommon.map(that.submodelElements, function (item) {
              return item.idShort !== null;
            }))) {
              _context8.next = 39;
              break;
            }
            _context8.next = 39;
            return new VerificationError("ID-shorts need to be defined for all the items of submodel " + "elements according to AASd-117 (ID-short of Referables not " + "being a direct child of a Submodel element list shall be " + "specified).");
          case 39:
            if (!(that.submodelElements !== null) || idShortsAreUnique(that.submodelElements)) {
              _context8.next = 42;
              break;
            }
            _context8.next = 42;
            return new VerificationError("Constraint AASd-022: ID-short of non-identifiable " + "referables within the same name space shall be unique " + "(case-sensitive).");
          case 42:
            if (!(that.submodelElements !== null) || !(that.kindOrDefault() != AasTypes.ModellingKind.Template) || AasCommon.every(AasCommon.map(that.submodelElements, function (submodelElement) {
              return !(submodelElement.qualifiers !== null) || AasCommon.every(AasCommon.map(submodelElement.qualifiers, function (qualifier) {
                return qualifier.kindOrDefault() != AasTypes.QualifierKind.TemplateQualifier;
              }));
            }))) {
              _context8.next = 45;
              break;
            }
            _context8.next = 45;
            return new VerificationError("Constraint AASd-129: If any qualifier kind value of " + "a Submodel element qualifier (attribute qualifier inherited " + "via Qualifiable) is equal to Template Qualifier then " + "the submodel element shall be part of a submodel template, " + "i.e. a Submodel with submodel kind (attribute kind " + "inherited via Has-Kind) value is equal to Template.");
          case 45:
            if (!(that.qualifiers !== null) || !AasCommon.some(AasCommon.map(that.qualifiers, function (qualifier) {
              return qualifier.kindOrDefault() == AasTypes.QualifierKind.TemplateQualifier;
            })) || that.kindOrDefault() == AasTypes.ModellingKind.Template) {
              _context8.next = 48;
              break;
            }
            _context8.next = 48;
            return new VerificationError("Constraint AASd-119: If any qualifier kind value of " + "a qualifiable qualifier is equal to template qualifier and " + "the qualified element has kind then the qualified element " + "shall be of kind template.");
          case 48:
            if (!(that.category !== null)) {
              _context8.next = 67;
              break;
            }
            _iterator67 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context8.prev = 50;
            _iterator67.s();
          case 52:
            if ((_step67 = _iterator67.n()).done) {
              _context8.next = 59;
              break;
            }
            error = _step67.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context8.next = 57;
            return error;
          case 57:
            _context8.next = 52;
            break;
          case 59:
            _context8.next = 64;
            break;
          case 61:
            _context8.prev = 61;
            _context8.t0 = _context8["catch"](50);
            _iterator67.e(_context8.t0);
          case 64:
            _context8.prev = 64;
            _iterator67.f();
            return _context8.finish(64);
          case 67:
            if (!(that.idShort !== null)) {
              _context8.next = 86;
              break;
            }
            _iterator68 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context8.prev = 69;
            _iterator68.s();
          case 71:
            if ((_step68 = _iterator68.n()).done) {
              _context8.next = 78;
              break;
            }
            _error31 = _step68.value;
            _error31.path.prepend(new PropertySegment(that, "idShort"));
            _context8.next = 76;
            return _error31;
          case 76:
            _context8.next = 71;
            break;
          case 78:
            _context8.next = 83;
            break;
          case 80:
            _context8.prev = 80;
            _context8.t1 = _context8["catch"](69);
            _iterator68.e(_context8.t1);
          case 83:
            _context8.prev = 83;
            _iterator68.f();
            return _context8.finish(83);
          case 86:
            _iterator69 = _createForOfIteratorHelper(verifyIdentifier(that.id));
            _context8.prev = 87;
            _iterator69.s();
          case 89:
            if ((_step69 = _iterator69.n()).done) {
              _context8.next = 96;
              break;
            }
            _error41 = _step69.value;
            _error41.path.prepend(new PropertySegment(that, "id"));
            _context8.next = 94;
            return _error41;
          case 94:
            _context8.next = 89;
            break;
          case 96:
            _context8.next = 101;
            break;
          case 98:
            _context8.prev = 98;
            _context8.t2 = _context8["catch"](87);
            _iterator69.e(_context8.t2);
          case 101:
            _context8.prev = 101;
            _iterator69.f();
            return _context8.finish(101);
          case 104:
            if (!(context === true)) {
              _context8.next = 402;
              break;
            }
            if (!(that.extensions !== null)) {
              _context8.next = 142;
              break;
            }
            extensionsIndex = 0;
            _iterator70 = _createForOfIteratorHelper(that.extensions);
            _context8.prev = 108;
            _iterator70.s();
          case 110:
            if ((_step70 = _iterator70.n()).done) {
              _context8.next = 134;
              break;
            }
            item = _step70.value;
            _iterator71 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context8.prev = 113;
            _iterator71.s();
          case 115:
            if ((_step71 = _iterator71.n()).done) {
              _context8.next = 123;
              break;
            }
            _error32 = _step71.value;
            _error32.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error32.path.prepend(new PropertySegment(that, "extensions"));
            _context8.next = 121;
            return _error32;
          case 121:
            _context8.next = 115;
            break;
          case 123:
            _context8.next = 128;
            break;
          case 125:
            _context8.prev = 125;
            _context8.t3 = _context8["catch"](113);
            _iterator71.e(_context8.t3);
          case 128:
            _context8.prev = 128;
            _iterator71.f();
            return _context8.finish(128);
          case 131:
            extensionsIndex++;
          case 132:
            _context8.next = 110;
            break;
          case 134:
            _context8.next = 139;
            break;
          case 136:
            _context8.prev = 136;
            _context8.t4 = _context8["catch"](108);
            _iterator70.e(_context8.t4);
          case 139:
            _context8.prev = 139;
            _iterator70.f();
            return _context8.finish(139);
          case 142:
            if (!(that.displayName !== null)) {
              _context8.next = 179;
              break;
            }
            displayNameIndex = 0;
            _iterator72 = _createForOfIteratorHelper(that.displayName);
            _context8.prev = 145;
            _iterator72.s();
          case 147:
            if ((_step72 = _iterator72.n()).done) {
              _context8.next = 171;
              break;
            }
            _item6 = _step72.value;
            _iterator73 = _createForOfIteratorHelper(this.transformWithContext(_item6, context));
            _context8.prev = 150;
            _iterator73.s();
          case 152:
            if ((_step73 = _iterator73.n()).done) {
              _context8.next = 160;
              break;
            }
            _error33 = _step73.value;
            _error33.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error33.path.prepend(new PropertySegment(that, "displayName"));
            _context8.next = 158;
            return _error33;
          case 158:
            _context8.next = 152;
            break;
          case 160:
            _context8.next = 165;
            break;
          case 162:
            _context8.prev = 162;
            _context8.t5 = _context8["catch"](150);
            _iterator73.e(_context8.t5);
          case 165:
            _context8.prev = 165;
            _iterator73.f();
            return _context8.finish(165);
          case 168:
            displayNameIndex++;
          case 169:
            _context8.next = 147;
            break;
          case 171:
            _context8.next = 176;
            break;
          case 173:
            _context8.prev = 173;
            _context8.t6 = _context8["catch"](145);
            _iterator72.e(_context8.t6);
          case 176:
            _context8.prev = 176;
            _iterator72.f();
            return _context8.finish(176);
          case 179:
            if (!(that.description !== null)) {
              _context8.next = 216;
              break;
            }
            descriptionIndex = 0;
            _iterator74 = _createForOfIteratorHelper(that.description);
            _context8.prev = 182;
            _iterator74.s();
          case 184:
            if ((_step74 = _iterator74.n()).done) {
              _context8.next = 208;
              break;
            }
            _item7 = _step74.value;
            _iterator75 = _createForOfIteratorHelper(this.transformWithContext(_item7, context));
            _context8.prev = 187;
            _iterator75.s();
          case 189:
            if ((_step75 = _iterator75.n()).done) {
              _context8.next = 197;
              break;
            }
            _error34 = _step75.value;
            _error34.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error34.path.prepend(new PropertySegment(that, "description"));
            _context8.next = 195;
            return _error34;
          case 195:
            _context8.next = 189;
            break;
          case 197:
            _context8.next = 202;
            break;
          case 199:
            _context8.prev = 199;
            _context8.t7 = _context8["catch"](187);
            _iterator75.e(_context8.t7);
          case 202:
            _context8.prev = 202;
            _iterator75.f();
            return _context8.finish(202);
          case 205:
            descriptionIndex++;
          case 206:
            _context8.next = 184;
            break;
          case 208:
            _context8.next = 213;
            break;
          case 210:
            _context8.prev = 210;
            _context8.t8 = _context8["catch"](182);
            _iterator74.e(_context8.t8);
          case 213:
            _context8.prev = 213;
            _iterator74.f();
            return _context8.finish(213);
          case 216:
            if (!(that.administration !== null)) {
              _context8.next = 235;
              break;
            }
            _iterator76 = _createForOfIteratorHelper(this.transformWithContext(that.administration, context));
            _context8.prev = 218;
            _iterator76.s();
          case 220:
            if ((_step76 = _iterator76.n()).done) {
              _context8.next = 227;
              break;
            }
            _error35 = _step76.value;
            _error35.path.prepend(new PropertySegment(that, "administration"));
            _context8.next = 225;
            return _error35;
          case 225:
            _context8.next = 220;
            break;
          case 227:
            _context8.next = 232;
            break;
          case 229:
            _context8.prev = 229;
            _context8.t9 = _context8["catch"](218);
            _iterator76.e(_context8.t9);
          case 232:
            _context8.prev = 232;
            _iterator76.f();
            return _context8.finish(232);
          case 235:
            if (!(that.semanticId !== null)) {
              _context8.next = 254;
              break;
            }
            _iterator77 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context8.prev = 237;
            _iterator77.s();
          case 239:
            if ((_step77 = _iterator77.n()).done) {
              _context8.next = 246;
              break;
            }
            _error36 = _step77.value;
            _error36.path.prepend(new PropertySegment(that, "semanticId"));
            _context8.next = 244;
            return _error36;
          case 244:
            _context8.next = 239;
            break;
          case 246:
            _context8.next = 251;
            break;
          case 248:
            _context8.prev = 248;
            _context8.t10 = _context8["catch"](237);
            _iterator77.e(_context8.t10);
          case 251:
            _context8.prev = 251;
            _iterator77.f();
            return _context8.finish(251);
          case 254:
            if (!(that.supplementalSemanticIds !== null)) {
              _context8.next = 291;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator78 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context8.prev = 257;
            _iterator78.s();
          case 259:
            if ((_step78 = _iterator78.n()).done) {
              _context8.next = 283;
              break;
            }
            _item8 = _step78.value;
            _iterator79 = _createForOfIteratorHelper(this.transformWithContext(_item8, context));
            _context8.prev = 262;
            _iterator79.s();
          case 264:
            if ((_step79 = _iterator79.n()).done) {
              _context8.next = 272;
              break;
            }
            _error37 = _step79.value;
            _error37.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error37.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context8.next = 270;
            return _error37;
          case 270:
            _context8.next = 264;
            break;
          case 272:
            _context8.next = 277;
            break;
          case 274:
            _context8.prev = 274;
            _context8.t11 = _context8["catch"](262);
            _iterator79.e(_context8.t11);
          case 277:
            _context8.prev = 277;
            _iterator79.f();
            return _context8.finish(277);
          case 280:
            supplementalSemanticIdsIndex++;
          case 281:
            _context8.next = 259;
            break;
          case 283:
            _context8.next = 288;
            break;
          case 285:
            _context8.prev = 285;
            _context8.t12 = _context8["catch"](257);
            _iterator78.e(_context8.t12);
          case 288:
            _context8.prev = 288;
            _iterator78.f();
            return _context8.finish(288);
          case 291:
            if (!(that.qualifiers !== null)) {
              _context8.next = 328;
              break;
            }
            qualifiersIndex = 0;
            _iterator80 = _createForOfIteratorHelper(that.qualifiers);
            _context8.prev = 294;
            _iterator80.s();
          case 296:
            if ((_step80 = _iterator80.n()).done) {
              _context8.next = 320;
              break;
            }
            _item9 = _step80.value;
            _iterator81 = _createForOfIteratorHelper(this.transformWithContext(_item9, context));
            _context8.prev = 299;
            _iterator81.s();
          case 301:
            if ((_step81 = _iterator81.n()).done) {
              _context8.next = 309;
              break;
            }
            _error38 = _step81.value;
            _error38.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error38.path.prepend(new PropertySegment(that, "qualifiers"));
            _context8.next = 307;
            return _error38;
          case 307:
            _context8.next = 301;
            break;
          case 309:
            _context8.next = 314;
            break;
          case 311:
            _context8.prev = 311;
            _context8.t13 = _context8["catch"](299);
            _iterator81.e(_context8.t13);
          case 314:
            _context8.prev = 314;
            _iterator81.f();
            return _context8.finish(314);
          case 317:
            qualifiersIndex++;
          case 318:
            _context8.next = 296;
            break;
          case 320:
            _context8.next = 325;
            break;
          case 322:
            _context8.prev = 322;
            _context8.t14 = _context8["catch"](294);
            _iterator80.e(_context8.t14);
          case 325:
            _context8.prev = 325;
            _iterator80.f();
            return _context8.finish(325);
          case 328:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context8.next = 365;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator82 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context8.prev = 331;
            _iterator82.s();
          case 333:
            if ((_step82 = _iterator82.n()).done) {
              _context8.next = 357;
              break;
            }
            _item10 = _step82.value;
            _iterator83 = _createForOfIteratorHelper(this.transformWithContext(_item10, context));
            _context8.prev = 336;
            _iterator83.s();
          case 338:
            if ((_step83 = _iterator83.n()).done) {
              _context8.next = 346;
              break;
            }
            _error39 = _step83.value;
            _error39.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error39.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context8.next = 344;
            return _error39;
          case 344:
            _context8.next = 338;
            break;
          case 346:
            _context8.next = 351;
            break;
          case 348:
            _context8.prev = 348;
            _context8.t15 = _context8["catch"](336);
            _iterator83.e(_context8.t15);
          case 351:
            _context8.prev = 351;
            _iterator83.f();
            return _context8.finish(351);
          case 354:
            embeddedDataSpecificationsIndex++;
          case 355:
            _context8.next = 333;
            break;
          case 357:
            _context8.next = 362;
            break;
          case 359:
            _context8.prev = 359;
            _context8.t16 = _context8["catch"](331);
            _iterator82.e(_context8.t16);
          case 362:
            _context8.prev = 362;
            _iterator82.f();
            return _context8.finish(362);
          case 365:
            if (!(that.submodelElements !== null)) {
              _context8.next = 402;
              break;
            }
            submodelElementsIndex = 0;
            _iterator84 = _createForOfIteratorHelper(that.submodelElements);
            _context8.prev = 368;
            _iterator84.s();
          case 370:
            if ((_step84 = _iterator84.n()).done) {
              _context8.next = 394;
              break;
            }
            _item11 = _step84.value;
            _iterator85 = _createForOfIteratorHelper(this.transformWithContext(_item11, context));
            _context8.prev = 373;
            _iterator85.s();
          case 375:
            if ((_step85 = _iterator85.n()).done) {
              _context8.next = 383;
              break;
            }
            _error40 = _step85.value;
            _error40.path.prepend(new IndexSegment(that.submodelElements, submodelElementsIndex));
            _error40.path.prepend(new PropertySegment(that, "submodelElements"));
            _context8.next = 381;
            return _error40;
          case 381:
            _context8.next = 375;
            break;
          case 383:
            _context8.next = 388;
            break;
          case 385:
            _context8.prev = 385;
            _context8.t17 = _context8["catch"](373);
            _iterator85.e(_context8.t17);
          case 388:
            _context8.prev = 388;
            _iterator85.f();
            return _context8.finish(388);
          case 391:
            submodelElementsIndex++;
          case 392:
            _context8.next = 370;
            break;
          case 394:
            _context8.next = 399;
            break;
          case 396:
            _context8.prev = 396;
            _context8.t18 = _context8["catch"](368);
            _iterator84.e(_context8.t18);
          case 399:
            _context8.prev = 399;
            _iterator84.f();
            return _context8.finish(399);
          case 402:
          case "end":
            return _context8.stop();
        }
      }, transformSubmodelWithContext, this, [[50, 61, 64, 67], [69, 80, 83, 86], [87, 98, 101, 104], [108, 136, 139, 142], [113, 125, 128, 131], [145, 173, 176, 179], [150, 162, 165, 168], [182, 210, 213, 216], [187, 199, 202, 205], [218, 229, 232, 235], [237, 248, 251, 254], [257, 285, 288, 291], [262, 274, 277, 280], [294, 322, 325, 328], [299, 311, 314, 317], [331, 359, 362, 365], [336, 348, 351, 354], [368, 396, 399, 402], [373, 385, 388, 391]]);
    })
  }, {
    key: "transformRelationshipElementWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformRelationshipElementWithContext(that, context) {
      var _iterator86, _step86, error, _iterator87, _step87, _error42, extensionsIndex, _iterator88, _step88, item, _iterator89, _step89, _error43, displayNameIndex, _iterator90, _step90, _item12, _iterator91, _step91, _error44, descriptionIndex, _iterator92, _step92, _item13, _iterator93, _step93, _error45, _iterator94, _step94, _error46, supplementalSemanticIdsIndex, _iterator95, _step95, _item14, _iterator96, _step96, _error47, qualifiersIndex, _iterator97, _step97, _item15, _iterator98, _step98, _error48, embeddedDataSpecificationsIndex, _iterator99, _step99, _item16, _iterator100, _step100, _error49, _iterator101, _step101, _error50, _iterator102, _step102, _error51;
      return _regeneratorRuntime().wrap(function transformRelationshipElementWithContext$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context9.next = 3;
              break;
            }
            _context9.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context9.next = 6;
              break;
            }
            _context9.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context9.next = 9;
              break;
            }
            _context9.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context9.next = 12;
              break;
            }
            _context9.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context9.next = 15;
              break;
            }
            _context9.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context9.next = 18;
              break;
            }
            _context9.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context9.next = 21;
              break;
            }
            _context9.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context9.next = 24;
              break;
            }
            _context9.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context9.next = 27;
              break;
            }
            _context9.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context9.next = 30;
              break;
            }
            _context9.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context9.next = 33;
              break;
            }
            _context9.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null)) {
              _context9.next = 52;
              break;
            }
            _iterator86 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context9.prev = 35;
            _iterator86.s();
          case 37:
            if ((_step86 = _iterator86.n()).done) {
              _context9.next = 44;
              break;
            }
            error = _step86.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context9.next = 42;
            return error;
          case 42:
            _context9.next = 37;
            break;
          case 44:
            _context9.next = 49;
            break;
          case 46:
            _context9.prev = 46;
            _context9.t0 = _context9["catch"](35);
            _iterator86.e(_context9.t0);
          case 49:
            _context9.prev = 49;
            _iterator86.f();
            return _context9.finish(49);
          case 52:
            if (!(that.idShort !== null)) {
              _context9.next = 71;
              break;
            }
            _iterator87 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context9.prev = 54;
            _iterator87.s();
          case 56:
            if ((_step87 = _iterator87.n()).done) {
              _context9.next = 63;
              break;
            }
            _error42 = _step87.value;
            _error42.path.prepend(new PropertySegment(that, "idShort"));
            _context9.next = 61;
            return _error42;
          case 61:
            _context9.next = 56;
            break;
          case 63:
            _context9.next = 68;
            break;
          case 65:
            _context9.prev = 65;
            _context9.t1 = _context9["catch"](54);
            _iterator87.e(_context9.t1);
          case 68:
            _context9.prev = 68;
            _iterator87.f();
            return _context9.finish(68);
          case 71:
            if (!(context === true)) {
              _context9.next = 349;
              break;
            }
            if (!(that.extensions !== null)) {
              _context9.next = 109;
              break;
            }
            extensionsIndex = 0;
            _iterator88 = _createForOfIteratorHelper(that.extensions);
            _context9.prev = 75;
            _iterator88.s();
          case 77:
            if ((_step88 = _iterator88.n()).done) {
              _context9.next = 101;
              break;
            }
            item = _step88.value;
            _iterator89 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context9.prev = 80;
            _iterator89.s();
          case 82:
            if ((_step89 = _iterator89.n()).done) {
              _context9.next = 90;
              break;
            }
            _error43 = _step89.value;
            _error43.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error43.path.prepend(new PropertySegment(that, "extensions"));
            _context9.next = 88;
            return _error43;
          case 88:
            _context9.next = 82;
            break;
          case 90:
            _context9.next = 95;
            break;
          case 92:
            _context9.prev = 92;
            _context9.t2 = _context9["catch"](80);
            _iterator89.e(_context9.t2);
          case 95:
            _context9.prev = 95;
            _iterator89.f();
            return _context9.finish(95);
          case 98:
            extensionsIndex++;
          case 99:
            _context9.next = 77;
            break;
          case 101:
            _context9.next = 106;
            break;
          case 103:
            _context9.prev = 103;
            _context9.t3 = _context9["catch"](75);
            _iterator88.e(_context9.t3);
          case 106:
            _context9.prev = 106;
            _iterator88.f();
            return _context9.finish(106);
          case 109:
            if (!(that.displayName !== null)) {
              _context9.next = 146;
              break;
            }
            displayNameIndex = 0;
            _iterator90 = _createForOfIteratorHelper(that.displayName);
            _context9.prev = 112;
            _iterator90.s();
          case 114:
            if ((_step90 = _iterator90.n()).done) {
              _context9.next = 138;
              break;
            }
            _item12 = _step90.value;
            _iterator91 = _createForOfIteratorHelper(this.transformWithContext(_item12, context));
            _context9.prev = 117;
            _iterator91.s();
          case 119:
            if ((_step91 = _iterator91.n()).done) {
              _context9.next = 127;
              break;
            }
            _error44 = _step91.value;
            _error44.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error44.path.prepend(new PropertySegment(that, "displayName"));
            _context9.next = 125;
            return _error44;
          case 125:
            _context9.next = 119;
            break;
          case 127:
            _context9.next = 132;
            break;
          case 129:
            _context9.prev = 129;
            _context9.t4 = _context9["catch"](117);
            _iterator91.e(_context9.t4);
          case 132:
            _context9.prev = 132;
            _iterator91.f();
            return _context9.finish(132);
          case 135:
            displayNameIndex++;
          case 136:
            _context9.next = 114;
            break;
          case 138:
            _context9.next = 143;
            break;
          case 140:
            _context9.prev = 140;
            _context9.t5 = _context9["catch"](112);
            _iterator90.e(_context9.t5);
          case 143:
            _context9.prev = 143;
            _iterator90.f();
            return _context9.finish(143);
          case 146:
            if (!(that.description !== null)) {
              _context9.next = 183;
              break;
            }
            descriptionIndex = 0;
            _iterator92 = _createForOfIteratorHelper(that.description);
            _context9.prev = 149;
            _iterator92.s();
          case 151:
            if ((_step92 = _iterator92.n()).done) {
              _context9.next = 175;
              break;
            }
            _item13 = _step92.value;
            _iterator93 = _createForOfIteratorHelper(this.transformWithContext(_item13, context));
            _context9.prev = 154;
            _iterator93.s();
          case 156:
            if ((_step93 = _iterator93.n()).done) {
              _context9.next = 164;
              break;
            }
            _error45 = _step93.value;
            _error45.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error45.path.prepend(new PropertySegment(that, "description"));
            _context9.next = 162;
            return _error45;
          case 162:
            _context9.next = 156;
            break;
          case 164:
            _context9.next = 169;
            break;
          case 166:
            _context9.prev = 166;
            _context9.t6 = _context9["catch"](154);
            _iterator93.e(_context9.t6);
          case 169:
            _context9.prev = 169;
            _iterator93.f();
            return _context9.finish(169);
          case 172:
            descriptionIndex++;
          case 173:
            _context9.next = 151;
            break;
          case 175:
            _context9.next = 180;
            break;
          case 177:
            _context9.prev = 177;
            _context9.t7 = _context9["catch"](149);
            _iterator92.e(_context9.t7);
          case 180:
            _context9.prev = 180;
            _iterator92.f();
            return _context9.finish(180);
          case 183:
            if (!(that.semanticId !== null)) {
              _context9.next = 202;
              break;
            }
            _iterator94 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context9.prev = 185;
            _iterator94.s();
          case 187:
            if ((_step94 = _iterator94.n()).done) {
              _context9.next = 194;
              break;
            }
            _error46 = _step94.value;
            _error46.path.prepend(new PropertySegment(that, "semanticId"));
            _context9.next = 192;
            return _error46;
          case 192:
            _context9.next = 187;
            break;
          case 194:
            _context9.next = 199;
            break;
          case 196:
            _context9.prev = 196;
            _context9.t8 = _context9["catch"](185);
            _iterator94.e(_context9.t8);
          case 199:
            _context9.prev = 199;
            _iterator94.f();
            return _context9.finish(199);
          case 202:
            if (!(that.supplementalSemanticIds !== null)) {
              _context9.next = 239;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator95 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context9.prev = 205;
            _iterator95.s();
          case 207:
            if ((_step95 = _iterator95.n()).done) {
              _context9.next = 231;
              break;
            }
            _item14 = _step95.value;
            _iterator96 = _createForOfIteratorHelper(this.transformWithContext(_item14, context));
            _context9.prev = 210;
            _iterator96.s();
          case 212:
            if ((_step96 = _iterator96.n()).done) {
              _context9.next = 220;
              break;
            }
            _error47 = _step96.value;
            _error47.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error47.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context9.next = 218;
            return _error47;
          case 218:
            _context9.next = 212;
            break;
          case 220:
            _context9.next = 225;
            break;
          case 222:
            _context9.prev = 222;
            _context9.t9 = _context9["catch"](210);
            _iterator96.e(_context9.t9);
          case 225:
            _context9.prev = 225;
            _iterator96.f();
            return _context9.finish(225);
          case 228:
            supplementalSemanticIdsIndex++;
          case 229:
            _context9.next = 207;
            break;
          case 231:
            _context9.next = 236;
            break;
          case 233:
            _context9.prev = 233;
            _context9.t10 = _context9["catch"](205);
            _iterator95.e(_context9.t10);
          case 236:
            _context9.prev = 236;
            _iterator95.f();
            return _context9.finish(236);
          case 239:
            if (!(that.qualifiers !== null)) {
              _context9.next = 276;
              break;
            }
            qualifiersIndex = 0;
            _iterator97 = _createForOfIteratorHelper(that.qualifiers);
            _context9.prev = 242;
            _iterator97.s();
          case 244:
            if ((_step97 = _iterator97.n()).done) {
              _context9.next = 268;
              break;
            }
            _item15 = _step97.value;
            _iterator98 = _createForOfIteratorHelper(this.transformWithContext(_item15, context));
            _context9.prev = 247;
            _iterator98.s();
          case 249:
            if ((_step98 = _iterator98.n()).done) {
              _context9.next = 257;
              break;
            }
            _error48 = _step98.value;
            _error48.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error48.path.prepend(new PropertySegment(that, "qualifiers"));
            _context9.next = 255;
            return _error48;
          case 255:
            _context9.next = 249;
            break;
          case 257:
            _context9.next = 262;
            break;
          case 259:
            _context9.prev = 259;
            _context9.t11 = _context9["catch"](247);
            _iterator98.e(_context9.t11);
          case 262:
            _context9.prev = 262;
            _iterator98.f();
            return _context9.finish(262);
          case 265:
            qualifiersIndex++;
          case 266:
            _context9.next = 244;
            break;
          case 268:
            _context9.next = 273;
            break;
          case 270:
            _context9.prev = 270;
            _context9.t12 = _context9["catch"](242);
            _iterator97.e(_context9.t12);
          case 273:
            _context9.prev = 273;
            _iterator97.f();
            return _context9.finish(273);
          case 276:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context9.next = 313;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator99 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context9.prev = 279;
            _iterator99.s();
          case 281:
            if ((_step99 = _iterator99.n()).done) {
              _context9.next = 305;
              break;
            }
            _item16 = _step99.value;
            _iterator100 = _createForOfIteratorHelper(this.transformWithContext(_item16, context));
            _context9.prev = 284;
            _iterator100.s();
          case 286:
            if ((_step100 = _iterator100.n()).done) {
              _context9.next = 294;
              break;
            }
            _error49 = _step100.value;
            _error49.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error49.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context9.next = 292;
            return _error49;
          case 292:
            _context9.next = 286;
            break;
          case 294:
            _context9.next = 299;
            break;
          case 296:
            _context9.prev = 296;
            _context9.t13 = _context9["catch"](284);
            _iterator100.e(_context9.t13);
          case 299:
            _context9.prev = 299;
            _iterator100.f();
            return _context9.finish(299);
          case 302:
            embeddedDataSpecificationsIndex++;
          case 303:
            _context9.next = 281;
            break;
          case 305:
            _context9.next = 310;
            break;
          case 307:
            _context9.prev = 307;
            _context9.t14 = _context9["catch"](279);
            _iterator99.e(_context9.t14);
          case 310:
            _context9.prev = 310;
            _iterator99.f();
            return _context9.finish(310);
          case 313:
            _iterator101 = _createForOfIteratorHelper(this.transformWithContext(that.first, context));
            _context9.prev = 314;
            _iterator101.s();
          case 316:
            if ((_step101 = _iterator101.n()).done) {
              _context9.next = 323;
              break;
            }
            _error50 = _step101.value;
            _error50.path.prepend(new PropertySegment(that, "first"));
            _context9.next = 321;
            return _error50;
          case 321:
            _context9.next = 316;
            break;
          case 323:
            _context9.next = 328;
            break;
          case 325:
            _context9.prev = 325;
            _context9.t15 = _context9["catch"](314);
            _iterator101.e(_context9.t15);
          case 328:
            _context9.prev = 328;
            _iterator101.f();
            return _context9.finish(328);
          case 331:
            _iterator102 = _createForOfIteratorHelper(this.transformWithContext(that.second, context));
            _context9.prev = 332;
            _iterator102.s();
          case 334:
            if ((_step102 = _iterator102.n()).done) {
              _context9.next = 341;
              break;
            }
            _error51 = _step102.value;
            _error51.path.prepend(new PropertySegment(that, "second"));
            _context9.next = 339;
            return _error51;
          case 339:
            _context9.next = 334;
            break;
          case 341:
            _context9.next = 346;
            break;
          case 343:
            _context9.prev = 343;
            _context9.t16 = _context9["catch"](332);
            _iterator102.e(_context9.t16);
          case 346:
            _context9.prev = 346;
            _iterator102.f();
            return _context9.finish(346);
          case 349:
          case "end":
            return _context9.stop();
        }
      }, transformRelationshipElementWithContext, this, [[35, 46, 49, 52], [54, 65, 68, 71], [75, 103, 106, 109], [80, 92, 95, 98], [112, 140, 143, 146], [117, 129, 132, 135], [149, 177, 180, 183], [154, 166, 169, 172], [185, 196, 199, 202], [205, 233, 236, 239], [210, 222, 225, 228], [242, 270, 273, 276], [247, 259, 262, 265], [279, 307, 310, 313], [284, 296, 299, 302], [314, 325, 328, 331], [332, 343, 346, 349]]);
    })
  }, {
    key: "transformSubmodelElementListWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformSubmodelElementListWithContext(that, context) {
      var _iterator103, _step103, error, _iterator104, _step104, _error52, extensionsIndex, _iterator105, _step105, item, _iterator106, _step106, _error53, displayNameIndex, _iterator107, _step107, _item17, _iterator108, _step108, _error54, descriptionIndex, _iterator109, _step109, _item18, _iterator110, _step110, _error55, _iterator111, _step111, _error56, supplementalSemanticIdsIndex, _iterator112, _step112, _item19, _iterator113, _step113, _error57, qualifiersIndex, _iterator114, _step114, _item20, _iterator115, _step115, _error58, embeddedDataSpecificationsIndex, _iterator116, _step116, _item21, _iterator117, _step117, _error59, _iterator118, _step118, _error60, valueIndex, _iterator119, _step119, _item22, _iterator120, _step120, _error61;
      return _regeneratorRuntime().wrap(function transformSubmodelElementListWithContext$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context10.next = 3;
              break;
            }
            _context10.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context10.next = 6;
              break;
            }
            _context10.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context10.next = 9;
              break;
            }
            _context10.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context10.next = 12;
              break;
            }
            _context10.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context10.next = 15;
              break;
            }
            _context10.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context10.next = 18;
              break;
            }
            _context10.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context10.next = 21;
              break;
            }
            _context10.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context10.next = 24;
              break;
            }
            _context10.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context10.next = 27;
              break;
            }
            _context10.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context10.next = 30;
              break;
            }
            _context10.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context10.next = 33;
              break;
            }
            _context10.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.value !== null) || that.value.length >= 1) {
              _context10.next = 36;
              break;
            }
            _context10.next = 36;
            return new VerificationError("Value must be either not set or have at least one item.");
          case 36:
            if (!(that.value !== null && that.semanticIdListElement !== null) || AasCommon.every(AasCommon.map(that.value, function (child) {
              return !(child.semanticId !== null) || referenceKeyValuesEqual(child.semanticId, that.semanticIdListElement);
            }))) {
              _context10.next = 39;
              break;
            }
            _context10.next = 39;
            return new VerificationError("Constraint AASd-107: If a first level child element has " + "a semantic ID it shall be identical to semantic ID list " + "element.");
          case 39:
            if (!(that.value !== null) || submodelElementsHaveIdenticalSemanticIds(that.value)) {
              _context10.next = 42;
              break;
            }
            _context10.next = 42;
            return new VerificationError("Constraint AASd-114: If two first level child elements have " + "a semantic ID then they shall be identical.");
          case 42:
            if (!(that.value !== null) || AasCommon.every(AasCommon.map(that.value, function (element) {
              return submodelElementIsOfType(element, that.typeValueListElement);
            }))) {
              _context10.next = 45;
              break;
            }
            _context10.next = 45;
            return new VerificationError("Constraint AASd-108: All first level child elements shall " + "have the same submodel element type as specified in type " + "value list element.");
          case 45:
            if (!(that.value !== null && (that.typeValueListElement == AasTypes.AasSubmodelElements.Property || that.typeValueListElement == AasTypes.AasSubmodelElements.Range)) || that.valueTypeListElement !== null && propertiesOrRangesHaveValueType(that.value, that.valueTypeListElement)) {
              _context10.next = 48;
              break;
            }
            _context10.next = 48;
            return new VerificationError("Constraint AASd-109: If type value list element is equal to " + "Property or Range value type list element shall be set and " + "all first level child elements shall have the value type as " + "specified in value type list element.");
          case 48:
            if (!(that.value !== null) || AasCommon.every(AasCommon.map(that.value, function (element) {
              return element.idShort === null;
            }))) {
              _context10.next = 51;
              break;
            }
            _context10.next = 51;
            return new VerificationError("Constraint AASd-120: ID-short of submodel elements being " + "a direct child of a  Submodel element list shall not be " + "specified.");
          case 51:
            if (!(that.category !== null)) {
              _context10.next = 70;
              break;
            }
            _iterator103 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context10.prev = 53;
            _iterator103.s();
          case 55:
            if ((_step103 = _iterator103.n()).done) {
              _context10.next = 62;
              break;
            }
            error = _step103.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context10.next = 60;
            return error;
          case 60:
            _context10.next = 55;
            break;
          case 62:
            _context10.next = 67;
            break;
          case 64:
            _context10.prev = 64;
            _context10.t0 = _context10["catch"](53);
            _iterator103.e(_context10.t0);
          case 67:
            _context10.prev = 67;
            _iterator103.f();
            return _context10.finish(67);
          case 70:
            if (!(that.idShort !== null)) {
              _context10.next = 89;
              break;
            }
            _iterator104 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context10.prev = 72;
            _iterator104.s();
          case 74:
            if ((_step104 = _iterator104.n()).done) {
              _context10.next = 81;
              break;
            }
            _error52 = _step104.value;
            _error52.path.prepend(new PropertySegment(that, "idShort"));
            _context10.next = 79;
            return _error52;
          case 79:
            _context10.next = 74;
            break;
          case 81:
            _context10.next = 86;
            break;
          case 83:
            _context10.prev = 83;
            _context10.t1 = _context10["catch"](72);
            _iterator104.e(_context10.t1);
          case 86:
            _context10.prev = 86;
            _iterator104.f();
            return _context10.finish(86);
          case 89:
            if (!(context === true)) {
              _context10.next = 387;
              break;
            }
            if (!(that.extensions !== null)) {
              _context10.next = 127;
              break;
            }
            extensionsIndex = 0;
            _iterator105 = _createForOfIteratorHelper(that.extensions);
            _context10.prev = 93;
            _iterator105.s();
          case 95:
            if ((_step105 = _iterator105.n()).done) {
              _context10.next = 119;
              break;
            }
            item = _step105.value;
            _iterator106 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context10.prev = 98;
            _iterator106.s();
          case 100:
            if ((_step106 = _iterator106.n()).done) {
              _context10.next = 108;
              break;
            }
            _error53 = _step106.value;
            _error53.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error53.path.prepend(new PropertySegment(that, "extensions"));
            _context10.next = 106;
            return _error53;
          case 106:
            _context10.next = 100;
            break;
          case 108:
            _context10.next = 113;
            break;
          case 110:
            _context10.prev = 110;
            _context10.t2 = _context10["catch"](98);
            _iterator106.e(_context10.t2);
          case 113:
            _context10.prev = 113;
            _iterator106.f();
            return _context10.finish(113);
          case 116:
            extensionsIndex++;
          case 117:
            _context10.next = 95;
            break;
          case 119:
            _context10.next = 124;
            break;
          case 121:
            _context10.prev = 121;
            _context10.t3 = _context10["catch"](93);
            _iterator105.e(_context10.t3);
          case 124:
            _context10.prev = 124;
            _iterator105.f();
            return _context10.finish(124);
          case 127:
            if (!(that.displayName !== null)) {
              _context10.next = 164;
              break;
            }
            displayNameIndex = 0;
            _iterator107 = _createForOfIteratorHelper(that.displayName);
            _context10.prev = 130;
            _iterator107.s();
          case 132:
            if ((_step107 = _iterator107.n()).done) {
              _context10.next = 156;
              break;
            }
            _item17 = _step107.value;
            _iterator108 = _createForOfIteratorHelper(this.transformWithContext(_item17, context));
            _context10.prev = 135;
            _iterator108.s();
          case 137:
            if ((_step108 = _iterator108.n()).done) {
              _context10.next = 145;
              break;
            }
            _error54 = _step108.value;
            _error54.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error54.path.prepend(new PropertySegment(that, "displayName"));
            _context10.next = 143;
            return _error54;
          case 143:
            _context10.next = 137;
            break;
          case 145:
            _context10.next = 150;
            break;
          case 147:
            _context10.prev = 147;
            _context10.t4 = _context10["catch"](135);
            _iterator108.e(_context10.t4);
          case 150:
            _context10.prev = 150;
            _iterator108.f();
            return _context10.finish(150);
          case 153:
            displayNameIndex++;
          case 154:
            _context10.next = 132;
            break;
          case 156:
            _context10.next = 161;
            break;
          case 158:
            _context10.prev = 158;
            _context10.t5 = _context10["catch"](130);
            _iterator107.e(_context10.t5);
          case 161:
            _context10.prev = 161;
            _iterator107.f();
            return _context10.finish(161);
          case 164:
            if (!(that.description !== null)) {
              _context10.next = 201;
              break;
            }
            descriptionIndex = 0;
            _iterator109 = _createForOfIteratorHelper(that.description);
            _context10.prev = 167;
            _iterator109.s();
          case 169:
            if ((_step109 = _iterator109.n()).done) {
              _context10.next = 193;
              break;
            }
            _item18 = _step109.value;
            _iterator110 = _createForOfIteratorHelper(this.transformWithContext(_item18, context));
            _context10.prev = 172;
            _iterator110.s();
          case 174:
            if ((_step110 = _iterator110.n()).done) {
              _context10.next = 182;
              break;
            }
            _error55 = _step110.value;
            _error55.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error55.path.prepend(new PropertySegment(that, "description"));
            _context10.next = 180;
            return _error55;
          case 180:
            _context10.next = 174;
            break;
          case 182:
            _context10.next = 187;
            break;
          case 184:
            _context10.prev = 184;
            _context10.t6 = _context10["catch"](172);
            _iterator110.e(_context10.t6);
          case 187:
            _context10.prev = 187;
            _iterator110.f();
            return _context10.finish(187);
          case 190:
            descriptionIndex++;
          case 191:
            _context10.next = 169;
            break;
          case 193:
            _context10.next = 198;
            break;
          case 195:
            _context10.prev = 195;
            _context10.t7 = _context10["catch"](167);
            _iterator109.e(_context10.t7);
          case 198:
            _context10.prev = 198;
            _iterator109.f();
            return _context10.finish(198);
          case 201:
            if (!(that.semanticId !== null)) {
              _context10.next = 220;
              break;
            }
            _iterator111 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context10.prev = 203;
            _iterator111.s();
          case 205:
            if ((_step111 = _iterator111.n()).done) {
              _context10.next = 212;
              break;
            }
            _error56 = _step111.value;
            _error56.path.prepend(new PropertySegment(that, "semanticId"));
            _context10.next = 210;
            return _error56;
          case 210:
            _context10.next = 205;
            break;
          case 212:
            _context10.next = 217;
            break;
          case 214:
            _context10.prev = 214;
            _context10.t8 = _context10["catch"](203);
            _iterator111.e(_context10.t8);
          case 217:
            _context10.prev = 217;
            _iterator111.f();
            return _context10.finish(217);
          case 220:
            if (!(that.supplementalSemanticIds !== null)) {
              _context10.next = 257;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator112 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context10.prev = 223;
            _iterator112.s();
          case 225:
            if ((_step112 = _iterator112.n()).done) {
              _context10.next = 249;
              break;
            }
            _item19 = _step112.value;
            _iterator113 = _createForOfIteratorHelper(this.transformWithContext(_item19, context));
            _context10.prev = 228;
            _iterator113.s();
          case 230:
            if ((_step113 = _iterator113.n()).done) {
              _context10.next = 238;
              break;
            }
            _error57 = _step113.value;
            _error57.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error57.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context10.next = 236;
            return _error57;
          case 236:
            _context10.next = 230;
            break;
          case 238:
            _context10.next = 243;
            break;
          case 240:
            _context10.prev = 240;
            _context10.t9 = _context10["catch"](228);
            _iterator113.e(_context10.t9);
          case 243:
            _context10.prev = 243;
            _iterator113.f();
            return _context10.finish(243);
          case 246:
            supplementalSemanticIdsIndex++;
          case 247:
            _context10.next = 225;
            break;
          case 249:
            _context10.next = 254;
            break;
          case 251:
            _context10.prev = 251;
            _context10.t10 = _context10["catch"](223);
            _iterator112.e(_context10.t10);
          case 254:
            _context10.prev = 254;
            _iterator112.f();
            return _context10.finish(254);
          case 257:
            if (!(that.qualifiers !== null)) {
              _context10.next = 294;
              break;
            }
            qualifiersIndex = 0;
            _iterator114 = _createForOfIteratorHelper(that.qualifiers);
            _context10.prev = 260;
            _iterator114.s();
          case 262:
            if ((_step114 = _iterator114.n()).done) {
              _context10.next = 286;
              break;
            }
            _item20 = _step114.value;
            _iterator115 = _createForOfIteratorHelper(this.transformWithContext(_item20, context));
            _context10.prev = 265;
            _iterator115.s();
          case 267:
            if ((_step115 = _iterator115.n()).done) {
              _context10.next = 275;
              break;
            }
            _error58 = _step115.value;
            _error58.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error58.path.prepend(new PropertySegment(that, "qualifiers"));
            _context10.next = 273;
            return _error58;
          case 273:
            _context10.next = 267;
            break;
          case 275:
            _context10.next = 280;
            break;
          case 277:
            _context10.prev = 277;
            _context10.t11 = _context10["catch"](265);
            _iterator115.e(_context10.t11);
          case 280:
            _context10.prev = 280;
            _iterator115.f();
            return _context10.finish(280);
          case 283:
            qualifiersIndex++;
          case 284:
            _context10.next = 262;
            break;
          case 286:
            _context10.next = 291;
            break;
          case 288:
            _context10.prev = 288;
            _context10.t12 = _context10["catch"](260);
            _iterator114.e(_context10.t12);
          case 291:
            _context10.prev = 291;
            _iterator114.f();
            return _context10.finish(291);
          case 294:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context10.next = 331;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator116 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context10.prev = 297;
            _iterator116.s();
          case 299:
            if ((_step116 = _iterator116.n()).done) {
              _context10.next = 323;
              break;
            }
            _item21 = _step116.value;
            _iterator117 = _createForOfIteratorHelper(this.transformWithContext(_item21, context));
            _context10.prev = 302;
            _iterator117.s();
          case 304:
            if ((_step117 = _iterator117.n()).done) {
              _context10.next = 312;
              break;
            }
            _error59 = _step117.value;
            _error59.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error59.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context10.next = 310;
            return _error59;
          case 310:
            _context10.next = 304;
            break;
          case 312:
            _context10.next = 317;
            break;
          case 314:
            _context10.prev = 314;
            _context10.t13 = _context10["catch"](302);
            _iterator117.e(_context10.t13);
          case 317:
            _context10.prev = 317;
            _iterator117.f();
            return _context10.finish(317);
          case 320:
            embeddedDataSpecificationsIndex++;
          case 321:
            _context10.next = 299;
            break;
          case 323:
            _context10.next = 328;
            break;
          case 325:
            _context10.prev = 325;
            _context10.t14 = _context10["catch"](297);
            _iterator116.e(_context10.t14);
          case 328:
            _context10.prev = 328;
            _iterator116.f();
            return _context10.finish(328);
          case 331:
            if (!(that.semanticIdListElement !== null)) {
              _context10.next = 350;
              break;
            }
            _iterator118 = _createForOfIteratorHelper(this.transformWithContext(that.semanticIdListElement, context));
            _context10.prev = 333;
            _iterator118.s();
          case 335:
            if ((_step118 = _iterator118.n()).done) {
              _context10.next = 342;
              break;
            }
            _error60 = _step118.value;
            _error60.path.prepend(new PropertySegment(that, "semanticIdListElement"));
            _context10.next = 340;
            return _error60;
          case 340:
            _context10.next = 335;
            break;
          case 342:
            _context10.next = 347;
            break;
          case 344:
            _context10.prev = 344;
            _context10.t15 = _context10["catch"](333);
            _iterator118.e(_context10.t15);
          case 347:
            _context10.prev = 347;
            _iterator118.f();
            return _context10.finish(347);
          case 350:
            if (!(that.value !== null)) {
              _context10.next = 387;
              break;
            }
            valueIndex = 0;
            _iterator119 = _createForOfIteratorHelper(that.value);
            _context10.prev = 353;
            _iterator119.s();
          case 355:
            if ((_step119 = _iterator119.n()).done) {
              _context10.next = 379;
              break;
            }
            _item22 = _step119.value;
            _iterator120 = _createForOfIteratorHelper(this.transformWithContext(_item22, context));
            _context10.prev = 358;
            _iterator120.s();
          case 360:
            if ((_step120 = _iterator120.n()).done) {
              _context10.next = 368;
              break;
            }
            _error61 = _step120.value;
            _error61.path.prepend(new IndexSegment(that.value, valueIndex));
            _error61.path.prepend(new PropertySegment(that, "value"));
            _context10.next = 366;
            return _error61;
          case 366:
            _context10.next = 360;
            break;
          case 368:
            _context10.next = 373;
            break;
          case 370:
            _context10.prev = 370;
            _context10.t16 = _context10["catch"](358);
            _iterator120.e(_context10.t16);
          case 373:
            _context10.prev = 373;
            _iterator120.f();
            return _context10.finish(373);
          case 376:
            valueIndex++;
          case 377:
            _context10.next = 355;
            break;
          case 379:
            _context10.next = 384;
            break;
          case 381:
            _context10.prev = 381;
            _context10.t17 = _context10["catch"](353);
            _iterator119.e(_context10.t17);
          case 384:
            _context10.prev = 384;
            _iterator119.f();
            return _context10.finish(384);
          case 387:
          case "end":
            return _context10.stop();
        }
      }, transformSubmodelElementListWithContext, this, [[53, 64, 67, 70], [72, 83, 86, 89], [93, 121, 124, 127], [98, 110, 113, 116], [130, 158, 161, 164], [135, 147, 150, 153], [167, 195, 198, 201], [172, 184, 187, 190], [203, 214, 217, 220], [223, 251, 254, 257], [228, 240, 243, 246], [260, 288, 291, 294], [265, 277, 280, 283], [297, 325, 328, 331], [302, 314, 317, 320], [333, 344, 347, 350], [353, 381, 384, 387], [358, 370, 373, 376]]);
    })
  }, {
    key: "transformSubmodelElementCollectionWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformSubmodelElementCollectionWithContext(that, context) {
      var _iterator121, _step121, error, _iterator122, _step122, _error62, extensionsIndex, _iterator123, _step123, item, _iterator124, _step124, _error63, displayNameIndex, _iterator125, _step125, _item23, _iterator126, _step126, _error64, descriptionIndex, _iterator127, _step127, _item24, _iterator128, _step128, _error65, _iterator129, _step129, _error66, supplementalSemanticIdsIndex, _iterator130, _step130, _item25, _iterator131, _step131, _error67, qualifiersIndex, _iterator132, _step132, _item26, _iterator133, _step133, _error68, embeddedDataSpecificationsIndex, _iterator134, _step134, _item27, _iterator135, _step135, _error69, valueIndex, _iterator136, _step136, _item28, _iterator137, _step137, _error70;
      return _regeneratorRuntime().wrap(function transformSubmodelElementCollectionWithContext$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context11.next = 3;
              break;
            }
            _context11.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context11.next = 6;
              break;
            }
            _context11.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context11.next = 9;
              break;
            }
            _context11.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context11.next = 12;
              break;
            }
            _context11.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context11.next = 15;
              break;
            }
            _context11.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context11.next = 18;
              break;
            }
            _context11.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context11.next = 21;
              break;
            }
            _context11.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context11.next = 24;
              break;
            }
            _context11.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context11.next = 27;
              break;
            }
            _context11.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context11.next = 30;
              break;
            }
            _context11.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context11.next = 33;
              break;
            }
            _context11.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.value !== null) || that.value.length >= 1) {
              _context11.next = 36;
              break;
            }
            _context11.next = 36;
            return new VerificationError("Value must be either not set or have at least one item.");
          case 36:
            if (!(that.value !== null) || AasCommon.every(AasCommon.map(that.value, function (item) {
              return item.idShort !== null;
            }))) {
              _context11.next = 39;
              break;
            }
            _context11.next = 39;
            return new VerificationError("ID-shorts need to be defined for all the items of value " + "according to AASd-117 (ID-short of Referables not being " + "a direct child of a Submodel element list shall be " + "specified).");
          case 39:
            if (!(that.value !== null) || idShortsAreUnique(that.value)) {
              _context11.next = 42;
              break;
            }
            _context11.next = 42;
            return new VerificationError("ID-shorts of the value must be unique.");
          case 42:
            if (!(that.category !== null)) {
              _context11.next = 61;
              break;
            }
            _iterator121 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context11.prev = 44;
            _iterator121.s();
          case 46:
            if ((_step121 = _iterator121.n()).done) {
              _context11.next = 53;
              break;
            }
            error = _step121.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context11.next = 51;
            return error;
          case 51:
            _context11.next = 46;
            break;
          case 53:
            _context11.next = 58;
            break;
          case 55:
            _context11.prev = 55;
            _context11.t0 = _context11["catch"](44);
            _iterator121.e(_context11.t0);
          case 58:
            _context11.prev = 58;
            _iterator121.f();
            return _context11.finish(58);
          case 61:
            if (!(that.idShort !== null)) {
              _context11.next = 80;
              break;
            }
            _iterator122 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context11.prev = 63;
            _iterator122.s();
          case 65:
            if ((_step122 = _iterator122.n()).done) {
              _context11.next = 72;
              break;
            }
            _error62 = _step122.value;
            _error62.path.prepend(new PropertySegment(that, "idShort"));
            _context11.next = 70;
            return _error62;
          case 70:
            _context11.next = 65;
            break;
          case 72:
            _context11.next = 77;
            break;
          case 74:
            _context11.prev = 74;
            _context11.t1 = _context11["catch"](63);
            _iterator122.e(_context11.t1);
          case 77:
            _context11.prev = 77;
            _iterator122.f();
            return _context11.finish(77);
          case 80:
            if (!(context === true)) {
              _context11.next = 359;
              break;
            }
            if (!(that.extensions !== null)) {
              _context11.next = 118;
              break;
            }
            extensionsIndex = 0;
            _iterator123 = _createForOfIteratorHelper(that.extensions);
            _context11.prev = 84;
            _iterator123.s();
          case 86:
            if ((_step123 = _iterator123.n()).done) {
              _context11.next = 110;
              break;
            }
            item = _step123.value;
            _iterator124 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context11.prev = 89;
            _iterator124.s();
          case 91:
            if ((_step124 = _iterator124.n()).done) {
              _context11.next = 99;
              break;
            }
            _error63 = _step124.value;
            _error63.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error63.path.prepend(new PropertySegment(that, "extensions"));
            _context11.next = 97;
            return _error63;
          case 97:
            _context11.next = 91;
            break;
          case 99:
            _context11.next = 104;
            break;
          case 101:
            _context11.prev = 101;
            _context11.t2 = _context11["catch"](89);
            _iterator124.e(_context11.t2);
          case 104:
            _context11.prev = 104;
            _iterator124.f();
            return _context11.finish(104);
          case 107:
            extensionsIndex++;
          case 108:
            _context11.next = 86;
            break;
          case 110:
            _context11.next = 115;
            break;
          case 112:
            _context11.prev = 112;
            _context11.t3 = _context11["catch"](84);
            _iterator123.e(_context11.t3);
          case 115:
            _context11.prev = 115;
            _iterator123.f();
            return _context11.finish(115);
          case 118:
            if (!(that.displayName !== null)) {
              _context11.next = 155;
              break;
            }
            displayNameIndex = 0;
            _iterator125 = _createForOfIteratorHelper(that.displayName);
            _context11.prev = 121;
            _iterator125.s();
          case 123:
            if ((_step125 = _iterator125.n()).done) {
              _context11.next = 147;
              break;
            }
            _item23 = _step125.value;
            _iterator126 = _createForOfIteratorHelper(this.transformWithContext(_item23, context));
            _context11.prev = 126;
            _iterator126.s();
          case 128:
            if ((_step126 = _iterator126.n()).done) {
              _context11.next = 136;
              break;
            }
            _error64 = _step126.value;
            _error64.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error64.path.prepend(new PropertySegment(that, "displayName"));
            _context11.next = 134;
            return _error64;
          case 134:
            _context11.next = 128;
            break;
          case 136:
            _context11.next = 141;
            break;
          case 138:
            _context11.prev = 138;
            _context11.t4 = _context11["catch"](126);
            _iterator126.e(_context11.t4);
          case 141:
            _context11.prev = 141;
            _iterator126.f();
            return _context11.finish(141);
          case 144:
            displayNameIndex++;
          case 145:
            _context11.next = 123;
            break;
          case 147:
            _context11.next = 152;
            break;
          case 149:
            _context11.prev = 149;
            _context11.t5 = _context11["catch"](121);
            _iterator125.e(_context11.t5);
          case 152:
            _context11.prev = 152;
            _iterator125.f();
            return _context11.finish(152);
          case 155:
            if (!(that.description !== null)) {
              _context11.next = 192;
              break;
            }
            descriptionIndex = 0;
            _iterator127 = _createForOfIteratorHelper(that.description);
            _context11.prev = 158;
            _iterator127.s();
          case 160:
            if ((_step127 = _iterator127.n()).done) {
              _context11.next = 184;
              break;
            }
            _item24 = _step127.value;
            _iterator128 = _createForOfIteratorHelper(this.transformWithContext(_item24, context));
            _context11.prev = 163;
            _iterator128.s();
          case 165:
            if ((_step128 = _iterator128.n()).done) {
              _context11.next = 173;
              break;
            }
            _error65 = _step128.value;
            _error65.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error65.path.prepend(new PropertySegment(that, "description"));
            _context11.next = 171;
            return _error65;
          case 171:
            _context11.next = 165;
            break;
          case 173:
            _context11.next = 178;
            break;
          case 175:
            _context11.prev = 175;
            _context11.t6 = _context11["catch"](163);
            _iterator128.e(_context11.t6);
          case 178:
            _context11.prev = 178;
            _iterator128.f();
            return _context11.finish(178);
          case 181:
            descriptionIndex++;
          case 182:
            _context11.next = 160;
            break;
          case 184:
            _context11.next = 189;
            break;
          case 186:
            _context11.prev = 186;
            _context11.t7 = _context11["catch"](158);
            _iterator127.e(_context11.t7);
          case 189:
            _context11.prev = 189;
            _iterator127.f();
            return _context11.finish(189);
          case 192:
            if (!(that.semanticId !== null)) {
              _context11.next = 211;
              break;
            }
            _iterator129 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context11.prev = 194;
            _iterator129.s();
          case 196:
            if ((_step129 = _iterator129.n()).done) {
              _context11.next = 203;
              break;
            }
            _error66 = _step129.value;
            _error66.path.prepend(new PropertySegment(that, "semanticId"));
            _context11.next = 201;
            return _error66;
          case 201:
            _context11.next = 196;
            break;
          case 203:
            _context11.next = 208;
            break;
          case 205:
            _context11.prev = 205;
            _context11.t8 = _context11["catch"](194);
            _iterator129.e(_context11.t8);
          case 208:
            _context11.prev = 208;
            _iterator129.f();
            return _context11.finish(208);
          case 211:
            if (!(that.supplementalSemanticIds !== null)) {
              _context11.next = 248;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator130 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context11.prev = 214;
            _iterator130.s();
          case 216:
            if ((_step130 = _iterator130.n()).done) {
              _context11.next = 240;
              break;
            }
            _item25 = _step130.value;
            _iterator131 = _createForOfIteratorHelper(this.transformWithContext(_item25, context));
            _context11.prev = 219;
            _iterator131.s();
          case 221:
            if ((_step131 = _iterator131.n()).done) {
              _context11.next = 229;
              break;
            }
            _error67 = _step131.value;
            _error67.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error67.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context11.next = 227;
            return _error67;
          case 227:
            _context11.next = 221;
            break;
          case 229:
            _context11.next = 234;
            break;
          case 231:
            _context11.prev = 231;
            _context11.t9 = _context11["catch"](219);
            _iterator131.e(_context11.t9);
          case 234:
            _context11.prev = 234;
            _iterator131.f();
            return _context11.finish(234);
          case 237:
            supplementalSemanticIdsIndex++;
          case 238:
            _context11.next = 216;
            break;
          case 240:
            _context11.next = 245;
            break;
          case 242:
            _context11.prev = 242;
            _context11.t10 = _context11["catch"](214);
            _iterator130.e(_context11.t10);
          case 245:
            _context11.prev = 245;
            _iterator130.f();
            return _context11.finish(245);
          case 248:
            if (!(that.qualifiers !== null)) {
              _context11.next = 285;
              break;
            }
            qualifiersIndex = 0;
            _iterator132 = _createForOfIteratorHelper(that.qualifiers);
            _context11.prev = 251;
            _iterator132.s();
          case 253:
            if ((_step132 = _iterator132.n()).done) {
              _context11.next = 277;
              break;
            }
            _item26 = _step132.value;
            _iterator133 = _createForOfIteratorHelper(this.transformWithContext(_item26, context));
            _context11.prev = 256;
            _iterator133.s();
          case 258:
            if ((_step133 = _iterator133.n()).done) {
              _context11.next = 266;
              break;
            }
            _error68 = _step133.value;
            _error68.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error68.path.prepend(new PropertySegment(that, "qualifiers"));
            _context11.next = 264;
            return _error68;
          case 264:
            _context11.next = 258;
            break;
          case 266:
            _context11.next = 271;
            break;
          case 268:
            _context11.prev = 268;
            _context11.t11 = _context11["catch"](256);
            _iterator133.e(_context11.t11);
          case 271:
            _context11.prev = 271;
            _iterator133.f();
            return _context11.finish(271);
          case 274:
            qualifiersIndex++;
          case 275:
            _context11.next = 253;
            break;
          case 277:
            _context11.next = 282;
            break;
          case 279:
            _context11.prev = 279;
            _context11.t12 = _context11["catch"](251);
            _iterator132.e(_context11.t12);
          case 282:
            _context11.prev = 282;
            _iterator132.f();
            return _context11.finish(282);
          case 285:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context11.next = 322;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator134 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context11.prev = 288;
            _iterator134.s();
          case 290:
            if ((_step134 = _iterator134.n()).done) {
              _context11.next = 314;
              break;
            }
            _item27 = _step134.value;
            _iterator135 = _createForOfIteratorHelper(this.transformWithContext(_item27, context));
            _context11.prev = 293;
            _iterator135.s();
          case 295:
            if ((_step135 = _iterator135.n()).done) {
              _context11.next = 303;
              break;
            }
            _error69 = _step135.value;
            _error69.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error69.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context11.next = 301;
            return _error69;
          case 301:
            _context11.next = 295;
            break;
          case 303:
            _context11.next = 308;
            break;
          case 305:
            _context11.prev = 305;
            _context11.t13 = _context11["catch"](293);
            _iterator135.e(_context11.t13);
          case 308:
            _context11.prev = 308;
            _iterator135.f();
            return _context11.finish(308);
          case 311:
            embeddedDataSpecificationsIndex++;
          case 312:
            _context11.next = 290;
            break;
          case 314:
            _context11.next = 319;
            break;
          case 316:
            _context11.prev = 316;
            _context11.t14 = _context11["catch"](288);
            _iterator134.e(_context11.t14);
          case 319:
            _context11.prev = 319;
            _iterator134.f();
            return _context11.finish(319);
          case 322:
            if (!(that.value !== null)) {
              _context11.next = 359;
              break;
            }
            valueIndex = 0;
            _iterator136 = _createForOfIteratorHelper(that.value);
            _context11.prev = 325;
            _iterator136.s();
          case 327:
            if ((_step136 = _iterator136.n()).done) {
              _context11.next = 351;
              break;
            }
            _item28 = _step136.value;
            _iterator137 = _createForOfIteratorHelper(this.transformWithContext(_item28, context));
            _context11.prev = 330;
            _iterator137.s();
          case 332:
            if ((_step137 = _iterator137.n()).done) {
              _context11.next = 340;
              break;
            }
            _error70 = _step137.value;
            _error70.path.prepend(new IndexSegment(that.value, valueIndex));
            _error70.path.prepend(new PropertySegment(that, "value"));
            _context11.next = 338;
            return _error70;
          case 338:
            _context11.next = 332;
            break;
          case 340:
            _context11.next = 345;
            break;
          case 342:
            _context11.prev = 342;
            _context11.t15 = _context11["catch"](330);
            _iterator137.e(_context11.t15);
          case 345:
            _context11.prev = 345;
            _iterator137.f();
            return _context11.finish(345);
          case 348:
            valueIndex++;
          case 349:
            _context11.next = 327;
            break;
          case 351:
            _context11.next = 356;
            break;
          case 353:
            _context11.prev = 353;
            _context11.t16 = _context11["catch"](325);
            _iterator136.e(_context11.t16);
          case 356:
            _context11.prev = 356;
            _iterator136.f();
            return _context11.finish(356);
          case 359:
          case "end":
            return _context11.stop();
        }
      }, transformSubmodelElementCollectionWithContext, this, [[44, 55, 58, 61], [63, 74, 77, 80], [84, 112, 115, 118], [89, 101, 104, 107], [121, 149, 152, 155], [126, 138, 141, 144], [158, 186, 189, 192], [163, 175, 178, 181], [194, 205, 208, 211], [214, 242, 245, 248], [219, 231, 234, 237], [251, 279, 282, 285], [256, 268, 271, 274], [288, 316, 319, 322], [293, 305, 308, 311], [325, 353, 356, 359], [330, 342, 345, 348]]);
    })
  }, {
    key: "transformPropertyWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformPropertyWithContext(that, context) {
      var _iterator138, _step138, error, _iterator139, _step139, _error71, _iterator140, _step140, _error72, extensionsIndex, _iterator141, _step141, item, _iterator142, _step142, _error73, displayNameIndex, _iterator143, _step143, _item29, _iterator144, _step144, _error74, descriptionIndex, _iterator145, _step145, _item30, _iterator146, _step146, _error75, _iterator147, _step147, _error76, supplementalSemanticIdsIndex, _iterator148, _step148, _item31, _iterator149, _step149, _error77, qualifiersIndex, _iterator150, _step150, _item32, _iterator151, _step151, _error78, embeddedDataSpecificationsIndex, _iterator152, _step152, _item33, _iterator153, _step153, _error79, _iterator154, _step154, _error80;
      return _regeneratorRuntime().wrap(function transformPropertyWithContext$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context12.next = 3;
              break;
            }
            _context12.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context12.next = 6;
              break;
            }
            _context12.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context12.next = 9;
              break;
            }
            _context12.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context12.next = 12;
              break;
            }
            _context12.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context12.next = 15;
              break;
            }
            _context12.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context12.next = 18;
              break;
            }
            _context12.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context12.next = 21;
              break;
            }
            _context12.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context12.next = 24;
              break;
            }
            _context12.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context12.next = 27;
              break;
            }
            _context12.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context12.next = 30;
              break;
            }
            _context12.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context12.next = 33;
              break;
            }
            _context12.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context12.next = 36;
              break;
            }
            _context12.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.value !== null) || valueConsistentWithXsdType(that.value, that.valueType)) {
              _context12.next = 39;
              break;
            }
            _context12.next = 39;
            return new VerificationError("Value must be consistent with the value type.");
          case 39:
            if (!(that.category !== null)) {
              _context12.next = 58;
              break;
            }
            _iterator138 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context12.prev = 41;
            _iterator138.s();
          case 43:
            if ((_step138 = _iterator138.n()).done) {
              _context12.next = 50;
              break;
            }
            error = _step138.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context12.next = 48;
            return error;
          case 48:
            _context12.next = 43;
            break;
          case 50:
            _context12.next = 55;
            break;
          case 52:
            _context12.prev = 52;
            _context12.t0 = _context12["catch"](41);
            _iterator138.e(_context12.t0);
          case 55:
            _context12.prev = 55;
            _iterator138.f();
            return _context12.finish(55);
          case 58:
            if (!(that.idShort !== null)) {
              _context12.next = 77;
              break;
            }
            _iterator139 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context12.prev = 60;
            _iterator139.s();
          case 62:
            if ((_step139 = _iterator139.n()).done) {
              _context12.next = 69;
              break;
            }
            _error71 = _step139.value;
            _error71.path.prepend(new PropertySegment(that, "idShort"));
            _context12.next = 67;
            return _error71;
          case 67:
            _context12.next = 62;
            break;
          case 69:
            _context12.next = 74;
            break;
          case 71:
            _context12.prev = 71;
            _context12.t1 = _context12["catch"](60);
            _iterator139.e(_context12.t1);
          case 74:
            _context12.prev = 74;
            _iterator139.f();
            return _context12.finish(74);
          case 77:
            if (!(that.value !== null)) {
              _context12.next = 96;
              break;
            }
            _iterator140 = _createForOfIteratorHelper(verifyValueDataType(that.value));
            _context12.prev = 79;
            _iterator140.s();
          case 81:
            if ((_step140 = _iterator140.n()).done) {
              _context12.next = 88;
              break;
            }
            _error72 = _step140.value;
            _error72.path.prepend(new PropertySegment(that, "value"));
            _context12.next = 86;
            return _error72;
          case 86:
            _context12.next = 81;
            break;
          case 88:
            _context12.next = 93;
            break;
          case 90:
            _context12.prev = 90;
            _context12.t2 = _context12["catch"](79);
            _iterator140.e(_context12.t2);
          case 93:
            _context12.prev = 93;
            _iterator140.f();
            return _context12.finish(93);
          case 96:
            if (!(context === true)) {
              _context12.next = 357;
              break;
            }
            if (!(that.extensions !== null)) {
              _context12.next = 134;
              break;
            }
            extensionsIndex = 0;
            _iterator141 = _createForOfIteratorHelper(that.extensions);
            _context12.prev = 100;
            _iterator141.s();
          case 102:
            if ((_step141 = _iterator141.n()).done) {
              _context12.next = 126;
              break;
            }
            item = _step141.value;
            _iterator142 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context12.prev = 105;
            _iterator142.s();
          case 107:
            if ((_step142 = _iterator142.n()).done) {
              _context12.next = 115;
              break;
            }
            _error73 = _step142.value;
            _error73.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error73.path.prepend(new PropertySegment(that, "extensions"));
            _context12.next = 113;
            return _error73;
          case 113:
            _context12.next = 107;
            break;
          case 115:
            _context12.next = 120;
            break;
          case 117:
            _context12.prev = 117;
            _context12.t3 = _context12["catch"](105);
            _iterator142.e(_context12.t3);
          case 120:
            _context12.prev = 120;
            _iterator142.f();
            return _context12.finish(120);
          case 123:
            extensionsIndex++;
          case 124:
            _context12.next = 102;
            break;
          case 126:
            _context12.next = 131;
            break;
          case 128:
            _context12.prev = 128;
            _context12.t4 = _context12["catch"](100);
            _iterator141.e(_context12.t4);
          case 131:
            _context12.prev = 131;
            _iterator141.f();
            return _context12.finish(131);
          case 134:
            if (!(that.displayName !== null)) {
              _context12.next = 171;
              break;
            }
            displayNameIndex = 0;
            _iterator143 = _createForOfIteratorHelper(that.displayName);
            _context12.prev = 137;
            _iterator143.s();
          case 139:
            if ((_step143 = _iterator143.n()).done) {
              _context12.next = 163;
              break;
            }
            _item29 = _step143.value;
            _iterator144 = _createForOfIteratorHelper(this.transformWithContext(_item29, context));
            _context12.prev = 142;
            _iterator144.s();
          case 144:
            if ((_step144 = _iterator144.n()).done) {
              _context12.next = 152;
              break;
            }
            _error74 = _step144.value;
            _error74.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error74.path.prepend(new PropertySegment(that, "displayName"));
            _context12.next = 150;
            return _error74;
          case 150:
            _context12.next = 144;
            break;
          case 152:
            _context12.next = 157;
            break;
          case 154:
            _context12.prev = 154;
            _context12.t5 = _context12["catch"](142);
            _iterator144.e(_context12.t5);
          case 157:
            _context12.prev = 157;
            _iterator144.f();
            return _context12.finish(157);
          case 160:
            displayNameIndex++;
          case 161:
            _context12.next = 139;
            break;
          case 163:
            _context12.next = 168;
            break;
          case 165:
            _context12.prev = 165;
            _context12.t6 = _context12["catch"](137);
            _iterator143.e(_context12.t6);
          case 168:
            _context12.prev = 168;
            _iterator143.f();
            return _context12.finish(168);
          case 171:
            if (!(that.description !== null)) {
              _context12.next = 208;
              break;
            }
            descriptionIndex = 0;
            _iterator145 = _createForOfIteratorHelper(that.description);
            _context12.prev = 174;
            _iterator145.s();
          case 176:
            if ((_step145 = _iterator145.n()).done) {
              _context12.next = 200;
              break;
            }
            _item30 = _step145.value;
            _iterator146 = _createForOfIteratorHelper(this.transformWithContext(_item30, context));
            _context12.prev = 179;
            _iterator146.s();
          case 181:
            if ((_step146 = _iterator146.n()).done) {
              _context12.next = 189;
              break;
            }
            _error75 = _step146.value;
            _error75.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error75.path.prepend(new PropertySegment(that, "description"));
            _context12.next = 187;
            return _error75;
          case 187:
            _context12.next = 181;
            break;
          case 189:
            _context12.next = 194;
            break;
          case 191:
            _context12.prev = 191;
            _context12.t7 = _context12["catch"](179);
            _iterator146.e(_context12.t7);
          case 194:
            _context12.prev = 194;
            _iterator146.f();
            return _context12.finish(194);
          case 197:
            descriptionIndex++;
          case 198:
            _context12.next = 176;
            break;
          case 200:
            _context12.next = 205;
            break;
          case 202:
            _context12.prev = 202;
            _context12.t8 = _context12["catch"](174);
            _iterator145.e(_context12.t8);
          case 205:
            _context12.prev = 205;
            _iterator145.f();
            return _context12.finish(205);
          case 208:
            if (!(that.semanticId !== null)) {
              _context12.next = 227;
              break;
            }
            _iterator147 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context12.prev = 210;
            _iterator147.s();
          case 212:
            if ((_step147 = _iterator147.n()).done) {
              _context12.next = 219;
              break;
            }
            _error76 = _step147.value;
            _error76.path.prepend(new PropertySegment(that, "semanticId"));
            _context12.next = 217;
            return _error76;
          case 217:
            _context12.next = 212;
            break;
          case 219:
            _context12.next = 224;
            break;
          case 221:
            _context12.prev = 221;
            _context12.t9 = _context12["catch"](210);
            _iterator147.e(_context12.t9);
          case 224:
            _context12.prev = 224;
            _iterator147.f();
            return _context12.finish(224);
          case 227:
            if (!(that.supplementalSemanticIds !== null)) {
              _context12.next = 264;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator148 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context12.prev = 230;
            _iterator148.s();
          case 232:
            if ((_step148 = _iterator148.n()).done) {
              _context12.next = 256;
              break;
            }
            _item31 = _step148.value;
            _iterator149 = _createForOfIteratorHelper(this.transformWithContext(_item31, context));
            _context12.prev = 235;
            _iterator149.s();
          case 237:
            if ((_step149 = _iterator149.n()).done) {
              _context12.next = 245;
              break;
            }
            _error77 = _step149.value;
            _error77.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error77.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context12.next = 243;
            return _error77;
          case 243:
            _context12.next = 237;
            break;
          case 245:
            _context12.next = 250;
            break;
          case 247:
            _context12.prev = 247;
            _context12.t10 = _context12["catch"](235);
            _iterator149.e(_context12.t10);
          case 250:
            _context12.prev = 250;
            _iterator149.f();
            return _context12.finish(250);
          case 253:
            supplementalSemanticIdsIndex++;
          case 254:
            _context12.next = 232;
            break;
          case 256:
            _context12.next = 261;
            break;
          case 258:
            _context12.prev = 258;
            _context12.t11 = _context12["catch"](230);
            _iterator148.e(_context12.t11);
          case 261:
            _context12.prev = 261;
            _iterator148.f();
            return _context12.finish(261);
          case 264:
            if (!(that.qualifiers !== null)) {
              _context12.next = 301;
              break;
            }
            qualifiersIndex = 0;
            _iterator150 = _createForOfIteratorHelper(that.qualifiers);
            _context12.prev = 267;
            _iterator150.s();
          case 269:
            if ((_step150 = _iterator150.n()).done) {
              _context12.next = 293;
              break;
            }
            _item32 = _step150.value;
            _iterator151 = _createForOfIteratorHelper(this.transformWithContext(_item32, context));
            _context12.prev = 272;
            _iterator151.s();
          case 274:
            if ((_step151 = _iterator151.n()).done) {
              _context12.next = 282;
              break;
            }
            _error78 = _step151.value;
            _error78.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error78.path.prepend(new PropertySegment(that, "qualifiers"));
            _context12.next = 280;
            return _error78;
          case 280:
            _context12.next = 274;
            break;
          case 282:
            _context12.next = 287;
            break;
          case 284:
            _context12.prev = 284;
            _context12.t12 = _context12["catch"](272);
            _iterator151.e(_context12.t12);
          case 287:
            _context12.prev = 287;
            _iterator151.f();
            return _context12.finish(287);
          case 290:
            qualifiersIndex++;
          case 291:
            _context12.next = 269;
            break;
          case 293:
            _context12.next = 298;
            break;
          case 295:
            _context12.prev = 295;
            _context12.t13 = _context12["catch"](267);
            _iterator150.e(_context12.t13);
          case 298:
            _context12.prev = 298;
            _iterator150.f();
            return _context12.finish(298);
          case 301:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context12.next = 338;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator152 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context12.prev = 304;
            _iterator152.s();
          case 306:
            if ((_step152 = _iterator152.n()).done) {
              _context12.next = 330;
              break;
            }
            _item33 = _step152.value;
            _iterator153 = _createForOfIteratorHelper(this.transformWithContext(_item33, context));
            _context12.prev = 309;
            _iterator153.s();
          case 311:
            if ((_step153 = _iterator153.n()).done) {
              _context12.next = 319;
              break;
            }
            _error79 = _step153.value;
            _error79.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error79.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context12.next = 317;
            return _error79;
          case 317:
            _context12.next = 311;
            break;
          case 319:
            _context12.next = 324;
            break;
          case 321:
            _context12.prev = 321;
            _context12.t14 = _context12["catch"](309);
            _iterator153.e(_context12.t14);
          case 324:
            _context12.prev = 324;
            _iterator153.f();
            return _context12.finish(324);
          case 327:
            embeddedDataSpecificationsIndex++;
          case 328:
            _context12.next = 306;
            break;
          case 330:
            _context12.next = 335;
            break;
          case 332:
            _context12.prev = 332;
            _context12.t15 = _context12["catch"](304);
            _iterator152.e(_context12.t15);
          case 335:
            _context12.prev = 335;
            _iterator152.f();
            return _context12.finish(335);
          case 338:
            if (!(that.valueId !== null)) {
              _context12.next = 357;
              break;
            }
            _iterator154 = _createForOfIteratorHelper(this.transformWithContext(that.valueId, context));
            _context12.prev = 340;
            _iterator154.s();
          case 342:
            if ((_step154 = _iterator154.n()).done) {
              _context12.next = 349;
              break;
            }
            _error80 = _step154.value;
            _error80.path.prepend(new PropertySegment(that, "valueId"));
            _context12.next = 347;
            return _error80;
          case 347:
            _context12.next = 342;
            break;
          case 349:
            _context12.next = 354;
            break;
          case 351:
            _context12.prev = 351;
            _context12.t16 = _context12["catch"](340);
            _iterator154.e(_context12.t16);
          case 354:
            _context12.prev = 354;
            _iterator154.f();
            return _context12.finish(354);
          case 357:
          case "end":
            return _context12.stop();
        }
      }, transformPropertyWithContext, this, [[41, 52, 55, 58], [60, 71, 74, 77], [79, 90, 93, 96], [100, 128, 131, 134], [105, 117, 120, 123], [137, 165, 168, 171], [142, 154, 157, 160], [174, 202, 205, 208], [179, 191, 194, 197], [210, 221, 224, 227], [230, 258, 261, 264], [235, 247, 250, 253], [267, 295, 298, 301], [272, 284, 287, 290], [304, 332, 335, 338], [309, 321, 324, 327], [340, 351, 354, 357]]);
    })
  }, {
    key: "transformMultiLanguagePropertyWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformMultiLanguagePropertyWithContext(that, context) {
      var _iterator155, _step155, error, _iterator156, _step156, _error81, extensionsIndex, _iterator157, _step157, item, _iterator158, _step158, _error82, displayNameIndex, _iterator159, _step159, _item34, _iterator160, _step160, _error83, descriptionIndex, _iterator161, _step161, _item35, _iterator162, _step162, _error84, _iterator163, _step163, _error85, supplementalSemanticIdsIndex, _iterator164, _step164, _item36, _iterator165, _step165, _error86, qualifiersIndex, _iterator166, _step166, _item37, _iterator167, _step167, _error87, embeddedDataSpecificationsIndex, _iterator168, _step168, _item38, _iterator169, _step169, _error88, valueIndex, _iterator170, _step170, _item39, _iterator171, _step171, _error89, _iterator172, _step172, _error90;
      return _regeneratorRuntime().wrap(function transformMultiLanguagePropertyWithContext$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context13.next = 3;
              break;
            }
            _context13.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context13.next = 6;
              break;
            }
            _context13.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context13.next = 9;
              break;
            }
            _context13.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context13.next = 12;
              break;
            }
            _context13.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context13.next = 15;
              break;
            }
            _context13.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context13.next = 18;
              break;
            }
            _context13.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context13.next = 21;
              break;
            }
            _context13.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context13.next = 24;
              break;
            }
            _context13.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context13.next = 27;
              break;
            }
            _context13.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context13.next = 30;
              break;
            }
            _context13.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context13.next = 33;
              break;
            }
            _context13.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context13.next = 36;
              break;
            }
            _context13.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.value !== null) || langStringsHaveUniqueLanguages(that.value)) {
              _context13.next = 39;
              break;
            }
            _context13.next = 39;
            return new VerificationError("Value must specify unique languages.");
          case 39:
            if (!(that.value !== null) || that.value.length >= 1) {
              _context13.next = 42;
              break;
            }
            _context13.next = 42;
            return new VerificationError("Value must be either not set or have at least one item.");
          case 42:
            if (!(that.category !== null)) {
              _context13.next = 61;
              break;
            }
            _iterator155 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context13.prev = 44;
            _iterator155.s();
          case 46:
            if ((_step155 = _iterator155.n()).done) {
              _context13.next = 53;
              break;
            }
            error = _step155.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context13.next = 51;
            return error;
          case 51:
            _context13.next = 46;
            break;
          case 53:
            _context13.next = 58;
            break;
          case 55:
            _context13.prev = 55;
            _context13.t0 = _context13["catch"](44);
            _iterator155.e(_context13.t0);
          case 58:
            _context13.prev = 58;
            _iterator155.f();
            return _context13.finish(58);
          case 61:
            if (!(that.idShort !== null)) {
              _context13.next = 80;
              break;
            }
            _iterator156 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context13.prev = 63;
            _iterator156.s();
          case 65:
            if ((_step156 = _iterator156.n()).done) {
              _context13.next = 72;
              break;
            }
            _error81 = _step156.value;
            _error81.path.prepend(new PropertySegment(that, "idShort"));
            _context13.next = 70;
            return _error81;
          case 70:
            _context13.next = 65;
            break;
          case 72:
            _context13.next = 77;
            break;
          case 74:
            _context13.prev = 74;
            _context13.t1 = _context13["catch"](63);
            _iterator156.e(_context13.t1);
          case 77:
            _context13.prev = 77;
            _iterator156.f();
            return _context13.finish(77);
          case 80:
            if (!(context === true)) {
              _context13.next = 378;
              break;
            }
            if (!(that.extensions !== null)) {
              _context13.next = 118;
              break;
            }
            extensionsIndex = 0;
            _iterator157 = _createForOfIteratorHelper(that.extensions);
            _context13.prev = 84;
            _iterator157.s();
          case 86:
            if ((_step157 = _iterator157.n()).done) {
              _context13.next = 110;
              break;
            }
            item = _step157.value;
            _iterator158 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context13.prev = 89;
            _iterator158.s();
          case 91:
            if ((_step158 = _iterator158.n()).done) {
              _context13.next = 99;
              break;
            }
            _error82 = _step158.value;
            _error82.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error82.path.prepend(new PropertySegment(that, "extensions"));
            _context13.next = 97;
            return _error82;
          case 97:
            _context13.next = 91;
            break;
          case 99:
            _context13.next = 104;
            break;
          case 101:
            _context13.prev = 101;
            _context13.t2 = _context13["catch"](89);
            _iterator158.e(_context13.t2);
          case 104:
            _context13.prev = 104;
            _iterator158.f();
            return _context13.finish(104);
          case 107:
            extensionsIndex++;
          case 108:
            _context13.next = 86;
            break;
          case 110:
            _context13.next = 115;
            break;
          case 112:
            _context13.prev = 112;
            _context13.t3 = _context13["catch"](84);
            _iterator157.e(_context13.t3);
          case 115:
            _context13.prev = 115;
            _iterator157.f();
            return _context13.finish(115);
          case 118:
            if (!(that.displayName !== null)) {
              _context13.next = 155;
              break;
            }
            displayNameIndex = 0;
            _iterator159 = _createForOfIteratorHelper(that.displayName);
            _context13.prev = 121;
            _iterator159.s();
          case 123:
            if ((_step159 = _iterator159.n()).done) {
              _context13.next = 147;
              break;
            }
            _item34 = _step159.value;
            _iterator160 = _createForOfIteratorHelper(this.transformWithContext(_item34, context));
            _context13.prev = 126;
            _iterator160.s();
          case 128:
            if ((_step160 = _iterator160.n()).done) {
              _context13.next = 136;
              break;
            }
            _error83 = _step160.value;
            _error83.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error83.path.prepend(new PropertySegment(that, "displayName"));
            _context13.next = 134;
            return _error83;
          case 134:
            _context13.next = 128;
            break;
          case 136:
            _context13.next = 141;
            break;
          case 138:
            _context13.prev = 138;
            _context13.t4 = _context13["catch"](126);
            _iterator160.e(_context13.t4);
          case 141:
            _context13.prev = 141;
            _iterator160.f();
            return _context13.finish(141);
          case 144:
            displayNameIndex++;
          case 145:
            _context13.next = 123;
            break;
          case 147:
            _context13.next = 152;
            break;
          case 149:
            _context13.prev = 149;
            _context13.t5 = _context13["catch"](121);
            _iterator159.e(_context13.t5);
          case 152:
            _context13.prev = 152;
            _iterator159.f();
            return _context13.finish(152);
          case 155:
            if (!(that.description !== null)) {
              _context13.next = 192;
              break;
            }
            descriptionIndex = 0;
            _iterator161 = _createForOfIteratorHelper(that.description);
            _context13.prev = 158;
            _iterator161.s();
          case 160:
            if ((_step161 = _iterator161.n()).done) {
              _context13.next = 184;
              break;
            }
            _item35 = _step161.value;
            _iterator162 = _createForOfIteratorHelper(this.transformWithContext(_item35, context));
            _context13.prev = 163;
            _iterator162.s();
          case 165:
            if ((_step162 = _iterator162.n()).done) {
              _context13.next = 173;
              break;
            }
            _error84 = _step162.value;
            _error84.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error84.path.prepend(new PropertySegment(that, "description"));
            _context13.next = 171;
            return _error84;
          case 171:
            _context13.next = 165;
            break;
          case 173:
            _context13.next = 178;
            break;
          case 175:
            _context13.prev = 175;
            _context13.t6 = _context13["catch"](163);
            _iterator162.e(_context13.t6);
          case 178:
            _context13.prev = 178;
            _iterator162.f();
            return _context13.finish(178);
          case 181:
            descriptionIndex++;
          case 182:
            _context13.next = 160;
            break;
          case 184:
            _context13.next = 189;
            break;
          case 186:
            _context13.prev = 186;
            _context13.t7 = _context13["catch"](158);
            _iterator161.e(_context13.t7);
          case 189:
            _context13.prev = 189;
            _iterator161.f();
            return _context13.finish(189);
          case 192:
            if (!(that.semanticId !== null)) {
              _context13.next = 211;
              break;
            }
            _iterator163 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context13.prev = 194;
            _iterator163.s();
          case 196:
            if ((_step163 = _iterator163.n()).done) {
              _context13.next = 203;
              break;
            }
            _error85 = _step163.value;
            _error85.path.prepend(new PropertySegment(that, "semanticId"));
            _context13.next = 201;
            return _error85;
          case 201:
            _context13.next = 196;
            break;
          case 203:
            _context13.next = 208;
            break;
          case 205:
            _context13.prev = 205;
            _context13.t8 = _context13["catch"](194);
            _iterator163.e(_context13.t8);
          case 208:
            _context13.prev = 208;
            _iterator163.f();
            return _context13.finish(208);
          case 211:
            if (!(that.supplementalSemanticIds !== null)) {
              _context13.next = 248;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator164 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context13.prev = 214;
            _iterator164.s();
          case 216:
            if ((_step164 = _iterator164.n()).done) {
              _context13.next = 240;
              break;
            }
            _item36 = _step164.value;
            _iterator165 = _createForOfIteratorHelper(this.transformWithContext(_item36, context));
            _context13.prev = 219;
            _iterator165.s();
          case 221:
            if ((_step165 = _iterator165.n()).done) {
              _context13.next = 229;
              break;
            }
            _error86 = _step165.value;
            _error86.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error86.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context13.next = 227;
            return _error86;
          case 227:
            _context13.next = 221;
            break;
          case 229:
            _context13.next = 234;
            break;
          case 231:
            _context13.prev = 231;
            _context13.t9 = _context13["catch"](219);
            _iterator165.e(_context13.t9);
          case 234:
            _context13.prev = 234;
            _iterator165.f();
            return _context13.finish(234);
          case 237:
            supplementalSemanticIdsIndex++;
          case 238:
            _context13.next = 216;
            break;
          case 240:
            _context13.next = 245;
            break;
          case 242:
            _context13.prev = 242;
            _context13.t10 = _context13["catch"](214);
            _iterator164.e(_context13.t10);
          case 245:
            _context13.prev = 245;
            _iterator164.f();
            return _context13.finish(245);
          case 248:
            if (!(that.qualifiers !== null)) {
              _context13.next = 285;
              break;
            }
            qualifiersIndex = 0;
            _iterator166 = _createForOfIteratorHelper(that.qualifiers);
            _context13.prev = 251;
            _iterator166.s();
          case 253:
            if ((_step166 = _iterator166.n()).done) {
              _context13.next = 277;
              break;
            }
            _item37 = _step166.value;
            _iterator167 = _createForOfIteratorHelper(this.transformWithContext(_item37, context));
            _context13.prev = 256;
            _iterator167.s();
          case 258:
            if ((_step167 = _iterator167.n()).done) {
              _context13.next = 266;
              break;
            }
            _error87 = _step167.value;
            _error87.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error87.path.prepend(new PropertySegment(that, "qualifiers"));
            _context13.next = 264;
            return _error87;
          case 264:
            _context13.next = 258;
            break;
          case 266:
            _context13.next = 271;
            break;
          case 268:
            _context13.prev = 268;
            _context13.t11 = _context13["catch"](256);
            _iterator167.e(_context13.t11);
          case 271:
            _context13.prev = 271;
            _iterator167.f();
            return _context13.finish(271);
          case 274:
            qualifiersIndex++;
          case 275:
            _context13.next = 253;
            break;
          case 277:
            _context13.next = 282;
            break;
          case 279:
            _context13.prev = 279;
            _context13.t12 = _context13["catch"](251);
            _iterator166.e(_context13.t12);
          case 282:
            _context13.prev = 282;
            _iterator166.f();
            return _context13.finish(282);
          case 285:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context13.next = 322;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator168 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context13.prev = 288;
            _iterator168.s();
          case 290:
            if ((_step168 = _iterator168.n()).done) {
              _context13.next = 314;
              break;
            }
            _item38 = _step168.value;
            _iterator169 = _createForOfIteratorHelper(this.transformWithContext(_item38, context));
            _context13.prev = 293;
            _iterator169.s();
          case 295:
            if ((_step169 = _iterator169.n()).done) {
              _context13.next = 303;
              break;
            }
            _error88 = _step169.value;
            _error88.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error88.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context13.next = 301;
            return _error88;
          case 301:
            _context13.next = 295;
            break;
          case 303:
            _context13.next = 308;
            break;
          case 305:
            _context13.prev = 305;
            _context13.t13 = _context13["catch"](293);
            _iterator169.e(_context13.t13);
          case 308:
            _context13.prev = 308;
            _iterator169.f();
            return _context13.finish(308);
          case 311:
            embeddedDataSpecificationsIndex++;
          case 312:
            _context13.next = 290;
            break;
          case 314:
            _context13.next = 319;
            break;
          case 316:
            _context13.prev = 316;
            _context13.t14 = _context13["catch"](288);
            _iterator168.e(_context13.t14);
          case 319:
            _context13.prev = 319;
            _iterator168.f();
            return _context13.finish(319);
          case 322:
            if (!(that.value !== null)) {
              _context13.next = 359;
              break;
            }
            valueIndex = 0;
            _iterator170 = _createForOfIteratorHelper(that.value);
            _context13.prev = 325;
            _iterator170.s();
          case 327:
            if ((_step170 = _iterator170.n()).done) {
              _context13.next = 351;
              break;
            }
            _item39 = _step170.value;
            _iterator171 = _createForOfIteratorHelper(this.transformWithContext(_item39, context));
            _context13.prev = 330;
            _iterator171.s();
          case 332:
            if ((_step171 = _iterator171.n()).done) {
              _context13.next = 340;
              break;
            }
            _error89 = _step171.value;
            _error89.path.prepend(new IndexSegment(that.value, valueIndex));
            _error89.path.prepend(new PropertySegment(that, "value"));
            _context13.next = 338;
            return _error89;
          case 338:
            _context13.next = 332;
            break;
          case 340:
            _context13.next = 345;
            break;
          case 342:
            _context13.prev = 342;
            _context13.t15 = _context13["catch"](330);
            _iterator171.e(_context13.t15);
          case 345:
            _context13.prev = 345;
            _iterator171.f();
            return _context13.finish(345);
          case 348:
            valueIndex++;
          case 349:
            _context13.next = 327;
            break;
          case 351:
            _context13.next = 356;
            break;
          case 353:
            _context13.prev = 353;
            _context13.t16 = _context13["catch"](325);
            _iterator170.e(_context13.t16);
          case 356:
            _context13.prev = 356;
            _iterator170.f();
            return _context13.finish(356);
          case 359:
            if (!(that.valueId !== null)) {
              _context13.next = 378;
              break;
            }
            _iterator172 = _createForOfIteratorHelper(this.transformWithContext(that.valueId, context));
            _context13.prev = 361;
            _iterator172.s();
          case 363:
            if ((_step172 = _iterator172.n()).done) {
              _context13.next = 370;
              break;
            }
            _error90 = _step172.value;
            _error90.path.prepend(new PropertySegment(that, "valueId"));
            _context13.next = 368;
            return _error90;
          case 368:
            _context13.next = 363;
            break;
          case 370:
            _context13.next = 375;
            break;
          case 372:
            _context13.prev = 372;
            _context13.t17 = _context13["catch"](361);
            _iterator172.e(_context13.t17);
          case 375:
            _context13.prev = 375;
            _iterator172.f();
            return _context13.finish(375);
          case 378:
          case "end":
            return _context13.stop();
        }
      }, transformMultiLanguagePropertyWithContext, this, [[44, 55, 58, 61], [63, 74, 77, 80], [84, 112, 115, 118], [89, 101, 104, 107], [121, 149, 152, 155], [126, 138, 141, 144], [158, 186, 189, 192], [163, 175, 178, 181], [194, 205, 208, 211], [214, 242, 245, 248], [219, 231, 234, 237], [251, 279, 282, 285], [256, 268, 271, 274], [288, 316, 319, 322], [293, 305, 308, 311], [325, 353, 356, 359], [330, 342, 345, 348], [361, 372, 375, 378]]);
    })
  }, {
    key: "transformRangeWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformRangeWithContext(that, context) {
      var _iterator173, _step173, error, _iterator174, _step174, _error91, _iterator175, _step175, _error92, _iterator176, _step176, _error93, extensionsIndex, _iterator177, _step177, item, _iterator178, _step178, _error94, displayNameIndex, _iterator179, _step179, _item40, _iterator180, _step180, _error95, descriptionIndex, _iterator181, _step181, _item41, _iterator182, _step182, _error96, _iterator183, _step183, _error97, supplementalSemanticIdsIndex, _iterator184, _step184, _item42, _iterator185, _step185, _error98, qualifiersIndex, _iterator186, _step186, _item43, _iterator187, _step187, _error99, embeddedDataSpecificationsIndex, _iterator188, _step188, _item44, _iterator189, _step189, _error100;
      return _regeneratorRuntime().wrap(function transformRangeWithContext$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context14.next = 3;
              break;
            }
            _context14.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context14.next = 6;
              break;
            }
            _context14.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context14.next = 9;
              break;
            }
            _context14.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context14.next = 12;
              break;
            }
            _context14.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context14.next = 15;
              break;
            }
            _context14.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context14.next = 18;
              break;
            }
            _context14.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context14.next = 21;
              break;
            }
            _context14.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context14.next = 24;
              break;
            }
            _context14.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context14.next = 27;
              break;
            }
            _context14.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context14.next = 30;
              break;
            }
            _context14.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context14.next = 33;
              break;
            }
            _context14.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context14.next = 36;
              break;
            }
            _context14.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.max !== null) || valueConsistentWithXsdType(that.max, that.valueType)) {
              _context14.next = 39;
              break;
            }
            _context14.next = 39;
            return new VerificationError("Max must be consistent with the value type.");
          case 39:
            if (!(that.min !== null) || valueConsistentWithXsdType(that.min, that.valueType)) {
              _context14.next = 42;
              break;
            }
            _context14.next = 42;
            return new VerificationError("Min must be consistent with the value type.");
          case 42:
            if (!(that.category !== null)) {
              _context14.next = 61;
              break;
            }
            _iterator173 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context14.prev = 44;
            _iterator173.s();
          case 46:
            if ((_step173 = _iterator173.n()).done) {
              _context14.next = 53;
              break;
            }
            error = _step173.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context14.next = 51;
            return error;
          case 51:
            _context14.next = 46;
            break;
          case 53:
            _context14.next = 58;
            break;
          case 55:
            _context14.prev = 55;
            _context14.t0 = _context14["catch"](44);
            _iterator173.e(_context14.t0);
          case 58:
            _context14.prev = 58;
            _iterator173.f();
            return _context14.finish(58);
          case 61:
            if (!(that.idShort !== null)) {
              _context14.next = 80;
              break;
            }
            _iterator174 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context14.prev = 63;
            _iterator174.s();
          case 65:
            if ((_step174 = _iterator174.n()).done) {
              _context14.next = 72;
              break;
            }
            _error91 = _step174.value;
            _error91.path.prepend(new PropertySegment(that, "idShort"));
            _context14.next = 70;
            return _error91;
          case 70:
            _context14.next = 65;
            break;
          case 72:
            _context14.next = 77;
            break;
          case 74:
            _context14.prev = 74;
            _context14.t1 = _context14["catch"](63);
            _iterator174.e(_context14.t1);
          case 77:
            _context14.prev = 77;
            _iterator174.f();
            return _context14.finish(77);
          case 80:
            if (!(that.min !== null)) {
              _context14.next = 99;
              break;
            }
            _iterator175 = _createForOfIteratorHelper(verifyValueDataType(that.min));
            _context14.prev = 82;
            _iterator175.s();
          case 84:
            if ((_step175 = _iterator175.n()).done) {
              _context14.next = 91;
              break;
            }
            _error92 = _step175.value;
            _error92.path.prepend(new PropertySegment(that, "min"));
            _context14.next = 89;
            return _error92;
          case 89:
            _context14.next = 84;
            break;
          case 91:
            _context14.next = 96;
            break;
          case 93:
            _context14.prev = 93;
            _context14.t2 = _context14["catch"](82);
            _iterator175.e(_context14.t2);
          case 96:
            _context14.prev = 96;
            _iterator175.f();
            return _context14.finish(96);
          case 99:
            if (!(that.max !== null)) {
              _context14.next = 118;
              break;
            }
            _iterator176 = _createForOfIteratorHelper(verifyValueDataType(that.max));
            _context14.prev = 101;
            _iterator176.s();
          case 103:
            if ((_step176 = _iterator176.n()).done) {
              _context14.next = 110;
              break;
            }
            _error93 = _step176.value;
            _error93.path.prepend(new PropertySegment(that, "max"));
            _context14.next = 108;
            return _error93;
          case 108:
            _context14.next = 103;
            break;
          case 110:
            _context14.next = 115;
            break;
          case 112:
            _context14.prev = 112;
            _context14.t3 = _context14["catch"](101);
            _iterator176.e(_context14.t3);
          case 115:
            _context14.prev = 115;
            _iterator176.f();
            return _context14.finish(115);
          case 118:
            if (!(context === true)) {
              _context14.next = 360;
              break;
            }
            if (!(that.extensions !== null)) {
              _context14.next = 156;
              break;
            }
            extensionsIndex = 0;
            _iterator177 = _createForOfIteratorHelper(that.extensions);
            _context14.prev = 122;
            _iterator177.s();
          case 124:
            if ((_step177 = _iterator177.n()).done) {
              _context14.next = 148;
              break;
            }
            item = _step177.value;
            _iterator178 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context14.prev = 127;
            _iterator178.s();
          case 129:
            if ((_step178 = _iterator178.n()).done) {
              _context14.next = 137;
              break;
            }
            _error94 = _step178.value;
            _error94.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error94.path.prepend(new PropertySegment(that, "extensions"));
            _context14.next = 135;
            return _error94;
          case 135:
            _context14.next = 129;
            break;
          case 137:
            _context14.next = 142;
            break;
          case 139:
            _context14.prev = 139;
            _context14.t4 = _context14["catch"](127);
            _iterator178.e(_context14.t4);
          case 142:
            _context14.prev = 142;
            _iterator178.f();
            return _context14.finish(142);
          case 145:
            extensionsIndex++;
          case 146:
            _context14.next = 124;
            break;
          case 148:
            _context14.next = 153;
            break;
          case 150:
            _context14.prev = 150;
            _context14.t5 = _context14["catch"](122);
            _iterator177.e(_context14.t5);
          case 153:
            _context14.prev = 153;
            _iterator177.f();
            return _context14.finish(153);
          case 156:
            if (!(that.displayName !== null)) {
              _context14.next = 193;
              break;
            }
            displayNameIndex = 0;
            _iterator179 = _createForOfIteratorHelper(that.displayName);
            _context14.prev = 159;
            _iterator179.s();
          case 161:
            if ((_step179 = _iterator179.n()).done) {
              _context14.next = 185;
              break;
            }
            _item40 = _step179.value;
            _iterator180 = _createForOfIteratorHelper(this.transformWithContext(_item40, context));
            _context14.prev = 164;
            _iterator180.s();
          case 166:
            if ((_step180 = _iterator180.n()).done) {
              _context14.next = 174;
              break;
            }
            _error95 = _step180.value;
            _error95.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error95.path.prepend(new PropertySegment(that, "displayName"));
            _context14.next = 172;
            return _error95;
          case 172:
            _context14.next = 166;
            break;
          case 174:
            _context14.next = 179;
            break;
          case 176:
            _context14.prev = 176;
            _context14.t6 = _context14["catch"](164);
            _iterator180.e(_context14.t6);
          case 179:
            _context14.prev = 179;
            _iterator180.f();
            return _context14.finish(179);
          case 182:
            displayNameIndex++;
          case 183:
            _context14.next = 161;
            break;
          case 185:
            _context14.next = 190;
            break;
          case 187:
            _context14.prev = 187;
            _context14.t7 = _context14["catch"](159);
            _iterator179.e(_context14.t7);
          case 190:
            _context14.prev = 190;
            _iterator179.f();
            return _context14.finish(190);
          case 193:
            if (!(that.description !== null)) {
              _context14.next = 230;
              break;
            }
            descriptionIndex = 0;
            _iterator181 = _createForOfIteratorHelper(that.description);
            _context14.prev = 196;
            _iterator181.s();
          case 198:
            if ((_step181 = _iterator181.n()).done) {
              _context14.next = 222;
              break;
            }
            _item41 = _step181.value;
            _iterator182 = _createForOfIteratorHelper(this.transformWithContext(_item41, context));
            _context14.prev = 201;
            _iterator182.s();
          case 203:
            if ((_step182 = _iterator182.n()).done) {
              _context14.next = 211;
              break;
            }
            _error96 = _step182.value;
            _error96.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error96.path.prepend(new PropertySegment(that, "description"));
            _context14.next = 209;
            return _error96;
          case 209:
            _context14.next = 203;
            break;
          case 211:
            _context14.next = 216;
            break;
          case 213:
            _context14.prev = 213;
            _context14.t8 = _context14["catch"](201);
            _iterator182.e(_context14.t8);
          case 216:
            _context14.prev = 216;
            _iterator182.f();
            return _context14.finish(216);
          case 219:
            descriptionIndex++;
          case 220:
            _context14.next = 198;
            break;
          case 222:
            _context14.next = 227;
            break;
          case 224:
            _context14.prev = 224;
            _context14.t9 = _context14["catch"](196);
            _iterator181.e(_context14.t9);
          case 227:
            _context14.prev = 227;
            _iterator181.f();
            return _context14.finish(227);
          case 230:
            if (!(that.semanticId !== null)) {
              _context14.next = 249;
              break;
            }
            _iterator183 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context14.prev = 232;
            _iterator183.s();
          case 234:
            if ((_step183 = _iterator183.n()).done) {
              _context14.next = 241;
              break;
            }
            _error97 = _step183.value;
            _error97.path.prepend(new PropertySegment(that, "semanticId"));
            _context14.next = 239;
            return _error97;
          case 239:
            _context14.next = 234;
            break;
          case 241:
            _context14.next = 246;
            break;
          case 243:
            _context14.prev = 243;
            _context14.t10 = _context14["catch"](232);
            _iterator183.e(_context14.t10);
          case 246:
            _context14.prev = 246;
            _iterator183.f();
            return _context14.finish(246);
          case 249:
            if (!(that.supplementalSemanticIds !== null)) {
              _context14.next = 286;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator184 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context14.prev = 252;
            _iterator184.s();
          case 254:
            if ((_step184 = _iterator184.n()).done) {
              _context14.next = 278;
              break;
            }
            _item42 = _step184.value;
            _iterator185 = _createForOfIteratorHelper(this.transformWithContext(_item42, context));
            _context14.prev = 257;
            _iterator185.s();
          case 259:
            if ((_step185 = _iterator185.n()).done) {
              _context14.next = 267;
              break;
            }
            _error98 = _step185.value;
            _error98.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error98.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context14.next = 265;
            return _error98;
          case 265:
            _context14.next = 259;
            break;
          case 267:
            _context14.next = 272;
            break;
          case 269:
            _context14.prev = 269;
            _context14.t11 = _context14["catch"](257);
            _iterator185.e(_context14.t11);
          case 272:
            _context14.prev = 272;
            _iterator185.f();
            return _context14.finish(272);
          case 275:
            supplementalSemanticIdsIndex++;
          case 276:
            _context14.next = 254;
            break;
          case 278:
            _context14.next = 283;
            break;
          case 280:
            _context14.prev = 280;
            _context14.t12 = _context14["catch"](252);
            _iterator184.e(_context14.t12);
          case 283:
            _context14.prev = 283;
            _iterator184.f();
            return _context14.finish(283);
          case 286:
            if (!(that.qualifiers !== null)) {
              _context14.next = 323;
              break;
            }
            qualifiersIndex = 0;
            _iterator186 = _createForOfIteratorHelper(that.qualifiers);
            _context14.prev = 289;
            _iterator186.s();
          case 291:
            if ((_step186 = _iterator186.n()).done) {
              _context14.next = 315;
              break;
            }
            _item43 = _step186.value;
            _iterator187 = _createForOfIteratorHelper(this.transformWithContext(_item43, context));
            _context14.prev = 294;
            _iterator187.s();
          case 296:
            if ((_step187 = _iterator187.n()).done) {
              _context14.next = 304;
              break;
            }
            _error99 = _step187.value;
            _error99.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error99.path.prepend(new PropertySegment(that, "qualifiers"));
            _context14.next = 302;
            return _error99;
          case 302:
            _context14.next = 296;
            break;
          case 304:
            _context14.next = 309;
            break;
          case 306:
            _context14.prev = 306;
            _context14.t13 = _context14["catch"](294);
            _iterator187.e(_context14.t13);
          case 309:
            _context14.prev = 309;
            _iterator187.f();
            return _context14.finish(309);
          case 312:
            qualifiersIndex++;
          case 313:
            _context14.next = 291;
            break;
          case 315:
            _context14.next = 320;
            break;
          case 317:
            _context14.prev = 317;
            _context14.t14 = _context14["catch"](289);
            _iterator186.e(_context14.t14);
          case 320:
            _context14.prev = 320;
            _iterator186.f();
            return _context14.finish(320);
          case 323:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context14.next = 360;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator188 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context14.prev = 326;
            _iterator188.s();
          case 328:
            if ((_step188 = _iterator188.n()).done) {
              _context14.next = 352;
              break;
            }
            _item44 = _step188.value;
            _iterator189 = _createForOfIteratorHelper(this.transformWithContext(_item44, context));
            _context14.prev = 331;
            _iterator189.s();
          case 333:
            if ((_step189 = _iterator189.n()).done) {
              _context14.next = 341;
              break;
            }
            _error100 = _step189.value;
            _error100.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error100.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context14.next = 339;
            return _error100;
          case 339:
            _context14.next = 333;
            break;
          case 341:
            _context14.next = 346;
            break;
          case 343:
            _context14.prev = 343;
            _context14.t15 = _context14["catch"](331);
            _iterator189.e(_context14.t15);
          case 346:
            _context14.prev = 346;
            _iterator189.f();
            return _context14.finish(346);
          case 349:
            embeddedDataSpecificationsIndex++;
          case 350:
            _context14.next = 328;
            break;
          case 352:
            _context14.next = 357;
            break;
          case 354:
            _context14.prev = 354;
            _context14.t16 = _context14["catch"](326);
            _iterator188.e(_context14.t16);
          case 357:
            _context14.prev = 357;
            _iterator188.f();
            return _context14.finish(357);
          case 360:
          case "end":
            return _context14.stop();
        }
      }, transformRangeWithContext, this, [[44, 55, 58, 61], [63, 74, 77, 80], [82, 93, 96, 99], [101, 112, 115, 118], [122, 150, 153, 156], [127, 139, 142, 145], [159, 187, 190, 193], [164, 176, 179, 182], [196, 224, 227, 230], [201, 213, 216, 219], [232, 243, 246, 249], [252, 280, 283, 286], [257, 269, 272, 275], [289, 317, 320, 323], [294, 306, 309, 312], [326, 354, 357, 360], [331, 343, 346, 349]]);
    })
  }, {
    key: "transformReferenceElementWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformReferenceElementWithContext(that, context) {
      var _iterator190, _step190, error, _iterator191, _step191, _error101, extensionsIndex, _iterator192, _step192, item, _iterator193, _step193, _error102, displayNameIndex, _iterator194, _step194, _item45, _iterator195, _step195, _error103, descriptionIndex, _iterator196, _step196, _item46, _iterator197, _step197, _error104, _iterator198, _step198, _error105, supplementalSemanticIdsIndex, _iterator199, _step199, _item47, _iterator200, _step200, _error106, qualifiersIndex, _iterator201, _step201, _item48, _iterator202, _step202, _error107, embeddedDataSpecificationsIndex, _iterator203, _step203, _item49, _iterator204, _step204, _error108, _iterator205, _step205, _error109;
      return _regeneratorRuntime().wrap(function transformReferenceElementWithContext$(_context15) {
        while (1) switch (_context15.prev = _context15.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context15.next = 3;
              break;
            }
            _context15.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context15.next = 6;
              break;
            }
            _context15.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context15.next = 9;
              break;
            }
            _context15.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context15.next = 12;
              break;
            }
            _context15.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context15.next = 15;
              break;
            }
            _context15.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context15.next = 18;
              break;
            }
            _context15.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context15.next = 21;
              break;
            }
            _context15.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context15.next = 24;
              break;
            }
            _context15.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context15.next = 27;
              break;
            }
            _context15.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context15.next = 30;
              break;
            }
            _context15.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context15.next = 33;
              break;
            }
            _context15.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context15.next = 36;
              break;
            }
            _context15.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.category !== null)) {
              _context15.next = 55;
              break;
            }
            _iterator190 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context15.prev = 38;
            _iterator190.s();
          case 40:
            if ((_step190 = _iterator190.n()).done) {
              _context15.next = 47;
              break;
            }
            error = _step190.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context15.next = 45;
            return error;
          case 45:
            _context15.next = 40;
            break;
          case 47:
            _context15.next = 52;
            break;
          case 49:
            _context15.prev = 49;
            _context15.t0 = _context15["catch"](38);
            _iterator190.e(_context15.t0);
          case 52:
            _context15.prev = 52;
            _iterator190.f();
            return _context15.finish(52);
          case 55:
            if (!(that.idShort !== null)) {
              _context15.next = 74;
              break;
            }
            _iterator191 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context15.prev = 57;
            _iterator191.s();
          case 59:
            if ((_step191 = _iterator191.n()).done) {
              _context15.next = 66;
              break;
            }
            _error101 = _step191.value;
            _error101.path.prepend(new PropertySegment(that, "idShort"));
            _context15.next = 64;
            return _error101;
          case 64:
            _context15.next = 59;
            break;
          case 66:
            _context15.next = 71;
            break;
          case 68:
            _context15.prev = 68;
            _context15.t1 = _context15["catch"](57);
            _iterator191.e(_context15.t1);
          case 71:
            _context15.prev = 71;
            _iterator191.f();
            return _context15.finish(71);
          case 74:
            if (!(context === true)) {
              _context15.next = 335;
              break;
            }
            if (!(that.extensions !== null)) {
              _context15.next = 112;
              break;
            }
            extensionsIndex = 0;
            _iterator192 = _createForOfIteratorHelper(that.extensions);
            _context15.prev = 78;
            _iterator192.s();
          case 80:
            if ((_step192 = _iterator192.n()).done) {
              _context15.next = 104;
              break;
            }
            item = _step192.value;
            _iterator193 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context15.prev = 83;
            _iterator193.s();
          case 85:
            if ((_step193 = _iterator193.n()).done) {
              _context15.next = 93;
              break;
            }
            _error102 = _step193.value;
            _error102.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error102.path.prepend(new PropertySegment(that, "extensions"));
            _context15.next = 91;
            return _error102;
          case 91:
            _context15.next = 85;
            break;
          case 93:
            _context15.next = 98;
            break;
          case 95:
            _context15.prev = 95;
            _context15.t2 = _context15["catch"](83);
            _iterator193.e(_context15.t2);
          case 98:
            _context15.prev = 98;
            _iterator193.f();
            return _context15.finish(98);
          case 101:
            extensionsIndex++;
          case 102:
            _context15.next = 80;
            break;
          case 104:
            _context15.next = 109;
            break;
          case 106:
            _context15.prev = 106;
            _context15.t3 = _context15["catch"](78);
            _iterator192.e(_context15.t3);
          case 109:
            _context15.prev = 109;
            _iterator192.f();
            return _context15.finish(109);
          case 112:
            if (!(that.displayName !== null)) {
              _context15.next = 149;
              break;
            }
            displayNameIndex = 0;
            _iterator194 = _createForOfIteratorHelper(that.displayName);
            _context15.prev = 115;
            _iterator194.s();
          case 117:
            if ((_step194 = _iterator194.n()).done) {
              _context15.next = 141;
              break;
            }
            _item45 = _step194.value;
            _iterator195 = _createForOfIteratorHelper(this.transformWithContext(_item45, context));
            _context15.prev = 120;
            _iterator195.s();
          case 122:
            if ((_step195 = _iterator195.n()).done) {
              _context15.next = 130;
              break;
            }
            _error103 = _step195.value;
            _error103.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error103.path.prepend(new PropertySegment(that, "displayName"));
            _context15.next = 128;
            return _error103;
          case 128:
            _context15.next = 122;
            break;
          case 130:
            _context15.next = 135;
            break;
          case 132:
            _context15.prev = 132;
            _context15.t4 = _context15["catch"](120);
            _iterator195.e(_context15.t4);
          case 135:
            _context15.prev = 135;
            _iterator195.f();
            return _context15.finish(135);
          case 138:
            displayNameIndex++;
          case 139:
            _context15.next = 117;
            break;
          case 141:
            _context15.next = 146;
            break;
          case 143:
            _context15.prev = 143;
            _context15.t5 = _context15["catch"](115);
            _iterator194.e(_context15.t5);
          case 146:
            _context15.prev = 146;
            _iterator194.f();
            return _context15.finish(146);
          case 149:
            if (!(that.description !== null)) {
              _context15.next = 186;
              break;
            }
            descriptionIndex = 0;
            _iterator196 = _createForOfIteratorHelper(that.description);
            _context15.prev = 152;
            _iterator196.s();
          case 154:
            if ((_step196 = _iterator196.n()).done) {
              _context15.next = 178;
              break;
            }
            _item46 = _step196.value;
            _iterator197 = _createForOfIteratorHelper(this.transformWithContext(_item46, context));
            _context15.prev = 157;
            _iterator197.s();
          case 159:
            if ((_step197 = _iterator197.n()).done) {
              _context15.next = 167;
              break;
            }
            _error104 = _step197.value;
            _error104.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error104.path.prepend(new PropertySegment(that, "description"));
            _context15.next = 165;
            return _error104;
          case 165:
            _context15.next = 159;
            break;
          case 167:
            _context15.next = 172;
            break;
          case 169:
            _context15.prev = 169;
            _context15.t6 = _context15["catch"](157);
            _iterator197.e(_context15.t6);
          case 172:
            _context15.prev = 172;
            _iterator197.f();
            return _context15.finish(172);
          case 175:
            descriptionIndex++;
          case 176:
            _context15.next = 154;
            break;
          case 178:
            _context15.next = 183;
            break;
          case 180:
            _context15.prev = 180;
            _context15.t7 = _context15["catch"](152);
            _iterator196.e(_context15.t7);
          case 183:
            _context15.prev = 183;
            _iterator196.f();
            return _context15.finish(183);
          case 186:
            if (!(that.semanticId !== null)) {
              _context15.next = 205;
              break;
            }
            _iterator198 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context15.prev = 188;
            _iterator198.s();
          case 190:
            if ((_step198 = _iterator198.n()).done) {
              _context15.next = 197;
              break;
            }
            _error105 = _step198.value;
            _error105.path.prepend(new PropertySegment(that, "semanticId"));
            _context15.next = 195;
            return _error105;
          case 195:
            _context15.next = 190;
            break;
          case 197:
            _context15.next = 202;
            break;
          case 199:
            _context15.prev = 199;
            _context15.t8 = _context15["catch"](188);
            _iterator198.e(_context15.t8);
          case 202:
            _context15.prev = 202;
            _iterator198.f();
            return _context15.finish(202);
          case 205:
            if (!(that.supplementalSemanticIds !== null)) {
              _context15.next = 242;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator199 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context15.prev = 208;
            _iterator199.s();
          case 210:
            if ((_step199 = _iterator199.n()).done) {
              _context15.next = 234;
              break;
            }
            _item47 = _step199.value;
            _iterator200 = _createForOfIteratorHelper(this.transformWithContext(_item47, context));
            _context15.prev = 213;
            _iterator200.s();
          case 215:
            if ((_step200 = _iterator200.n()).done) {
              _context15.next = 223;
              break;
            }
            _error106 = _step200.value;
            _error106.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error106.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context15.next = 221;
            return _error106;
          case 221:
            _context15.next = 215;
            break;
          case 223:
            _context15.next = 228;
            break;
          case 225:
            _context15.prev = 225;
            _context15.t9 = _context15["catch"](213);
            _iterator200.e(_context15.t9);
          case 228:
            _context15.prev = 228;
            _iterator200.f();
            return _context15.finish(228);
          case 231:
            supplementalSemanticIdsIndex++;
          case 232:
            _context15.next = 210;
            break;
          case 234:
            _context15.next = 239;
            break;
          case 236:
            _context15.prev = 236;
            _context15.t10 = _context15["catch"](208);
            _iterator199.e(_context15.t10);
          case 239:
            _context15.prev = 239;
            _iterator199.f();
            return _context15.finish(239);
          case 242:
            if (!(that.qualifiers !== null)) {
              _context15.next = 279;
              break;
            }
            qualifiersIndex = 0;
            _iterator201 = _createForOfIteratorHelper(that.qualifiers);
            _context15.prev = 245;
            _iterator201.s();
          case 247:
            if ((_step201 = _iterator201.n()).done) {
              _context15.next = 271;
              break;
            }
            _item48 = _step201.value;
            _iterator202 = _createForOfIteratorHelper(this.transformWithContext(_item48, context));
            _context15.prev = 250;
            _iterator202.s();
          case 252:
            if ((_step202 = _iterator202.n()).done) {
              _context15.next = 260;
              break;
            }
            _error107 = _step202.value;
            _error107.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error107.path.prepend(new PropertySegment(that, "qualifiers"));
            _context15.next = 258;
            return _error107;
          case 258:
            _context15.next = 252;
            break;
          case 260:
            _context15.next = 265;
            break;
          case 262:
            _context15.prev = 262;
            _context15.t11 = _context15["catch"](250);
            _iterator202.e(_context15.t11);
          case 265:
            _context15.prev = 265;
            _iterator202.f();
            return _context15.finish(265);
          case 268:
            qualifiersIndex++;
          case 269:
            _context15.next = 247;
            break;
          case 271:
            _context15.next = 276;
            break;
          case 273:
            _context15.prev = 273;
            _context15.t12 = _context15["catch"](245);
            _iterator201.e(_context15.t12);
          case 276:
            _context15.prev = 276;
            _iterator201.f();
            return _context15.finish(276);
          case 279:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context15.next = 316;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator203 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context15.prev = 282;
            _iterator203.s();
          case 284:
            if ((_step203 = _iterator203.n()).done) {
              _context15.next = 308;
              break;
            }
            _item49 = _step203.value;
            _iterator204 = _createForOfIteratorHelper(this.transformWithContext(_item49, context));
            _context15.prev = 287;
            _iterator204.s();
          case 289:
            if ((_step204 = _iterator204.n()).done) {
              _context15.next = 297;
              break;
            }
            _error108 = _step204.value;
            _error108.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error108.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context15.next = 295;
            return _error108;
          case 295:
            _context15.next = 289;
            break;
          case 297:
            _context15.next = 302;
            break;
          case 299:
            _context15.prev = 299;
            _context15.t13 = _context15["catch"](287);
            _iterator204.e(_context15.t13);
          case 302:
            _context15.prev = 302;
            _iterator204.f();
            return _context15.finish(302);
          case 305:
            embeddedDataSpecificationsIndex++;
          case 306:
            _context15.next = 284;
            break;
          case 308:
            _context15.next = 313;
            break;
          case 310:
            _context15.prev = 310;
            _context15.t14 = _context15["catch"](282);
            _iterator203.e(_context15.t14);
          case 313:
            _context15.prev = 313;
            _iterator203.f();
            return _context15.finish(313);
          case 316:
            if (!(that.value !== null)) {
              _context15.next = 335;
              break;
            }
            _iterator205 = _createForOfIteratorHelper(this.transformWithContext(that.value, context));
            _context15.prev = 318;
            _iterator205.s();
          case 320:
            if ((_step205 = _iterator205.n()).done) {
              _context15.next = 327;
              break;
            }
            _error109 = _step205.value;
            _error109.path.prepend(new PropertySegment(that, "value"));
            _context15.next = 325;
            return _error109;
          case 325:
            _context15.next = 320;
            break;
          case 327:
            _context15.next = 332;
            break;
          case 329:
            _context15.prev = 329;
            _context15.t15 = _context15["catch"](318);
            _iterator205.e(_context15.t15);
          case 332:
            _context15.prev = 332;
            _iterator205.f();
            return _context15.finish(332);
          case 335:
          case "end":
            return _context15.stop();
        }
      }, transformReferenceElementWithContext, this, [[38, 49, 52, 55], [57, 68, 71, 74], [78, 106, 109, 112], [83, 95, 98, 101], [115, 143, 146, 149], [120, 132, 135, 138], [152, 180, 183, 186], [157, 169, 172, 175], [188, 199, 202, 205], [208, 236, 239, 242], [213, 225, 228, 231], [245, 273, 276, 279], [250, 262, 265, 268], [282, 310, 313, 316], [287, 299, 302, 305], [318, 329, 332, 335]]);
    })
  }, {
    key: "transformBlobWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformBlobWithContext(that, context) {
      var _iterator206, _step206, error, _iterator207, _step207, _error110, _iterator208, _step208, _error111, _iterator209, _step209, _error119, extensionsIndex, _iterator210, _step210, item, _iterator211, _step211, _error112, displayNameIndex, _iterator212, _step212, _item50, _iterator213, _step213, _error113, descriptionIndex, _iterator214, _step214, _item51, _iterator215, _step215, _error114, _iterator216, _step216, _error115, supplementalSemanticIdsIndex, _iterator217, _step217, _item52, _iterator218, _step218, _error116, qualifiersIndex, _iterator219, _step219, _item53, _iterator220, _step220, _error117, embeddedDataSpecificationsIndex, _iterator221, _step221, _item54, _iterator222, _step222, _error118;
      return _regeneratorRuntime().wrap(function transformBlobWithContext$(_context16) {
        while (1) switch (_context16.prev = _context16.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context16.next = 3;
              break;
            }
            _context16.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context16.next = 6;
              break;
            }
            _context16.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context16.next = 9;
              break;
            }
            _context16.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context16.next = 12;
              break;
            }
            _context16.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context16.next = 15;
              break;
            }
            _context16.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context16.next = 18;
              break;
            }
            _context16.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context16.next = 21;
              break;
            }
            _context16.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context16.next = 24;
              break;
            }
            _context16.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context16.next = 27;
              break;
            }
            _context16.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context16.next = 30;
              break;
            }
            _context16.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context16.next = 33;
              break;
            }
            _context16.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context16.next = 36;
              break;
            }
            _context16.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.category !== null)) {
              _context16.next = 55;
              break;
            }
            _iterator206 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context16.prev = 38;
            _iterator206.s();
          case 40:
            if ((_step206 = _iterator206.n()).done) {
              _context16.next = 47;
              break;
            }
            error = _step206.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context16.next = 45;
            return error;
          case 45:
            _context16.next = 40;
            break;
          case 47:
            _context16.next = 52;
            break;
          case 49:
            _context16.prev = 49;
            _context16.t0 = _context16["catch"](38);
            _iterator206.e(_context16.t0);
          case 52:
            _context16.prev = 52;
            _iterator206.f();
            return _context16.finish(52);
          case 55:
            if (!(that.idShort !== null)) {
              _context16.next = 74;
              break;
            }
            _iterator207 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context16.prev = 57;
            _iterator207.s();
          case 59:
            if ((_step207 = _iterator207.n()).done) {
              _context16.next = 66;
              break;
            }
            _error110 = _step207.value;
            _error110.path.prepend(new PropertySegment(that, "idShort"));
            _context16.next = 64;
            return _error110;
          case 64:
            _context16.next = 59;
            break;
          case 66:
            _context16.next = 71;
            break;
          case 68:
            _context16.prev = 68;
            _context16.t1 = _context16["catch"](57);
            _iterator207.e(_context16.t1);
          case 71:
            _context16.prev = 71;
            _iterator207.f();
            return _context16.finish(71);
          case 74:
            if (!(that.value !== null)) {
              _context16.next = 93;
              break;
            }
            _iterator208 = _createForOfIteratorHelper(verifyBlobType(that.value));
            _context16.prev = 76;
            _iterator208.s();
          case 78:
            if ((_step208 = _iterator208.n()).done) {
              _context16.next = 85;
              break;
            }
            _error111 = _step208.value;
            _error111.path.prepend(new PropertySegment(that, "value"));
            _context16.next = 83;
            return _error111;
          case 83:
            _context16.next = 78;
            break;
          case 85:
            _context16.next = 90;
            break;
          case 87:
            _context16.prev = 87;
            _context16.t2 = _context16["catch"](76);
            _iterator208.e(_context16.t2);
          case 90:
            _context16.prev = 90;
            _iterator208.f();
            return _context16.finish(90);
          case 93:
            _iterator209 = _createForOfIteratorHelper(verifyContentType(that.contentType));
            _context16.prev = 94;
            _iterator209.s();
          case 96:
            if ((_step209 = _iterator209.n()).done) {
              _context16.next = 103;
              break;
            }
            _error119 = _step209.value;
            _error119.path.prepend(new PropertySegment(that, "contentType"));
            _context16.next = 101;
            return _error119;
          case 101:
            _context16.next = 96;
            break;
          case 103:
            _context16.next = 108;
            break;
          case 105:
            _context16.prev = 105;
            _context16.t3 = _context16["catch"](94);
            _iterator209.e(_context16.t3);
          case 108:
            _context16.prev = 108;
            _iterator209.f();
            return _context16.finish(108);
          case 111:
            if (!(context === true)) {
              _context16.next = 353;
              break;
            }
            if (!(that.extensions !== null)) {
              _context16.next = 149;
              break;
            }
            extensionsIndex = 0;
            _iterator210 = _createForOfIteratorHelper(that.extensions);
            _context16.prev = 115;
            _iterator210.s();
          case 117:
            if ((_step210 = _iterator210.n()).done) {
              _context16.next = 141;
              break;
            }
            item = _step210.value;
            _iterator211 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context16.prev = 120;
            _iterator211.s();
          case 122:
            if ((_step211 = _iterator211.n()).done) {
              _context16.next = 130;
              break;
            }
            _error112 = _step211.value;
            _error112.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error112.path.prepend(new PropertySegment(that, "extensions"));
            _context16.next = 128;
            return _error112;
          case 128:
            _context16.next = 122;
            break;
          case 130:
            _context16.next = 135;
            break;
          case 132:
            _context16.prev = 132;
            _context16.t4 = _context16["catch"](120);
            _iterator211.e(_context16.t4);
          case 135:
            _context16.prev = 135;
            _iterator211.f();
            return _context16.finish(135);
          case 138:
            extensionsIndex++;
          case 139:
            _context16.next = 117;
            break;
          case 141:
            _context16.next = 146;
            break;
          case 143:
            _context16.prev = 143;
            _context16.t5 = _context16["catch"](115);
            _iterator210.e(_context16.t5);
          case 146:
            _context16.prev = 146;
            _iterator210.f();
            return _context16.finish(146);
          case 149:
            if (!(that.displayName !== null)) {
              _context16.next = 186;
              break;
            }
            displayNameIndex = 0;
            _iterator212 = _createForOfIteratorHelper(that.displayName);
            _context16.prev = 152;
            _iterator212.s();
          case 154:
            if ((_step212 = _iterator212.n()).done) {
              _context16.next = 178;
              break;
            }
            _item50 = _step212.value;
            _iterator213 = _createForOfIteratorHelper(this.transformWithContext(_item50, context));
            _context16.prev = 157;
            _iterator213.s();
          case 159:
            if ((_step213 = _iterator213.n()).done) {
              _context16.next = 167;
              break;
            }
            _error113 = _step213.value;
            _error113.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error113.path.prepend(new PropertySegment(that, "displayName"));
            _context16.next = 165;
            return _error113;
          case 165:
            _context16.next = 159;
            break;
          case 167:
            _context16.next = 172;
            break;
          case 169:
            _context16.prev = 169;
            _context16.t6 = _context16["catch"](157);
            _iterator213.e(_context16.t6);
          case 172:
            _context16.prev = 172;
            _iterator213.f();
            return _context16.finish(172);
          case 175:
            displayNameIndex++;
          case 176:
            _context16.next = 154;
            break;
          case 178:
            _context16.next = 183;
            break;
          case 180:
            _context16.prev = 180;
            _context16.t7 = _context16["catch"](152);
            _iterator212.e(_context16.t7);
          case 183:
            _context16.prev = 183;
            _iterator212.f();
            return _context16.finish(183);
          case 186:
            if (!(that.description !== null)) {
              _context16.next = 223;
              break;
            }
            descriptionIndex = 0;
            _iterator214 = _createForOfIteratorHelper(that.description);
            _context16.prev = 189;
            _iterator214.s();
          case 191:
            if ((_step214 = _iterator214.n()).done) {
              _context16.next = 215;
              break;
            }
            _item51 = _step214.value;
            _iterator215 = _createForOfIteratorHelper(this.transformWithContext(_item51, context));
            _context16.prev = 194;
            _iterator215.s();
          case 196:
            if ((_step215 = _iterator215.n()).done) {
              _context16.next = 204;
              break;
            }
            _error114 = _step215.value;
            _error114.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error114.path.prepend(new PropertySegment(that, "description"));
            _context16.next = 202;
            return _error114;
          case 202:
            _context16.next = 196;
            break;
          case 204:
            _context16.next = 209;
            break;
          case 206:
            _context16.prev = 206;
            _context16.t8 = _context16["catch"](194);
            _iterator215.e(_context16.t8);
          case 209:
            _context16.prev = 209;
            _iterator215.f();
            return _context16.finish(209);
          case 212:
            descriptionIndex++;
          case 213:
            _context16.next = 191;
            break;
          case 215:
            _context16.next = 220;
            break;
          case 217:
            _context16.prev = 217;
            _context16.t9 = _context16["catch"](189);
            _iterator214.e(_context16.t9);
          case 220:
            _context16.prev = 220;
            _iterator214.f();
            return _context16.finish(220);
          case 223:
            if (!(that.semanticId !== null)) {
              _context16.next = 242;
              break;
            }
            _iterator216 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context16.prev = 225;
            _iterator216.s();
          case 227:
            if ((_step216 = _iterator216.n()).done) {
              _context16.next = 234;
              break;
            }
            _error115 = _step216.value;
            _error115.path.prepend(new PropertySegment(that, "semanticId"));
            _context16.next = 232;
            return _error115;
          case 232:
            _context16.next = 227;
            break;
          case 234:
            _context16.next = 239;
            break;
          case 236:
            _context16.prev = 236;
            _context16.t10 = _context16["catch"](225);
            _iterator216.e(_context16.t10);
          case 239:
            _context16.prev = 239;
            _iterator216.f();
            return _context16.finish(239);
          case 242:
            if (!(that.supplementalSemanticIds !== null)) {
              _context16.next = 279;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator217 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context16.prev = 245;
            _iterator217.s();
          case 247:
            if ((_step217 = _iterator217.n()).done) {
              _context16.next = 271;
              break;
            }
            _item52 = _step217.value;
            _iterator218 = _createForOfIteratorHelper(this.transformWithContext(_item52, context));
            _context16.prev = 250;
            _iterator218.s();
          case 252:
            if ((_step218 = _iterator218.n()).done) {
              _context16.next = 260;
              break;
            }
            _error116 = _step218.value;
            _error116.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error116.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context16.next = 258;
            return _error116;
          case 258:
            _context16.next = 252;
            break;
          case 260:
            _context16.next = 265;
            break;
          case 262:
            _context16.prev = 262;
            _context16.t11 = _context16["catch"](250);
            _iterator218.e(_context16.t11);
          case 265:
            _context16.prev = 265;
            _iterator218.f();
            return _context16.finish(265);
          case 268:
            supplementalSemanticIdsIndex++;
          case 269:
            _context16.next = 247;
            break;
          case 271:
            _context16.next = 276;
            break;
          case 273:
            _context16.prev = 273;
            _context16.t12 = _context16["catch"](245);
            _iterator217.e(_context16.t12);
          case 276:
            _context16.prev = 276;
            _iterator217.f();
            return _context16.finish(276);
          case 279:
            if (!(that.qualifiers !== null)) {
              _context16.next = 316;
              break;
            }
            qualifiersIndex = 0;
            _iterator219 = _createForOfIteratorHelper(that.qualifiers);
            _context16.prev = 282;
            _iterator219.s();
          case 284:
            if ((_step219 = _iterator219.n()).done) {
              _context16.next = 308;
              break;
            }
            _item53 = _step219.value;
            _iterator220 = _createForOfIteratorHelper(this.transformWithContext(_item53, context));
            _context16.prev = 287;
            _iterator220.s();
          case 289:
            if ((_step220 = _iterator220.n()).done) {
              _context16.next = 297;
              break;
            }
            _error117 = _step220.value;
            _error117.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error117.path.prepend(new PropertySegment(that, "qualifiers"));
            _context16.next = 295;
            return _error117;
          case 295:
            _context16.next = 289;
            break;
          case 297:
            _context16.next = 302;
            break;
          case 299:
            _context16.prev = 299;
            _context16.t13 = _context16["catch"](287);
            _iterator220.e(_context16.t13);
          case 302:
            _context16.prev = 302;
            _iterator220.f();
            return _context16.finish(302);
          case 305:
            qualifiersIndex++;
          case 306:
            _context16.next = 284;
            break;
          case 308:
            _context16.next = 313;
            break;
          case 310:
            _context16.prev = 310;
            _context16.t14 = _context16["catch"](282);
            _iterator219.e(_context16.t14);
          case 313:
            _context16.prev = 313;
            _iterator219.f();
            return _context16.finish(313);
          case 316:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context16.next = 353;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator221 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context16.prev = 319;
            _iterator221.s();
          case 321:
            if ((_step221 = _iterator221.n()).done) {
              _context16.next = 345;
              break;
            }
            _item54 = _step221.value;
            _iterator222 = _createForOfIteratorHelper(this.transformWithContext(_item54, context));
            _context16.prev = 324;
            _iterator222.s();
          case 326:
            if ((_step222 = _iterator222.n()).done) {
              _context16.next = 334;
              break;
            }
            _error118 = _step222.value;
            _error118.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error118.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context16.next = 332;
            return _error118;
          case 332:
            _context16.next = 326;
            break;
          case 334:
            _context16.next = 339;
            break;
          case 336:
            _context16.prev = 336;
            _context16.t15 = _context16["catch"](324);
            _iterator222.e(_context16.t15);
          case 339:
            _context16.prev = 339;
            _iterator222.f();
            return _context16.finish(339);
          case 342:
            embeddedDataSpecificationsIndex++;
          case 343:
            _context16.next = 321;
            break;
          case 345:
            _context16.next = 350;
            break;
          case 347:
            _context16.prev = 347;
            _context16.t16 = _context16["catch"](319);
            _iterator221.e(_context16.t16);
          case 350:
            _context16.prev = 350;
            _iterator221.f();
            return _context16.finish(350);
          case 353:
          case "end":
            return _context16.stop();
        }
      }, transformBlobWithContext, this, [[38, 49, 52, 55], [57, 68, 71, 74], [76, 87, 90, 93], [94, 105, 108, 111], [115, 143, 146, 149], [120, 132, 135, 138], [152, 180, 183, 186], [157, 169, 172, 175], [189, 217, 220, 223], [194, 206, 209, 212], [225, 236, 239, 242], [245, 273, 276, 279], [250, 262, 265, 268], [282, 310, 313, 316], [287, 299, 302, 305], [319, 347, 350, 353], [324, 336, 339, 342]]);
    })
  }, {
    key: "transformFileWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformFileWithContext(that, context) {
      var _iterator223, _step223, error, _iterator224, _step224, _error120, _iterator225, _step225, _error121, _iterator226, _step226, _error129, extensionsIndex, _iterator227, _step227, item, _iterator228, _step228, _error122, displayNameIndex, _iterator229, _step229, _item55, _iterator230, _step230, _error123, descriptionIndex, _iterator231, _step231, _item56, _iterator232, _step232, _error124, _iterator233, _step233, _error125, supplementalSemanticIdsIndex, _iterator234, _step234, _item57, _iterator235, _step235, _error126, qualifiersIndex, _iterator236, _step236, _item58, _iterator237, _step237, _error127, embeddedDataSpecificationsIndex, _iterator238, _step238, _item59, _iterator239, _step239, _error128;
      return _regeneratorRuntime().wrap(function transformFileWithContext$(_context17) {
        while (1) switch (_context17.prev = _context17.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context17.next = 3;
              break;
            }
            _context17.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context17.next = 6;
              break;
            }
            _context17.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context17.next = 9;
              break;
            }
            _context17.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context17.next = 12;
              break;
            }
            _context17.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context17.next = 15;
              break;
            }
            _context17.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context17.next = 18;
              break;
            }
            _context17.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context17.next = 21;
              break;
            }
            _context17.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context17.next = 24;
              break;
            }
            _context17.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context17.next = 27;
              break;
            }
            _context17.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context17.next = 30;
              break;
            }
            _context17.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context17.next = 33;
              break;
            }
            _context17.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || AasConstants.VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context17.next = 36;
              break;
            }
            _context17.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.category !== null)) {
              _context17.next = 55;
              break;
            }
            _iterator223 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context17.prev = 38;
            _iterator223.s();
          case 40:
            if ((_step223 = _iterator223.n()).done) {
              _context17.next = 47;
              break;
            }
            error = _step223.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context17.next = 45;
            return error;
          case 45:
            _context17.next = 40;
            break;
          case 47:
            _context17.next = 52;
            break;
          case 49:
            _context17.prev = 49;
            _context17.t0 = _context17["catch"](38);
            _iterator223.e(_context17.t0);
          case 52:
            _context17.prev = 52;
            _iterator223.f();
            return _context17.finish(52);
          case 55:
            if (!(that.idShort !== null)) {
              _context17.next = 74;
              break;
            }
            _iterator224 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context17.prev = 57;
            _iterator224.s();
          case 59:
            if ((_step224 = _iterator224.n()).done) {
              _context17.next = 66;
              break;
            }
            _error120 = _step224.value;
            _error120.path.prepend(new PropertySegment(that, "idShort"));
            _context17.next = 64;
            return _error120;
          case 64:
            _context17.next = 59;
            break;
          case 66:
            _context17.next = 71;
            break;
          case 68:
            _context17.prev = 68;
            _context17.t1 = _context17["catch"](57);
            _iterator224.e(_context17.t1);
          case 71:
            _context17.prev = 71;
            _iterator224.f();
            return _context17.finish(71);
          case 74:
            if (!(that.value !== null)) {
              _context17.next = 93;
              break;
            }
            _iterator225 = _createForOfIteratorHelper(verifyPathType(that.value));
            _context17.prev = 76;
            _iterator225.s();
          case 78:
            if ((_step225 = _iterator225.n()).done) {
              _context17.next = 85;
              break;
            }
            _error121 = _step225.value;
            _error121.path.prepend(new PropertySegment(that, "value"));
            _context17.next = 83;
            return _error121;
          case 83:
            _context17.next = 78;
            break;
          case 85:
            _context17.next = 90;
            break;
          case 87:
            _context17.prev = 87;
            _context17.t2 = _context17["catch"](76);
            _iterator225.e(_context17.t2);
          case 90:
            _context17.prev = 90;
            _iterator225.f();
            return _context17.finish(90);
          case 93:
            _iterator226 = _createForOfIteratorHelper(verifyContentType(that.contentType));
            _context17.prev = 94;
            _iterator226.s();
          case 96:
            if ((_step226 = _iterator226.n()).done) {
              _context17.next = 103;
              break;
            }
            _error129 = _step226.value;
            _error129.path.prepend(new PropertySegment(that, "contentType"));
            _context17.next = 101;
            return _error129;
          case 101:
            _context17.next = 96;
            break;
          case 103:
            _context17.next = 108;
            break;
          case 105:
            _context17.prev = 105;
            _context17.t3 = _context17["catch"](94);
            _iterator226.e(_context17.t3);
          case 108:
            _context17.prev = 108;
            _iterator226.f();
            return _context17.finish(108);
          case 111:
            if (!(context === true)) {
              _context17.next = 353;
              break;
            }
            if (!(that.extensions !== null)) {
              _context17.next = 149;
              break;
            }
            extensionsIndex = 0;
            _iterator227 = _createForOfIteratorHelper(that.extensions);
            _context17.prev = 115;
            _iterator227.s();
          case 117:
            if ((_step227 = _iterator227.n()).done) {
              _context17.next = 141;
              break;
            }
            item = _step227.value;
            _iterator228 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context17.prev = 120;
            _iterator228.s();
          case 122:
            if ((_step228 = _iterator228.n()).done) {
              _context17.next = 130;
              break;
            }
            _error122 = _step228.value;
            _error122.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error122.path.prepend(new PropertySegment(that, "extensions"));
            _context17.next = 128;
            return _error122;
          case 128:
            _context17.next = 122;
            break;
          case 130:
            _context17.next = 135;
            break;
          case 132:
            _context17.prev = 132;
            _context17.t4 = _context17["catch"](120);
            _iterator228.e(_context17.t4);
          case 135:
            _context17.prev = 135;
            _iterator228.f();
            return _context17.finish(135);
          case 138:
            extensionsIndex++;
          case 139:
            _context17.next = 117;
            break;
          case 141:
            _context17.next = 146;
            break;
          case 143:
            _context17.prev = 143;
            _context17.t5 = _context17["catch"](115);
            _iterator227.e(_context17.t5);
          case 146:
            _context17.prev = 146;
            _iterator227.f();
            return _context17.finish(146);
          case 149:
            if (!(that.displayName !== null)) {
              _context17.next = 186;
              break;
            }
            displayNameIndex = 0;
            _iterator229 = _createForOfIteratorHelper(that.displayName);
            _context17.prev = 152;
            _iterator229.s();
          case 154:
            if ((_step229 = _iterator229.n()).done) {
              _context17.next = 178;
              break;
            }
            _item55 = _step229.value;
            _iterator230 = _createForOfIteratorHelper(this.transformWithContext(_item55, context));
            _context17.prev = 157;
            _iterator230.s();
          case 159:
            if ((_step230 = _iterator230.n()).done) {
              _context17.next = 167;
              break;
            }
            _error123 = _step230.value;
            _error123.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error123.path.prepend(new PropertySegment(that, "displayName"));
            _context17.next = 165;
            return _error123;
          case 165:
            _context17.next = 159;
            break;
          case 167:
            _context17.next = 172;
            break;
          case 169:
            _context17.prev = 169;
            _context17.t6 = _context17["catch"](157);
            _iterator230.e(_context17.t6);
          case 172:
            _context17.prev = 172;
            _iterator230.f();
            return _context17.finish(172);
          case 175:
            displayNameIndex++;
          case 176:
            _context17.next = 154;
            break;
          case 178:
            _context17.next = 183;
            break;
          case 180:
            _context17.prev = 180;
            _context17.t7 = _context17["catch"](152);
            _iterator229.e(_context17.t7);
          case 183:
            _context17.prev = 183;
            _iterator229.f();
            return _context17.finish(183);
          case 186:
            if (!(that.description !== null)) {
              _context17.next = 223;
              break;
            }
            descriptionIndex = 0;
            _iterator231 = _createForOfIteratorHelper(that.description);
            _context17.prev = 189;
            _iterator231.s();
          case 191:
            if ((_step231 = _iterator231.n()).done) {
              _context17.next = 215;
              break;
            }
            _item56 = _step231.value;
            _iterator232 = _createForOfIteratorHelper(this.transformWithContext(_item56, context));
            _context17.prev = 194;
            _iterator232.s();
          case 196:
            if ((_step232 = _iterator232.n()).done) {
              _context17.next = 204;
              break;
            }
            _error124 = _step232.value;
            _error124.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error124.path.prepend(new PropertySegment(that, "description"));
            _context17.next = 202;
            return _error124;
          case 202:
            _context17.next = 196;
            break;
          case 204:
            _context17.next = 209;
            break;
          case 206:
            _context17.prev = 206;
            _context17.t8 = _context17["catch"](194);
            _iterator232.e(_context17.t8);
          case 209:
            _context17.prev = 209;
            _iterator232.f();
            return _context17.finish(209);
          case 212:
            descriptionIndex++;
          case 213:
            _context17.next = 191;
            break;
          case 215:
            _context17.next = 220;
            break;
          case 217:
            _context17.prev = 217;
            _context17.t9 = _context17["catch"](189);
            _iterator231.e(_context17.t9);
          case 220:
            _context17.prev = 220;
            _iterator231.f();
            return _context17.finish(220);
          case 223:
            if (!(that.semanticId !== null)) {
              _context17.next = 242;
              break;
            }
            _iterator233 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context17.prev = 225;
            _iterator233.s();
          case 227:
            if ((_step233 = _iterator233.n()).done) {
              _context17.next = 234;
              break;
            }
            _error125 = _step233.value;
            _error125.path.prepend(new PropertySegment(that, "semanticId"));
            _context17.next = 232;
            return _error125;
          case 232:
            _context17.next = 227;
            break;
          case 234:
            _context17.next = 239;
            break;
          case 236:
            _context17.prev = 236;
            _context17.t10 = _context17["catch"](225);
            _iterator233.e(_context17.t10);
          case 239:
            _context17.prev = 239;
            _iterator233.f();
            return _context17.finish(239);
          case 242:
            if (!(that.supplementalSemanticIds !== null)) {
              _context17.next = 279;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator234 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context17.prev = 245;
            _iterator234.s();
          case 247:
            if ((_step234 = _iterator234.n()).done) {
              _context17.next = 271;
              break;
            }
            _item57 = _step234.value;
            _iterator235 = _createForOfIteratorHelper(this.transformWithContext(_item57, context));
            _context17.prev = 250;
            _iterator235.s();
          case 252:
            if ((_step235 = _iterator235.n()).done) {
              _context17.next = 260;
              break;
            }
            _error126 = _step235.value;
            _error126.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error126.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context17.next = 258;
            return _error126;
          case 258:
            _context17.next = 252;
            break;
          case 260:
            _context17.next = 265;
            break;
          case 262:
            _context17.prev = 262;
            _context17.t11 = _context17["catch"](250);
            _iterator235.e(_context17.t11);
          case 265:
            _context17.prev = 265;
            _iterator235.f();
            return _context17.finish(265);
          case 268:
            supplementalSemanticIdsIndex++;
          case 269:
            _context17.next = 247;
            break;
          case 271:
            _context17.next = 276;
            break;
          case 273:
            _context17.prev = 273;
            _context17.t12 = _context17["catch"](245);
            _iterator234.e(_context17.t12);
          case 276:
            _context17.prev = 276;
            _iterator234.f();
            return _context17.finish(276);
          case 279:
            if (!(that.qualifiers !== null)) {
              _context17.next = 316;
              break;
            }
            qualifiersIndex = 0;
            _iterator236 = _createForOfIteratorHelper(that.qualifiers);
            _context17.prev = 282;
            _iterator236.s();
          case 284:
            if ((_step236 = _iterator236.n()).done) {
              _context17.next = 308;
              break;
            }
            _item58 = _step236.value;
            _iterator237 = _createForOfIteratorHelper(this.transformWithContext(_item58, context));
            _context17.prev = 287;
            _iterator237.s();
          case 289:
            if ((_step237 = _iterator237.n()).done) {
              _context17.next = 297;
              break;
            }
            _error127 = _step237.value;
            _error127.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error127.path.prepend(new PropertySegment(that, "qualifiers"));
            _context17.next = 295;
            return _error127;
          case 295:
            _context17.next = 289;
            break;
          case 297:
            _context17.next = 302;
            break;
          case 299:
            _context17.prev = 299;
            _context17.t13 = _context17["catch"](287);
            _iterator237.e(_context17.t13);
          case 302:
            _context17.prev = 302;
            _iterator237.f();
            return _context17.finish(302);
          case 305:
            qualifiersIndex++;
          case 306:
            _context17.next = 284;
            break;
          case 308:
            _context17.next = 313;
            break;
          case 310:
            _context17.prev = 310;
            _context17.t14 = _context17["catch"](282);
            _iterator236.e(_context17.t14);
          case 313:
            _context17.prev = 313;
            _iterator236.f();
            return _context17.finish(313);
          case 316:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context17.next = 353;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator238 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context17.prev = 319;
            _iterator238.s();
          case 321:
            if ((_step238 = _iterator238.n()).done) {
              _context17.next = 345;
              break;
            }
            _item59 = _step238.value;
            _iterator239 = _createForOfIteratorHelper(this.transformWithContext(_item59, context));
            _context17.prev = 324;
            _iterator239.s();
          case 326:
            if ((_step239 = _iterator239.n()).done) {
              _context17.next = 334;
              break;
            }
            _error128 = _step239.value;
            _error128.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error128.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context17.next = 332;
            return _error128;
          case 332:
            _context17.next = 326;
            break;
          case 334:
            _context17.next = 339;
            break;
          case 336:
            _context17.prev = 336;
            _context17.t15 = _context17["catch"](324);
            _iterator239.e(_context17.t15);
          case 339:
            _context17.prev = 339;
            _iterator239.f();
            return _context17.finish(339);
          case 342:
            embeddedDataSpecificationsIndex++;
          case 343:
            _context17.next = 321;
            break;
          case 345:
            _context17.next = 350;
            break;
          case 347:
            _context17.prev = 347;
            _context17.t16 = _context17["catch"](319);
            _iterator238.e(_context17.t16);
          case 350:
            _context17.prev = 350;
            _iterator238.f();
            return _context17.finish(350);
          case 353:
          case "end":
            return _context17.stop();
        }
      }, transformFileWithContext, this, [[38, 49, 52, 55], [57, 68, 71, 74], [76, 87, 90, 93], [94, 105, 108, 111], [115, 143, 146, 149], [120, 132, 135, 138], [152, 180, 183, 186], [157, 169, 172, 175], [189, 217, 220, 223], [194, 206, 209, 212], [225, 236, 239, 242], [245, 273, 276, 279], [250, 262, 265, 268], [282, 310, 313, 316], [287, 299, 302, 305], [319, 347, 350, 353], [324, 336, 339, 342]]);
    })
  }, {
    key: "transformAnnotatedRelationshipElementWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformAnnotatedRelationshipElementWithContext(that, context) {
      var _iterator240, _step240, error, _iterator241, _step241, _error130, extensionsIndex, _iterator242, _step242, item, _iterator243, _step243, _error131, displayNameIndex, _iterator244, _step244, _item60, _iterator245, _step245, _error132, descriptionIndex, _iterator246, _step246, _item61, _iterator247, _step247, _error133, _iterator248, _step248, _error134, supplementalSemanticIdsIndex, _iterator249, _step249, _item62, _iterator250, _step250, _error135, qualifiersIndex, _iterator251, _step251, _item63, _iterator252, _step252, _error136, embeddedDataSpecificationsIndex, _iterator253, _step253, _item64, _iterator254, _step254, _error137, _iterator255, _step255, _error139, _iterator256, _step256, _error140, annotationsIndex, _iterator257, _step257, _item65, _iterator258, _step258, _error138;
      return _regeneratorRuntime().wrap(function transformAnnotatedRelationshipElementWithContext$(_context18) {
        while (1) switch (_context18.prev = _context18.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context18.next = 3;
              break;
            }
            _context18.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context18.next = 6;
              break;
            }
            _context18.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context18.next = 9;
              break;
            }
            _context18.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context18.next = 12;
              break;
            }
            _context18.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context18.next = 15;
              break;
            }
            _context18.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context18.next = 18;
              break;
            }
            _context18.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context18.next = 21;
              break;
            }
            _context18.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context18.next = 24;
              break;
            }
            _context18.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context18.next = 27;
              break;
            }
            _context18.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context18.next = 30;
              break;
            }
            _context18.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context18.next = 33;
              break;
            }
            _context18.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.annotations !== null) || that.annotations.length >= 1) {
              _context18.next = 36;
              break;
            }
            _context18.next = 36;
            return new VerificationError("Annotations must be either not set or have at least one " + "item.");
          case 36:
            if (!(that.annotations !== null) || AasCommon.every(AasCommon.map(that.annotations, function (item) {
              return item.idShort !== null;
            }))) {
              _context18.next = 39;
              break;
            }
            _context18.next = 39;
            return new VerificationError("ID-shorts need to be defined for all the items of " + "annotations according to AASd-117 (ID-short of Referables " + "not being a direct child of a Submodel element list shall " + "be specified).");
          case 39:
            if (!(that.category !== null)) {
              _context18.next = 58;
              break;
            }
            _iterator240 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context18.prev = 41;
            _iterator240.s();
          case 43:
            if ((_step240 = _iterator240.n()).done) {
              _context18.next = 50;
              break;
            }
            error = _step240.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context18.next = 48;
            return error;
          case 48:
            _context18.next = 43;
            break;
          case 50:
            _context18.next = 55;
            break;
          case 52:
            _context18.prev = 52;
            _context18.t0 = _context18["catch"](41);
            _iterator240.e(_context18.t0);
          case 55:
            _context18.prev = 55;
            _iterator240.f();
            return _context18.finish(55);
          case 58:
            if (!(that.idShort !== null)) {
              _context18.next = 77;
              break;
            }
            _iterator241 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context18.prev = 60;
            _iterator241.s();
          case 62:
            if ((_step241 = _iterator241.n()).done) {
              _context18.next = 69;
              break;
            }
            _error130 = _step241.value;
            _error130.path.prepend(new PropertySegment(that, "idShort"));
            _context18.next = 67;
            return _error130;
          case 67:
            _context18.next = 62;
            break;
          case 69:
            _context18.next = 74;
            break;
          case 71:
            _context18.prev = 71;
            _context18.t1 = _context18["catch"](60);
            _iterator241.e(_context18.t1);
          case 74:
            _context18.prev = 74;
            _iterator241.f();
            return _context18.finish(74);
          case 77:
            if (!(context === true)) {
              _context18.next = 392;
              break;
            }
            if (!(that.extensions !== null)) {
              _context18.next = 115;
              break;
            }
            extensionsIndex = 0;
            _iterator242 = _createForOfIteratorHelper(that.extensions);
            _context18.prev = 81;
            _iterator242.s();
          case 83:
            if ((_step242 = _iterator242.n()).done) {
              _context18.next = 107;
              break;
            }
            item = _step242.value;
            _iterator243 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context18.prev = 86;
            _iterator243.s();
          case 88:
            if ((_step243 = _iterator243.n()).done) {
              _context18.next = 96;
              break;
            }
            _error131 = _step243.value;
            _error131.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error131.path.prepend(new PropertySegment(that, "extensions"));
            _context18.next = 94;
            return _error131;
          case 94:
            _context18.next = 88;
            break;
          case 96:
            _context18.next = 101;
            break;
          case 98:
            _context18.prev = 98;
            _context18.t2 = _context18["catch"](86);
            _iterator243.e(_context18.t2);
          case 101:
            _context18.prev = 101;
            _iterator243.f();
            return _context18.finish(101);
          case 104:
            extensionsIndex++;
          case 105:
            _context18.next = 83;
            break;
          case 107:
            _context18.next = 112;
            break;
          case 109:
            _context18.prev = 109;
            _context18.t3 = _context18["catch"](81);
            _iterator242.e(_context18.t3);
          case 112:
            _context18.prev = 112;
            _iterator242.f();
            return _context18.finish(112);
          case 115:
            if (!(that.displayName !== null)) {
              _context18.next = 152;
              break;
            }
            displayNameIndex = 0;
            _iterator244 = _createForOfIteratorHelper(that.displayName);
            _context18.prev = 118;
            _iterator244.s();
          case 120:
            if ((_step244 = _iterator244.n()).done) {
              _context18.next = 144;
              break;
            }
            _item60 = _step244.value;
            _iterator245 = _createForOfIteratorHelper(this.transformWithContext(_item60, context));
            _context18.prev = 123;
            _iterator245.s();
          case 125:
            if ((_step245 = _iterator245.n()).done) {
              _context18.next = 133;
              break;
            }
            _error132 = _step245.value;
            _error132.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error132.path.prepend(new PropertySegment(that, "displayName"));
            _context18.next = 131;
            return _error132;
          case 131:
            _context18.next = 125;
            break;
          case 133:
            _context18.next = 138;
            break;
          case 135:
            _context18.prev = 135;
            _context18.t4 = _context18["catch"](123);
            _iterator245.e(_context18.t4);
          case 138:
            _context18.prev = 138;
            _iterator245.f();
            return _context18.finish(138);
          case 141:
            displayNameIndex++;
          case 142:
            _context18.next = 120;
            break;
          case 144:
            _context18.next = 149;
            break;
          case 146:
            _context18.prev = 146;
            _context18.t5 = _context18["catch"](118);
            _iterator244.e(_context18.t5);
          case 149:
            _context18.prev = 149;
            _iterator244.f();
            return _context18.finish(149);
          case 152:
            if (!(that.description !== null)) {
              _context18.next = 189;
              break;
            }
            descriptionIndex = 0;
            _iterator246 = _createForOfIteratorHelper(that.description);
            _context18.prev = 155;
            _iterator246.s();
          case 157:
            if ((_step246 = _iterator246.n()).done) {
              _context18.next = 181;
              break;
            }
            _item61 = _step246.value;
            _iterator247 = _createForOfIteratorHelper(this.transformWithContext(_item61, context));
            _context18.prev = 160;
            _iterator247.s();
          case 162:
            if ((_step247 = _iterator247.n()).done) {
              _context18.next = 170;
              break;
            }
            _error133 = _step247.value;
            _error133.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error133.path.prepend(new PropertySegment(that, "description"));
            _context18.next = 168;
            return _error133;
          case 168:
            _context18.next = 162;
            break;
          case 170:
            _context18.next = 175;
            break;
          case 172:
            _context18.prev = 172;
            _context18.t6 = _context18["catch"](160);
            _iterator247.e(_context18.t6);
          case 175:
            _context18.prev = 175;
            _iterator247.f();
            return _context18.finish(175);
          case 178:
            descriptionIndex++;
          case 179:
            _context18.next = 157;
            break;
          case 181:
            _context18.next = 186;
            break;
          case 183:
            _context18.prev = 183;
            _context18.t7 = _context18["catch"](155);
            _iterator246.e(_context18.t7);
          case 186:
            _context18.prev = 186;
            _iterator246.f();
            return _context18.finish(186);
          case 189:
            if (!(that.semanticId !== null)) {
              _context18.next = 208;
              break;
            }
            _iterator248 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context18.prev = 191;
            _iterator248.s();
          case 193:
            if ((_step248 = _iterator248.n()).done) {
              _context18.next = 200;
              break;
            }
            _error134 = _step248.value;
            _error134.path.prepend(new PropertySegment(that, "semanticId"));
            _context18.next = 198;
            return _error134;
          case 198:
            _context18.next = 193;
            break;
          case 200:
            _context18.next = 205;
            break;
          case 202:
            _context18.prev = 202;
            _context18.t8 = _context18["catch"](191);
            _iterator248.e(_context18.t8);
          case 205:
            _context18.prev = 205;
            _iterator248.f();
            return _context18.finish(205);
          case 208:
            if (!(that.supplementalSemanticIds !== null)) {
              _context18.next = 245;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator249 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context18.prev = 211;
            _iterator249.s();
          case 213:
            if ((_step249 = _iterator249.n()).done) {
              _context18.next = 237;
              break;
            }
            _item62 = _step249.value;
            _iterator250 = _createForOfIteratorHelper(this.transformWithContext(_item62, context));
            _context18.prev = 216;
            _iterator250.s();
          case 218:
            if ((_step250 = _iterator250.n()).done) {
              _context18.next = 226;
              break;
            }
            _error135 = _step250.value;
            _error135.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error135.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context18.next = 224;
            return _error135;
          case 224:
            _context18.next = 218;
            break;
          case 226:
            _context18.next = 231;
            break;
          case 228:
            _context18.prev = 228;
            _context18.t9 = _context18["catch"](216);
            _iterator250.e(_context18.t9);
          case 231:
            _context18.prev = 231;
            _iterator250.f();
            return _context18.finish(231);
          case 234:
            supplementalSemanticIdsIndex++;
          case 235:
            _context18.next = 213;
            break;
          case 237:
            _context18.next = 242;
            break;
          case 239:
            _context18.prev = 239;
            _context18.t10 = _context18["catch"](211);
            _iterator249.e(_context18.t10);
          case 242:
            _context18.prev = 242;
            _iterator249.f();
            return _context18.finish(242);
          case 245:
            if (!(that.qualifiers !== null)) {
              _context18.next = 282;
              break;
            }
            qualifiersIndex = 0;
            _iterator251 = _createForOfIteratorHelper(that.qualifiers);
            _context18.prev = 248;
            _iterator251.s();
          case 250:
            if ((_step251 = _iterator251.n()).done) {
              _context18.next = 274;
              break;
            }
            _item63 = _step251.value;
            _iterator252 = _createForOfIteratorHelper(this.transformWithContext(_item63, context));
            _context18.prev = 253;
            _iterator252.s();
          case 255:
            if ((_step252 = _iterator252.n()).done) {
              _context18.next = 263;
              break;
            }
            _error136 = _step252.value;
            _error136.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error136.path.prepend(new PropertySegment(that, "qualifiers"));
            _context18.next = 261;
            return _error136;
          case 261:
            _context18.next = 255;
            break;
          case 263:
            _context18.next = 268;
            break;
          case 265:
            _context18.prev = 265;
            _context18.t11 = _context18["catch"](253);
            _iterator252.e(_context18.t11);
          case 268:
            _context18.prev = 268;
            _iterator252.f();
            return _context18.finish(268);
          case 271:
            qualifiersIndex++;
          case 272:
            _context18.next = 250;
            break;
          case 274:
            _context18.next = 279;
            break;
          case 276:
            _context18.prev = 276;
            _context18.t12 = _context18["catch"](248);
            _iterator251.e(_context18.t12);
          case 279:
            _context18.prev = 279;
            _iterator251.f();
            return _context18.finish(279);
          case 282:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context18.next = 319;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator253 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context18.prev = 285;
            _iterator253.s();
          case 287:
            if ((_step253 = _iterator253.n()).done) {
              _context18.next = 311;
              break;
            }
            _item64 = _step253.value;
            _iterator254 = _createForOfIteratorHelper(this.transformWithContext(_item64, context));
            _context18.prev = 290;
            _iterator254.s();
          case 292:
            if ((_step254 = _iterator254.n()).done) {
              _context18.next = 300;
              break;
            }
            _error137 = _step254.value;
            _error137.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error137.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context18.next = 298;
            return _error137;
          case 298:
            _context18.next = 292;
            break;
          case 300:
            _context18.next = 305;
            break;
          case 302:
            _context18.prev = 302;
            _context18.t13 = _context18["catch"](290);
            _iterator254.e(_context18.t13);
          case 305:
            _context18.prev = 305;
            _iterator254.f();
            return _context18.finish(305);
          case 308:
            embeddedDataSpecificationsIndex++;
          case 309:
            _context18.next = 287;
            break;
          case 311:
            _context18.next = 316;
            break;
          case 313:
            _context18.prev = 313;
            _context18.t14 = _context18["catch"](285);
            _iterator253.e(_context18.t14);
          case 316:
            _context18.prev = 316;
            _iterator253.f();
            return _context18.finish(316);
          case 319:
            _iterator255 = _createForOfIteratorHelper(this.transformWithContext(that.first, context));
            _context18.prev = 320;
            _iterator255.s();
          case 322:
            if ((_step255 = _iterator255.n()).done) {
              _context18.next = 329;
              break;
            }
            _error139 = _step255.value;
            _error139.path.prepend(new PropertySegment(that, "first"));
            _context18.next = 327;
            return _error139;
          case 327:
            _context18.next = 322;
            break;
          case 329:
            _context18.next = 334;
            break;
          case 331:
            _context18.prev = 331;
            _context18.t15 = _context18["catch"](320);
            _iterator255.e(_context18.t15);
          case 334:
            _context18.prev = 334;
            _iterator255.f();
            return _context18.finish(334);
          case 337:
            _iterator256 = _createForOfIteratorHelper(this.transformWithContext(that.second, context));
            _context18.prev = 338;
            _iterator256.s();
          case 340:
            if ((_step256 = _iterator256.n()).done) {
              _context18.next = 347;
              break;
            }
            _error140 = _step256.value;
            _error140.path.prepend(new PropertySegment(that, "second"));
            _context18.next = 345;
            return _error140;
          case 345:
            _context18.next = 340;
            break;
          case 347:
            _context18.next = 352;
            break;
          case 349:
            _context18.prev = 349;
            _context18.t16 = _context18["catch"](338);
            _iterator256.e(_context18.t16);
          case 352:
            _context18.prev = 352;
            _iterator256.f();
            return _context18.finish(352);
          case 355:
            if (!(that.annotations !== null)) {
              _context18.next = 392;
              break;
            }
            annotationsIndex = 0;
            _iterator257 = _createForOfIteratorHelper(that.annotations);
            _context18.prev = 358;
            _iterator257.s();
          case 360:
            if ((_step257 = _iterator257.n()).done) {
              _context18.next = 384;
              break;
            }
            _item65 = _step257.value;
            _iterator258 = _createForOfIteratorHelper(this.transformWithContext(_item65, context));
            _context18.prev = 363;
            _iterator258.s();
          case 365:
            if ((_step258 = _iterator258.n()).done) {
              _context18.next = 373;
              break;
            }
            _error138 = _step258.value;
            _error138.path.prepend(new IndexSegment(that.annotations, annotationsIndex));
            _error138.path.prepend(new PropertySegment(that, "annotations"));
            _context18.next = 371;
            return _error138;
          case 371:
            _context18.next = 365;
            break;
          case 373:
            _context18.next = 378;
            break;
          case 375:
            _context18.prev = 375;
            _context18.t17 = _context18["catch"](363);
            _iterator258.e(_context18.t17);
          case 378:
            _context18.prev = 378;
            _iterator258.f();
            return _context18.finish(378);
          case 381:
            annotationsIndex++;
          case 382:
            _context18.next = 360;
            break;
          case 384:
            _context18.next = 389;
            break;
          case 386:
            _context18.prev = 386;
            _context18.t18 = _context18["catch"](358);
            _iterator257.e(_context18.t18);
          case 389:
            _context18.prev = 389;
            _iterator257.f();
            return _context18.finish(389);
          case 392:
          case "end":
            return _context18.stop();
        }
      }, transformAnnotatedRelationshipElementWithContext, this, [[41, 52, 55, 58], [60, 71, 74, 77], [81, 109, 112, 115], [86, 98, 101, 104], [118, 146, 149, 152], [123, 135, 138, 141], [155, 183, 186, 189], [160, 172, 175, 178], [191, 202, 205, 208], [211, 239, 242, 245], [216, 228, 231, 234], [248, 276, 279, 282], [253, 265, 268, 271], [285, 313, 316, 319], [290, 302, 305, 308], [320, 331, 334, 337], [338, 349, 352, 355], [358, 386, 389, 392], [363, 375, 378, 381]]);
    })
  }, {
    key: "transformEntityWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformEntityWithContext(that, context) {
      var _iterator259, _step259, error, _iterator260, _step260, _error141, _iterator261, _step261, _error142, extensionsIndex, _iterator262, _step262, item, _iterator263, _step263, _error143, displayNameIndex, _iterator264, _step264, _item66, _iterator265, _step265, _error144, descriptionIndex, _iterator266, _step266, _item67, _iterator267, _step267, _error145, _iterator268, _step268, _error146, supplementalSemanticIdsIndex, _iterator269, _step269, _item68, _iterator270, _step270, _error147, qualifiersIndex, _iterator271, _step271, _item69, _iterator272, _step272, _error148, embeddedDataSpecificationsIndex, _iterator273, _step273, _item70, _iterator274, _step274, _error149, statementsIndex, _iterator275, _step275, _item71, _iterator276, _step276, _error150, specificAssetIdsIndex, _iterator277, _step277, _item72, _iterator278, _step278, _error151;
      return _regeneratorRuntime().wrap(function transformEntityWithContext$(_context19) {
        while (1) switch (_context19.prev = _context19.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context19.next = 3;
              break;
            }
            _context19.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context19.next = 6;
              break;
            }
            _context19.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context19.next = 9;
              break;
            }
            _context19.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context19.next = 12;
              break;
            }
            _context19.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context19.next = 15;
              break;
            }
            _context19.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context19.next = 18;
              break;
            }
            _context19.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context19.next = 21;
              break;
            }
            _context19.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context19.next = 24;
              break;
            }
            _context19.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context19.next = 27;
              break;
            }
            _context19.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context19.next = 30;
              break;
            }
            _context19.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context19.next = 33;
              break;
            }
            _context19.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.statements !== null) || that.statements.length >= 1) {
              _context19.next = 36;
              break;
            }
            _context19.next = 36;
            return new VerificationError("Statements must be either not set or have at least one item.");
          case 36:
            if (!(that.statements !== null) || AasCommon.every(AasCommon.map(that.statements, function (item) {
              return item.idShort !== null;
            }))) {
              _context19.next = 39;
              break;
            }
            _context19.next = 39;
            return new VerificationError("ID-shorts need to be defined for all the items of " + "statements according to AASd-117 (ID-short of Referables " + "not being a direct child of a Submodel element list shall " + "be specified).");
          case 39:
            if (that.entityType == AasTypes.EntityType.SelfManagedEntity && (that.globalAssetId !== null && that.specificAssetIds === null || that.globalAssetId === null && that.specificAssetIds !== null && that.specificAssetIds.length >= 1) || that.entityType != AasTypes.EntityType.SelfManagedEntity && that.globalAssetId === null && that.specificAssetIds === null) {
              _context19.next = 42;
              break;
            }
            _context19.next = 42;
            return new VerificationError("Constraint AASd-014: Either the attribute global asset ID " + "or specific asset ID must be set if entity type is set to " + "self-managed entity. They are not existing otherwise.");
          case 42:
            if (!(that.specificAssetIds !== null) || that.specificAssetIds.length >= 1) {
              _context19.next = 45;
              break;
            }
            _context19.next = 45;
            return new VerificationError("Specific asset IDs must be either not set or have at least " + "one item.");
          case 45:
            if (!(that.category !== null)) {
              _context19.next = 64;
              break;
            }
            _iterator259 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context19.prev = 47;
            _iterator259.s();
          case 49:
            if ((_step259 = _iterator259.n()).done) {
              _context19.next = 56;
              break;
            }
            error = _step259.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context19.next = 54;
            return error;
          case 54:
            _context19.next = 49;
            break;
          case 56:
            _context19.next = 61;
            break;
          case 58:
            _context19.prev = 58;
            _context19.t0 = _context19["catch"](47);
            _iterator259.e(_context19.t0);
          case 61:
            _context19.prev = 61;
            _iterator259.f();
            return _context19.finish(61);
          case 64:
            if (!(that.idShort !== null)) {
              _context19.next = 83;
              break;
            }
            _iterator260 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context19.prev = 66;
            _iterator260.s();
          case 68:
            if ((_step260 = _iterator260.n()).done) {
              _context19.next = 75;
              break;
            }
            _error141 = _step260.value;
            _error141.path.prepend(new PropertySegment(that, "idShort"));
            _context19.next = 73;
            return _error141;
          case 73:
            _context19.next = 68;
            break;
          case 75:
            _context19.next = 80;
            break;
          case 77:
            _context19.prev = 77;
            _context19.t1 = _context19["catch"](66);
            _iterator260.e(_context19.t1);
          case 80:
            _context19.prev = 80;
            _iterator260.f();
            return _context19.finish(80);
          case 83:
            if (!(that.globalAssetId !== null)) {
              _context19.next = 102;
              break;
            }
            _iterator261 = _createForOfIteratorHelper(verifyIdentifier(that.globalAssetId));
            _context19.prev = 85;
            _iterator261.s();
          case 87:
            if ((_step261 = _iterator261.n()).done) {
              _context19.next = 94;
              break;
            }
            _error142 = _step261.value;
            _error142.path.prepend(new PropertySegment(that, "globalAssetId"));
            _context19.next = 92;
            return _error142;
          case 92:
            _context19.next = 87;
            break;
          case 94:
            _context19.next = 99;
            break;
          case 96:
            _context19.prev = 96;
            _context19.t2 = _context19["catch"](85);
            _iterator261.e(_context19.t2);
          case 99:
            _context19.prev = 99;
            _iterator261.f();
            return _context19.finish(99);
          case 102:
            if (!(context === true)) {
              _context19.next = 418;
              break;
            }
            if (!(that.extensions !== null)) {
              _context19.next = 140;
              break;
            }
            extensionsIndex = 0;
            _iterator262 = _createForOfIteratorHelper(that.extensions);
            _context19.prev = 106;
            _iterator262.s();
          case 108:
            if ((_step262 = _iterator262.n()).done) {
              _context19.next = 132;
              break;
            }
            item = _step262.value;
            _iterator263 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context19.prev = 111;
            _iterator263.s();
          case 113:
            if ((_step263 = _iterator263.n()).done) {
              _context19.next = 121;
              break;
            }
            _error143 = _step263.value;
            _error143.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error143.path.prepend(new PropertySegment(that, "extensions"));
            _context19.next = 119;
            return _error143;
          case 119:
            _context19.next = 113;
            break;
          case 121:
            _context19.next = 126;
            break;
          case 123:
            _context19.prev = 123;
            _context19.t3 = _context19["catch"](111);
            _iterator263.e(_context19.t3);
          case 126:
            _context19.prev = 126;
            _iterator263.f();
            return _context19.finish(126);
          case 129:
            extensionsIndex++;
          case 130:
            _context19.next = 108;
            break;
          case 132:
            _context19.next = 137;
            break;
          case 134:
            _context19.prev = 134;
            _context19.t4 = _context19["catch"](106);
            _iterator262.e(_context19.t4);
          case 137:
            _context19.prev = 137;
            _iterator262.f();
            return _context19.finish(137);
          case 140:
            if (!(that.displayName !== null)) {
              _context19.next = 177;
              break;
            }
            displayNameIndex = 0;
            _iterator264 = _createForOfIteratorHelper(that.displayName);
            _context19.prev = 143;
            _iterator264.s();
          case 145:
            if ((_step264 = _iterator264.n()).done) {
              _context19.next = 169;
              break;
            }
            _item66 = _step264.value;
            _iterator265 = _createForOfIteratorHelper(this.transformWithContext(_item66, context));
            _context19.prev = 148;
            _iterator265.s();
          case 150:
            if ((_step265 = _iterator265.n()).done) {
              _context19.next = 158;
              break;
            }
            _error144 = _step265.value;
            _error144.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error144.path.prepend(new PropertySegment(that, "displayName"));
            _context19.next = 156;
            return _error144;
          case 156:
            _context19.next = 150;
            break;
          case 158:
            _context19.next = 163;
            break;
          case 160:
            _context19.prev = 160;
            _context19.t5 = _context19["catch"](148);
            _iterator265.e(_context19.t5);
          case 163:
            _context19.prev = 163;
            _iterator265.f();
            return _context19.finish(163);
          case 166:
            displayNameIndex++;
          case 167:
            _context19.next = 145;
            break;
          case 169:
            _context19.next = 174;
            break;
          case 171:
            _context19.prev = 171;
            _context19.t6 = _context19["catch"](143);
            _iterator264.e(_context19.t6);
          case 174:
            _context19.prev = 174;
            _iterator264.f();
            return _context19.finish(174);
          case 177:
            if (!(that.description !== null)) {
              _context19.next = 214;
              break;
            }
            descriptionIndex = 0;
            _iterator266 = _createForOfIteratorHelper(that.description);
            _context19.prev = 180;
            _iterator266.s();
          case 182:
            if ((_step266 = _iterator266.n()).done) {
              _context19.next = 206;
              break;
            }
            _item67 = _step266.value;
            _iterator267 = _createForOfIteratorHelper(this.transformWithContext(_item67, context));
            _context19.prev = 185;
            _iterator267.s();
          case 187:
            if ((_step267 = _iterator267.n()).done) {
              _context19.next = 195;
              break;
            }
            _error145 = _step267.value;
            _error145.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error145.path.prepend(new PropertySegment(that, "description"));
            _context19.next = 193;
            return _error145;
          case 193:
            _context19.next = 187;
            break;
          case 195:
            _context19.next = 200;
            break;
          case 197:
            _context19.prev = 197;
            _context19.t7 = _context19["catch"](185);
            _iterator267.e(_context19.t7);
          case 200:
            _context19.prev = 200;
            _iterator267.f();
            return _context19.finish(200);
          case 203:
            descriptionIndex++;
          case 204:
            _context19.next = 182;
            break;
          case 206:
            _context19.next = 211;
            break;
          case 208:
            _context19.prev = 208;
            _context19.t8 = _context19["catch"](180);
            _iterator266.e(_context19.t8);
          case 211:
            _context19.prev = 211;
            _iterator266.f();
            return _context19.finish(211);
          case 214:
            if (!(that.semanticId !== null)) {
              _context19.next = 233;
              break;
            }
            _iterator268 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context19.prev = 216;
            _iterator268.s();
          case 218:
            if ((_step268 = _iterator268.n()).done) {
              _context19.next = 225;
              break;
            }
            _error146 = _step268.value;
            _error146.path.prepend(new PropertySegment(that, "semanticId"));
            _context19.next = 223;
            return _error146;
          case 223:
            _context19.next = 218;
            break;
          case 225:
            _context19.next = 230;
            break;
          case 227:
            _context19.prev = 227;
            _context19.t9 = _context19["catch"](216);
            _iterator268.e(_context19.t9);
          case 230:
            _context19.prev = 230;
            _iterator268.f();
            return _context19.finish(230);
          case 233:
            if (!(that.supplementalSemanticIds !== null)) {
              _context19.next = 270;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator269 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context19.prev = 236;
            _iterator269.s();
          case 238:
            if ((_step269 = _iterator269.n()).done) {
              _context19.next = 262;
              break;
            }
            _item68 = _step269.value;
            _iterator270 = _createForOfIteratorHelper(this.transformWithContext(_item68, context));
            _context19.prev = 241;
            _iterator270.s();
          case 243:
            if ((_step270 = _iterator270.n()).done) {
              _context19.next = 251;
              break;
            }
            _error147 = _step270.value;
            _error147.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error147.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context19.next = 249;
            return _error147;
          case 249:
            _context19.next = 243;
            break;
          case 251:
            _context19.next = 256;
            break;
          case 253:
            _context19.prev = 253;
            _context19.t10 = _context19["catch"](241);
            _iterator270.e(_context19.t10);
          case 256:
            _context19.prev = 256;
            _iterator270.f();
            return _context19.finish(256);
          case 259:
            supplementalSemanticIdsIndex++;
          case 260:
            _context19.next = 238;
            break;
          case 262:
            _context19.next = 267;
            break;
          case 264:
            _context19.prev = 264;
            _context19.t11 = _context19["catch"](236);
            _iterator269.e(_context19.t11);
          case 267:
            _context19.prev = 267;
            _iterator269.f();
            return _context19.finish(267);
          case 270:
            if (!(that.qualifiers !== null)) {
              _context19.next = 307;
              break;
            }
            qualifiersIndex = 0;
            _iterator271 = _createForOfIteratorHelper(that.qualifiers);
            _context19.prev = 273;
            _iterator271.s();
          case 275:
            if ((_step271 = _iterator271.n()).done) {
              _context19.next = 299;
              break;
            }
            _item69 = _step271.value;
            _iterator272 = _createForOfIteratorHelper(this.transformWithContext(_item69, context));
            _context19.prev = 278;
            _iterator272.s();
          case 280:
            if ((_step272 = _iterator272.n()).done) {
              _context19.next = 288;
              break;
            }
            _error148 = _step272.value;
            _error148.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error148.path.prepend(new PropertySegment(that, "qualifiers"));
            _context19.next = 286;
            return _error148;
          case 286:
            _context19.next = 280;
            break;
          case 288:
            _context19.next = 293;
            break;
          case 290:
            _context19.prev = 290;
            _context19.t12 = _context19["catch"](278);
            _iterator272.e(_context19.t12);
          case 293:
            _context19.prev = 293;
            _iterator272.f();
            return _context19.finish(293);
          case 296:
            qualifiersIndex++;
          case 297:
            _context19.next = 275;
            break;
          case 299:
            _context19.next = 304;
            break;
          case 301:
            _context19.prev = 301;
            _context19.t13 = _context19["catch"](273);
            _iterator271.e(_context19.t13);
          case 304:
            _context19.prev = 304;
            _iterator271.f();
            return _context19.finish(304);
          case 307:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context19.next = 344;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator273 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context19.prev = 310;
            _iterator273.s();
          case 312:
            if ((_step273 = _iterator273.n()).done) {
              _context19.next = 336;
              break;
            }
            _item70 = _step273.value;
            _iterator274 = _createForOfIteratorHelper(this.transformWithContext(_item70, context));
            _context19.prev = 315;
            _iterator274.s();
          case 317:
            if ((_step274 = _iterator274.n()).done) {
              _context19.next = 325;
              break;
            }
            _error149 = _step274.value;
            _error149.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error149.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context19.next = 323;
            return _error149;
          case 323:
            _context19.next = 317;
            break;
          case 325:
            _context19.next = 330;
            break;
          case 327:
            _context19.prev = 327;
            _context19.t14 = _context19["catch"](315);
            _iterator274.e(_context19.t14);
          case 330:
            _context19.prev = 330;
            _iterator274.f();
            return _context19.finish(330);
          case 333:
            embeddedDataSpecificationsIndex++;
          case 334:
            _context19.next = 312;
            break;
          case 336:
            _context19.next = 341;
            break;
          case 338:
            _context19.prev = 338;
            _context19.t15 = _context19["catch"](310);
            _iterator273.e(_context19.t15);
          case 341:
            _context19.prev = 341;
            _iterator273.f();
            return _context19.finish(341);
          case 344:
            if (!(that.statements !== null)) {
              _context19.next = 381;
              break;
            }
            statementsIndex = 0;
            _iterator275 = _createForOfIteratorHelper(that.statements);
            _context19.prev = 347;
            _iterator275.s();
          case 349:
            if ((_step275 = _iterator275.n()).done) {
              _context19.next = 373;
              break;
            }
            _item71 = _step275.value;
            _iterator276 = _createForOfIteratorHelper(this.transformWithContext(_item71, context));
            _context19.prev = 352;
            _iterator276.s();
          case 354:
            if ((_step276 = _iterator276.n()).done) {
              _context19.next = 362;
              break;
            }
            _error150 = _step276.value;
            _error150.path.prepend(new IndexSegment(that.statements, statementsIndex));
            _error150.path.prepend(new PropertySegment(that, "statements"));
            _context19.next = 360;
            return _error150;
          case 360:
            _context19.next = 354;
            break;
          case 362:
            _context19.next = 367;
            break;
          case 364:
            _context19.prev = 364;
            _context19.t16 = _context19["catch"](352);
            _iterator276.e(_context19.t16);
          case 367:
            _context19.prev = 367;
            _iterator276.f();
            return _context19.finish(367);
          case 370:
            statementsIndex++;
          case 371:
            _context19.next = 349;
            break;
          case 373:
            _context19.next = 378;
            break;
          case 375:
            _context19.prev = 375;
            _context19.t17 = _context19["catch"](347);
            _iterator275.e(_context19.t17);
          case 378:
            _context19.prev = 378;
            _iterator275.f();
            return _context19.finish(378);
          case 381:
            if (!(that.specificAssetIds !== null)) {
              _context19.next = 418;
              break;
            }
            specificAssetIdsIndex = 0;
            _iterator277 = _createForOfIteratorHelper(that.specificAssetIds);
            _context19.prev = 384;
            _iterator277.s();
          case 386:
            if ((_step277 = _iterator277.n()).done) {
              _context19.next = 410;
              break;
            }
            _item72 = _step277.value;
            _iterator278 = _createForOfIteratorHelper(this.transformWithContext(_item72, context));
            _context19.prev = 389;
            _iterator278.s();
          case 391:
            if ((_step278 = _iterator278.n()).done) {
              _context19.next = 399;
              break;
            }
            _error151 = _step278.value;
            _error151.path.prepend(new IndexSegment(that.specificAssetIds, specificAssetIdsIndex));
            _error151.path.prepend(new PropertySegment(that, "specificAssetIds"));
            _context19.next = 397;
            return _error151;
          case 397:
            _context19.next = 391;
            break;
          case 399:
            _context19.next = 404;
            break;
          case 401:
            _context19.prev = 401;
            _context19.t18 = _context19["catch"](389);
            _iterator278.e(_context19.t18);
          case 404:
            _context19.prev = 404;
            _iterator278.f();
            return _context19.finish(404);
          case 407:
            specificAssetIdsIndex++;
          case 408:
            _context19.next = 386;
            break;
          case 410:
            _context19.next = 415;
            break;
          case 412:
            _context19.prev = 412;
            _context19.t19 = _context19["catch"](384);
            _iterator277.e(_context19.t19);
          case 415:
            _context19.prev = 415;
            _iterator277.f();
            return _context19.finish(415);
          case 418:
          case "end":
            return _context19.stop();
        }
      }, transformEntityWithContext, this, [[47, 58, 61, 64], [66, 77, 80, 83], [85, 96, 99, 102], [106, 134, 137, 140], [111, 123, 126, 129], [143, 171, 174, 177], [148, 160, 163, 166], [180, 208, 211, 214], [185, 197, 200, 203], [216, 227, 230, 233], [236, 264, 267, 270], [241, 253, 256, 259], [273, 301, 304, 307], [278, 290, 293, 296], [310, 338, 341, 344], [315, 327, 330, 333], [347, 375, 378, 381], [352, 364, 367, 370], [384, 412, 415, 418], [389, 401, 404, 407]]);
    })
  }, {
    key: "transformEventPayloadWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformEventPayloadWithContext(that, context) {
      var _iterator279, _step279, error, _iterator280, _step280, _error158, _iterator281, _step281, _error152, _iterator282, _step282, _error156, _iterator283, _step283, _error153, _iterator284, _step284, _error157, _iterator285, _step285, _error154, _iterator286, _step286, _error155;
      return _regeneratorRuntime().wrap(function transformEventPayloadWithContext$(_context20) {
        while (1) switch (_context20.prev = _context20.next) {
          case 0:
            if (isModelReferenceTo(that.source, AasTypes.KeyTypes.EventElement) || isModelReferenceTo(that.source, AasTypes.KeyTypes.BasicEventElement)) {
              _context20.next = 3;
              break;
            }
            _context20.next = 3;
            return new VerificationError("Source must be a model reference to an Event element.");
          case 3:
            if (isModelReferenceToReferable(that.observableReference)) {
              _context20.next = 6;
              break;
            }
            _context20.next = 6;
            return new VerificationError("Observable reference must be a model reference to " + "a referable.");
          case 6:
            if (!(that.topic !== null)) {
              _context20.next = 25;
              break;
            }
            _iterator279 = _createForOfIteratorHelper(verifyMessageTopicType(that.topic));
            _context20.prev = 8;
            _iterator279.s();
          case 10:
            if ((_step279 = _iterator279.n()).done) {
              _context20.next = 17;
              break;
            }
            error = _step279.value;
            error.path.prepend(new PropertySegment(that, "topic"));
            _context20.next = 15;
            return error;
          case 15:
            _context20.next = 10;
            break;
          case 17:
            _context20.next = 22;
            break;
          case 19:
            _context20.prev = 19;
            _context20.t0 = _context20["catch"](8);
            _iterator279.e(_context20.t0);
          case 22:
            _context20.prev = 22;
            _iterator279.f();
            return _context20.finish(22);
          case 25:
            _iterator280 = _createForOfIteratorHelper(verifyDateTimeUtc(that.timeStamp));
            _context20.prev = 26;
            _iterator280.s();
          case 28:
            if ((_step280 = _iterator280.n()).done) {
              _context20.next = 35;
              break;
            }
            _error158 = _step280.value;
            _error158.path.prepend(new PropertySegment(that, "timeStamp"));
            _context20.next = 33;
            return _error158;
          case 33:
            _context20.next = 28;
            break;
          case 35:
            _context20.next = 40;
            break;
          case 37:
            _context20.prev = 37;
            _context20.t1 = _context20["catch"](26);
            _iterator280.e(_context20.t1);
          case 40:
            _context20.prev = 40;
            _iterator280.f();
            return _context20.finish(40);
          case 43:
            if (!(that.payload !== null)) {
              _context20.next = 62;
              break;
            }
            _iterator281 = _createForOfIteratorHelper(verifyBlobType(that.payload));
            _context20.prev = 45;
            _iterator281.s();
          case 47:
            if ((_step281 = _iterator281.n()).done) {
              _context20.next = 54;
              break;
            }
            _error152 = _step281.value;
            _error152.path.prepend(new PropertySegment(that, "payload"));
            _context20.next = 52;
            return _error152;
          case 52:
            _context20.next = 47;
            break;
          case 54:
            _context20.next = 59;
            break;
          case 56:
            _context20.prev = 56;
            _context20.t2 = _context20["catch"](45);
            _iterator281.e(_context20.t2);
          case 59:
            _context20.prev = 59;
            _iterator281.f();
            return _context20.finish(59);
          case 62:
            if (!(context === true)) {
              _context20.next = 156;
              break;
            }
            _iterator282 = _createForOfIteratorHelper(this.transformWithContext(that.source, context));
            _context20.prev = 64;
            _iterator282.s();
          case 66:
            if ((_step282 = _iterator282.n()).done) {
              _context20.next = 73;
              break;
            }
            _error156 = _step282.value;
            _error156.path.prepend(new PropertySegment(that, "source"));
            _context20.next = 71;
            return _error156;
          case 71:
            _context20.next = 66;
            break;
          case 73:
            _context20.next = 78;
            break;
          case 75:
            _context20.prev = 75;
            _context20.t3 = _context20["catch"](64);
            _iterator282.e(_context20.t3);
          case 78:
            _context20.prev = 78;
            _iterator282.f();
            return _context20.finish(78);
          case 81:
            if (!(that.sourceSemanticId !== null)) {
              _context20.next = 100;
              break;
            }
            _iterator283 = _createForOfIteratorHelper(this.transformWithContext(that.sourceSemanticId, context));
            _context20.prev = 83;
            _iterator283.s();
          case 85:
            if ((_step283 = _iterator283.n()).done) {
              _context20.next = 92;
              break;
            }
            _error153 = _step283.value;
            _error153.path.prepend(new PropertySegment(that, "sourceSemanticId"));
            _context20.next = 90;
            return _error153;
          case 90:
            _context20.next = 85;
            break;
          case 92:
            _context20.next = 97;
            break;
          case 94:
            _context20.prev = 94;
            _context20.t4 = _context20["catch"](83);
            _iterator283.e(_context20.t4);
          case 97:
            _context20.prev = 97;
            _iterator283.f();
            return _context20.finish(97);
          case 100:
            _iterator284 = _createForOfIteratorHelper(this.transformWithContext(that.observableReference, context));
            _context20.prev = 101;
            _iterator284.s();
          case 103:
            if ((_step284 = _iterator284.n()).done) {
              _context20.next = 110;
              break;
            }
            _error157 = _step284.value;
            _error157.path.prepend(new PropertySegment(that, "observableReference"));
            _context20.next = 108;
            return _error157;
          case 108:
            _context20.next = 103;
            break;
          case 110:
            _context20.next = 115;
            break;
          case 112:
            _context20.prev = 112;
            _context20.t5 = _context20["catch"](101);
            _iterator284.e(_context20.t5);
          case 115:
            _context20.prev = 115;
            _iterator284.f();
            return _context20.finish(115);
          case 118:
            if (!(that.observableSemanticId !== null)) {
              _context20.next = 137;
              break;
            }
            _iterator285 = _createForOfIteratorHelper(this.transformWithContext(that.observableSemanticId, context));
            _context20.prev = 120;
            _iterator285.s();
          case 122:
            if ((_step285 = _iterator285.n()).done) {
              _context20.next = 129;
              break;
            }
            _error154 = _step285.value;
            _error154.path.prepend(new PropertySegment(that, "observableSemanticId"));
            _context20.next = 127;
            return _error154;
          case 127:
            _context20.next = 122;
            break;
          case 129:
            _context20.next = 134;
            break;
          case 131:
            _context20.prev = 131;
            _context20.t6 = _context20["catch"](120);
            _iterator285.e(_context20.t6);
          case 134:
            _context20.prev = 134;
            _iterator285.f();
            return _context20.finish(134);
          case 137:
            if (!(that.subjectId !== null)) {
              _context20.next = 156;
              break;
            }
            _iterator286 = _createForOfIteratorHelper(this.transformWithContext(that.subjectId, context));
            _context20.prev = 139;
            _iterator286.s();
          case 141:
            if ((_step286 = _iterator286.n()).done) {
              _context20.next = 148;
              break;
            }
            _error155 = _step286.value;
            _error155.path.prepend(new PropertySegment(that, "subjectId"));
            _context20.next = 146;
            return _error155;
          case 146:
            _context20.next = 141;
            break;
          case 148:
            _context20.next = 153;
            break;
          case 150:
            _context20.prev = 150;
            _context20.t7 = _context20["catch"](139);
            _iterator286.e(_context20.t7);
          case 153:
            _context20.prev = 153;
            _iterator286.f();
            return _context20.finish(153);
          case 156:
          case "end":
            return _context20.stop();
        }
      }, transformEventPayloadWithContext, this, [[8, 19, 22, 25], [26, 37, 40, 43], [45, 56, 59, 62], [64, 75, 78, 81], [83, 94, 97, 100], [101, 112, 115, 118], [120, 131, 134, 137], [139, 150, 153, 156]]);
    })
  }, {
    key: "transformBasicEventElementWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformBasicEventElementWithContext(that, context) {
      var _iterator287, _step287, error, _iterator288, _step288, _error159, _iterator289, _step289, _error160, _iterator290, _step290, _error161, _iterator291, _step291, _error162, _iterator292, _step292, _error163, extensionsIndex, _iterator293, _step293, item, _iterator294, _step294, _error164, displayNameIndex, _iterator295, _step295, _item73, _iterator296, _step296, _error165, descriptionIndex, _iterator297, _step297, _item74, _iterator298, _step298, _error166, _iterator299, _step299, _error167, supplementalSemanticIdsIndex, _iterator300, _step300, _item75, _iterator301, _step301, _error168, qualifiersIndex, _iterator302, _step302, _item76, _iterator303, _step303, _error169, embeddedDataSpecificationsIndex, _iterator304, _step304, _item77, _iterator305, _step305, _error170, _iterator306, _step306, _error172, _iterator307, _step307, _error171;
      return _regeneratorRuntime().wrap(function transformBasicEventElementWithContext$(_context21) {
        while (1) switch (_context21.prev = _context21.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context21.next = 3;
              break;
            }
            _context21.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context21.next = 6;
              break;
            }
            _context21.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context21.next = 9;
              break;
            }
            _context21.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context21.next = 12;
              break;
            }
            _context21.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context21.next = 15;
              break;
            }
            _context21.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context21.next = 18;
              break;
            }
            _context21.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context21.next = 21;
              break;
            }
            _context21.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context21.next = 24;
              break;
            }
            _context21.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context21.next = 27;
              break;
            }
            _context21.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context21.next = 30;
              break;
            }
            _context21.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context21.next = 33;
              break;
            }
            _context21.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.direction == AasTypes.Direction.Input) || that.maxInterval === null) {
              _context21.next = 36;
              break;
            }
            _context21.next = 36;
            return new VerificationError("Max. interval is not applicable for input direction.");
          case 36:
            if (isModelReferenceToReferable(that.observed)) {
              _context21.next = 39;
              break;
            }
            _context21.next = 39;
            return new VerificationError("Observed must be a model reference to a referable.");
          case 39:
            if (!(that.messageBroker !== null) || isModelReferenceToReferable(that.messageBroker)) {
              _context21.next = 42;
              break;
            }
            _context21.next = 42;
            return new VerificationError("Message broker must be a model reference to a referable.");
          case 42:
            if (!(that.category !== null)) {
              _context21.next = 61;
              break;
            }
            _iterator287 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context21.prev = 44;
            _iterator287.s();
          case 46:
            if ((_step287 = _iterator287.n()).done) {
              _context21.next = 53;
              break;
            }
            error = _step287.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context21.next = 51;
            return error;
          case 51:
            _context21.next = 46;
            break;
          case 53:
            _context21.next = 58;
            break;
          case 55:
            _context21.prev = 55;
            _context21.t0 = _context21["catch"](44);
            _iterator287.e(_context21.t0);
          case 58:
            _context21.prev = 58;
            _iterator287.f();
            return _context21.finish(58);
          case 61:
            if (!(that.idShort !== null)) {
              _context21.next = 80;
              break;
            }
            _iterator288 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context21.prev = 63;
            _iterator288.s();
          case 65:
            if ((_step288 = _iterator288.n()).done) {
              _context21.next = 72;
              break;
            }
            _error159 = _step288.value;
            _error159.path.prepend(new PropertySegment(that, "idShort"));
            _context21.next = 70;
            return _error159;
          case 70:
            _context21.next = 65;
            break;
          case 72:
            _context21.next = 77;
            break;
          case 74:
            _context21.prev = 74;
            _context21.t1 = _context21["catch"](63);
            _iterator288.e(_context21.t1);
          case 77:
            _context21.prev = 77;
            _iterator288.f();
            return _context21.finish(77);
          case 80:
            if (!(that.messageTopic !== null)) {
              _context21.next = 99;
              break;
            }
            _iterator289 = _createForOfIteratorHelper(verifyMessageTopicType(that.messageTopic));
            _context21.prev = 82;
            _iterator289.s();
          case 84:
            if ((_step289 = _iterator289.n()).done) {
              _context21.next = 91;
              break;
            }
            _error160 = _step289.value;
            _error160.path.prepend(new PropertySegment(that, "messageTopic"));
            _context21.next = 89;
            return _error160;
          case 89:
            _context21.next = 84;
            break;
          case 91:
            _context21.next = 96;
            break;
          case 93:
            _context21.prev = 93;
            _context21.t2 = _context21["catch"](82);
            _iterator289.e(_context21.t2);
          case 96:
            _context21.prev = 96;
            _iterator289.f();
            return _context21.finish(96);
          case 99:
            if (!(that.lastUpdate !== null)) {
              _context21.next = 118;
              break;
            }
            _iterator290 = _createForOfIteratorHelper(verifyDateTimeUtc(that.lastUpdate));
            _context21.prev = 101;
            _iterator290.s();
          case 103:
            if ((_step290 = _iterator290.n()).done) {
              _context21.next = 110;
              break;
            }
            _error161 = _step290.value;
            _error161.path.prepend(new PropertySegment(that, "lastUpdate"));
            _context21.next = 108;
            return _error161;
          case 108:
            _context21.next = 103;
            break;
          case 110:
            _context21.next = 115;
            break;
          case 112:
            _context21.prev = 112;
            _context21.t3 = _context21["catch"](101);
            _iterator290.e(_context21.t3);
          case 115:
            _context21.prev = 115;
            _iterator290.f();
            return _context21.finish(115);
          case 118:
            if (!(that.minInterval !== null)) {
              _context21.next = 137;
              break;
            }
            _iterator291 = _createForOfIteratorHelper(verifyDuration(that.minInterval));
            _context21.prev = 120;
            _iterator291.s();
          case 122:
            if ((_step291 = _iterator291.n()).done) {
              _context21.next = 129;
              break;
            }
            _error162 = _step291.value;
            _error162.path.prepend(new PropertySegment(that, "minInterval"));
            _context21.next = 127;
            return _error162;
          case 127:
            _context21.next = 122;
            break;
          case 129:
            _context21.next = 134;
            break;
          case 131:
            _context21.prev = 131;
            _context21.t4 = _context21["catch"](120);
            _iterator291.e(_context21.t4);
          case 134:
            _context21.prev = 134;
            _iterator291.f();
            return _context21.finish(134);
          case 137:
            if (!(that.maxInterval !== null)) {
              _context21.next = 156;
              break;
            }
            _iterator292 = _createForOfIteratorHelper(verifyDuration(that.maxInterval));
            _context21.prev = 139;
            _iterator292.s();
          case 141:
            if ((_step292 = _iterator292.n()).done) {
              _context21.next = 148;
              break;
            }
            _error163 = _step292.value;
            _error163.path.prepend(new PropertySegment(that, "maxInterval"));
            _context21.next = 146;
            return _error163;
          case 146:
            _context21.next = 141;
            break;
          case 148:
            _context21.next = 153;
            break;
          case 150:
            _context21.prev = 150;
            _context21.t5 = _context21["catch"](139);
            _iterator292.e(_context21.t5);
          case 153:
            _context21.prev = 153;
            _iterator292.f();
            return _context21.finish(153);
          case 156:
            if (!(context === true)) {
              _context21.next = 435;
              break;
            }
            if (!(that.extensions !== null)) {
              _context21.next = 194;
              break;
            }
            extensionsIndex = 0;
            _iterator293 = _createForOfIteratorHelper(that.extensions);
            _context21.prev = 160;
            _iterator293.s();
          case 162:
            if ((_step293 = _iterator293.n()).done) {
              _context21.next = 186;
              break;
            }
            item = _step293.value;
            _iterator294 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context21.prev = 165;
            _iterator294.s();
          case 167:
            if ((_step294 = _iterator294.n()).done) {
              _context21.next = 175;
              break;
            }
            _error164 = _step294.value;
            _error164.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error164.path.prepend(new PropertySegment(that, "extensions"));
            _context21.next = 173;
            return _error164;
          case 173:
            _context21.next = 167;
            break;
          case 175:
            _context21.next = 180;
            break;
          case 177:
            _context21.prev = 177;
            _context21.t6 = _context21["catch"](165);
            _iterator294.e(_context21.t6);
          case 180:
            _context21.prev = 180;
            _iterator294.f();
            return _context21.finish(180);
          case 183:
            extensionsIndex++;
          case 184:
            _context21.next = 162;
            break;
          case 186:
            _context21.next = 191;
            break;
          case 188:
            _context21.prev = 188;
            _context21.t7 = _context21["catch"](160);
            _iterator293.e(_context21.t7);
          case 191:
            _context21.prev = 191;
            _iterator293.f();
            return _context21.finish(191);
          case 194:
            if (!(that.displayName !== null)) {
              _context21.next = 231;
              break;
            }
            displayNameIndex = 0;
            _iterator295 = _createForOfIteratorHelper(that.displayName);
            _context21.prev = 197;
            _iterator295.s();
          case 199:
            if ((_step295 = _iterator295.n()).done) {
              _context21.next = 223;
              break;
            }
            _item73 = _step295.value;
            _iterator296 = _createForOfIteratorHelper(this.transformWithContext(_item73, context));
            _context21.prev = 202;
            _iterator296.s();
          case 204:
            if ((_step296 = _iterator296.n()).done) {
              _context21.next = 212;
              break;
            }
            _error165 = _step296.value;
            _error165.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error165.path.prepend(new PropertySegment(that, "displayName"));
            _context21.next = 210;
            return _error165;
          case 210:
            _context21.next = 204;
            break;
          case 212:
            _context21.next = 217;
            break;
          case 214:
            _context21.prev = 214;
            _context21.t8 = _context21["catch"](202);
            _iterator296.e(_context21.t8);
          case 217:
            _context21.prev = 217;
            _iterator296.f();
            return _context21.finish(217);
          case 220:
            displayNameIndex++;
          case 221:
            _context21.next = 199;
            break;
          case 223:
            _context21.next = 228;
            break;
          case 225:
            _context21.prev = 225;
            _context21.t9 = _context21["catch"](197);
            _iterator295.e(_context21.t9);
          case 228:
            _context21.prev = 228;
            _iterator295.f();
            return _context21.finish(228);
          case 231:
            if (!(that.description !== null)) {
              _context21.next = 268;
              break;
            }
            descriptionIndex = 0;
            _iterator297 = _createForOfIteratorHelper(that.description);
            _context21.prev = 234;
            _iterator297.s();
          case 236:
            if ((_step297 = _iterator297.n()).done) {
              _context21.next = 260;
              break;
            }
            _item74 = _step297.value;
            _iterator298 = _createForOfIteratorHelper(this.transformWithContext(_item74, context));
            _context21.prev = 239;
            _iterator298.s();
          case 241:
            if ((_step298 = _iterator298.n()).done) {
              _context21.next = 249;
              break;
            }
            _error166 = _step298.value;
            _error166.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error166.path.prepend(new PropertySegment(that, "description"));
            _context21.next = 247;
            return _error166;
          case 247:
            _context21.next = 241;
            break;
          case 249:
            _context21.next = 254;
            break;
          case 251:
            _context21.prev = 251;
            _context21.t10 = _context21["catch"](239);
            _iterator298.e(_context21.t10);
          case 254:
            _context21.prev = 254;
            _iterator298.f();
            return _context21.finish(254);
          case 257:
            descriptionIndex++;
          case 258:
            _context21.next = 236;
            break;
          case 260:
            _context21.next = 265;
            break;
          case 262:
            _context21.prev = 262;
            _context21.t11 = _context21["catch"](234);
            _iterator297.e(_context21.t11);
          case 265:
            _context21.prev = 265;
            _iterator297.f();
            return _context21.finish(265);
          case 268:
            if (!(that.semanticId !== null)) {
              _context21.next = 287;
              break;
            }
            _iterator299 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context21.prev = 270;
            _iterator299.s();
          case 272:
            if ((_step299 = _iterator299.n()).done) {
              _context21.next = 279;
              break;
            }
            _error167 = _step299.value;
            _error167.path.prepend(new PropertySegment(that, "semanticId"));
            _context21.next = 277;
            return _error167;
          case 277:
            _context21.next = 272;
            break;
          case 279:
            _context21.next = 284;
            break;
          case 281:
            _context21.prev = 281;
            _context21.t12 = _context21["catch"](270);
            _iterator299.e(_context21.t12);
          case 284:
            _context21.prev = 284;
            _iterator299.f();
            return _context21.finish(284);
          case 287:
            if (!(that.supplementalSemanticIds !== null)) {
              _context21.next = 324;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator300 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context21.prev = 290;
            _iterator300.s();
          case 292:
            if ((_step300 = _iterator300.n()).done) {
              _context21.next = 316;
              break;
            }
            _item75 = _step300.value;
            _iterator301 = _createForOfIteratorHelper(this.transformWithContext(_item75, context));
            _context21.prev = 295;
            _iterator301.s();
          case 297:
            if ((_step301 = _iterator301.n()).done) {
              _context21.next = 305;
              break;
            }
            _error168 = _step301.value;
            _error168.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error168.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context21.next = 303;
            return _error168;
          case 303:
            _context21.next = 297;
            break;
          case 305:
            _context21.next = 310;
            break;
          case 307:
            _context21.prev = 307;
            _context21.t13 = _context21["catch"](295);
            _iterator301.e(_context21.t13);
          case 310:
            _context21.prev = 310;
            _iterator301.f();
            return _context21.finish(310);
          case 313:
            supplementalSemanticIdsIndex++;
          case 314:
            _context21.next = 292;
            break;
          case 316:
            _context21.next = 321;
            break;
          case 318:
            _context21.prev = 318;
            _context21.t14 = _context21["catch"](290);
            _iterator300.e(_context21.t14);
          case 321:
            _context21.prev = 321;
            _iterator300.f();
            return _context21.finish(321);
          case 324:
            if (!(that.qualifiers !== null)) {
              _context21.next = 361;
              break;
            }
            qualifiersIndex = 0;
            _iterator302 = _createForOfIteratorHelper(that.qualifiers);
            _context21.prev = 327;
            _iterator302.s();
          case 329:
            if ((_step302 = _iterator302.n()).done) {
              _context21.next = 353;
              break;
            }
            _item76 = _step302.value;
            _iterator303 = _createForOfIteratorHelper(this.transformWithContext(_item76, context));
            _context21.prev = 332;
            _iterator303.s();
          case 334:
            if ((_step303 = _iterator303.n()).done) {
              _context21.next = 342;
              break;
            }
            _error169 = _step303.value;
            _error169.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error169.path.prepend(new PropertySegment(that, "qualifiers"));
            _context21.next = 340;
            return _error169;
          case 340:
            _context21.next = 334;
            break;
          case 342:
            _context21.next = 347;
            break;
          case 344:
            _context21.prev = 344;
            _context21.t15 = _context21["catch"](332);
            _iterator303.e(_context21.t15);
          case 347:
            _context21.prev = 347;
            _iterator303.f();
            return _context21.finish(347);
          case 350:
            qualifiersIndex++;
          case 351:
            _context21.next = 329;
            break;
          case 353:
            _context21.next = 358;
            break;
          case 355:
            _context21.prev = 355;
            _context21.t16 = _context21["catch"](327);
            _iterator302.e(_context21.t16);
          case 358:
            _context21.prev = 358;
            _iterator302.f();
            return _context21.finish(358);
          case 361:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context21.next = 398;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator304 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context21.prev = 364;
            _iterator304.s();
          case 366:
            if ((_step304 = _iterator304.n()).done) {
              _context21.next = 390;
              break;
            }
            _item77 = _step304.value;
            _iterator305 = _createForOfIteratorHelper(this.transformWithContext(_item77, context));
            _context21.prev = 369;
            _iterator305.s();
          case 371:
            if ((_step305 = _iterator305.n()).done) {
              _context21.next = 379;
              break;
            }
            _error170 = _step305.value;
            _error170.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error170.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context21.next = 377;
            return _error170;
          case 377:
            _context21.next = 371;
            break;
          case 379:
            _context21.next = 384;
            break;
          case 381:
            _context21.prev = 381;
            _context21.t17 = _context21["catch"](369);
            _iterator305.e(_context21.t17);
          case 384:
            _context21.prev = 384;
            _iterator305.f();
            return _context21.finish(384);
          case 387:
            embeddedDataSpecificationsIndex++;
          case 388:
            _context21.next = 366;
            break;
          case 390:
            _context21.next = 395;
            break;
          case 392:
            _context21.prev = 392;
            _context21.t18 = _context21["catch"](364);
            _iterator304.e(_context21.t18);
          case 395:
            _context21.prev = 395;
            _iterator304.f();
            return _context21.finish(395);
          case 398:
            _iterator306 = _createForOfIteratorHelper(this.transformWithContext(that.observed, context));
            _context21.prev = 399;
            _iterator306.s();
          case 401:
            if ((_step306 = _iterator306.n()).done) {
              _context21.next = 408;
              break;
            }
            _error172 = _step306.value;
            _error172.path.prepend(new PropertySegment(that, "observed"));
            _context21.next = 406;
            return _error172;
          case 406:
            _context21.next = 401;
            break;
          case 408:
            _context21.next = 413;
            break;
          case 410:
            _context21.prev = 410;
            _context21.t19 = _context21["catch"](399);
            _iterator306.e(_context21.t19);
          case 413:
            _context21.prev = 413;
            _iterator306.f();
            return _context21.finish(413);
          case 416:
            if (!(that.messageBroker !== null)) {
              _context21.next = 435;
              break;
            }
            _iterator307 = _createForOfIteratorHelper(this.transformWithContext(that.messageBroker, context));
            _context21.prev = 418;
            _iterator307.s();
          case 420:
            if ((_step307 = _iterator307.n()).done) {
              _context21.next = 427;
              break;
            }
            _error171 = _step307.value;
            _error171.path.prepend(new PropertySegment(that, "messageBroker"));
            _context21.next = 425;
            return _error171;
          case 425:
            _context21.next = 420;
            break;
          case 427:
            _context21.next = 432;
            break;
          case 429:
            _context21.prev = 429;
            _context21.t20 = _context21["catch"](418);
            _iterator307.e(_context21.t20);
          case 432:
            _context21.prev = 432;
            _iterator307.f();
            return _context21.finish(432);
          case 435:
          case "end":
            return _context21.stop();
        }
      }, transformBasicEventElementWithContext, this, [[44, 55, 58, 61], [63, 74, 77, 80], [82, 93, 96, 99], [101, 112, 115, 118], [120, 131, 134, 137], [139, 150, 153, 156], [160, 188, 191, 194], [165, 177, 180, 183], [197, 225, 228, 231], [202, 214, 217, 220], [234, 262, 265, 268], [239, 251, 254, 257], [270, 281, 284, 287], [290, 318, 321, 324], [295, 307, 310, 313], [327, 355, 358, 361], [332, 344, 347, 350], [364, 392, 395, 398], [369, 381, 384, 387], [399, 410, 413, 416], [418, 429, 432, 435]]);
    })
  }, {
    key: "transformOperationWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformOperationWithContext(that, context) {
      var _iterator308, _step308, error, _iterator309, _step309, _error173, extensionsIndex, _iterator310, _step310, item, _iterator311, _step311, _error174, displayNameIndex, _iterator312, _step312, _item78, _iterator313, _step313, _error175, descriptionIndex, _iterator314, _step314, _item79, _iterator315, _step315, _error176, _iterator316, _step316, _error177, supplementalSemanticIdsIndex, _iterator317, _step317, _item80, _iterator318, _step318, _error178, qualifiersIndex, _iterator319, _step319, _item81, _iterator320, _step320, _error179, embeddedDataSpecificationsIndex, _iterator321, _step321, _item82, _iterator322, _step322, _error180, inputVariablesIndex, _iterator323, _step323, _item83, _iterator324, _step324, _error181, outputVariablesIndex, _iterator325, _step325, _item84, _iterator326, _step326, _error182, inoutputVariablesIndex, _iterator327, _step327, _item85, _iterator328, _step328, _error183;
      return _regeneratorRuntime().wrap(function transformOperationWithContext$(_context22) {
        while (1) switch (_context22.prev = _context22.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context22.next = 3;
              break;
            }
            _context22.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context22.next = 6;
              break;
            }
            _context22.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context22.next = 9;
              break;
            }
            _context22.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context22.next = 12;
              break;
            }
            _context22.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context22.next = 15;
              break;
            }
            _context22.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context22.next = 18;
              break;
            }
            _context22.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context22.next = 21;
              break;
            }
            _context22.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context22.next = 24;
              break;
            }
            _context22.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context22.next = 27;
              break;
            }
            _context22.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context22.next = 30;
              break;
            }
            _context22.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context22.next = 33;
              break;
            }
            _context22.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (idShortsOfVariablesAreUnique(that.inputVariables, that.outputVariables, that.inoutputVariables)) {
              _context22.next = 36;
              break;
            }
            _context22.next = 36;
            return new VerificationError("Constraint AASd-134: For an Operation the ID-short of all " + "values of input, output and in/output variables.");
          case 36:
            if (!(that.inputVariables !== null) || that.inputVariables.length >= 1) {
              _context22.next = 39;
              break;
            }
            _context22.next = 39;
            return new VerificationError("Input variables must be either not set or have at least one " + "item.");
          case 39:
            if (!(that.outputVariables !== null) || that.outputVariables.length >= 1) {
              _context22.next = 42;
              break;
            }
            _context22.next = 42;
            return new VerificationError("Output variables must be either not set or have at least " + "one item.");
          case 42:
            if (!(that.inoutputVariables !== null) || that.inoutputVariables.length >= 1) {
              _context22.next = 45;
              break;
            }
            _context22.next = 45;
            return new VerificationError("Inoutput variables must be either not set or have at least " + "one item.");
          case 45:
            if (!(that.category !== null)) {
              _context22.next = 64;
              break;
            }
            _iterator308 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context22.prev = 47;
            _iterator308.s();
          case 49:
            if ((_step308 = _iterator308.n()).done) {
              _context22.next = 56;
              break;
            }
            error = _step308.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context22.next = 54;
            return error;
          case 54:
            _context22.next = 49;
            break;
          case 56:
            _context22.next = 61;
            break;
          case 58:
            _context22.prev = 58;
            _context22.t0 = _context22["catch"](47);
            _iterator308.e(_context22.t0);
          case 61:
            _context22.prev = 61;
            _iterator308.f();
            return _context22.finish(61);
          case 64:
            if (!(that.idShort !== null)) {
              _context22.next = 83;
              break;
            }
            _iterator309 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context22.prev = 66;
            _iterator309.s();
          case 68:
            if ((_step309 = _iterator309.n()).done) {
              _context22.next = 75;
              break;
            }
            _error173 = _step309.value;
            _error173.path.prepend(new PropertySegment(that, "idShort"));
            _context22.next = 73;
            return _error173;
          case 73:
            _context22.next = 68;
            break;
          case 75:
            _context22.next = 80;
            break;
          case 77:
            _context22.prev = 77;
            _context22.t1 = _context22["catch"](66);
            _iterator309.e(_context22.t1);
          case 80:
            _context22.prev = 80;
            _iterator309.f();
            return _context22.finish(80);
          case 83:
            if (!(context === true)) {
              _context22.next = 436;
              break;
            }
            if (!(that.extensions !== null)) {
              _context22.next = 121;
              break;
            }
            extensionsIndex = 0;
            _iterator310 = _createForOfIteratorHelper(that.extensions);
            _context22.prev = 87;
            _iterator310.s();
          case 89:
            if ((_step310 = _iterator310.n()).done) {
              _context22.next = 113;
              break;
            }
            item = _step310.value;
            _iterator311 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context22.prev = 92;
            _iterator311.s();
          case 94:
            if ((_step311 = _iterator311.n()).done) {
              _context22.next = 102;
              break;
            }
            _error174 = _step311.value;
            _error174.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error174.path.prepend(new PropertySegment(that, "extensions"));
            _context22.next = 100;
            return _error174;
          case 100:
            _context22.next = 94;
            break;
          case 102:
            _context22.next = 107;
            break;
          case 104:
            _context22.prev = 104;
            _context22.t2 = _context22["catch"](92);
            _iterator311.e(_context22.t2);
          case 107:
            _context22.prev = 107;
            _iterator311.f();
            return _context22.finish(107);
          case 110:
            extensionsIndex++;
          case 111:
            _context22.next = 89;
            break;
          case 113:
            _context22.next = 118;
            break;
          case 115:
            _context22.prev = 115;
            _context22.t3 = _context22["catch"](87);
            _iterator310.e(_context22.t3);
          case 118:
            _context22.prev = 118;
            _iterator310.f();
            return _context22.finish(118);
          case 121:
            if (!(that.displayName !== null)) {
              _context22.next = 158;
              break;
            }
            displayNameIndex = 0;
            _iterator312 = _createForOfIteratorHelper(that.displayName);
            _context22.prev = 124;
            _iterator312.s();
          case 126:
            if ((_step312 = _iterator312.n()).done) {
              _context22.next = 150;
              break;
            }
            _item78 = _step312.value;
            _iterator313 = _createForOfIteratorHelper(this.transformWithContext(_item78, context));
            _context22.prev = 129;
            _iterator313.s();
          case 131:
            if ((_step313 = _iterator313.n()).done) {
              _context22.next = 139;
              break;
            }
            _error175 = _step313.value;
            _error175.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error175.path.prepend(new PropertySegment(that, "displayName"));
            _context22.next = 137;
            return _error175;
          case 137:
            _context22.next = 131;
            break;
          case 139:
            _context22.next = 144;
            break;
          case 141:
            _context22.prev = 141;
            _context22.t4 = _context22["catch"](129);
            _iterator313.e(_context22.t4);
          case 144:
            _context22.prev = 144;
            _iterator313.f();
            return _context22.finish(144);
          case 147:
            displayNameIndex++;
          case 148:
            _context22.next = 126;
            break;
          case 150:
            _context22.next = 155;
            break;
          case 152:
            _context22.prev = 152;
            _context22.t5 = _context22["catch"](124);
            _iterator312.e(_context22.t5);
          case 155:
            _context22.prev = 155;
            _iterator312.f();
            return _context22.finish(155);
          case 158:
            if (!(that.description !== null)) {
              _context22.next = 195;
              break;
            }
            descriptionIndex = 0;
            _iterator314 = _createForOfIteratorHelper(that.description);
            _context22.prev = 161;
            _iterator314.s();
          case 163:
            if ((_step314 = _iterator314.n()).done) {
              _context22.next = 187;
              break;
            }
            _item79 = _step314.value;
            _iterator315 = _createForOfIteratorHelper(this.transformWithContext(_item79, context));
            _context22.prev = 166;
            _iterator315.s();
          case 168:
            if ((_step315 = _iterator315.n()).done) {
              _context22.next = 176;
              break;
            }
            _error176 = _step315.value;
            _error176.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error176.path.prepend(new PropertySegment(that, "description"));
            _context22.next = 174;
            return _error176;
          case 174:
            _context22.next = 168;
            break;
          case 176:
            _context22.next = 181;
            break;
          case 178:
            _context22.prev = 178;
            _context22.t6 = _context22["catch"](166);
            _iterator315.e(_context22.t6);
          case 181:
            _context22.prev = 181;
            _iterator315.f();
            return _context22.finish(181);
          case 184:
            descriptionIndex++;
          case 185:
            _context22.next = 163;
            break;
          case 187:
            _context22.next = 192;
            break;
          case 189:
            _context22.prev = 189;
            _context22.t7 = _context22["catch"](161);
            _iterator314.e(_context22.t7);
          case 192:
            _context22.prev = 192;
            _iterator314.f();
            return _context22.finish(192);
          case 195:
            if (!(that.semanticId !== null)) {
              _context22.next = 214;
              break;
            }
            _iterator316 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context22.prev = 197;
            _iterator316.s();
          case 199:
            if ((_step316 = _iterator316.n()).done) {
              _context22.next = 206;
              break;
            }
            _error177 = _step316.value;
            _error177.path.prepend(new PropertySegment(that, "semanticId"));
            _context22.next = 204;
            return _error177;
          case 204:
            _context22.next = 199;
            break;
          case 206:
            _context22.next = 211;
            break;
          case 208:
            _context22.prev = 208;
            _context22.t8 = _context22["catch"](197);
            _iterator316.e(_context22.t8);
          case 211:
            _context22.prev = 211;
            _iterator316.f();
            return _context22.finish(211);
          case 214:
            if (!(that.supplementalSemanticIds !== null)) {
              _context22.next = 251;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator317 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context22.prev = 217;
            _iterator317.s();
          case 219:
            if ((_step317 = _iterator317.n()).done) {
              _context22.next = 243;
              break;
            }
            _item80 = _step317.value;
            _iterator318 = _createForOfIteratorHelper(this.transformWithContext(_item80, context));
            _context22.prev = 222;
            _iterator318.s();
          case 224:
            if ((_step318 = _iterator318.n()).done) {
              _context22.next = 232;
              break;
            }
            _error178 = _step318.value;
            _error178.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error178.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context22.next = 230;
            return _error178;
          case 230:
            _context22.next = 224;
            break;
          case 232:
            _context22.next = 237;
            break;
          case 234:
            _context22.prev = 234;
            _context22.t9 = _context22["catch"](222);
            _iterator318.e(_context22.t9);
          case 237:
            _context22.prev = 237;
            _iterator318.f();
            return _context22.finish(237);
          case 240:
            supplementalSemanticIdsIndex++;
          case 241:
            _context22.next = 219;
            break;
          case 243:
            _context22.next = 248;
            break;
          case 245:
            _context22.prev = 245;
            _context22.t10 = _context22["catch"](217);
            _iterator317.e(_context22.t10);
          case 248:
            _context22.prev = 248;
            _iterator317.f();
            return _context22.finish(248);
          case 251:
            if (!(that.qualifiers !== null)) {
              _context22.next = 288;
              break;
            }
            qualifiersIndex = 0;
            _iterator319 = _createForOfIteratorHelper(that.qualifiers);
            _context22.prev = 254;
            _iterator319.s();
          case 256:
            if ((_step319 = _iterator319.n()).done) {
              _context22.next = 280;
              break;
            }
            _item81 = _step319.value;
            _iterator320 = _createForOfIteratorHelper(this.transformWithContext(_item81, context));
            _context22.prev = 259;
            _iterator320.s();
          case 261:
            if ((_step320 = _iterator320.n()).done) {
              _context22.next = 269;
              break;
            }
            _error179 = _step320.value;
            _error179.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error179.path.prepend(new PropertySegment(that, "qualifiers"));
            _context22.next = 267;
            return _error179;
          case 267:
            _context22.next = 261;
            break;
          case 269:
            _context22.next = 274;
            break;
          case 271:
            _context22.prev = 271;
            _context22.t11 = _context22["catch"](259);
            _iterator320.e(_context22.t11);
          case 274:
            _context22.prev = 274;
            _iterator320.f();
            return _context22.finish(274);
          case 277:
            qualifiersIndex++;
          case 278:
            _context22.next = 256;
            break;
          case 280:
            _context22.next = 285;
            break;
          case 282:
            _context22.prev = 282;
            _context22.t12 = _context22["catch"](254);
            _iterator319.e(_context22.t12);
          case 285:
            _context22.prev = 285;
            _iterator319.f();
            return _context22.finish(285);
          case 288:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context22.next = 325;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator321 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context22.prev = 291;
            _iterator321.s();
          case 293:
            if ((_step321 = _iterator321.n()).done) {
              _context22.next = 317;
              break;
            }
            _item82 = _step321.value;
            _iterator322 = _createForOfIteratorHelper(this.transformWithContext(_item82, context));
            _context22.prev = 296;
            _iterator322.s();
          case 298:
            if ((_step322 = _iterator322.n()).done) {
              _context22.next = 306;
              break;
            }
            _error180 = _step322.value;
            _error180.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error180.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context22.next = 304;
            return _error180;
          case 304:
            _context22.next = 298;
            break;
          case 306:
            _context22.next = 311;
            break;
          case 308:
            _context22.prev = 308;
            _context22.t13 = _context22["catch"](296);
            _iterator322.e(_context22.t13);
          case 311:
            _context22.prev = 311;
            _iterator322.f();
            return _context22.finish(311);
          case 314:
            embeddedDataSpecificationsIndex++;
          case 315:
            _context22.next = 293;
            break;
          case 317:
            _context22.next = 322;
            break;
          case 319:
            _context22.prev = 319;
            _context22.t14 = _context22["catch"](291);
            _iterator321.e(_context22.t14);
          case 322:
            _context22.prev = 322;
            _iterator321.f();
            return _context22.finish(322);
          case 325:
            if (!(that.inputVariables !== null)) {
              _context22.next = 362;
              break;
            }
            inputVariablesIndex = 0;
            _iterator323 = _createForOfIteratorHelper(that.inputVariables);
            _context22.prev = 328;
            _iterator323.s();
          case 330:
            if ((_step323 = _iterator323.n()).done) {
              _context22.next = 354;
              break;
            }
            _item83 = _step323.value;
            _iterator324 = _createForOfIteratorHelper(this.transformWithContext(_item83, context));
            _context22.prev = 333;
            _iterator324.s();
          case 335:
            if ((_step324 = _iterator324.n()).done) {
              _context22.next = 343;
              break;
            }
            _error181 = _step324.value;
            _error181.path.prepend(new IndexSegment(that.inputVariables, inputVariablesIndex));
            _error181.path.prepend(new PropertySegment(that, "inputVariables"));
            _context22.next = 341;
            return _error181;
          case 341:
            _context22.next = 335;
            break;
          case 343:
            _context22.next = 348;
            break;
          case 345:
            _context22.prev = 345;
            _context22.t15 = _context22["catch"](333);
            _iterator324.e(_context22.t15);
          case 348:
            _context22.prev = 348;
            _iterator324.f();
            return _context22.finish(348);
          case 351:
            inputVariablesIndex++;
          case 352:
            _context22.next = 330;
            break;
          case 354:
            _context22.next = 359;
            break;
          case 356:
            _context22.prev = 356;
            _context22.t16 = _context22["catch"](328);
            _iterator323.e(_context22.t16);
          case 359:
            _context22.prev = 359;
            _iterator323.f();
            return _context22.finish(359);
          case 362:
            if (!(that.outputVariables !== null)) {
              _context22.next = 399;
              break;
            }
            outputVariablesIndex = 0;
            _iterator325 = _createForOfIteratorHelper(that.outputVariables);
            _context22.prev = 365;
            _iterator325.s();
          case 367:
            if ((_step325 = _iterator325.n()).done) {
              _context22.next = 391;
              break;
            }
            _item84 = _step325.value;
            _iterator326 = _createForOfIteratorHelper(this.transformWithContext(_item84, context));
            _context22.prev = 370;
            _iterator326.s();
          case 372:
            if ((_step326 = _iterator326.n()).done) {
              _context22.next = 380;
              break;
            }
            _error182 = _step326.value;
            _error182.path.prepend(new IndexSegment(that.outputVariables, outputVariablesIndex));
            _error182.path.prepend(new PropertySegment(that, "outputVariables"));
            _context22.next = 378;
            return _error182;
          case 378:
            _context22.next = 372;
            break;
          case 380:
            _context22.next = 385;
            break;
          case 382:
            _context22.prev = 382;
            _context22.t17 = _context22["catch"](370);
            _iterator326.e(_context22.t17);
          case 385:
            _context22.prev = 385;
            _iterator326.f();
            return _context22.finish(385);
          case 388:
            outputVariablesIndex++;
          case 389:
            _context22.next = 367;
            break;
          case 391:
            _context22.next = 396;
            break;
          case 393:
            _context22.prev = 393;
            _context22.t18 = _context22["catch"](365);
            _iterator325.e(_context22.t18);
          case 396:
            _context22.prev = 396;
            _iterator325.f();
            return _context22.finish(396);
          case 399:
            if (!(that.inoutputVariables !== null)) {
              _context22.next = 436;
              break;
            }
            inoutputVariablesIndex = 0;
            _iterator327 = _createForOfIteratorHelper(that.inoutputVariables);
            _context22.prev = 402;
            _iterator327.s();
          case 404:
            if ((_step327 = _iterator327.n()).done) {
              _context22.next = 428;
              break;
            }
            _item85 = _step327.value;
            _iterator328 = _createForOfIteratorHelper(this.transformWithContext(_item85, context));
            _context22.prev = 407;
            _iterator328.s();
          case 409:
            if ((_step328 = _iterator328.n()).done) {
              _context22.next = 417;
              break;
            }
            _error183 = _step328.value;
            _error183.path.prepend(new IndexSegment(that.inoutputVariables, inoutputVariablesIndex));
            _error183.path.prepend(new PropertySegment(that, "inoutputVariables"));
            _context22.next = 415;
            return _error183;
          case 415:
            _context22.next = 409;
            break;
          case 417:
            _context22.next = 422;
            break;
          case 419:
            _context22.prev = 419;
            _context22.t19 = _context22["catch"](407);
            _iterator328.e(_context22.t19);
          case 422:
            _context22.prev = 422;
            _iterator328.f();
            return _context22.finish(422);
          case 425:
            inoutputVariablesIndex++;
          case 426:
            _context22.next = 404;
            break;
          case 428:
            _context22.next = 433;
            break;
          case 430:
            _context22.prev = 430;
            _context22.t20 = _context22["catch"](402);
            _iterator327.e(_context22.t20);
          case 433:
            _context22.prev = 433;
            _iterator327.f();
            return _context22.finish(433);
          case 436:
          case "end":
            return _context22.stop();
        }
      }, transformOperationWithContext, this, [[47, 58, 61, 64], [66, 77, 80, 83], [87, 115, 118, 121], [92, 104, 107, 110], [124, 152, 155, 158], [129, 141, 144, 147], [161, 189, 192, 195], [166, 178, 181, 184], [197, 208, 211, 214], [217, 245, 248, 251], [222, 234, 237, 240], [254, 282, 285, 288], [259, 271, 274, 277], [291, 319, 322, 325], [296, 308, 311, 314], [328, 356, 359, 362], [333, 345, 348, 351], [365, 393, 396, 399], [370, 382, 385, 388], [402, 430, 433, 436], [407, 419, 422, 425]]);
    })
  }, {
    key: "transformOperationVariableWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformOperationVariableWithContext(that, context) {
      var _iterator329, _step329, error;
      return _regeneratorRuntime().wrap(function transformOperationVariableWithContext$(_context23) {
        while (1) switch (_context23.prev = _context23.next) {
          case 0:
            if (that.value.idShort !== null) {
              _context23.next = 3;
              break;
            }
            _context23.next = 3;
            return new VerificationError("Value must have the ID-short specified according to " + "Constraint AASd-117 (ID-short of Referables not being " + "a direct child of a Submodel element list shall be " + "specified).");
          case 3:
            if (!(context === true)) {
              _context23.next = 22;
              break;
            }
            _iterator329 = _createForOfIteratorHelper(this.transformWithContext(that.value, context));
            _context23.prev = 5;
            _iterator329.s();
          case 7:
            if ((_step329 = _iterator329.n()).done) {
              _context23.next = 14;
              break;
            }
            error = _step329.value;
            error.path.prepend(new PropertySegment(that, "value"));
            _context23.next = 12;
            return error;
          case 12:
            _context23.next = 7;
            break;
          case 14:
            _context23.next = 19;
            break;
          case 16:
            _context23.prev = 16;
            _context23.t0 = _context23["catch"](5);
            _iterator329.e(_context23.t0);
          case 19:
            _context23.prev = 19;
            _iterator329.f();
            return _context23.finish(19);
          case 22:
          case "end":
            return _context23.stop();
        }
      }, transformOperationVariableWithContext, this, [[5, 16, 19, 22]]);
    })
  }, {
    key: "transformCapabilityWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformCapabilityWithContext(that, context) {
      var _iterator330, _step330, error, _iterator331, _step331, _error184, extensionsIndex, _iterator332, _step332, item, _iterator333, _step333, _error185, displayNameIndex, _iterator334, _step334, _item86, _iterator335, _step335, _error186, descriptionIndex, _iterator336, _step336, _item87, _iterator337, _step337, _error187, _iterator338, _step338, _error188, supplementalSemanticIdsIndex, _iterator339, _step339, _item88, _iterator340, _step340, _error189, qualifiersIndex, _iterator341, _step341, _item89, _iterator342, _step342, _error190, embeddedDataSpecificationsIndex, _iterator343, _step343, _item90, _iterator344, _step344, _error191;
      return _regeneratorRuntime().wrap(function transformCapabilityWithContext$(_context24) {
        while (1) switch (_context24.prev = _context24.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context24.next = 3;
              break;
            }
            _context24.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context24.next = 6;
              break;
            }
            _context24.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context24.next = 9;
              break;
            }
            _context24.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context24.next = 12;
              break;
            }
            _context24.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context24.next = 15;
              break;
            }
            _context24.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context24.next = 18;
              break;
            }
            _context24.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context24.next = 21;
              break;
            }
            _context24.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context24.next = 24;
              break;
            }
            _context24.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context24.next = 27;
              break;
            }
            _context24.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context24.next = 30;
              break;
            }
            _context24.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context24.next = 33;
              break;
            }
            _context24.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null)) {
              _context24.next = 52;
              break;
            }
            _iterator330 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context24.prev = 35;
            _iterator330.s();
          case 37:
            if ((_step330 = _iterator330.n()).done) {
              _context24.next = 44;
              break;
            }
            error = _step330.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context24.next = 42;
            return error;
          case 42:
            _context24.next = 37;
            break;
          case 44:
            _context24.next = 49;
            break;
          case 46:
            _context24.prev = 46;
            _context24.t0 = _context24["catch"](35);
            _iterator330.e(_context24.t0);
          case 49:
            _context24.prev = 49;
            _iterator330.f();
            return _context24.finish(49);
          case 52:
            if (!(that.idShort !== null)) {
              _context24.next = 71;
              break;
            }
            _iterator331 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context24.prev = 54;
            _iterator331.s();
          case 56:
            if ((_step331 = _iterator331.n()).done) {
              _context24.next = 63;
              break;
            }
            _error184 = _step331.value;
            _error184.path.prepend(new PropertySegment(that, "idShort"));
            _context24.next = 61;
            return _error184;
          case 61:
            _context24.next = 56;
            break;
          case 63:
            _context24.next = 68;
            break;
          case 65:
            _context24.prev = 65;
            _context24.t1 = _context24["catch"](54);
            _iterator331.e(_context24.t1);
          case 68:
            _context24.prev = 68;
            _iterator331.f();
            return _context24.finish(68);
          case 71:
            if (!(context === true)) {
              _context24.next = 313;
              break;
            }
            if (!(that.extensions !== null)) {
              _context24.next = 109;
              break;
            }
            extensionsIndex = 0;
            _iterator332 = _createForOfIteratorHelper(that.extensions);
            _context24.prev = 75;
            _iterator332.s();
          case 77:
            if ((_step332 = _iterator332.n()).done) {
              _context24.next = 101;
              break;
            }
            item = _step332.value;
            _iterator333 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context24.prev = 80;
            _iterator333.s();
          case 82:
            if ((_step333 = _iterator333.n()).done) {
              _context24.next = 90;
              break;
            }
            _error185 = _step333.value;
            _error185.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error185.path.prepend(new PropertySegment(that, "extensions"));
            _context24.next = 88;
            return _error185;
          case 88:
            _context24.next = 82;
            break;
          case 90:
            _context24.next = 95;
            break;
          case 92:
            _context24.prev = 92;
            _context24.t2 = _context24["catch"](80);
            _iterator333.e(_context24.t2);
          case 95:
            _context24.prev = 95;
            _iterator333.f();
            return _context24.finish(95);
          case 98:
            extensionsIndex++;
          case 99:
            _context24.next = 77;
            break;
          case 101:
            _context24.next = 106;
            break;
          case 103:
            _context24.prev = 103;
            _context24.t3 = _context24["catch"](75);
            _iterator332.e(_context24.t3);
          case 106:
            _context24.prev = 106;
            _iterator332.f();
            return _context24.finish(106);
          case 109:
            if (!(that.displayName !== null)) {
              _context24.next = 146;
              break;
            }
            displayNameIndex = 0;
            _iterator334 = _createForOfIteratorHelper(that.displayName);
            _context24.prev = 112;
            _iterator334.s();
          case 114:
            if ((_step334 = _iterator334.n()).done) {
              _context24.next = 138;
              break;
            }
            _item86 = _step334.value;
            _iterator335 = _createForOfIteratorHelper(this.transformWithContext(_item86, context));
            _context24.prev = 117;
            _iterator335.s();
          case 119:
            if ((_step335 = _iterator335.n()).done) {
              _context24.next = 127;
              break;
            }
            _error186 = _step335.value;
            _error186.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error186.path.prepend(new PropertySegment(that, "displayName"));
            _context24.next = 125;
            return _error186;
          case 125:
            _context24.next = 119;
            break;
          case 127:
            _context24.next = 132;
            break;
          case 129:
            _context24.prev = 129;
            _context24.t4 = _context24["catch"](117);
            _iterator335.e(_context24.t4);
          case 132:
            _context24.prev = 132;
            _iterator335.f();
            return _context24.finish(132);
          case 135:
            displayNameIndex++;
          case 136:
            _context24.next = 114;
            break;
          case 138:
            _context24.next = 143;
            break;
          case 140:
            _context24.prev = 140;
            _context24.t5 = _context24["catch"](112);
            _iterator334.e(_context24.t5);
          case 143:
            _context24.prev = 143;
            _iterator334.f();
            return _context24.finish(143);
          case 146:
            if (!(that.description !== null)) {
              _context24.next = 183;
              break;
            }
            descriptionIndex = 0;
            _iterator336 = _createForOfIteratorHelper(that.description);
            _context24.prev = 149;
            _iterator336.s();
          case 151:
            if ((_step336 = _iterator336.n()).done) {
              _context24.next = 175;
              break;
            }
            _item87 = _step336.value;
            _iterator337 = _createForOfIteratorHelper(this.transformWithContext(_item87, context));
            _context24.prev = 154;
            _iterator337.s();
          case 156:
            if ((_step337 = _iterator337.n()).done) {
              _context24.next = 164;
              break;
            }
            _error187 = _step337.value;
            _error187.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error187.path.prepend(new PropertySegment(that, "description"));
            _context24.next = 162;
            return _error187;
          case 162:
            _context24.next = 156;
            break;
          case 164:
            _context24.next = 169;
            break;
          case 166:
            _context24.prev = 166;
            _context24.t6 = _context24["catch"](154);
            _iterator337.e(_context24.t6);
          case 169:
            _context24.prev = 169;
            _iterator337.f();
            return _context24.finish(169);
          case 172:
            descriptionIndex++;
          case 173:
            _context24.next = 151;
            break;
          case 175:
            _context24.next = 180;
            break;
          case 177:
            _context24.prev = 177;
            _context24.t7 = _context24["catch"](149);
            _iterator336.e(_context24.t7);
          case 180:
            _context24.prev = 180;
            _iterator336.f();
            return _context24.finish(180);
          case 183:
            if (!(that.semanticId !== null)) {
              _context24.next = 202;
              break;
            }
            _iterator338 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context24.prev = 185;
            _iterator338.s();
          case 187:
            if ((_step338 = _iterator338.n()).done) {
              _context24.next = 194;
              break;
            }
            _error188 = _step338.value;
            _error188.path.prepend(new PropertySegment(that, "semanticId"));
            _context24.next = 192;
            return _error188;
          case 192:
            _context24.next = 187;
            break;
          case 194:
            _context24.next = 199;
            break;
          case 196:
            _context24.prev = 196;
            _context24.t8 = _context24["catch"](185);
            _iterator338.e(_context24.t8);
          case 199:
            _context24.prev = 199;
            _iterator338.f();
            return _context24.finish(199);
          case 202:
            if (!(that.supplementalSemanticIds !== null)) {
              _context24.next = 239;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator339 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context24.prev = 205;
            _iterator339.s();
          case 207:
            if ((_step339 = _iterator339.n()).done) {
              _context24.next = 231;
              break;
            }
            _item88 = _step339.value;
            _iterator340 = _createForOfIteratorHelper(this.transformWithContext(_item88, context));
            _context24.prev = 210;
            _iterator340.s();
          case 212:
            if ((_step340 = _iterator340.n()).done) {
              _context24.next = 220;
              break;
            }
            _error189 = _step340.value;
            _error189.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error189.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context24.next = 218;
            return _error189;
          case 218:
            _context24.next = 212;
            break;
          case 220:
            _context24.next = 225;
            break;
          case 222:
            _context24.prev = 222;
            _context24.t9 = _context24["catch"](210);
            _iterator340.e(_context24.t9);
          case 225:
            _context24.prev = 225;
            _iterator340.f();
            return _context24.finish(225);
          case 228:
            supplementalSemanticIdsIndex++;
          case 229:
            _context24.next = 207;
            break;
          case 231:
            _context24.next = 236;
            break;
          case 233:
            _context24.prev = 233;
            _context24.t10 = _context24["catch"](205);
            _iterator339.e(_context24.t10);
          case 236:
            _context24.prev = 236;
            _iterator339.f();
            return _context24.finish(236);
          case 239:
            if (!(that.qualifiers !== null)) {
              _context24.next = 276;
              break;
            }
            qualifiersIndex = 0;
            _iterator341 = _createForOfIteratorHelper(that.qualifiers);
            _context24.prev = 242;
            _iterator341.s();
          case 244:
            if ((_step341 = _iterator341.n()).done) {
              _context24.next = 268;
              break;
            }
            _item89 = _step341.value;
            _iterator342 = _createForOfIteratorHelper(this.transformWithContext(_item89, context));
            _context24.prev = 247;
            _iterator342.s();
          case 249:
            if ((_step342 = _iterator342.n()).done) {
              _context24.next = 257;
              break;
            }
            _error190 = _step342.value;
            _error190.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error190.path.prepend(new PropertySegment(that, "qualifiers"));
            _context24.next = 255;
            return _error190;
          case 255:
            _context24.next = 249;
            break;
          case 257:
            _context24.next = 262;
            break;
          case 259:
            _context24.prev = 259;
            _context24.t11 = _context24["catch"](247);
            _iterator342.e(_context24.t11);
          case 262:
            _context24.prev = 262;
            _iterator342.f();
            return _context24.finish(262);
          case 265:
            qualifiersIndex++;
          case 266:
            _context24.next = 244;
            break;
          case 268:
            _context24.next = 273;
            break;
          case 270:
            _context24.prev = 270;
            _context24.t12 = _context24["catch"](242);
            _iterator341.e(_context24.t12);
          case 273:
            _context24.prev = 273;
            _iterator341.f();
            return _context24.finish(273);
          case 276:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context24.next = 313;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator343 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context24.prev = 279;
            _iterator343.s();
          case 281:
            if ((_step343 = _iterator343.n()).done) {
              _context24.next = 305;
              break;
            }
            _item90 = _step343.value;
            _iterator344 = _createForOfIteratorHelper(this.transformWithContext(_item90, context));
            _context24.prev = 284;
            _iterator344.s();
          case 286:
            if ((_step344 = _iterator344.n()).done) {
              _context24.next = 294;
              break;
            }
            _error191 = _step344.value;
            _error191.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error191.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context24.next = 292;
            return _error191;
          case 292:
            _context24.next = 286;
            break;
          case 294:
            _context24.next = 299;
            break;
          case 296:
            _context24.prev = 296;
            _context24.t13 = _context24["catch"](284);
            _iterator344.e(_context24.t13);
          case 299:
            _context24.prev = 299;
            _iterator344.f();
            return _context24.finish(299);
          case 302:
            embeddedDataSpecificationsIndex++;
          case 303:
            _context24.next = 281;
            break;
          case 305:
            _context24.next = 310;
            break;
          case 307:
            _context24.prev = 307;
            _context24.t14 = _context24["catch"](279);
            _iterator343.e(_context24.t14);
          case 310:
            _context24.prev = 310;
            _iterator343.f();
            return _context24.finish(310);
          case 313:
          case "end":
            return _context24.stop();
        }
      }, transformCapabilityWithContext, this, [[35, 46, 49, 52], [54, 65, 68, 71], [75, 103, 106, 109], [80, 92, 95, 98], [112, 140, 143, 146], [117, 129, 132, 135], [149, 177, 180, 183], [154, 166, 169, 172], [185, 196, 199, 202], [205, 233, 236, 239], [210, 222, 225, 228], [242, 270, 273, 276], [247, 259, 262, 265], [279, 307, 310, 313], [284, 296, 299, 302]]);
    })
  }, {
    key: "transformConceptDescriptionWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformConceptDescriptionWithContext(that, context) {
      var _iterator345, _step345, error, _iterator346, _step346, _error192, _iterator347, _step347, _error199, extensionsIndex, _iterator348, _step348, item, _iterator349, _step349, _error193, displayNameIndex, _iterator350, _step350, _item91, _iterator351, _step351, _error194, descriptionIndex, _iterator352, _step352, _item92, _iterator353, _step353, _error195, _iterator354, _step354, _error196, embeddedDataSpecificationsIndex, _iterator355, _step355, _item93, _iterator356, _step356, _error197, isCaseOfIndex, _iterator357, _step357, _item94, _iterator358, _step358, _error198;
      return _regeneratorRuntime().wrap(function transformConceptDescriptionWithContext$(_context25) {
        while (1) switch (_context25.prev = _context25.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context25.next = 3;
              break;
            }
            _context25.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context25.next = 6;
              break;
            }
            _context25.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context25.next = 9;
              break;
            }
            _context25.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context25.next = 12;
              break;
            }
            _context25.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context25.next = 15;
              break;
            }
            _context25.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context25.next = 18;
              break;
            }
            _context25.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context25.next = 21;
              break;
            }
            _context25.next = 21;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 21:
            if (!(that.isCaseOf !== null) || that.isCaseOf.length >= 1) {
              _context25.next = 24;
              break;
            }
            _context25.next = 24;
            return new VerificationError("Is-case-of must be either not set or have at least one item.");
          case 24:
            if (!(that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(that.embeddedDataSpecifications) || dataSpecificationIec61360sHaveValue(that.embeddedDataSpecifications)) {
              _context25.next = 27;
              break;
            }
            _context25.next = 27;
            return new VerificationError("Constraint AASc-3a-008: For a concept description using " + "data specification template IEC 61360, the definition is " + "mandatory and shall be defined at least in English. " + "Exception: The concept description describes a value.");
          case 27:
            if (!(that.category !== null && that.category == "QUALIFIER_TYPE" && that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sHaveDataType(that.embeddedDataSpecifications)) {
              _context25.next = 30;
              break;
            }
            _context25.next = 30;
            return new VerificationError("Constraint AASc-3a-007: For a concept description with " + "category QUALIFIER_TYPE using data specification IEC 61360, " + "the data type of the data specification is mandatory and " + "shall be defined.");
          case 30:
            if (!(that.category !== null && that.category == "DOCUMENT" && that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sForDocumentHaveAppropriateDataType(that.embeddedDataSpecifications)) {
              _context25.next = 33;
              break;
            }
            _context25.next = 33;
            return new VerificationError("Constraint AASc-3a-006: For a concept description with " + "category DOCUMENT using data specification IEC 61360, " + "the data type of the data specification shall be one of: " + "FILE, BLOB, HTML.");
          case 33:
            if (!(that.category !== null && that.category == "REFERENCE" && that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sForReferenceHaveAppropriateDataType(that.embeddedDataSpecifications)) {
              _context25.next = 36;
              break;
            }
            _context25.next = 36;
            return new VerificationError("Constraint AASc-3a-005: For a concept description with " + "category REFERENCE using data specification IEC 61360, " + "the data type of the data specification shall be one of: " + "STRING, IRI, IRDI.");
          case 36:
            if (!(that.category !== null && (that.category == "PROPERTY" || that.category == "VALUE") && that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(that.embeddedDataSpecifications)) {
              _context25.next = 39;
              break;
            }
            _context25.next = 39;
            return new VerificationError("Constraint AASc-3a-004: For a concept description with " + "category PROPERTY or VALUE using data specification IEC " + "61360, the data type of the data specification is mandatory " + "and shall be one of: DATE, STRING, STRING_TRANSLATABLE, " + "INTEGER_MEASURE, INTEGER_COUNT, INTEGER_CURRENCY, " + "REAL_MEASURE, REAL_COUNT, REAL_CURRENCY, BOOLEAN, RATIONAL, " + "RATIONAL_MEASURE, TIME, TIMESTAMP.");
          case 39:
            if (!(that.category !== null)) {
              _context25.next = 58;
              break;
            }
            _iterator345 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context25.prev = 41;
            _iterator345.s();
          case 43:
            if ((_step345 = _iterator345.n()).done) {
              _context25.next = 50;
              break;
            }
            error = _step345.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context25.next = 48;
            return error;
          case 48:
            _context25.next = 43;
            break;
          case 50:
            _context25.next = 55;
            break;
          case 52:
            _context25.prev = 52;
            _context25.t0 = _context25["catch"](41);
            _iterator345.e(_context25.t0);
          case 55:
            _context25.prev = 55;
            _iterator345.f();
            return _context25.finish(55);
          case 58:
            if (!(that.idShort !== null)) {
              _context25.next = 77;
              break;
            }
            _iterator346 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context25.prev = 60;
            _iterator346.s();
          case 62:
            if ((_step346 = _iterator346.n()).done) {
              _context25.next = 69;
              break;
            }
            _error192 = _step346.value;
            _error192.path.prepend(new PropertySegment(that, "idShort"));
            _context25.next = 67;
            return _error192;
          case 67:
            _context25.next = 62;
            break;
          case 69:
            _context25.next = 74;
            break;
          case 71:
            _context25.prev = 71;
            _context25.t1 = _context25["catch"](60);
            _iterator346.e(_context25.t1);
          case 74:
            _context25.prev = 74;
            _iterator346.f();
            return _context25.finish(74);
          case 77:
            _iterator347 = _createForOfIteratorHelper(verifyIdentifier(that.id));
            _context25.prev = 78;
            _iterator347.s();
          case 80:
            if ((_step347 = _iterator347.n()).done) {
              _context25.next = 87;
              break;
            }
            _error199 = _step347.value;
            _error199.path.prepend(new PropertySegment(that, "id"));
            _context25.next = 85;
            return _error199;
          case 85:
            _context25.next = 80;
            break;
          case 87:
            _context25.next = 92;
            break;
          case 89:
            _context25.prev = 89;
            _context25.t2 = _context25["catch"](78);
            _iterator347.e(_context25.t2);
          case 92:
            _context25.prev = 92;
            _iterator347.f();
            return _context25.finish(92);
          case 95:
            if (!(context === true)) {
              _context25.next = 300;
              break;
            }
            if (!(that.extensions !== null)) {
              _context25.next = 133;
              break;
            }
            extensionsIndex = 0;
            _iterator348 = _createForOfIteratorHelper(that.extensions);
            _context25.prev = 99;
            _iterator348.s();
          case 101:
            if ((_step348 = _iterator348.n()).done) {
              _context25.next = 125;
              break;
            }
            item = _step348.value;
            _iterator349 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context25.prev = 104;
            _iterator349.s();
          case 106:
            if ((_step349 = _iterator349.n()).done) {
              _context25.next = 114;
              break;
            }
            _error193 = _step349.value;
            _error193.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error193.path.prepend(new PropertySegment(that, "extensions"));
            _context25.next = 112;
            return _error193;
          case 112:
            _context25.next = 106;
            break;
          case 114:
            _context25.next = 119;
            break;
          case 116:
            _context25.prev = 116;
            _context25.t3 = _context25["catch"](104);
            _iterator349.e(_context25.t3);
          case 119:
            _context25.prev = 119;
            _iterator349.f();
            return _context25.finish(119);
          case 122:
            extensionsIndex++;
          case 123:
            _context25.next = 101;
            break;
          case 125:
            _context25.next = 130;
            break;
          case 127:
            _context25.prev = 127;
            _context25.t4 = _context25["catch"](99);
            _iterator348.e(_context25.t4);
          case 130:
            _context25.prev = 130;
            _iterator348.f();
            return _context25.finish(130);
          case 133:
            if (!(that.displayName !== null)) {
              _context25.next = 170;
              break;
            }
            displayNameIndex = 0;
            _iterator350 = _createForOfIteratorHelper(that.displayName);
            _context25.prev = 136;
            _iterator350.s();
          case 138:
            if ((_step350 = _iterator350.n()).done) {
              _context25.next = 162;
              break;
            }
            _item91 = _step350.value;
            _iterator351 = _createForOfIteratorHelper(this.transformWithContext(_item91, context));
            _context25.prev = 141;
            _iterator351.s();
          case 143:
            if ((_step351 = _iterator351.n()).done) {
              _context25.next = 151;
              break;
            }
            _error194 = _step351.value;
            _error194.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error194.path.prepend(new PropertySegment(that, "displayName"));
            _context25.next = 149;
            return _error194;
          case 149:
            _context25.next = 143;
            break;
          case 151:
            _context25.next = 156;
            break;
          case 153:
            _context25.prev = 153;
            _context25.t5 = _context25["catch"](141);
            _iterator351.e(_context25.t5);
          case 156:
            _context25.prev = 156;
            _iterator351.f();
            return _context25.finish(156);
          case 159:
            displayNameIndex++;
          case 160:
            _context25.next = 138;
            break;
          case 162:
            _context25.next = 167;
            break;
          case 164:
            _context25.prev = 164;
            _context25.t6 = _context25["catch"](136);
            _iterator350.e(_context25.t6);
          case 167:
            _context25.prev = 167;
            _iterator350.f();
            return _context25.finish(167);
          case 170:
            if (!(that.description !== null)) {
              _context25.next = 207;
              break;
            }
            descriptionIndex = 0;
            _iterator352 = _createForOfIteratorHelper(that.description);
            _context25.prev = 173;
            _iterator352.s();
          case 175:
            if ((_step352 = _iterator352.n()).done) {
              _context25.next = 199;
              break;
            }
            _item92 = _step352.value;
            _iterator353 = _createForOfIteratorHelper(this.transformWithContext(_item92, context));
            _context25.prev = 178;
            _iterator353.s();
          case 180:
            if ((_step353 = _iterator353.n()).done) {
              _context25.next = 188;
              break;
            }
            _error195 = _step353.value;
            _error195.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error195.path.prepend(new PropertySegment(that, "description"));
            _context25.next = 186;
            return _error195;
          case 186:
            _context25.next = 180;
            break;
          case 188:
            _context25.next = 193;
            break;
          case 190:
            _context25.prev = 190;
            _context25.t7 = _context25["catch"](178);
            _iterator353.e(_context25.t7);
          case 193:
            _context25.prev = 193;
            _iterator353.f();
            return _context25.finish(193);
          case 196:
            descriptionIndex++;
          case 197:
            _context25.next = 175;
            break;
          case 199:
            _context25.next = 204;
            break;
          case 201:
            _context25.prev = 201;
            _context25.t8 = _context25["catch"](173);
            _iterator352.e(_context25.t8);
          case 204:
            _context25.prev = 204;
            _iterator352.f();
            return _context25.finish(204);
          case 207:
            if (!(that.administration !== null)) {
              _context25.next = 226;
              break;
            }
            _iterator354 = _createForOfIteratorHelper(this.transformWithContext(that.administration, context));
            _context25.prev = 209;
            _iterator354.s();
          case 211:
            if ((_step354 = _iterator354.n()).done) {
              _context25.next = 218;
              break;
            }
            _error196 = _step354.value;
            _error196.path.prepend(new PropertySegment(that, "administration"));
            _context25.next = 216;
            return _error196;
          case 216:
            _context25.next = 211;
            break;
          case 218:
            _context25.next = 223;
            break;
          case 220:
            _context25.prev = 220;
            _context25.t9 = _context25["catch"](209);
            _iterator354.e(_context25.t9);
          case 223:
            _context25.prev = 223;
            _iterator354.f();
            return _context25.finish(223);
          case 226:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context25.next = 263;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator355 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context25.prev = 229;
            _iterator355.s();
          case 231:
            if ((_step355 = _iterator355.n()).done) {
              _context25.next = 255;
              break;
            }
            _item93 = _step355.value;
            _iterator356 = _createForOfIteratorHelper(this.transformWithContext(_item93, context));
            _context25.prev = 234;
            _iterator356.s();
          case 236:
            if ((_step356 = _iterator356.n()).done) {
              _context25.next = 244;
              break;
            }
            _error197 = _step356.value;
            _error197.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error197.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context25.next = 242;
            return _error197;
          case 242:
            _context25.next = 236;
            break;
          case 244:
            _context25.next = 249;
            break;
          case 246:
            _context25.prev = 246;
            _context25.t10 = _context25["catch"](234);
            _iterator356.e(_context25.t10);
          case 249:
            _context25.prev = 249;
            _iterator356.f();
            return _context25.finish(249);
          case 252:
            embeddedDataSpecificationsIndex++;
          case 253:
            _context25.next = 231;
            break;
          case 255:
            _context25.next = 260;
            break;
          case 257:
            _context25.prev = 257;
            _context25.t11 = _context25["catch"](229);
            _iterator355.e(_context25.t11);
          case 260:
            _context25.prev = 260;
            _iterator355.f();
            return _context25.finish(260);
          case 263:
            if (!(that.isCaseOf !== null)) {
              _context25.next = 300;
              break;
            }
            isCaseOfIndex = 0;
            _iterator357 = _createForOfIteratorHelper(that.isCaseOf);
            _context25.prev = 266;
            _iterator357.s();
          case 268:
            if ((_step357 = _iterator357.n()).done) {
              _context25.next = 292;
              break;
            }
            _item94 = _step357.value;
            _iterator358 = _createForOfIteratorHelper(this.transformWithContext(_item94, context));
            _context25.prev = 271;
            _iterator358.s();
          case 273:
            if ((_step358 = _iterator358.n()).done) {
              _context25.next = 281;
              break;
            }
            _error198 = _step358.value;
            _error198.path.prepend(new IndexSegment(that.isCaseOf, isCaseOfIndex));
            _error198.path.prepend(new PropertySegment(that, "isCaseOf"));
            _context25.next = 279;
            return _error198;
          case 279:
            _context25.next = 273;
            break;
          case 281:
            _context25.next = 286;
            break;
          case 283:
            _context25.prev = 283;
            _context25.t12 = _context25["catch"](271);
            _iterator358.e(_context25.t12);
          case 286:
            _context25.prev = 286;
            _iterator358.f();
            return _context25.finish(286);
          case 289:
            isCaseOfIndex++;
          case 290:
            _context25.next = 268;
            break;
          case 292:
            _context25.next = 297;
            break;
          case 294:
            _context25.prev = 294;
            _context25.t13 = _context25["catch"](266);
            _iterator357.e(_context25.t13);
          case 297:
            _context25.prev = 297;
            _iterator357.f();
            return _context25.finish(297);
          case 300:
          case "end":
            return _context25.stop();
        }
      }, transformConceptDescriptionWithContext, this, [[41, 52, 55, 58], [60, 71, 74, 77], [78, 89, 92, 95], [99, 127, 130, 133], [104, 116, 119, 122], [136, 164, 167, 170], [141, 153, 156, 159], [173, 201, 204, 207], [178, 190, 193, 196], [209, 220, 223, 226], [229, 257, 260, 263], [234, 246, 249, 252], [266, 294, 297, 300], [271, 283, 286, 289]]);
    })
  }, {
    key: "transformReferenceWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformReferenceWithContext(that, context) {
      var _iterator359, _step359, error, keysIndex, _iterator360, _step360, item, _iterator361, _step361, _error200;
      return _regeneratorRuntime().wrap(function transformReferenceWithContext$(_context26) {
        while (1) switch (_context26.prev = _context26.next) {
          case 0:
            if (that.keys.length >= 1) {
              _context26.next = 3;
              break;
            }
            _context26.next = 3;
            return new VerificationError("Keys must contain at least one item.");
          case 3:
            if (!(that.keys.length >= 1) || AasConstants.GLOBALLY_IDENTIFIABLES.has(AasCommon.at(that.keys, 0).type)) {
              _context26.next = 6;
              break;
            }
            _context26.next = 6;
            return new VerificationError("Constraint AASd-121: For References the value of type of " + "the first key of keys shall be one of Globally " + "Identifiables.");
          case 6:
            if (!(that.type == AasTypes.ReferenceTypes.ExternalReference && that.keys.length >= 1) || AasConstants.GENERIC_GLOBALLY_IDENTIFIABLES.has(AasCommon.at(that.keys, 0).type)) {
              _context26.next = 9;
              break;
            }
            _context26.next = 9;
            return new VerificationError("Constraint AASd-122: For external references the value of " + "type of the first key of keys shall be one of Generic " + "Globally Identifiables.");
          case 9:
            if (!(that.type == AasTypes.ReferenceTypes.ModelReference && that.keys.length >= 1) || AasConstants.AAS_IDENTIFIABLES.has(AasCommon.at(that.keys, 0).type)) {
              _context26.next = 12;
              break;
            }
            _context26.next = 12;
            return new VerificationError("Constraint AASd-123: For model references the value of type " + "of the first key of keys shall be one of AAS identifiables.");
          case 12:
            if (!(that.type == AasTypes.ReferenceTypes.ExternalReference && that.keys.length >= 1) || AasConstants.GENERIC_GLOBALLY_IDENTIFIABLES.has(AasCommon.at(that.keys, -1).type) || AasConstants.GENERIC_FRAGMENT_KEYS.has(AasCommon.at(that.keys, -1).type)) {
              _context26.next = 15;
              break;
            }
            _context26.next = 15;
            return new VerificationError("Constraint AASd-124: For external references the last key " + "of keys shall be either one of Generic Globally " + "Identifiables or one of Generic Fragment Keys.");
          case 15:
            if (!(that.type == AasTypes.ReferenceTypes.ModelReference && that.keys.length > 1) || AasCommon.every(AasCommon.map(AasCommon.range(1, that.keys.length), function (i) {
              return AasConstants.FRAGMENT_KEYS.has(AasCommon.at(that.keys, i).type);
            }))) {
              _context26.next = 18;
              break;
            }
            _context26.next = 18;
            return new VerificationError("Constraint AASd-125: For model references with more than " + "one key in keys the value of type of each of the keys " + "following the first key of keys shall be one of Fragment " + "Keys.");
          case 18:
            if (!(that.type == AasTypes.ReferenceTypes.ModelReference && that.keys.length > 1) || AasCommon.every(AasCommon.map(AasCommon.range(0, that.keys.length - 1), function (i) {
              return !AasConstants.GENERIC_FRAGMENT_KEYS.has(AasCommon.at(that.keys, i).type);
            }))) {
              _context26.next = 21;
              break;
            }
            _context26.next = 21;
            return new VerificationError("Constraint AASd-126: For model references with more than " + "one key in keys the value of type of the last key in " + "the reference key chain may be one of Generic Fragment Keys " + "or no key at all shall have a value out of Generic Fragment " + "Keys.");
          case 21:
            if (!(that.type == AasTypes.ReferenceTypes.ModelReference && that.keys.length > 1 && AasCommon.at(that.keys, -1).type == AasTypes.KeyTypes.FragmentReference) || AasCommon.at(that.keys, -2).type == AasTypes.KeyTypes.File || AasCommon.at(that.keys, -2).type == AasTypes.KeyTypes.Blob) {
              _context26.next = 24;
              break;
            }
            _context26.next = 24;
            return new VerificationError("Constraint AASd-127: For model references, with more than " + "one key in keys a key with type Fragment Reference shall be " + "preceded by a key with type File or Blob.");
          case 24:
            if (!(that.type == AasTypes.ReferenceTypes.ModelReference && that.keys.length > 2) || AasCommon.every(AasCommon.map(AasCommon.range(0, that.keys.length - 1), function (i) {
              return !(AasCommon.at(that.keys, i).type == AasTypes.KeyTypes.SubmodelElementList) || matchesXsPositiveInteger(AasCommon.at(that.keys, i + 1).value);
            }))) {
              _context26.next = 27;
              break;
            }
            _context26.next = 27;
            return new VerificationError("Constraint AASd-128: For model references, the value of " + "a key preceded by a key with type Submodel element list is " + "an integer number denoting the position in the array of " + "the submodel element list.");
          case 27:
            if (!(context === true)) {
              _context26.next = 83;
              break;
            }
            if (!(that.referredSemanticId !== null)) {
              _context26.next = 47;
              break;
            }
            _iterator359 = _createForOfIteratorHelper(this.transformWithContext(that.referredSemanticId, context));
            _context26.prev = 30;
            _iterator359.s();
          case 32:
            if ((_step359 = _iterator359.n()).done) {
              _context26.next = 39;
              break;
            }
            error = _step359.value;
            error.path.prepend(new PropertySegment(that, "referredSemanticId"));
            _context26.next = 37;
            return error;
          case 37:
            _context26.next = 32;
            break;
          case 39:
            _context26.next = 44;
            break;
          case 41:
            _context26.prev = 41;
            _context26.t0 = _context26["catch"](30);
            _iterator359.e(_context26.t0);
          case 44:
            _context26.prev = 44;
            _iterator359.f();
            return _context26.finish(44);
          case 47:
            keysIndex = 0;
            _iterator360 = _createForOfIteratorHelper(that.keys);
            _context26.prev = 49;
            _iterator360.s();
          case 51:
            if ((_step360 = _iterator360.n()).done) {
              _context26.next = 75;
              break;
            }
            item = _step360.value;
            _iterator361 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context26.prev = 54;
            _iterator361.s();
          case 56:
            if ((_step361 = _iterator361.n()).done) {
              _context26.next = 64;
              break;
            }
            _error200 = _step361.value;
            _error200.path.prepend(new IndexSegment(that.keys, keysIndex));
            _error200.path.prepend(new PropertySegment(that, "keys"));
            _context26.next = 62;
            return _error200;
          case 62:
            _context26.next = 56;
            break;
          case 64:
            _context26.next = 69;
            break;
          case 66:
            _context26.prev = 66;
            _context26.t1 = _context26["catch"](54);
            _iterator361.e(_context26.t1);
          case 69:
            _context26.prev = 69;
            _iterator361.f();
            return _context26.finish(69);
          case 72:
            keysIndex++;
          case 73:
            _context26.next = 51;
            break;
          case 75:
            _context26.next = 80;
            break;
          case 77:
            _context26.prev = 77;
            _context26.t2 = _context26["catch"](49);
            _iterator360.e(_context26.t2);
          case 80:
            _context26.prev = 80;
            _iterator360.f();
            return _context26.finish(80);
          case 83:
          case "end":
            return _context26.stop();
        }
      }, transformReferenceWithContext, this, [[30, 41, 44, 47], [49, 77, 80, 83], [54, 66, 69, 72]]);
    })
  }, {
    key: "transformKeyWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformKeyWithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator362, _step362, error;
      return _regeneratorRuntime().wrap(function transformKeyWithContext$(_context27) {
        while (1) switch (_context27.prev = _context27.next) {
          case 0:
            _iterator362 = _createForOfIteratorHelper(verifyIdentifier(that.value));
            _context27.prev = 1;
            _iterator362.s();
          case 3:
            if ((_step362 = _iterator362.n()).done) {
              _context27.next = 10;
              break;
            }
            error = _step362.value;
            error.path.prepend(new PropertySegment(that, "value"));
            _context27.next = 8;
            return error;
          case 8:
            _context27.next = 3;
            break;
          case 10:
            _context27.next = 15;
            break;
          case 12:
            _context27.prev = 12;
            _context27.t0 = _context27["catch"](1);
            _iterator362.e(_context27.t0);
          case 15:
            _context27.prev = 15;
            _iterator362.f();
            return _context27.finish(15);
          case 18:
          case "end":
            return _context27.stop();
        }
      }, transformKeyWithContext, null, [[1, 12, 15, 18]]);
    })
  }, {
    key: "transformLangStringNameTypeWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringNameTypeWithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator363, _step363, error, _iterator364, _step364, _error201;
      return _regeneratorRuntime().wrap(function transformLangStringNameTypeWithContext$(_context28) {
        while (1) switch (_context28.prev = _context28.next) {
          case 0:
            if (that.text.length <= 128) {
              _context28.next = 3;
              break;
            }
            _context28.next = 3;
            return new VerificationError("String shall have a maximum length of 128 characters.");
          case 3:
            _iterator363 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context28.prev = 4;
            _iterator363.s();
          case 6:
            if ((_step363 = _iterator363.n()).done) {
              _context28.next = 13;
              break;
            }
            error = _step363.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context28.next = 11;
            return error;
          case 11:
            _context28.next = 6;
            break;
          case 13:
            _context28.next = 18;
            break;
          case 15:
            _context28.prev = 15;
            _context28.t0 = _context28["catch"](4);
            _iterator363.e(_context28.t0);
          case 18:
            _context28.prev = 18;
            _iterator363.f();
            return _context28.finish(18);
          case 21:
            _iterator364 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context28.prev = 22;
            _iterator364.s();
          case 24:
            if ((_step364 = _iterator364.n()).done) {
              _context28.next = 31;
              break;
            }
            _error201 = _step364.value;
            _error201.path.prepend(new PropertySegment(that, "text"));
            _context28.next = 29;
            return _error201;
          case 29:
            _context28.next = 24;
            break;
          case 31:
            _context28.next = 36;
            break;
          case 33:
            _context28.prev = 33;
            _context28.t1 = _context28["catch"](22);
            _iterator364.e(_context28.t1);
          case 36:
            _context28.prev = 36;
            _iterator364.f();
            return _context28.finish(36);
          case 39:
          case "end":
            return _context28.stop();
        }
      }, transformLangStringNameTypeWithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformLangStringTextTypeWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringTextTypeWithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator365, _step365, error, _iterator366, _step366, _error202;
      return _regeneratorRuntime().wrap(function transformLangStringTextTypeWithContext$(_context29) {
        while (1) switch (_context29.prev = _context29.next) {
          case 0:
            if (that.text.length <= 1023) {
              _context29.next = 3;
              break;
            }
            _context29.next = 3;
            return new VerificationError("String shall have a maximum length of 1023 characters.");
          case 3:
            _iterator365 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context29.prev = 4;
            _iterator365.s();
          case 6:
            if ((_step365 = _iterator365.n()).done) {
              _context29.next = 13;
              break;
            }
            error = _step365.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context29.next = 11;
            return error;
          case 11:
            _context29.next = 6;
            break;
          case 13:
            _context29.next = 18;
            break;
          case 15:
            _context29.prev = 15;
            _context29.t0 = _context29["catch"](4);
            _iterator365.e(_context29.t0);
          case 18:
            _context29.prev = 18;
            _iterator365.f();
            return _context29.finish(18);
          case 21:
            _iterator366 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context29.prev = 22;
            _iterator366.s();
          case 24:
            if ((_step366 = _iterator366.n()).done) {
              _context29.next = 31;
              break;
            }
            _error202 = _step366.value;
            _error202.path.prepend(new PropertySegment(that, "text"));
            _context29.next = 29;
            return _error202;
          case 29:
            _context29.next = 24;
            break;
          case 31:
            _context29.next = 36;
            break;
          case 33:
            _context29.prev = 33;
            _context29.t1 = _context29["catch"](22);
            _iterator366.e(_context29.t1);
          case 36:
            _context29.prev = 36;
            _iterator366.f();
            return _context29.finish(36);
          case 39:
          case "end":
            return _context29.stop();
        }
      }, transformLangStringTextTypeWithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformEnvironmentWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformEnvironmentWithContext(that, context) {
      var assetAdministrationShellsIndex, _iterator367, _step367, item, _iterator368, _step368, error, submodelsIndex, _iterator369, _step369, _item95, _iterator370, _step370, _error203, conceptDescriptionsIndex, _iterator371, _step371, _item96, _iterator372, _step372, _error204;
      return _regeneratorRuntime().wrap(function transformEnvironmentWithContext$(_context30) {
        while (1) switch (_context30.prev = _context30.next) {
          case 0:
            if (!(that.conceptDescriptions !== null) || that.conceptDescriptions.length >= 1) {
              _context30.next = 3;
              break;
            }
            _context30.next = 3;
            return new VerificationError("Concept descriptions must be either not set or have at " + "least one item.");
          case 3:
            if (!(that.submodels !== null) || that.submodels.length >= 1) {
              _context30.next = 6;
              break;
            }
            _context30.next = 6;
            return new VerificationError("Submodels must be either not set or have at least one item.");
          case 6:
            if (!(that.assetAdministrationShells !== null) || that.assetAdministrationShells.length >= 1) {
              _context30.next = 9;
              break;
            }
            _context30.next = 9;
            return new VerificationError("Asset administration shells must be either not set or have " + "at least one item.");
          case 9:
            if (!(context === true)) {
              _context30.next = 121;
              break;
            }
            if (!(that.assetAdministrationShells !== null)) {
              _context30.next = 47;
              break;
            }
            assetAdministrationShellsIndex = 0;
            _iterator367 = _createForOfIteratorHelper(that.assetAdministrationShells);
            _context30.prev = 13;
            _iterator367.s();
          case 15:
            if ((_step367 = _iterator367.n()).done) {
              _context30.next = 39;
              break;
            }
            item = _step367.value;
            _iterator368 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context30.prev = 18;
            _iterator368.s();
          case 20:
            if ((_step368 = _iterator368.n()).done) {
              _context30.next = 28;
              break;
            }
            error = _step368.value;
            error.path.prepend(new IndexSegment(that.assetAdministrationShells, assetAdministrationShellsIndex));
            error.path.prepend(new PropertySegment(that, "assetAdministrationShells"));
            _context30.next = 26;
            return error;
          case 26:
            _context30.next = 20;
            break;
          case 28:
            _context30.next = 33;
            break;
          case 30:
            _context30.prev = 30;
            _context30.t0 = _context30["catch"](18);
            _iterator368.e(_context30.t0);
          case 33:
            _context30.prev = 33;
            _iterator368.f();
            return _context30.finish(33);
          case 36:
            assetAdministrationShellsIndex++;
          case 37:
            _context30.next = 15;
            break;
          case 39:
            _context30.next = 44;
            break;
          case 41:
            _context30.prev = 41;
            _context30.t1 = _context30["catch"](13);
            _iterator367.e(_context30.t1);
          case 44:
            _context30.prev = 44;
            _iterator367.f();
            return _context30.finish(44);
          case 47:
            if (!(that.submodels !== null)) {
              _context30.next = 84;
              break;
            }
            submodelsIndex = 0;
            _iterator369 = _createForOfIteratorHelper(that.submodels);
            _context30.prev = 50;
            _iterator369.s();
          case 52:
            if ((_step369 = _iterator369.n()).done) {
              _context30.next = 76;
              break;
            }
            _item95 = _step369.value;
            _iterator370 = _createForOfIteratorHelper(this.transformWithContext(_item95, context));
            _context30.prev = 55;
            _iterator370.s();
          case 57:
            if ((_step370 = _iterator370.n()).done) {
              _context30.next = 65;
              break;
            }
            _error203 = _step370.value;
            _error203.path.prepend(new IndexSegment(that.submodels, submodelsIndex));
            _error203.path.prepend(new PropertySegment(that, "submodels"));
            _context30.next = 63;
            return _error203;
          case 63:
            _context30.next = 57;
            break;
          case 65:
            _context30.next = 70;
            break;
          case 67:
            _context30.prev = 67;
            _context30.t2 = _context30["catch"](55);
            _iterator370.e(_context30.t2);
          case 70:
            _context30.prev = 70;
            _iterator370.f();
            return _context30.finish(70);
          case 73:
            submodelsIndex++;
          case 74:
            _context30.next = 52;
            break;
          case 76:
            _context30.next = 81;
            break;
          case 78:
            _context30.prev = 78;
            _context30.t3 = _context30["catch"](50);
            _iterator369.e(_context30.t3);
          case 81:
            _context30.prev = 81;
            _iterator369.f();
            return _context30.finish(81);
          case 84:
            if (!(that.conceptDescriptions !== null)) {
              _context30.next = 121;
              break;
            }
            conceptDescriptionsIndex = 0;
            _iterator371 = _createForOfIteratorHelper(that.conceptDescriptions);
            _context30.prev = 87;
            _iterator371.s();
          case 89:
            if ((_step371 = _iterator371.n()).done) {
              _context30.next = 113;
              break;
            }
            _item96 = _step371.value;
            _iterator372 = _createForOfIteratorHelper(this.transformWithContext(_item96, context));
            _context30.prev = 92;
            _iterator372.s();
          case 94:
            if ((_step372 = _iterator372.n()).done) {
              _context30.next = 102;
              break;
            }
            _error204 = _step372.value;
            _error204.path.prepend(new IndexSegment(that.conceptDescriptions, conceptDescriptionsIndex));
            _error204.path.prepend(new PropertySegment(that, "conceptDescriptions"));
            _context30.next = 100;
            return _error204;
          case 100:
            _context30.next = 94;
            break;
          case 102:
            _context30.next = 107;
            break;
          case 104:
            _context30.prev = 104;
            _context30.t4 = _context30["catch"](92);
            _iterator372.e(_context30.t4);
          case 107:
            _context30.prev = 107;
            _iterator372.f();
            return _context30.finish(107);
          case 110:
            conceptDescriptionsIndex++;
          case 111:
            _context30.next = 89;
            break;
          case 113:
            _context30.next = 118;
            break;
          case 115:
            _context30.prev = 115;
            _context30.t5 = _context30["catch"](87);
            _iterator371.e(_context30.t5);
          case 118:
            _context30.prev = 118;
            _iterator371.f();
            return _context30.finish(118);
          case 121:
          case "end":
            return _context30.stop();
        }
      }, transformEnvironmentWithContext, this, [[13, 41, 44, 47], [18, 30, 33, 36], [50, 78, 81, 84], [55, 67, 70, 73], [87, 115, 118, 121], [92, 104, 107, 110]]);
    })
  }, {
    key: "transformEmbeddedDataSpecificationWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformEmbeddedDataSpecificationWithContext(that, context) {
      var _iterator373, _step373, error, _iterator374, _step374, _error205;
      return _regeneratorRuntime().wrap(function transformEmbeddedDataSpecificationWithContext$(_context31) {
        while (1) switch (_context31.prev = _context31.next) {
          case 0:
            if (!(context === true)) {
              _context31.next = 37;
              break;
            }
            _iterator373 = _createForOfIteratorHelper(this.transformWithContext(that.dataSpecification, context));
            _context31.prev = 2;
            _iterator373.s();
          case 4:
            if ((_step373 = _iterator373.n()).done) {
              _context31.next = 11;
              break;
            }
            error = _step373.value;
            error.path.prepend(new PropertySegment(that, "dataSpecification"));
            _context31.next = 9;
            return error;
          case 9:
            _context31.next = 4;
            break;
          case 11:
            _context31.next = 16;
            break;
          case 13:
            _context31.prev = 13;
            _context31.t0 = _context31["catch"](2);
            _iterator373.e(_context31.t0);
          case 16:
            _context31.prev = 16;
            _iterator373.f();
            return _context31.finish(16);
          case 19:
            _iterator374 = _createForOfIteratorHelper(this.transformWithContext(that.dataSpecificationContent, context));
            _context31.prev = 20;
            _iterator374.s();
          case 22:
            if ((_step374 = _iterator374.n()).done) {
              _context31.next = 29;
              break;
            }
            _error205 = _step374.value;
            _error205.path.prepend(new PropertySegment(that, "dataSpecificationContent"));
            _context31.next = 27;
            return _error205;
          case 27:
            _context31.next = 22;
            break;
          case 29:
            _context31.next = 34;
            break;
          case 31:
            _context31.prev = 31;
            _context31.t1 = _context31["catch"](20);
            _iterator374.e(_context31.t1);
          case 34:
            _context31.prev = 34;
            _iterator374.f();
            return _context31.finish(34);
          case 37:
          case "end":
            return _context31.stop();
        }
      }, transformEmbeddedDataSpecificationWithContext, this, [[2, 13, 16, 19], [20, 31, 34, 37]]);
    })
  }, {
    key: "transformLevelTypeWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLevelTypeWithContext(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      return _regeneratorRuntime().wrap(function transformLevelTypeWithContext$(_context32) {
        while (1) switch (_context32.prev = _context32.next) {
          case 0:
          case "end":
            return _context32.stop();
        }
      }, transformLevelTypeWithContext);
    })
  }, {
    key: "transformValueReferencePairWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformValueReferencePairWithContext(that, context) {
      var _iterator375, _step375, _error206, _iterator376, _step376, error;
      return _regeneratorRuntime().wrap(function transformValueReferencePairWithContext$(_context33) {
        while (1) switch (_context33.prev = _context33.next) {
          case 0:
            _iterator375 = _createForOfIteratorHelper(verifyValueTypeIec61360(that.value));
            _context33.prev = 1;
            _iterator375.s();
          case 3:
            if ((_step375 = _iterator375.n()).done) {
              _context33.next = 10;
              break;
            }
            _error206 = _step375.value;
            _error206.path.prepend(new PropertySegment(that, "value"));
            _context33.next = 8;
            return _error206;
          case 8:
            _context33.next = 3;
            break;
          case 10:
            _context33.next = 15;
            break;
          case 12:
            _context33.prev = 12;
            _context33.t0 = _context33["catch"](1);
            _iterator375.e(_context33.t0);
          case 15:
            _context33.prev = 15;
            _iterator375.f();
            return _context33.finish(15);
          case 18:
            if (!(context === true)) {
              _context33.next = 37;
              break;
            }
            _iterator376 = _createForOfIteratorHelper(this.transformWithContext(that.valueId, context));
            _context33.prev = 20;
            _iterator376.s();
          case 22:
            if ((_step376 = _iterator376.n()).done) {
              _context33.next = 29;
              break;
            }
            error = _step376.value;
            error.path.prepend(new PropertySegment(that, "valueId"));
            _context33.next = 27;
            return error;
          case 27:
            _context33.next = 22;
            break;
          case 29:
            _context33.next = 34;
            break;
          case 31:
            _context33.prev = 31;
            _context33.t1 = _context33["catch"](20);
            _iterator376.e(_context33.t1);
          case 34:
            _context33.prev = 34;
            _iterator376.f();
            return _context33.finish(34);
          case 37:
          case "end":
            return _context33.stop();
        }
      }, transformValueReferencePairWithContext, this, [[1, 12, 15, 18], [20, 31, 34, 37]]);
    })
  }, {
    key: "transformValueListWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformValueListWithContext(that, context) {
      var valueReferencePairsIndex, _iterator377, _step377, item, _iterator378, _step378, error;
      return _regeneratorRuntime().wrap(function transformValueListWithContext$(_context34) {
        while (1) switch (_context34.prev = _context34.next) {
          case 0:
            if (that.valueReferencePairs.length >= 1) {
              _context34.next = 3;
              break;
            }
            _context34.next = 3;
            return new VerificationError("Value reference pair types must contain at least one item.");
          case 3:
            if (!(context === true)) {
              _context34.next = 40;
              break;
            }
            valueReferencePairsIndex = 0;
            _iterator377 = _createForOfIteratorHelper(that.valueReferencePairs);
            _context34.prev = 6;
            _iterator377.s();
          case 8:
            if ((_step377 = _iterator377.n()).done) {
              _context34.next = 32;
              break;
            }
            item = _step377.value;
            _iterator378 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context34.prev = 11;
            _iterator378.s();
          case 13:
            if ((_step378 = _iterator378.n()).done) {
              _context34.next = 21;
              break;
            }
            error = _step378.value;
            error.path.prepend(new IndexSegment(that.valueReferencePairs, valueReferencePairsIndex));
            error.path.prepend(new PropertySegment(that, "valueReferencePairs"));
            _context34.next = 19;
            return error;
          case 19:
            _context34.next = 13;
            break;
          case 21:
            _context34.next = 26;
            break;
          case 23:
            _context34.prev = 23;
            _context34.t0 = _context34["catch"](11);
            _iterator378.e(_context34.t0);
          case 26:
            _context34.prev = 26;
            _iterator378.f();
            return _context34.finish(26);
          case 29:
            valueReferencePairsIndex++;
          case 30:
            _context34.next = 8;
            break;
          case 32:
            _context34.next = 37;
            break;
          case 34:
            _context34.prev = 34;
            _context34.t1 = _context34["catch"](6);
            _iterator377.e(_context34.t1);
          case 37:
            _context34.prev = 37;
            _iterator377.f();
            return _context34.finish(37);
          case 40:
          case "end":
            return _context34.stop();
        }
      }, transformValueListWithContext, this, [[6, 34, 37, 40], [11, 23, 26, 29]]);
    })
  }, {
    key: "transformLangStringPreferredNameTypeIec61360WithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringPreferredNameTypeIec61360WithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator379, _step379, error, _iterator380, _step380, _error207;
      return _regeneratorRuntime().wrap(function transformLangStringPreferredNameTypeIec61360WithContext$(_context35) {
        while (1) switch (_context35.prev = _context35.next) {
          case 0:
            if (that.text.length <= 255) {
              _context35.next = 3;
              break;
            }
            _context35.next = 3;
            return new VerificationError("String shall have a maximum length of 255 characters.");
          case 3:
            _iterator379 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context35.prev = 4;
            _iterator379.s();
          case 6:
            if ((_step379 = _iterator379.n()).done) {
              _context35.next = 13;
              break;
            }
            error = _step379.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context35.next = 11;
            return error;
          case 11:
            _context35.next = 6;
            break;
          case 13:
            _context35.next = 18;
            break;
          case 15:
            _context35.prev = 15;
            _context35.t0 = _context35["catch"](4);
            _iterator379.e(_context35.t0);
          case 18:
            _context35.prev = 18;
            _iterator379.f();
            return _context35.finish(18);
          case 21:
            _iterator380 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context35.prev = 22;
            _iterator380.s();
          case 24:
            if ((_step380 = _iterator380.n()).done) {
              _context35.next = 31;
              break;
            }
            _error207 = _step380.value;
            _error207.path.prepend(new PropertySegment(that, "text"));
            _context35.next = 29;
            return _error207;
          case 29:
            _context35.next = 24;
            break;
          case 31:
            _context35.next = 36;
            break;
          case 33:
            _context35.prev = 33;
            _context35.t1 = _context35["catch"](22);
            _iterator380.e(_context35.t1);
          case 36:
            _context35.prev = 36;
            _iterator380.f();
            return _context35.finish(36);
          case 39:
          case "end":
            return _context35.stop();
        }
      }, transformLangStringPreferredNameTypeIec61360WithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformLangStringShortNameTypeIec61360WithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringShortNameTypeIec61360WithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator381, _step381, error, _iterator382, _step382, _error208;
      return _regeneratorRuntime().wrap(function transformLangStringShortNameTypeIec61360WithContext$(_context36) {
        while (1) switch (_context36.prev = _context36.next) {
          case 0:
            if (that.text.length <= 18) {
              _context36.next = 3;
              break;
            }
            _context36.next = 3;
            return new VerificationError("String shall have a maximum length of 18 characters.");
          case 3:
            _iterator381 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context36.prev = 4;
            _iterator381.s();
          case 6:
            if ((_step381 = _iterator381.n()).done) {
              _context36.next = 13;
              break;
            }
            error = _step381.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context36.next = 11;
            return error;
          case 11:
            _context36.next = 6;
            break;
          case 13:
            _context36.next = 18;
            break;
          case 15:
            _context36.prev = 15;
            _context36.t0 = _context36["catch"](4);
            _iterator381.e(_context36.t0);
          case 18:
            _context36.prev = 18;
            _iterator381.f();
            return _context36.finish(18);
          case 21:
            _iterator382 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context36.prev = 22;
            _iterator382.s();
          case 24:
            if ((_step382 = _iterator382.n()).done) {
              _context36.next = 31;
              break;
            }
            _error208 = _step382.value;
            _error208.path.prepend(new PropertySegment(that, "text"));
            _context36.next = 29;
            return _error208;
          case 29:
            _context36.next = 24;
            break;
          case 31:
            _context36.next = 36;
            break;
          case 33:
            _context36.prev = 33;
            _context36.t1 = _context36["catch"](22);
            _iterator382.e(_context36.t1);
          case 36:
            _context36.prev = 36;
            _iterator382.f();
            return _context36.finish(36);
          case 39:
          case "end":
            return _context36.stop();
        }
      }, transformLangStringShortNameTypeIec61360WithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformLangStringDefinitionTypeIec61360WithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringDefinitionTypeIec61360WithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator383, _step383, error, _iterator384, _step384, _error209;
      return _regeneratorRuntime().wrap(function transformLangStringDefinitionTypeIec61360WithContext$(_context37) {
        while (1) switch (_context37.prev = _context37.next) {
          case 0:
            if (that.text.length <= 1023) {
              _context37.next = 3;
              break;
            }
            _context37.next = 3;
            return new VerificationError("String shall have a maximum length of 1023 characters.");
          case 3:
            _iterator383 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context37.prev = 4;
            _iterator383.s();
          case 6:
            if ((_step383 = _iterator383.n()).done) {
              _context37.next = 13;
              break;
            }
            error = _step383.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context37.next = 11;
            return error;
          case 11:
            _context37.next = 6;
            break;
          case 13:
            _context37.next = 18;
            break;
          case 15:
            _context37.prev = 15;
            _context37.t0 = _context37["catch"](4);
            _iterator383.e(_context37.t0);
          case 18:
            _context37.prev = 18;
            _iterator383.f();
            return _context37.finish(18);
          case 21:
            _iterator384 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context37.prev = 22;
            _iterator384.s();
          case 24:
            if ((_step384 = _iterator384.n()).done) {
              _context37.next = 31;
              break;
            }
            _error209 = _step384.value;
            _error209.path.prepend(new PropertySegment(that, "text"));
            _context37.next = 29;
            return _error209;
          case 29:
            _context37.next = 24;
            break;
          case 31:
            _context37.next = 36;
            break;
          case 33:
            _context37.prev = 33;
            _context37.t1 = _context37["catch"](22);
            _iterator384.e(_context37.t1);
          case 36:
            _context37.prev = 36;
            _iterator384.f();
            return _context37.finish(36);
          case 39:
          case "end":
            return _context37.stop();
        }
      }, transformLangStringDefinitionTypeIec61360WithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformDataSpecificationIec61360WithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformDataSpecificationIec61360WithContext(that, context) {
      var _iterator385, _step385, error, _iterator386, _step386, _error210, _iterator387, _step387, _error211, _iterator388, _step388, _error212, _iterator389, _step389, _error213, preferredNameIndex, _iterator390, _step390, _item98, _iterator398, _step398, _error219, shortNameIndex, _iterator391, _step391, item, _iterator392, _step392, _error214, _iterator393, _step393, _error215, definitionIndex, _iterator394, _step394, _item97, _iterator395, _step395, _error216, _iterator396, _step396, _error217, _iterator397, _step397, _error218;
      return _regeneratorRuntime().wrap(function transformDataSpecificationIec61360WithContext$(_context38) {
        while (1) switch (_context38.prev = _context38.next) {
          case 0:
            if (!(that.value !== null && that.valueList !== null)) {
              _context38.next = 3;
              break;
            }
            _context38.next = 3;
            return new VerificationError("Constraint AASc-3a-010: If value is not empty then value " + "list shall be empty and vice versa.");
          case 3:
            if (!(that.dataType !== null && AasConstants.IEC_61360_DATA_TYPES_WITH_UNIT.has(that.dataType)) || that.unit !== null || that.unitId !== null) {
              _context38.next = 6;
              break;
            }
            _context38.next = 6;
            return new VerificationError("Constraint AASc-3a-009: If data type is a an integer, real " + "or rational with a measure or currency, unit or unit ID " + "shall be defined.");
          case 6:
            if (!(that.definition !== null) || that.definition.length >= 1) {
              _context38.next = 9;
              break;
            }
            _context38.next = 9;
            return new VerificationError("Definition must be either not set or have at least one item.");
          case 9:
            if (!(that.definition !== null) || langStringsHaveUniqueLanguages(that.definition)) {
              _context38.next = 12;
              break;
            }
            _context38.next = 12;
            return new VerificationError("Definition must specify unique languages.");
          case 12:
            if (!(that.shortName !== null) || that.shortName.length >= 1) {
              _context38.next = 15;
              break;
            }
            _context38.next = 15;
            return new VerificationError("Short name must be either not set or have at least one item.");
          case 15:
            if (!(that.shortName !== null) || langStringsHaveUniqueLanguages(that.shortName)) {
              _context38.next = 18;
              break;
            }
            _context38.next = 18;
            return new VerificationError("Short name must specify unique languages.");
          case 18:
            if (that.preferredName.length >= 1) {
              _context38.next = 21;
              break;
            }
            _context38.next = 21;
            return new VerificationError("Preferred name must have at least one item.");
          case 21:
            if (langStringsHaveUniqueLanguages(that.preferredName)) {
              _context38.next = 24;
              break;
            }
            _context38.next = 24;
            return new VerificationError("Preferred name must specify unique languages.");
          case 24:
            if (AasCommon.some(AasCommon.map(that.preferredName, function (langString) {
              return isBcp47ForEnglish(langString.language);
            }))) {
              _context38.next = 27;
              break;
            }
            _context38.next = 27;
            return new VerificationError("Constraint AASc-002: preferred name shall be provided at " + "least in English.");
          case 27:
            if (!(that.unit !== null)) {
              _context38.next = 46;
              break;
            }
            _iterator385 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.unit));
            _context38.prev = 29;
            _iterator385.s();
          case 31:
            if ((_step385 = _iterator385.n()).done) {
              _context38.next = 38;
              break;
            }
            error = _step385.value;
            error.path.prepend(new PropertySegment(that, "unit"));
            _context38.next = 36;
            return error;
          case 36:
            _context38.next = 31;
            break;
          case 38:
            _context38.next = 43;
            break;
          case 40:
            _context38.prev = 40;
            _context38.t0 = _context38["catch"](29);
            _iterator385.e(_context38.t0);
          case 43:
            _context38.prev = 43;
            _iterator385.f();
            return _context38.finish(43);
          case 46:
            if (!(that.sourceOfDefinition !== null)) {
              _context38.next = 65;
              break;
            }
            _iterator386 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.sourceOfDefinition));
            _context38.prev = 48;
            _iterator386.s();
          case 50:
            if ((_step386 = _iterator386.n()).done) {
              _context38.next = 57;
              break;
            }
            _error210 = _step386.value;
            _error210.path.prepend(new PropertySegment(that, "sourceOfDefinition"));
            _context38.next = 55;
            return _error210;
          case 55:
            _context38.next = 50;
            break;
          case 57:
            _context38.next = 62;
            break;
          case 59:
            _context38.prev = 59;
            _context38.t1 = _context38["catch"](48);
            _iterator386.e(_context38.t1);
          case 62:
            _context38.prev = 62;
            _iterator386.f();
            return _context38.finish(62);
          case 65:
            if (!(that.symbol !== null)) {
              _context38.next = 84;
              break;
            }
            _iterator387 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.symbol));
            _context38.prev = 67;
            _iterator387.s();
          case 69:
            if ((_step387 = _iterator387.n()).done) {
              _context38.next = 76;
              break;
            }
            _error211 = _step387.value;
            _error211.path.prepend(new PropertySegment(that, "symbol"));
            _context38.next = 74;
            return _error211;
          case 74:
            _context38.next = 69;
            break;
          case 76:
            _context38.next = 81;
            break;
          case 78:
            _context38.prev = 78;
            _context38.t2 = _context38["catch"](67);
            _iterator387.e(_context38.t2);
          case 81:
            _context38.prev = 81;
            _iterator387.f();
            return _context38.finish(81);
          case 84:
            if (!(that.valueFormat !== null)) {
              _context38.next = 103;
              break;
            }
            _iterator388 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.valueFormat));
            _context38.prev = 86;
            _iterator388.s();
          case 88:
            if ((_step388 = _iterator388.n()).done) {
              _context38.next = 95;
              break;
            }
            _error212 = _step388.value;
            _error212.path.prepend(new PropertySegment(that, "valueFormat"));
            _context38.next = 93;
            return _error212;
          case 93:
            _context38.next = 88;
            break;
          case 95:
            _context38.next = 100;
            break;
          case 97:
            _context38.prev = 97;
            _context38.t3 = _context38["catch"](86);
            _iterator388.e(_context38.t3);
          case 100:
            _context38.prev = 100;
            _iterator388.f();
            return _context38.finish(100);
          case 103:
            if (!(that.value !== null)) {
              _context38.next = 122;
              break;
            }
            _iterator389 = _createForOfIteratorHelper(verifyValueTypeIec61360(that.value));
            _context38.prev = 105;
            _iterator389.s();
          case 107:
            if ((_step389 = _iterator389.n()).done) {
              _context38.next = 114;
              break;
            }
            _error213 = _step389.value;
            _error213.path.prepend(new PropertySegment(that, "value"));
            _context38.next = 112;
            return _error213;
          case 112:
            _context38.next = 107;
            break;
          case 114:
            _context38.next = 119;
            break;
          case 116:
            _context38.prev = 116;
            _context38.t4 = _context38["catch"](105);
            _iterator389.e(_context38.t4);
          case 119:
            _context38.prev = 119;
            _iterator389.f();
            return _context38.finish(119);
          case 122:
            if (!(context === true)) {
              _context38.next = 290;
              break;
            }
            preferredNameIndex = 0;
            _iterator390 = _createForOfIteratorHelper(that.preferredName);
            _context38.prev = 125;
            _iterator390.s();
          case 127:
            if ((_step390 = _iterator390.n()).done) {
              _context38.next = 151;
              break;
            }
            _item98 = _step390.value;
            _iterator398 = _createForOfIteratorHelper(this.transformWithContext(_item98, context));
            _context38.prev = 130;
            _iterator398.s();
          case 132:
            if ((_step398 = _iterator398.n()).done) {
              _context38.next = 140;
              break;
            }
            _error219 = _step398.value;
            _error219.path.prepend(new IndexSegment(that.preferredName, preferredNameIndex));
            _error219.path.prepend(new PropertySegment(that, "preferredName"));
            _context38.next = 138;
            return _error219;
          case 138:
            _context38.next = 132;
            break;
          case 140:
            _context38.next = 145;
            break;
          case 142:
            _context38.prev = 142;
            _context38.t5 = _context38["catch"](130);
            _iterator398.e(_context38.t5);
          case 145:
            _context38.prev = 145;
            _iterator398.f();
            return _context38.finish(145);
          case 148:
            preferredNameIndex++;
          case 149:
            _context38.next = 127;
            break;
          case 151:
            _context38.next = 156;
            break;
          case 153:
            _context38.prev = 153;
            _context38.t6 = _context38["catch"](125);
            _iterator390.e(_context38.t6);
          case 156:
            _context38.prev = 156;
            _iterator390.f();
            return _context38.finish(156);
          case 159:
            if (!(that.shortName !== null)) {
              _context38.next = 196;
              break;
            }
            shortNameIndex = 0;
            _iterator391 = _createForOfIteratorHelper(that.shortName);
            _context38.prev = 162;
            _iterator391.s();
          case 164:
            if ((_step391 = _iterator391.n()).done) {
              _context38.next = 188;
              break;
            }
            item = _step391.value;
            _iterator392 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context38.prev = 167;
            _iterator392.s();
          case 169:
            if ((_step392 = _iterator392.n()).done) {
              _context38.next = 177;
              break;
            }
            _error214 = _step392.value;
            _error214.path.prepend(new IndexSegment(that.shortName, shortNameIndex));
            _error214.path.prepend(new PropertySegment(that, "shortName"));
            _context38.next = 175;
            return _error214;
          case 175:
            _context38.next = 169;
            break;
          case 177:
            _context38.next = 182;
            break;
          case 179:
            _context38.prev = 179;
            _context38.t7 = _context38["catch"](167);
            _iterator392.e(_context38.t7);
          case 182:
            _context38.prev = 182;
            _iterator392.f();
            return _context38.finish(182);
          case 185:
            shortNameIndex++;
          case 186:
            _context38.next = 164;
            break;
          case 188:
            _context38.next = 193;
            break;
          case 190:
            _context38.prev = 190;
            _context38.t8 = _context38["catch"](162);
            _iterator391.e(_context38.t8);
          case 193:
            _context38.prev = 193;
            _iterator391.f();
            return _context38.finish(193);
          case 196:
            if (!(that.unitId !== null)) {
              _context38.next = 215;
              break;
            }
            _iterator393 = _createForOfIteratorHelper(this.transformWithContext(that.unitId, context));
            _context38.prev = 198;
            _iterator393.s();
          case 200:
            if ((_step393 = _iterator393.n()).done) {
              _context38.next = 207;
              break;
            }
            _error215 = _step393.value;
            _error215.path.prepend(new PropertySegment(that, "unitId"));
            _context38.next = 205;
            return _error215;
          case 205:
            _context38.next = 200;
            break;
          case 207:
            _context38.next = 212;
            break;
          case 209:
            _context38.prev = 209;
            _context38.t9 = _context38["catch"](198);
            _iterator393.e(_context38.t9);
          case 212:
            _context38.prev = 212;
            _iterator393.f();
            return _context38.finish(212);
          case 215:
            if (!(that.definition !== null)) {
              _context38.next = 252;
              break;
            }
            definitionIndex = 0;
            _iterator394 = _createForOfIteratorHelper(that.definition);
            _context38.prev = 218;
            _iterator394.s();
          case 220:
            if ((_step394 = _iterator394.n()).done) {
              _context38.next = 244;
              break;
            }
            _item97 = _step394.value;
            _iterator395 = _createForOfIteratorHelper(this.transformWithContext(_item97, context));
            _context38.prev = 223;
            _iterator395.s();
          case 225:
            if ((_step395 = _iterator395.n()).done) {
              _context38.next = 233;
              break;
            }
            _error216 = _step395.value;
            _error216.path.prepend(new IndexSegment(that.definition, definitionIndex));
            _error216.path.prepend(new PropertySegment(that, "definition"));
            _context38.next = 231;
            return _error216;
          case 231:
            _context38.next = 225;
            break;
          case 233:
            _context38.next = 238;
            break;
          case 235:
            _context38.prev = 235;
            _context38.t10 = _context38["catch"](223);
            _iterator395.e(_context38.t10);
          case 238:
            _context38.prev = 238;
            _iterator395.f();
            return _context38.finish(238);
          case 241:
            definitionIndex++;
          case 242:
            _context38.next = 220;
            break;
          case 244:
            _context38.next = 249;
            break;
          case 246:
            _context38.prev = 246;
            _context38.t11 = _context38["catch"](218);
            _iterator394.e(_context38.t11);
          case 249:
            _context38.prev = 249;
            _iterator394.f();
            return _context38.finish(249);
          case 252:
            if (!(that.valueList !== null)) {
              _context38.next = 271;
              break;
            }
            _iterator396 = _createForOfIteratorHelper(this.transformWithContext(that.valueList, context));
            _context38.prev = 254;
            _iterator396.s();
          case 256:
            if ((_step396 = _iterator396.n()).done) {
              _context38.next = 263;
              break;
            }
            _error217 = _step396.value;
            _error217.path.prepend(new PropertySegment(that, "valueList"));
            _context38.next = 261;
            return _error217;
          case 261:
            _context38.next = 256;
            break;
          case 263:
            _context38.next = 268;
            break;
          case 265:
            _context38.prev = 265;
            _context38.t12 = _context38["catch"](254);
            _iterator396.e(_context38.t12);
          case 268:
            _context38.prev = 268;
            _iterator396.f();
            return _context38.finish(268);
          case 271:
            if (!(that.levelType !== null)) {
              _context38.next = 290;
              break;
            }
            _iterator397 = _createForOfIteratorHelper(this.transformWithContext(that.levelType, context));
            _context38.prev = 273;
            _iterator397.s();
          case 275:
            if ((_step397 = _iterator397.n()).done) {
              _context38.next = 282;
              break;
            }
            _error218 = _step397.value;
            _error218.path.prepend(new PropertySegment(that, "levelType"));
            _context38.next = 280;
            return _error218;
          case 280:
            _context38.next = 275;
            break;
          case 282:
            _context38.next = 287;
            break;
          case 284:
            _context38.prev = 284;
            _context38.t13 = _context38["catch"](273);
            _iterator397.e(_context38.t13);
          case 287:
            _context38.prev = 287;
            _iterator397.f();
            return _context38.finish(287);
          case 290:
          case "end":
            return _context38.stop();
        }
      }, transformDataSpecificationIec61360WithContext, this, [[29, 40, 43, 46], [48, 59, 62, 65], [67, 78, 81, 84], [86, 97, 100, 103], [105, 116, 119, 122], [125, 153, 156, 159], [130, 142, 145, 148], [162, 190, 193, 196], [167, 179, 182, 185], [198, 209, 212, 215], [218, 246, 249, 252], [223, 235, 238, 241], [254, 265, 268, 271], [273, 284, 287, 290]]);
    })
  }]);
  return Verifier;
}(AasTypes.AbstractTransformerWithContext);
var VERIFIER = new Verifier();

/**
 * Verify the constraints of `that`.
 *
 * @param that - instance to be verified
 * @param recurse - if set, continue the verification recursively
 * @returns a stream of verification errors
 */
function verify(that) {
  var recurse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context39) {
      while (1) switch (_context39.prev = _context39.next) {
        case 0:
          return _context39.delegateYield(VERIFIER.transformWithContext(that, recurse), "t0", 1);
        case 1:
        case "end":
          return _context39.stop();
      }
    }, _callee);
  })();
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyNonEmptyXmlSerializableString(that) {
  return _regeneratorRuntime().wrap(function verifyNonEmptyXmlSerializableString$(_context40) {
    while (1) switch (_context40.prev = _context40.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context40.next = 3;
          break;
        }
        _context40.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context40.next = 6;
          break;
        }
        _context40.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
      case "end":
        return _context40.stop();
    }
  }, _marked);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyDateTimeUtc(that) {
  return _regeneratorRuntime().wrap(function verifyDateTimeUtc$(_context41) {
    while (1) switch (_context41.prev = _context41.next) {
      case 0:
        if (matchesXsDateTimeUtc(that)) {
          _context41.next = 3;
          break;
        }
        _context41.next = 3;
        return new VerificationError("The value must match the pattern of xs:dateTime with " + "the time zone fixed to UTC.");
      case 3:
        if (isXsDateTimeUtc(that)) {
          _context41.next = 6;
          break;
        }
        _context41.next = 6;
        return new VerificationError("The value must represent a valid xs:dateTime with the time " + "zone fixed to UTC.");
      case 6:
      case "end":
        return _context41.stop();
    }
  }, _marked2);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyDuration(that) {
  return _regeneratorRuntime().wrap(function verifyDuration$(_context42) {
    while (1) switch (_context42.prev = _context42.next) {
      case 0:
        if (matchesXsDuration(that)) {
          _context42.next = 3;
          break;
        }
        _context42.next = 3;
        return new VerificationError("The value must match the pattern of xs:duration.");
      case 3:
      case "end":
        return _context42.stop();
    }
  }, _marked3);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyBlobType(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
that) {
  return _regeneratorRuntime().wrap(function verifyBlobType$(_context43) {
    while (1) switch (_context43.prev = _context43.next) {
      case 0:
      case "end":
        return _context43.stop();
    }
  }, _marked4);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyIdentifier(that) {
  return _regeneratorRuntime().wrap(function verifyIdentifier$(_context44) {
    while (1) switch (_context44.prev = _context44.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context44.next = 3;
          break;
        }
        _context44.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context44.next = 6;
          break;
        }
        _context44.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 2000) {
          _context44.next = 9;
          break;
        }
        _context44.next = 9;
        return new VerificationError("Identifier shall have a maximum length of 2000 characters.");
      case 9:
      case "end":
        return _context44.stop();
    }
  }, _marked5);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyValueTypeIec61360(that) {
  return _regeneratorRuntime().wrap(function verifyValueTypeIec61360$(_context45) {
    while (1) switch (_context45.prev = _context45.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context45.next = 3;
          break;
        }
        _context45.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context45.next = 6;
          break;
        }
        _context45.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 2000) {
          _context45.next = 9;
          break;
        }
        _context45.next = 9;
        return new VerificationError("Value type IEC 61360 shall have a maximum length of 2000 " + "characters.");
      case 9:
      case "end":
        return _context45.stop();
    }
  }, _marked6);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyNameType(that) {
  return _regeneratorRuntime().wrap(function verifyNameType$(_context46) {
    while (1) switch (_context46.prev = _context46.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context46.next = 3;
          break;
        }
        _context46.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context46.next = 6;
          break;
        }
        _context46.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 128) {
          _context46.next = 9;
          break;
        }
        _context46.next = 9;
        return new VerificationError("Name type shall have a maximum length of 128 characters.");
      case 9:
      case "end":
        return _context46.stop();
    }
  }, _marked7);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyVersionType(that) {
  return _regeneratorRuntime().wrap(function verifyVersionType$(_context47) {
    while (1) switch (_context47.prev = _context47.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context47.next = 3;
          break;
        }
        _context47.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context47.next = 6;
          break;
        }
        _context47.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (matchesVersionType(that)) {
          _context47.next = 9;
          break;
        }
        _context47.next = 9;
        return new VerificationError("Version type shall match the version pattern.");
      case 9:
        if (that.length <= 4) {
          _context47.next = 12;
          break;
        }
        _context47.next = 12;
        return new VerificationError("Version type shall have a maximum length of 4 characters.");
      case 12:
      case "end":
        return _context47.stop();
    }
  }, _marked8);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyRevisionType(that) {
  return _regeneratorRuntime().wrap(function verifyRevisionType$(_context48) {
    while (1) switch (_context48.prev = _context48.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context48.next = 3;
          break;
        }
        _context48.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context48.next = 6;
          break;
        }
        _context48.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (matchesRevisionType(that)) {
          _context48.next = 9;
          break;
        }
        _context48.next = 9;
        return new VerificationError("Revision type shall match the revision pattern.");
      case 9:
        if (that.length <= 4) {
          _context48.next = 12;
          break;
        }
        _context48.next = 12;
        return new VerificationError("Revision type shall have a maximum length of 4 characters.");
      case 12:
      case "end":
        return _context48.stop();
    }
  }, _marked9);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyLabelType(that) {
  return _regeneratorRuntime().wrap(function verifyLabelType$(_context49) {
    while (1) switch (_context49.prev = _context49.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context49.next = 3;
          break;
        }
        _context49.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context49.next = 6;
          break;
        }
        _context49.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 64) {
          _context49.next = 9;
          break;
        }
        _context49.next = 9;
        return new VerificationError("Label type shall have a maximum length of 64 characters.");
      case 9:
      case "end":
        return _context49.stop();
    }
  }, _marked10);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyMessageTopicType(that) {
  return _regeneratorRuntime().wrap(function verifyMessageTopicType$(_context50) {
    while (1) switch (_context50.prev = _context50.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context50.next = 3;
          break;
        }
        _context50.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context50.next = 6;
          break;
        }
        _context50.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 255) {
          _context50.next = 9;
          break;
        }
        _context50.next = 9;
        return new VerificationError("Message topic type shall have a maximum length of 255 " + "characters.");
      case 9:
      case "end":
        return _context50.stop();
    }
  }, _marked11);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyBcp47LanguageTag(that) {
  return _regeneratorRuntime().wrap(function verifyBcp47LanguageTag$(_context51) {
    while (1) switch (_context51.prev = _context51.next) {
      case 0:
        if (matchesBcp47(that)) {
          _context51.next = 3;
          break;
        }
        _context51.next = 3;
        return new VerificationError("The value must represent a value language tag conformant to " + "BCP 47.");
      case 3:
      case "end":
        return _context51.stop();
    }
  }, _marked12);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyContentType(that) {
  return _regeneratorRuntime().wrap(function verifyContentType$(_context52) {
    while (1) switch (_context52.prev = _context52.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context52.next = 3;
          break;
        }
        _context52.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context52.next = 6;
          break;
        }
        _context52.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 100) {
          _context52.next = 9;
          break;
        }
        _context52.next = 9;
        return new VerificationError("Content type shall have a maximum length of 100 characters.");
      case 9:
        if (matchesMimeType(that)) {
          _context52.next = 12;
          break;
        }
        _context52.next = 12;
        return new VerificationError("The value must represent a valid content MIME type " + "according to RFC 2046.");
      case 12:
      case "end":
        return _context52.stop();
    }
  }, _marked13);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyPathType(that) {
  return _regeneratorRuntime().wrap(function verifyPathType$(_context53) {
    while (1) switch (_context53.prev = _context53.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context53.next = 3;
          break;
        }
        _context53.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context53.next = 6;
          break;
        }
        _context53.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 2000) {
          _context53.next = 9;
          break;
        }
        _context53.next = 9;
        return new VerificationError("Identifier shall have a maximum length of 2000 characters.");
      case 9:
        if (matchesRfc8089Path(that)) {
          _context53.next = 12;
          break;
        }
        _context53.next = 12;
        return new VerificationError("The value must represent a valid file URI scheme according " + "to RFC 8089.");
      case 12:
      case "end":
        return _context53.stop();
    }
  }, _marked14);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyQualifierType(that) {
  return _regeneratorRuntime().wrap(function verifyQualifierType$(_context54) {
    while (1) switch (_context54.prev = _context54.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context54.next = 3;
          break;
        }
        _context54.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context54.next = 6;
          break;
        }
        _context54.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 128) {
          _context54.next = 9;
          break;
        }
        _context54.next = 9;
        return new VerificationError("Name type shall have a maximum length of 128 characters.");
      case 9:
      case "end":
        return _context54.stop();
    }
  }, _marked15);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyValueDataType(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
that) {
  return _regeneratorRuntime().wrap(function verifyValueDataType$(_context55) {
    while (1) switch (_context55.prev = _context55.next) {
      case 0:
      case "end":
        return _context55.stop();
    }
  }, _marked16);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyIdShortType(that) {
  return _regeneratorRuntime().wrap(function verifyIdShortType$(_context56) {
    while (1) switch (_context56.prev = _context56.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context56.next = 3;
          break;
        }
        _context56.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context56.next = 6;
          break;
        }
        _context56.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 128) {
          _context56.next = 9;
          break;
        }
        _context56.next = 9;
        return new VerificationError("Name type shall have a maximum length of 128 characters.");
      case 9:
        if (matchesIdShort(that)) {
          _context56.next = 12;
          break;
        }
        _context56.next = 12;
        return new VerificationError("ID-short of Referables shall only feature letters, digits, " + "underscore (``_``); starting mandatory with a letter. " + "*I.e.* ``[a-zA-Z][a-zA-Z0-9_]*``.");
      case 12:
      case "end":
        return _context56.stop();
    }
  }, _marked17);
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
//# sourceMappingURL=verification.js.map