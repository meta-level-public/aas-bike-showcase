"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PropertySegment = exports.Path = exports.IndexSegment = exports.DeserializationError = void 0;
exports.aasSubmodelElementsFromJsonable = aasSubmodelElementsFromJsonable;
exports.abstractLangStringFromJsonable = abstractLangStringFromJsonable;
exports.administrativeInformationFromJsonable = administrativeInformationFromJsonable;
exports.annotatedRelationshipElementFromJsonable = annotatedRelationshipElementFromJsonable;
exports.assetAdministrationShellFromJsonable = assetAdministrationShellFromJsonable;
exports.assetInformationFromJsonable = assetInformationFromJsonable;
exports.assetKindFromJsonable = assetKindFromJsonable;
exports.basicEventElementFromJsonable = basicEventElementFromJsonable;
exports.blobFromJsonable = blobFromJsonable;
exports.capabilityFromJsonable = capabilityFromJsonable;
exports.conceptDescriptionFromJsonable = conceptDescriptionFromJsonable;
exports.dataElementFromJsonable = dataElementFromJsonable;
exports.dataSpecificationContentFromJsonable = dataSpecificationContentFromJsonable;
exports.dataSpecificationIec61360FromJsonable = dataSpecificationIec61360FromJsonable;
exports.dataTypeDefXsdFromJsonable = dataTypeDefXsdFromJsonable;
exports.dataTypeIec61360FromJsonable = dataTypeIec61360FromJsonable;
exports.directionFromJsonable = directionFromJsonable;
exports.embeddedDataSpecificationFromJsonable = embeddedDataSpecificationFromJsonable;
exports.entityFromJsonable = entityFromJsonable;
exports.entityTypeFromJsonable = entityTypeFromJsonable;
exports.environmentFromJsonable = environmentFromJsonable;
exports.eventElementFromJsonable = eventElementFromJsonable;
exports.eventPayloadFromJsonable = eventPayloadFromJsonable;
exports.extensionFromJsonable = extensionFromJsonable;
exports.fileFromJsonable = fileFromJsonable;
exports.hasDataSpecificationFromJsonable = hasDataSpecificationFromJsonable;
exports.hasExtensionsFromJsonable = hasExtensionsFromJsonable;
exports.hasKindFromJsonable = hasKindFromJsonable;
exports.hasSemanticsFromJsonable = hasSemanticsFromJsonable;
exports.identifiableFromJsonable = identifiableFromJsonable;
exports.keyFromJsonable = keyFromJsonable;
exports.keyTypesFromJsonable = keyTypesFromJsonable;
exports.langStringDefinitionTypeIec61360FromJsonable = langStringDefinitionTypeIec61360FromJsonable;
exports.langStringNameTypeFromJsonable = langStringNameTypeFromJsonable;
exports.langStringPreferredNameTypeIec61360FromJsonable = langStringPreferredNameTypeIec61360FromJsonable;
exports.langStringShortNameTypeIec61360FromJsonable = langStringShortNameTypeIec61360FromJsonable;
exports.langStringTextTypeFromJsonable = langStringTextTypeFromJsonable;
exports.levelTypeFromJsonable = levelTypeFromJsonable;
exports.modellingKindFromJsonable = modellingKindFromJsonable;
exports.multiLanguagePropertyFromJsonable = multiLanguagePropertyFromJsonable;
exports.operationFromJsonable = operationFromJsonable;
exports.operationVariableFromJsonable = operationVariableFromJsonable;
exports.propertyFromJsonable = propertyFromJsonable;
exports.qualifiableFromJsonable = qualifiableFromJsonable;
exports.qualifierFromJsonable = qualifierFromJsonable;
exports.qualifierKindFromJsonable = qualifierKindFromJsonable;
exports.rangeFromJsonable = rangeFromJsonable;
exports.referableFromJsonable = referableFromJsonable;
exports.referenceElementFromJsonable = referenceElementFromJsonable;
exports.referenceFromJsonable = referenceFromJsonable;
exports.referenceTypesFromJsonable = referenceTypesFromJsonable;
exports.relationshipElementFromJsonable = relationshipElementFromJsonable;
exports.resourceFromJsonable = resourceFromJsonable;
exports.specificAssetIdFromJsonable = specificAssetIdFromJsonable;
exports.stateOfEventFromJsonable = stateOfEventFromJsonable;
exports.submodelElementCollectionFromJsonable = submodelElementCollectionFromJsonable;
exports.submodelElementFromJsonable = submodelElementFromJsonable;
exports.submodelElementListFromJsonable = submodelElementListFromJsonable;
exports.submodelFromJsonable = submodelFromJsonable;
exports.toJsonable = toJsonable;
exports.valueListFromJsonable = valueListFromJsonable;
exports.valueReferencePairFromJsonable = valueReferencePairFromJsonable;
var AasCommon = _interopRequireWildcard(require("./common"));
var AasTypes = _interopRequireWildcard(require("./types"));
var AasStringification = _interopRequireWildcard(require("./stringification"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
/**
 * Represent a property on a path to the erroneous value.
 */
var PropertySegment = /*#__PURE__*/_createClass(
/**
 * Instance that contains the property
 */

/**
 * Name of the property
 */

function PropertySegment(instance, name) {
  _classCallCheck(this, PropertySegment);
  this.instance = instance;
  this.name = name;
});
/**
 * Represent an index access on a path to the erroneous value.
 */
exports.PropertySegment = PropertySegment;
var IndexSegment = /*#__PURE__*/_createClass(
/**
 * Container that contains the item
 */

/**
 * Index of the item
 */

function IndexSegment(container, index) {
  _classCallCheck(this, IndexSegment);
  if (!Number.isInteger(index)) {
    throw new Error("Expected an integer for the index, but got: ".concat(index));
  }
  this.container = container;
  this.index = index;
});
exports.IndexSegment = IndexSegment;
/**
 * Represent the relative path to the erroneous value.
 */
var Path = /*#__PURE__*/function () {
  function Path() {
    _classCallCheck(this, Path);
    _defineProperty(this, "_segments", new Array());
  }
  _createClass(Path, [{
    key: "segments",
    value:
    /**
     * Get the segments of the path.
     */
    function segments() {
      return this._segments;
    }

    /**
     * Insert the `segment` in front of the {@link segments}.
     *
     * @param segment - segment to be prepended to {@link segments}
     */
  }, {
    key: "prepend",
    value: function prepend(segment) {
      this._segments.unshift(segment);
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this._segments.length === 0) {
        return "";
      }
      var parts = new Array();
      var segment = this._segments[0];
      if (segment instanceof PropertySegment) {
        parts.push(segment.name);
      } else if (segment instanceof IndexSegment) {
        parts.push("[".concat(segment.index, "]"));
      } else {
        throw new Error("Unexpected segment: ".concat(segment));
      }
      for (var i = 1; i < this._segments.length; i++) {
        segment = this._segments[i];
        if (segment instanceof PropertySegment) {
          parts.push(".".concat(segment.name));
        } else if (segment instanceof IndexSegment) {
          parts.push("[".concat(segment.index, "]"));
        } else {
          throw new Error("Unexpected segment: ".concat(segment));
        }
      }
      return parts.join("");
    }
  }]);
  return Path;
}(); // region De-serialization
/**
 * Signal that the JSON de-serialization could not be performed.
 */
exports.Path = Path;
var DeserializationError = /*#__PURE__*/_createClass(
/**
 * Human-readable explanation of the error
 */

/**
 * Relative path to the erroneous value
 */

function DeserializationError(message) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  _classCallCheck(this, DeserializationError);
  this.message = message;
  this.path = path !== null && path !== void 0 ? path : new Path();
});
/**
 * Create an error as {@link common.Either}.
 *
 * @param message - human-readable explanation of the error
 * @returns An {@link common.Either } with the error set
 * @typeParam T - type of the value if there had been no error
 */
exports.DeserializationError = DeserializationError;
function newDeserializationError(message) {
  return new AasCommon.Either(null, new DeserializationError(message));
}

/**
 * Parse `jsonable` as a boolean.
 *
 * @param jsonable - to be parsed
 * @returns parsed boolean value, or an error
 */
function booleanFromJsonable(jsonable) {
  // `typeof` seems to be optimized these days, so we use it instead of
  // literal comparison, see:
  // https://stackoverflow.com/questions/61786250/is-typeof-faster-than-literal-comparison

  if (jsonable === null) {
    return newDeserializationError("Expected a boolean, but got null");
  }
  if (typeof jsonable !== "boolean") {
    return newDeserializationError("Expected a boolean, but got ".concat(_typeof(jsonable)));
  }
  return new AasCommon.Either(jsonable, null);
}

/**
 * Parse `jsonable` as an integer.
 *
 * @param jsonable - to be parsed
 * @returns parsed integer value, or an error
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function integerFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected an integer number, but got null");
  }
  if (typeof jsonable !== "number") {
    return newDeserializationError("Expected an integer number, but got: ".concat(_typeof(jsonable)));
  }
  if (!Number.isInteger(jsonable)) {
    return newDeserializationError("Expected an integer number, but got: ".concat(jsonable));
  }
  return new AasCommon.Either(jsonable, null);
}

/**
 * Parse `jsonable` as a number.
 *
 * @param jsonable - to be parsed
 * @returns parsed numeric value, or an error
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function numberFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a number, but got null");
  }
  if (typeof jsonable !== "number") {
    return newDeserializationError("Expected a number, but got: ".concat(_typeof(jsonable)));
  }
  return new AasCommon.Either(jsonable, null);
}

/**
 * Parse `jsonable` as a string.
 *
 * @param jsonable - to be parsed
 * @returns parsed string value, or an error
 */
function stringFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a string, but got null");
  }
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  return new AasCommon.Either(jsonable, null);
}

/**
 * Parse `jsonable` as a byte array.
 *
 * @param jsonable - to be parsed
 * @returns parsed byte array, or an error
 */
function bytesFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a base64-encoded string, but got null");
  }
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a base64-encoded string, but got: ".concat(_typeof(jsonable)));
  }
  var either = AasCommon.base64Decode(jsonable);
  if (either.error !== null) {
    return newDeserializationError(either.error);
  }
  return new AasCommon.Either(either.mustValue(), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasSemantics}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function hasSemanticsFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = HAS_SEMANTICS_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IHasSemantics: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Extension}.
 */
var SetterForExtension = /*#__PURE__*/function () {
  function SetterForExtension() {
    _classCallCheck(this, SetterForExtension);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "name", null);
    _defineProperty(this, "valueType", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "refersTo", null);
  }
  _createClass(SetterForExtension, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator = _createForOfIteratorHelper(iterable),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var jsonableItem = _step.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link name}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setNameFromJsonable",
    value: function setNameFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.name = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeFromJsonable",
    value: function setValueTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link refersTo}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setRefersToFromJsonable",
    value: function setRefersToFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator2 = _createForOfIteratorHelper(iterable),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var jsonableItem = _step2.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      this.refersTo = items;
      return null;
    }
  }]);
  return SetterForExtension;
}();
/**
 * Parse an instance of {@link types!Extension} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Extension},
 * or an error if any
 */
function extensionFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForExtension();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_EXTENSION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.name === null) {
    return newDeserializationError("The required property 'name' is missing");
  }
  return new AasCommon.Either(new AasTypes.Extension(setter.name, setter.semanticId, setter.supplementalSemanticIds, setter.valueType, setter.value, setter.refersTo), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasExtensions}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function hasExtensionsFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = HAS_EXTENSIONS_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IHasExtensions: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IReferable}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function referableFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = REFERABLE_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IReferable: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IIdentifiable}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function identifiableFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = IDENTIFIABLE_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IIdentifiable: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!ModellingKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function modellingKindFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.modellingKindFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of ModellingKind: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function hasKindFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = HAS_KIND_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IHasKind: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasDataSpecification}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function hasDataSpecificationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = HAS_DATA_SPECIFICATION_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IHasDataSpecification: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!AdministrativeInformation}.
 */
var SetterForAdministrativeInformation = /*#__PURE__*/function () {
  function SetterForAdministrativeInformation() {
    _classCallCheck(this, SetterForAdministrativeInformation);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "version", null);
    _defineProperty(this, "revision", null);
    _defineProperty(this, "creator", null);
    _defineProperty(this, "templateId", null);
  }
  _createClass(SetterForAdministrativeInformation, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator3 = _createForOfIteratorHelper(iterable),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var jsonableItem = _step3.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link version}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setVersionFromJsonable",
    value: function setVersionFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.version = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link revision}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setRevisionFromJsonable",
    value: function setRevisionFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.revision = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link creator}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCreatorFromJsonable",
    value: function setCreatorFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.creator = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link templateId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTemplateIdFromJsonable",
    value: function setTemplateIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.templateId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForAdministrativeInformation;
}();
/**
 * Parse an instance of {@link types!AdministrativeInformation} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AdministrativeInformation},
 * or an error if any
 */
function administrativeInformationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForAdministrativeInformation();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ADMINISTRATIVE_INFORMATION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  return new AasCommon.Either(new AasTypes.AdministrativeInformation(setter.embeddedDataSpecifications, setter.version, setter.revision, setter.creator, setter.templateId), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IQualifiable}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function qualifiableFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = QUALIFIABLE_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IQualifiable: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!QualifierKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function qualifierKindFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.qualifierKindFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of QualifierKind: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Qualifier}.
 */
var SetterForQualifier = /*#__PURE__*/function () {
  function SetterForQualifier() {
    _classCallCheck(this, SetterForQualifier);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "kind", null);
    _defineProperty(this, "type", null);
    _defineProperty(this, "valueType", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "valueId", null);
  }
  _createClass(SetterForQualifier, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator4 = _createForOfIteratorHelper(iterable),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var jsonableItem = _step4.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link kind}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setKindFromJsonable",
    value: function setKindFromJsonable(jsonable) {
      var parsedOrError = qualifierKindFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.kind = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link type}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypeFromJsonable",
    value: function setTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.type = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeFromJsonable",
    value: function setValueTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueIdFromJsonable",
    value: function setValueIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForQualifier;
}();
/**
 * Parse an instance of {@link types!Qualifier} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Qualifier},
 * or an error if any
 */
function qualifierFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForQualifier();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_QUALIFIER.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.type === null) {
    return newDeserializationError("The required property 'type' is missing");
  }
  if (setter.valueType === null) {
    return newDeserializationError("The required property 'valueType' is missing");
  }
  return new AasCommon.Either(new AasTypes.Qualifier(setter.type, setter.valueType, setter.semanticId, setter.supplementalSemanticIds, setter.kind, setter.value, setter.valueId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!AssetAdministrationShell}.
 */
var SetterForAssetAdministrationShell = /*#__PURE__*/function () {
  function SetterForAssetAdministrationShell() {
    _classCallCheck(this, SetterForAssetAdministrationShell);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "administration", null);
    _defineProperty(this, "id", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "derivedFrom", null);
    _defineProperty(this, "assetInformation", null);
    _defineProperty(this, "submodels", null);
  }
  _createClass(SetterForAssetAdministrationShell, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator5 = _createForOfIteratorHelper(iterable),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var jsonableItem = _step5.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator6 = _createForOfIteratorHelper(iterable),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var jsonableItem = _step6.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator7 = _createForOfIteratorHelper(iterable),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var jsonableItem = _step7.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link administration}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAdministrationFromJsonable",
    value: function setAdministrationFromJsonable(jsonable) {
      var parsedOrError = administrativeInformationFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.administration = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link id}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdFromJsonable",
    value: function setIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.id = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator8 = _createForOfIteratorHelper(iterable),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var jsonableItem = _step8.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link derivedFrom}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDerivedFromFromJsonable",
    value: function setDerivedFromFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.derivedFrom = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link assetInformation}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAssetInformationFromJsonable",
    value: function setAssetInformationFromJsonable(jsonable) {
      var parsedOrError = assetInformationFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.assetInformation = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link submodels}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSubmodelsFromJsonable",
    value: function setSubmodelsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator9 = _createForOfIteratorHelper(iterable),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var jsonableItem = _step9.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      this.submodels = items;
      return null;
    }
  }]);
  return SetterForAssetAdministrationShell;
}();
/**
 * Parse an instance of {@link types!AssetAdministrationShell} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AssetAdministrationShell},
 * or an error if any
 */
function assetAdministrationShellFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForAssetAdministrationShell();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ASSET_ADMINISTRATION_SHELL.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.id === null) {
    return newDeserializationError("The required property 'id' is missing");
  }
  if (setter.assetInformation === null) {
    return newDeserializationError("The required property 'assetInformation' is missing");
  }
  return new AasCommon.Either(new AasTypes.AssetAdministrationShell(setter.id, setter.assetInformation, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.administration, setter.embeddedDataSpecifications, setter.derivedFrom, setter.submodels), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!AssetInformation}.
 */
var SetterForAssetInformation = /*#__PURE__*/function () {
  function SetterForAssetInformation() {
    _classCallCheck(this, SetterForAssetInformation);
    _defineProperty(this, "assetKind", null);
    _defineProperty(this, "globalAssetId", null);
    _defineProperty(this, "specificAssetIds", null);
    _defineProperty(this, "assetType", null);
    _defineProperty(this, "defaultThumbnail", null);
  }
  _createClass(SetterForAssetInformation, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link assetKind}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAssetKindFromJsonable",
    value: function setAssetKindFromJsonable(jsonable) {
      var parsedOrError = assetKindFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.assetKind = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link globalAssetId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setGlobalAssetIdFromJsonable",
    value: function setGlobalAssetIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.globalAssetId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link specificAssetIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSpecificAssetIdsFromJsonable",
    value: function setSpecificAssetIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator10 = _createForOfIteratorHelper(iterable),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var jsonableItem = _step10.value;
          var itemOrError = specificAssetIdFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      this.specificAssetIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link assetType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAssetTypeFromJsonable",
    value: function setAssetTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.assetType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link defaultThumbnail}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDefaultThumbnailFromJsonable",
    value: function setDefaultThumbnailFromJsonable(jsonable) {
      var parsedOrError = resourceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.defaultThumbnail = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForAssetInformation;
}();
/**
 * Parse an instance of {@link types!AssetInformation} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AssetInformation},
 * or an error if any
 */
function assetInformationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForAssetInformation();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ASSET_INFORMATION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.assetKind === null) {
    return newDeserializationError("The required property 'assetKind' is missing");
  }
  return new AasCommon.Either(new AasTypes.AssetInformation(setter.assetKind, setter.globalAssetId, setter.specificAssetIds, setter.assetType, setter.defaultThumbnail), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Resource}.
 */
var SetterForResource = /*#__PURE__*/function () {
  function SetterForResource() {
    _classCallCheck(this, SetterForResource);
    _defineProperty(this, "path", null);
    _defineProperty(this, "contentType", null);
  }
  _createClass(SetterForResource, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link path}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setPathFromJsonable",
    value: function setPathFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.path = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link contentType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setContentTypeFromJsonable",
    value: function setContentTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.contentType = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForResource;
}();
/**
 * Parse an instance of {@link types!Resource} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Resource},
 * or an error if any
 */
function resourceFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForResource();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_RESOURCE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.path === null) {
    return newDeserializationError("The required property 'path' is missing");
  }
  return new AasCommon.Either(new AasTypes.Resource(setter.path, setter.contentType), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!AssetKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function assetKindFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.assetKindFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of AssetKind: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!SpecificAssetId}.
 */
var SetterForSpecificAssetId = /*#__PURE__*/function () {
  function SetterForSpecificAssetId() {
    _classCallCheck(this, SetterForSpecificAssetId);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "name", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "externalSubjectId", null);
  }
  _createClass(SetterForSpecificAssetId, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator11 = _createForOfIteratorHelper(iterable),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var jsonableItem = _step11.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link name}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setNameFromJsonable",
    value: function setNameFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.name = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link externalSubjectId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExternalSubjectIdFromJsonable",
    value: function setExternalSubjectIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.externalSubjectId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForSpecificAssetId;
}();
/**
 * Parse an instance of {@link types!SpecificAssetId} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!SpecificAssetId},
 * or an error if any
 */
function specificAssetIdFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForSpecificAssetId();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_SPECIFIC_ASSET_ID.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.name === null) {
    return newDeserializationError("The required property 'name' is missing");
  }
  if (setter.value === null) {
    return newDeserializationError("The required property 'value' is missing");
  }
  return new AasCommon.Either(new AasTypes.SpecificAssetId(setter.name, setter.value, setter.semanticId, setter.supplementalSemanticIds, setter.externalSubjectId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Submodel}.
 */
var SetterForSubmodel = /*#__PURE__*/function () {
  function SetterForSubmodel() {
    _classCallCheck(this, SetterForSubmodel);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "administration", null);
    _defineProperty(this, "id", null);
    _defineProperty(this, "kind", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "submodelElements", null);
  }
  _createClass(SetterForSubmodel, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator12 = _createForOfIteratorHelper(iterable),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var jsonableItem = _step12.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator13 = _createForOfIteratorHelper(iterable),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var jsonableItem = _step13.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator14 = _createForOfIteratorHelper(iterable),
        _step14;
      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var jsonableItem = _step14.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link administration}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAdministrationFromJsonable",
    value: function setAdministrationFromJsonable(jsonable) {
      var parsedOrError = administrativeInformationFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.administration = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link id}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdFromJsonable",
    value: function setIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.id = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link kind}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setKindFromJsonable",
    value: function setKindFromJsonable(jsonable) {
      var parsedOrError = modellingKindFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.kind = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator15 = _createForOfIteratorHelper(iterable),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var jsonableItem = _step15.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator16 = _createForOfIteratorHelper(iterable),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var jsonableItem = _step16.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator17 = _createForOfIteratorHelper(iterable),
        _step17;
      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var jsonableItem = _step17.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link submodelElements}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSubmodelElementsFromJsonable",
    value: function setSubmodelElementsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator18 = _createForOfIteratorHelper(iterable),
        _step18;
      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var jsonableItem = _step18.value;
          var itemOrError = submodelElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
      this.submodelElements = items;
      return null;
    }
  }]);
  return SetterForSubmodel;
}();
/**
 * Parse an instance of {@link types!Submodel} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Submodel},
 * or an error if any
 */
function submodelFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForSubmodel();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_SUBMODEL.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.id === null) {
    return newDeserializationError("The required property 'id' is missing");
  }
  return new AasCommon.Either(new AasTypes.Submodel(setter.id, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.administration, setter.kind, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.submodelElements), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!ISubmodelElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function submodelElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = SUBMODEL_ELEMENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for ISubmodelElement: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IRelationshipElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function relationshipElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = RELATIONSHIP_ELEMENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IRelationshipElement: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!RelationshipElement}.
 */
var SetterForRelationshipElement = /*#__PURE__*/function () {
  function SetterForRelationshipElement() {
    _classCallCheck(this, SetterForRelationshipElement);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "first", null);
    _defineProperty(this, "second", null);
  }
  _createClass(SetterForRelationshipElement, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator19 = _createForOfIteratorHelper(iterable),
        _step19;
      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var jsonableItem = _step19.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator20 = _createForOfIteratorHelper(iterable),
        _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var jsonableItem = _step20.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator21 = _createForOfIteratorHelper(iterable),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var jsonableItem = _step21.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator22 = _createForOfIteratorHelper(iterable),
        _step22;
      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var jsonableItem = _step22.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator23 = _createForOfIteratorHelper(iterable),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var jsonableItem = _step23.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator24 = _createForOfIteratorHelper(iterable),
        _step24;
      try {
        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
          var jsonableItem = _step24.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator24.e(err);
      } finally {
        _iterator24.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link first}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setFirstFromJsonable",
    value: function setFirstFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.first = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link second}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSecondFromJsonable",
    value: function setSecondFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.second = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForRelationshipElement;
}();
/**
 * Parse an instance of {@link types!RelationshipElement} from the JSON-able
 * structure `jsonable`.
 *
 * This function performs no dispatch! It is used to parse the properties
 * as-are, and already assumes the exact model type. Usually, this function
 * is called from within a dispatching function, and you never call it
 * directly. If you want to de-serialize an instance of
 * {@link types!RelationshipElement}, call
 * {@link relationshipElementFromJsonable}.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!RelationshipElement},
 * or an error if any
 */
function relationshipElementFromJsonableWithoutDispatch(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForRelationshipElement();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_RELATIONSHIP_ELEMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.first === null) {
    return newDeserializationError("The required property 'first' is missing");
  }
  if (setter.second === null) {
    return newDeserializationError("The required property 'second' is missing");
  }
  return new AasCommon.Either(new AasTypes.RelationshipElement(setter.first, setter.second, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!AasSubmodelElements}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function aasSubmodelElementsFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.aasSubmodelElementsFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of AasSubmodelElements: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!SubmodelElementList}.
 */
var SetterForSubmodelElementList = /*#__PURE__*/function () {
  function SetterForSubmodelElementList() {
    _classCallCheck(this, SetterForSubmodelElementList);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "orderRelevant", null);
    _defineProperty(this, "semanticIdListElement", null);
    _defineProperty(this, "typeValueListElement", null);
    _defineProperty(this, "valueTypeListElement", null);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForSubmodelElementList, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator25 = _createForOfIteratorHelper(iterable),
        _step25;
      try {
        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
          var jsonableItem = _step25.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator25.e(err);
      } finally {
        _iterator25.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator26 = _createForOfIteratorHelper(iterable),
        _step26;
      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var jsonableItem = _step26.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator27 = _createForOfIteratorHelper(iterable),
        _step27;
      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var jsonableItem = _step27.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator28 = _createForOfIteratorHelper(iterable),
        _step28;
      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
          var jsonableItem = _step28.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator29 = _createForOfIteratorHelper(iterable),
        _step29;
      try {
        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
          var jsonableItem = _step29.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator29.e(err);
      } finally {
        _iterator29.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator30 = _createForOfIteratorHelper(iterable),
        _step30;
      try {
        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
          var jsonableItem = _step30.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator30.e(err);
      } finally {
        _iterator30.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link orderRelevant}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setOrderRelevantFromJsonable",
    value: function setOrderRelevantFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.orderRelevant = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link semanticIdListElement}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdListElementFromJsonable",
    value: function setSemanticIdListElementFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticIdListElement = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link typeValueListElement}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypeValueListElementFromJsonable",
    value: function setTypeValueListElementFromJsonable(jsonable) {
      var parsedOrError = aasSubmodelElementsFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.typeValueListElement = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueTypeListElement}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeListElementFromJsonable",
    value: function setValueTypeListElementFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueTypeListElement = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator31 = _createForOfIteratorHelper(iterable),
        _step31;
      try {
        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
          var jsonableItem = _step31.value;
          var itemOrError = submodelElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator31.e(err);
      } finally {
        _iterator31.f();
      }
      this.value = items;
      return null;
    }
  }]);
  return SetterForSubmodelElementList;
}();
/**
 * Parse an instance of {@link types!SubmodelElementList} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!SubmodelElementList},
 * or an error if any
 */
function submodelElementListFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForSubmodelElementList();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_SUBMODEL_ELEMENT_LIST.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.typeValueListElement === null) {
    return newDeserializationError("The required property 'typeValueListElement' is missing");
  }
  return new AasCommon.Either(new AasTypes.SubmodelElementList(setter.typeValueListElement, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.orderRelevant, setter.semanticIdListElement, setter.valueTypeListElement, setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!SubmodelElementCollection}.
 */
var SetterForSubmodelElementCollection = /*#__PURE__*/function () {
  function SetterForSubmodelElementCollection() {
    _classCallCheck(this, SetterForSubmodelElementCollection);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForSubmodelElementCollection, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator32 = _createForOfIteratorHelper(iterable),
        _step32;
      try {
        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
          var jsonableItem = _step32.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator32.e(err);
      } finally {
        _iterator32.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator33 = _createForOfIteratorHelper(iterable),
        _step33;
      try {
        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
          var jsonableItem = _step33.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator33.e(err);
      } finally {
        _iterator33.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator34 = _createForOfIteratorHelper(iterable),
        _step34;
      try {
        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
          var jsonableItem = _step34.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator34.e(err);
      } finally {
        _iterator34.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator35 = _createForOfIteratorHelper(iterable),
        _step35;
      try {
        for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
          var jsonableItem = _step35.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator35.e(err);
      } finally {
        _iterator35.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator36 = _createForOfIteratorHelper(iterable),
        _step36;
      try {
        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
          var jsonableItem = _step36.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator36.e(err);
      } finally {
        _iterator36.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator37 = _createForOfIteratorHelper(iterable),
        _step37;
      try {
        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
          var jsonableItem = _step37.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator37.e(err);
      } finally {
        _iterator37.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator38 = _createForOfIteratorHelper(iterable),
        _step38;
      try {
        for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
          var jsonableItem = _step38.value;
          var itemOrError = submodelElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator38.e(err);
      } finally {
        _iterator38.f();
      }
      this.value = items;
      return null;
    }
  }]);
  return SetterForSubmodelElementCollection;
}();
/**
 * Parse an instance of {@link types!SubmodelElementCollection} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!SubmodelElementCollection},
 * or an error if any
 */
function submodelElementCollectionFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForSubmodelElementCollection();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_SUBMODEL_ELEMENT_COLLECTION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  return new AasCommon.Either(new AasTypes.SubmodelElementCollection(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IDataElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function dataElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = DATA_ELEMENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IDataElement: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Property}.
 */
var SetterForProperty = /*#__PURE__*/function () {
  function SetterForProperty() {
    _classCallCheck(this, SetterForProperty);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "valueType", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "valueId", null);
  }
  _createClass(SetterForProperty, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator39 = _createForOfIteratorHelper(iterable),
        _step39;
      try {
        for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
          var jsonableItem = _step39.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator39.e(err);
      } finally {
        _iterator39.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator40 = _createForOfIteratorHelper(iterable),
        _step40;
      try {
        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
          var jsonableItem = _step40.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator40.e(err);
      } finally {
        _iterator40.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator41 = _createForOfIteratorHelper(iterable),
        _step41;
      try {
        for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
          var jsonableItem = _step41.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator41.e(err);
      } finally {
        _iterator41.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator42 = _createForOfIteratorHelper(iterable),
        _step42;
      try {
        for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
          var jsonableItem = _step42.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator42.e(err);
      } finally {
        _iterator42.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator43 = _createForOfIteratorHelper(iterable),
        _step43;
      try {
        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
          var jsonableItem = _step43.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator43.e(err);
      } finally {
        _iterator43.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator44 = _createForOfIteratorHelper(iterable),
        _step44;
      try {
        for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
          var jsonableItem = _step44.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator44.e(err);
      } finally {
        _iterator44.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeFromJsonable",
    value: function setValueTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueIdFromJsonable",
    value: function setValueIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForProperty;
}();
/**
 * Parse an instance of {@link types!Property} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Property},
 * or an error if any
 */
function propertyFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForProperty();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_PROPERTY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.valueType === null) {
    return newDeserializationError("The required property 'valueType' is missing");
  }
  return new AasCommon.Either(new AasTypes.Property(setter.valueType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value, setter.valueId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!MultiLanguageProperty}.
 */
var SetterForMultiLanguageProperty = /*#__PURE__*/function () {
  function SetterForMultiLanguageProperty() {
    _classCallCheck(this, SetterForMultiLanguageProperty);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "valueId", null);
  }
  _createClass(SetterForMultiLanguageProperty, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator45 = _createForOfIteratorHelper(iterable),
        _step45;
      try {
        for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
          var jsonableItem = _step45.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator45.e(err);
      } finally {
        _iterator45.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator46 = _createForOfIteratorHelper(iterable),
        _step46;
      try {
        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
          var jsonableItem = _step46.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator46.e(err);
      } finally {
        _iterator46.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator47 = _createForOfIteratorHelper(iterable),
        _step47;
      try {
        for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
          var jsonableItem = _step47.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator47.e(err);
      } finally {
        _iterator47.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator48 = _createForOfIteratorHelper(iterable),
        _step48;
      try {
        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
          var jsonableItem = _step48.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator48.e(err);
      } finally {
        _iterator48.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator49 = _createForOfIteratorHelper(iterable),
        _step49;
      try {
        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
          var jsonableItem = _step49.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator49.e(err);
      } finally {
        _iterator49.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator50 = _createForOfIteratorHelper(iterable),
        _step50;
      try {
        for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
          var jsonableItem = _step50.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator50.e(err);
      } finally {
        _iterator50.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator51 = _createForOfIteratorHelper(iterable),
        _step51;
      try {
        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
          var jsonableItem = _step51.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator51.e(err);
      } finally {
        _iterator51.f();
      }
      this.value = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueIdFromJsonable",
    value: function setValueIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForMultiLanguageProperty;
}();
/**
 * Parse an instance of {@link types!MultiLanguageProperty} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!MultiLanguageProperty},
 * or an error if any
 */
function multiLanguagePropertyFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForMultiLanguageProperty();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_MULTI_LANGUAGE_PROPERTY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  return new AasCommon.Either(new AasTypes.MultiLanguageProperty(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value, setter.valueId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Range}.
 */
var SetterForRange = /*#__PURE__*/function () {
  function SetterForRange() {
    _classCallCheck(this, SetterForRange);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "valueType", null);
    _defineProperty(this, "min", null);
    _defineProperty(this, "max", null);
  }
  _createClass(SetterForRange, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator52 = _createForOfIteratorHelper(iterable),
        _step52;
      try {
        for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
          var jsonableItem = _step52.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator52.e(err);
      } finally {
        _iterator52.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator53 = _createForOfIteratorHelper(iterable),
        _step53;
      try {
        for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
          var jsonableItem = _step53.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator53.e(err);
      } finally {
        _iterator53.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator54 = _createForOfIteratorHelper(iterable),
        _step54;
      try {
        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
          var jsonableItem = _step54.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator54.e(err);
      } finally {
        _iterator54.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator55 = _createForOfIteratorHelper(iterable),
        _step55;
      try {
        for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
          var jsonableItem = _step55.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator55.e(err);
      } finally {
        _iterator55.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator56 = _createForOfIteratorHelper(iterable),
        _step56;
      try {
        for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
          var jsonableItem = _step56.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator56.e(err);
      } finally {
        _iterator56.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator57 = _createForOfIteratorHelper(iterable),
        _step57;
      try {
        for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
          var jsonableItem = _step57.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator57.e(err);
      } finally {
        _iterator57.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeFromJsonable",
    value: function setValueTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link min}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMinFromJsonable",
    value: function setMinFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.min = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link max}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMaxFromJsonable",
    value: function setMaxFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.max = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForRange;
}();
/**
 * Parse an instance of {@link types!Range} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Range},
 * or an error if any
 */
function rangeFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForRange();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_RANGE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.valueType === null) {
    return newDeserializationError("The required property 'valueType' is missing");
  }
  return new AasCommon.Either(new AasTypes.Range(setter.valueType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.min, setter.max), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!ReferenceElement}.
 */
var SetterForReferenceElement = /*#__PURE__*/function () {
  function SetterForReferenceElement() {
    _classCallCheck(this, SetterForReferenceElement);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForReferenceElement, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator58 = _createForOfIteratorHelper(iterable),
        _step58;
      try {
        for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
          var jsonableItem = _step58.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator58.e(err);
      } finally {
        _iterator58.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator59 = _createForOfIteratorHelper(iterable),
        _step59;
      try {
        for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
          var jsonableItem = _step59.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator59.e(err);
      } finally {
        _iterator59.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator60 = _createForOfIteratorHelper(iterable),
        _step60;
      try {
        for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
          var jsonableItem = _step60.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator60.e(err);
      } finally {
        _iterator60.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator61 = _createForOfIteratorHelper(iterable),
        _step61;
      try {
        for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
          var jsonableItem = _step61.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator61.e(err);
      } finally {
        _iterator61.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator62 = _createForOfIteratorHelper(iterable),
        _step62;
      try {
        for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
          var jsonableItem = _step62.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator62.e(err);
      } finally {
        _iterator62.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator63 = _createForOfIteratorHelper(iterable),
        _step63;
      try {
        for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
          var jsonableItem = _step63.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator63.e(err);
      } finally {
        _iterator63.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForReferenceElement;
}();
/**
 * Parse an instance of {@link types!ReferenceElement} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ReferenceElement},
 * or an error if any
 */
function referenceElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForReferenceElement();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_REFERENCE_ELEMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  return new AasCommon.Either(new AasTypes.ReferenceElement(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Blob}.
 */
var SetterForBlob = /*#__PURE__*/function () {
  function SetterForBlob() {
    _classCallCheck(this, SetterForBlob);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "contentType", null);
  }
  _createClass(SetterForBlob, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator64 = _createForOfIteratorHelper(iterable),
        _step64;
      try {
        for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
          var jsonableItem = _step64.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator64.e(err);
      } finally {
        _iterator64.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator65 = _createForOfIteratorHelper(iterable),
        _step65;
      try {
        for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
          var jsonableItem = _step65.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator65.e(err);
      } finally {
        _iterator65.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator66 = _createForOfIteratorHelper(iterable),
        _step66;
      try {
        for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
          var jsonableItem = _step66.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator66.e(err);
      } finally {
        _iterator66.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator67 = _createForOfIteratorHelper(iterable),
        _step67;
      try {
        for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
          var jsonableItem = _step67.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator67.e(err);
      } finally {
        _iterator67.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator68 = _createForOfIteratorHelper(iterable),
        _step68;
      try {
        for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
          var jsonableItem = _step68.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator68.e(err);
      } finally {
        _iterator68.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator69 = _createForOfIteratorHelper(iterable),
        _step69;
      try {
        for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
          var jsonableItem = _step69.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator69.e(err);
      } finally {
        _iterator69.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = bytesFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link contentType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setContentTypeFromJsonable",
    value: function setContentTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.contentType = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForBlob;
}();
/**
 * Parse an instance of {@link types!Blob} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Blob},
 * or an error if any
 */
function blobFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForBlob();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_BLOB.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.contentType === null) {
    return newDeserializationError("The required property 'contentType' is missing");
  }
  return new AasCommon.Either(new AasTypes.Blob(setter.contentType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!File}.
 */
var SetterForFile = /*#__PURE__*/function () {
  function SetterForFile() {
    _classCallCheck(this, SetterForFile);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "contentType", null);
  }
  _createClass(SetterForFile, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator70 = _createForOfIteratorHelper(iterable),
        _step70;
      try {
        for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
          var jsonableItem = _step70.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator70.e(err);
      } finally {
        _iterator70.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator71 = _createForOfIteratorHelper(iterable),
        _step71;
      try {
        for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
          var jsonableItem = _step71.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator71.e(err);
      } finally {
        _iterator71.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator72 = _createForOfIteratorHelper(iterable),
        _step72;
      try {
        for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
          var jsonableItem = _step72.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator72.e(err);
      } finally {
        _iterator72.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator73 = _createForOfIteratorHelper(iterable),
        _step73;
      try {
        for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
          var jsonableItem = _step73.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator73.e(err);
      } finally {
        _iterator73.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator74 = _createForOfIteratorHelper(iterable),
        _step74;
      try {
        for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
          var jsonableItem = _step74.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator74.e(err);
      } finally {
        _iterator74.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator75 = _createForOfIteratorHelper(iterable),
        _step75;
      try {
        for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
          var jsonableItem = _step75.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator75.e(err);
      } finally {
        _iterator75.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link contentType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setContentTypeFromJsonable",
    value: function setContentTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.contentType = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForFile;
}();
/**
 * Parse an instance of {@link types!File} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!File},
 * or an error if any
 */
function fileFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForFile();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_FILE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.contentType === null) {
    return newDeserializationError("The required property 'contentType' is missing");
  }
  return new AasCommon.Either(new AasTypes.File(setter.contentType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!AnnotatedRelationshipElement}.
 */
var SetterForAnnotatedRelationshipElement = /*#__PURE__*/function () {
  function SetterForAnnotatedRelationshipElement() {
    _classCallCheck(this, SetterForAnnotatedRelationshipElement);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "first", null);
    _defineProperty(this, "second", null);
    _defineProperty(this, "annotations", null);
  }
  _createClass(SetterForAnnotatedRelationshipElement, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator76 = _createForOfIteratorHelper(iterable),
        _step76;
      try {
        for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
          var jsonableItem = _step76.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator76.e(err);
      } finally {
        _iterator76.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator77 = _createForOfIteratorHelper(iterable),
        _step77;
      try {
        for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
          var jsonableItem = _step77.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator77.e(err);
      } finally {
        _iterator77.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator78 = _createForOfIteratorHelper(iterable),
        _step78;
      try {
        for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
          var jsonableItem = _step78.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator78.e(err);
      } finally {
        _iterator78.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator79 = _createForOfIteratorHelper(iterable),
        _step79;
      try {
        for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
          var jsonableItem = _step79.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator79.e(err);
      } finally {
        _iterator79.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator80 = _createForOfIteratorHelper(iterable),
        _step80;
      try {
        for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
          var jsonableItem = _step80.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator80.e(err);
      } finally {
        _iterator80.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator81 = _createForOfIteratorHelper(iterable),
        _step81;
      try {
        for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
          var jsonableItem = _step81.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator81.e(err);
      } finally {
        _iterator81.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link first}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setFirstFromJsonable",
    value: function setFirstFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.first = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link second}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSecondFromJsonable",
    value: function setSecondFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.second = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link annotations}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAnnotationsFromJsonable",
    value: function setAnnotationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator82 = _createForOfIteratorHelper(iterable),
        _step82;
      try {
        for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
          var jsonableItem = _step82.value;
          var itemOrError = dataElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator82.e(err);
      } finally {
        _iterator82.f();
      }
      this.annotations = items;
      return null;
    }
  }]);
  return SetterForAnnotatedRelationshipElement;
}();
/**
 * Parse an instance of {@link types!AnnotatedRelationshipElement} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AnnotatedRelationshipElement},
 * or an error if any
 */
function annotatedRelationshipElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForAnnotatedRelationshipElement();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ANNOTATED_RELATIONSHIP_ELEMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.first === null) {
    return newDeserializationError("The required property 'first' is missing");
  }
  if (setter.second === null) {
    return newDeserializationError("The required property 'second' is missing");
  }
  return new AasCommon.Either(new AasTypes.AnnotatedRelationshipElement(setter.first, setter.second, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.annotations), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Entity}.
 */
var SetterForEntity = /*#__PURE__*/function () {
  function SetterForEntity() {
    _classCallCheck(this, SetterForEntity);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "statements", null);
    _defineProperty(this, "entityType", null);
    _defineProperty(this, "globalAssetId", null);
    _defineProperty(this, "specificAssetIds", null);
  }
  _createClass(SetterForEntity, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator83 = _createForOfIteratorHelper(iterable),
        _step83;
      try {
        for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
          var jsonableItem = _step83.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator83.e(err);
      } finally {
        _iterator83.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator84 = _createForOfIteratorHelper(iterable),
        _step84;
      try {
        for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
          var jsonableItem = _step84.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator84.e(err);
      } finally {
        _iterator84.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator85 = _createForOfIteratorHelper(iterable),
        _step85;
      try {
        for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
          var jsonableItem = _step85.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator85.e(err);
      } finally {
        _iterator85.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator86 = _createForOfIteratorHelper(iterable),
        _step86;
      try {
        for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
          var jsonableItem = _step86.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator86.e(err);
      } finally {
        _iterator86.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator87 = _createForOfIteratorHelper(iterable),
        _step87;
      try {
        for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
          var jsonableItem = _step87.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator87.e(err);
      } finally {
        _iterator87.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator88 = _createForOfIteratorHelper(iterable),
        _step88;
      try {
        for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
          var jsonableItem = _step88.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator88.e(err);
      } finally {
        _iterator88.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link statements}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setStatementsFromJsonable",
    value: function setStatementsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator89 = _createForOfIteratorHelper(iterable),
        _step89;
      try {
        for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
          var jsonableItem = _step89.value;
          var itemOrError = submodelElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator89.e(err);
      } finally {
        _iterator89.f();
      }
      this.statements = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link entityType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEntityTypeFromJsonable",
    value: function setEntityTypeFromJsonable(jsonable) {
      var parsedOrError = entityTypeFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.entityType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link globalAssetId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setGlobalAssetIdFromJsonable",
    value: function setGlobalAssetIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.globalAssetId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link specificAssetIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSpecificAssetIdsFromJsonable",
    value: function setSpecificAssetIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator90 = _createForOfIteratorHelper(iterable),
        _step90;
      try {
        for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
          var jsonableItem = _step90.value;
          var itemOrError = specificAssetIdFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator90.e(err);
      } finally {
        _iterator90.f();
      }
      this.specificAssetIds = items;
      return null;
    }
  }]);
  return SetterForEntity;
}();
/**
 * Parse an instance of {@link types!Entity} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Entity},
 * or an error if any
 */
function entityFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForEntity();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ENTITY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.entityType === null) {
    return newDeserializationError("The required property 'entityType' is missing");
  }
  return new AasCommon.Either(new AasTypes.Entity(setter.entityType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.statements, setter.globalAssetId, setter.specificAssetIds), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!EntityType}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function entityTypeFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.entityTypeFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of EntityType: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!Direction}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function directionFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.directionFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of Direction: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!StateOfEvent}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function stateOfEventFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.stateOfEventFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of StateOfEvent: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!EventPayload}.
 */
var SetterForEventPayload = /*#__PURE__*/function () {
  function SetterForEventPayload() {
    _classCallCheck(this, SetterForEventPayload);
    _defineProperty(this, "source", null);
    _defineProperty(this, "sourceSemanticId", null);
    _defineProperty(this, "observableReference", null);
    _defineProperty(this, "observableSemanticId", null);
    _defineProperty(this, "topic", null);
    _defineProperty(this, "subjectId", null);
    _defineProperty(this, "timeStamp", null);
    _defineProperty(this, "payload", null);
  }
  _createClass(SetterForEventPayload, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link source}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSourceFromJsonable",
    value: function setSourceFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.source = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link sourceSemanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSourceSemanticIdFromJsonable",
    value: function setSourceSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.sourceSemanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link observableReference}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setObservableReferenceFromJsonable",
    value: function setObservableReferenceFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.observableReference = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link observableSemanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setObservableSemanticIdFromJsonable",
    value: function setObservableSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.observableSemanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link topic}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTopicFromJsonable",
    value: function setTopicFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.topic = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link subjectId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSubjectIdFromJsonable",
    value: function setSubjectIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.subjectId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link timeStamp}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTimeStampFromJsonable",
    value: function setTimeStampFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.timeStamp = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link payload}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setPayloadFromJsonable",
    value: function setPayloadFromJsonable(jsonable) {
      var parsedOrError = bytesFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.payload = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForEventPayload;
}();
/**
 * Parse an instance of {@link types!EventPayload} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!EventPayload},
 * or an error if any
 */
function eventPayloadFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForEventPayload();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_EVENT_PAYLOAD.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.source === null) {
    return newDeserializationError("The required property 'source' is missing");
  }
  if (setter.observableReference === null) {
    return newDeserializationError("The required property 'observableReference' is missing");
  }
  if (setter.timeStamp === null) {
    return newDeserializationError("The required property 'timeStamp' is missing");
  }
  return new AasCommon.Either(new AasTypes.EventPayload(setter.source, setter.observableReference, setter.timeStamp, setter.sourceSemanticId, setter.observableSemanticId, setter.topic, setter.subjectId, setter.payload), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IEventElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function eventElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = EVENT_ELEMENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IEventElement: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!BasicEventElement}.
 */
var SetterForBasicEventElement = /*#__PURE__*/function () {
  function SetterForBasicEventElement() {
    _classCallCheck(this, SetterForBasicEventElement);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "observed", null);
    _defineProperty(this, "direction", null);
    _defineProperty(this, "state", null);
    _defineProperty(this, "messageTopic", null);
    _defineProperty(this, "messageBroker", null);
    _defineProperty(this, "lastUpdate", null);
    _defineProperty(this, "minInterval", null);
    _defineProperty(this, "maxInterval", null);
  }
  _createClass(SetterForBasicEventElement, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator91 = _createForOfIteratorHelper(iterable),
        _step91;
      try {
        for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
          var jsonableItem = _step91.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator91.e(err);
      } finally {
        _iterator91.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator92 = _createForOfIteratorHelper(iterable),
        _step92;
      try {
        for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
          var jsonableItem = _step92.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator92.e(err);
      } finally {
        _iterator92.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator93 = _createForOfIteratorHelper(iterable),
        _step93;
      try {
        for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
          var jsonableItem = _step93.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator93.e(err);
      } finally {
        _iterator93.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator94 = _createForOfIteratorHelper(iterable),
        _step94;
      try {
        for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
          var jsonableItem = _step94.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator94.e(err);
      } finally {
        _iterator94.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator95 = _createForOfIteratorHelper(iterable),
        _step95;
      try {
        for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
          var jsonableItem = _step95.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator95.e(err);
      } finally {
        _iterator95.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator96 = _createForOfIteratorHelper(iterable),
        _step96;
      try {
        for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
          var jsonableItem = _step96.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator96.e(err);
      } finally {
        _iterator96.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link observed}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setObservedFromJsonable",
    value: function setObservedFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.observed = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link direction}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDirectionFromJsonable",
    value: function setDirectionFromJsonable(jsonable) {
      var parsedOrError = directionFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.direction = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link state}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setStateFromJsonable",
    value: function setStateFromJsonable(jsonable) {
      var parsedOrError = stateOfEventFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.state = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link messageTopic}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMessageTopicFromJsonable",
    value: function setMessageTopicFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.messageTopic = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link messageBroker}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMessageBrokerFromJsonable",
    value: function setMessageBrokerFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.messageBroker = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link lastUpdate}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLastUpdateFromJsonable",
    value: function setLastUpdateFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.lastUpdate = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link minInterval}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMinIntervalFromJsonable",
    value: function setMinIntervalFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.minInterval = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link maxInterval}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMaxIntervalFromJsonable",
    value: function setMaxIntervalFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.maxInterval = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForBasicEventElement;
}();
/**
 * Parse an instance of {@link types!BasicEventElement} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!BasicEventElement},
 * or an error if any
 */
function basicEventElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForBasicEventElement();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_BASIC_EVENT_ELEMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.observed === null) {
    return newDeserializationError("The required property 'observed' is missing");
  }
  if (setter.direction === null) {
    return newDeserializationError("The required property 'direction' is missing");
  }
  if (setter.state === null) {
    return newDeserializationError("The required property 'state' is missing");
  }
  return new AasCommon.Either(new AasTypes.BasicEventElement(setter.observed, setter.direction, setter.state, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.messageTopic, setter.messageBroker, setter.lastUpdate, setter.minInterval, setter.maxInterval), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Operation}.
 */
var SetterForOperation = /*#__PURE__*/function () {
  function SetterForOperation() {
    _classCallCheck(this, SetterForOperation);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "inputVariables", null);
    _defineProperty(this, "outputVariables", null);
    _defineProperty(this, "inoutputVariables", null);
  }
  _createClass(SetterForOperation, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator97 = _createForOfIteratorHelper(iterable),
        _step97;
      try {
        for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
          var jsonableItem = _step97.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator97.e(err);
      } finally {
        _iterator97.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator98 = _createForOfIteratorHelper(iterable),
        _step98;
      try {
        for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
          var jsonableItem = _step98.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator98.e(err);
      } finally {
        _iterator98.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator99 = _createForOfIteratorHelper(iterable),
        _step99;
      try {
        for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
          var jsonableItem = _step99.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator99.e(err);
      } finally {
        _iterator99.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator100 = _createForOfIteratorHelper(iterable),
        _step100;
      try {
        for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
          var jsonableItem = _step100.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator100.e(err);
      } finally {
        _iterator100.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator101 = _createForOfIteratorHelper(iterable),
        _step101;
      try {
        for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
          var jsonableItem = _step101.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator101.e(err);
      } finally {
        _iterator101.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator102 = _createForOfIteratorHelper(iterable),
        _step102;
      try {
        for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {
          var jsonableItem = _step102.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator102.e(err);
      } finally {
        _iterator102.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link inputVariables}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setInputVariablesFromJsonable",
    value: function setInputVariablesFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator103 = _createForOfIteratorHelper(iterable),
        _step103;
      try {
        for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {
          var jsonableItem = _step103.value;
          var itemOrError = operationVariableFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator103.e(err);
      } finally {
        _iterator103.f();
      }
      this.inputVariables = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link outputVariables}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setOutputVariablesFromJsonable",
    value: function setOutputVariablesFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator104 = _createForOfIteratorHelper(iterable),
        _step104;
      try {
        for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {
          var jsonableItem = _step104.value;
          var itemOrError = operationVariableFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator104.e(err);
      } finally {
        _iterator104.f();
      }
      this.outputVariables = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link inoutputVariables}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setInoutputVariablesFromJsonable",
    value: function setInoutputVariablesFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator105 = _createForOfIteratorHelper(iterable),
        _step105;
      try {
        for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {
          var jsonableItem = _step105.value;
          var itemOrError = operationVariableFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator105.e(err);
      } finally {
        _iterator105.f();
      }
      this.inoutputVariables = items;
      return null;
    }
  }]);
  return SetterForOperation;
}();
/**
 * Parse an instance of {@link types!Operation} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Operation},
 * or an error if any
 */
function operationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForOperation();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_OPERATION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  return new AasCommon.Either(new AasTypes.Operation(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.inputVariables, setter.outputVariables, setter.inoutputVariables), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!OperationVariable}.
 */
var SetterForOperationVariable = /*#__PURE__*/function () {
  function SetterForOperationVariable() {
    _classCallCheck(this, SetterForOperationVariable);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForOperationVariable, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = submodelElementFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForOperationVariable;
}();
/**
 * Parse an instance of {@link types!OperationVariable} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!OperationVariable},
 * or an error if any
 */
function operationVariableFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForOperationVariable();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_OPERATION_VARIABLE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.value === null) {
    return newDeserializationError("The required property 'value' is missing");
  }
  return new AasCommon.Either(new AasTypes.OperationVariable(setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Capability}.
 */
var SetterForCapability = /*#__PURE__*/function () {
  function SetterForCapability() {
    _classCallCheck(this, SetterForCapability);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
  }
  _createClass(SetterForCapability, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator106 = _createForOfIteratorHelper(iterable),
        _step106;
      try {
        for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {
          var jsonableItem = _step106.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator106.e(err);
      } finally {
        _iterator106.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator107 = _createForOfIteratorHelper(iterable),
        _step107;
      try {
        for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {
          var jsonableItem = _step107.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator107.e(err);
      } finally {
        _iterator107.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator108 = _createForOfIteratorHelper(iterable),
        _step108;
      try {
        for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {
          var jsonableItem = _step108.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator108.e(err);
      } finally {
        _iterator108.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator109 = _createForOfIteratorHelper(iterable),
        _step109;
      try {
        for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {
          var jsonableItem = _step109.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator109.e(err);
      } finally {
        _iterator109.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator110 = _createForOfIteratorHelper(iterable),
        _step110;
      try {
        for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {
          var jsonableItem = _step110.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator110.e(err);
      } finally {
        _iterator110.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator111 = _createForOfIteratorHelper(iterable),
        _step111;
      try {
        for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {
          var jsonableItem = _step111.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator111.e(err);
      } finally {
        _iterator111.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }
  }]);
  return SetterForCapability;
}();
/**
 * Parse an instance of {@link types!Capability} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Capability},
 * or an error if any
 */
function capabilityFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForCapability();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_CAPABILITY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  return new AasCommon.Either(new AasTypes.Capability(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!ConceptDescription}.
 */
var SetterForConceptDescription = /*#__PURE__*/function () {
  function SetterForConceptDescription() {
    _classCallCheck(this, SetterForConceptDescription);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "administration", null);
    _defineProperty(this, "id", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "isCaseOf", null);
  }
  _createClass(SetterForConceptDescription, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator112 = _createForOfIteratorHelper(iterable),
        _step112;
      try {
        for (_iterator112.s(); !(_step112 = _iterator112.n()).done;) {
          var jsonableItem = _step112.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator112.e(err);
      } finally {
        _iterator112.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator113 = _createForOfIteratorHelper(iterable),
        _step113;
      try {
        for (_iterator113.s(); !(_step113 = _iterator113.n()).done;) {
          var jsonableItem = _step113.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator113.e(err);
      } finally {
        _iterator113.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator114 = _createForOfIteratorHelper(iterable),
        _step114;
      try {
        for (_iterator114.s(); !(_step114 = _iterator114.n()).done;) {
          var jsonableItem = _step114.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator114.e(err);
      } finally {
        _iterator114.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link administration}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAdministrationFromJsonable",
    value: function setAdministrationFromJsonable(jsonable) {
      var parsedOrError = administrativeInformationFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.administration = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link id}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdFromJsonable",
    value: function setIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.id = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator115 = _createForOfIteratorHelper(iterable),
        _step115;
      try {
        for (_iterator115.s(); !(_step115 = _iterator115.n()).done;) {
          var jsonableItem = _step115.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator115.e(err);
      } finally {
        _iterator115.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link isCaseOf}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIsCaseOfFromJsonable",
    value: function setIsCaseOfFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator116 = _createForOfIteratorHelper(iterable),
        _step116;
      try {
        for (_iterator116.s(); !(_step116 = _iterator116.n()).done;) {
          var jsonableItem = _step116.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator116.e(err);
      } finally {
        _iterator116.f();
      }
      this.isCaseOf = items;
      return null;
    }
  }]);
  return SetterForConceptDescription;
}();
/**
 * Parse an instance of {@link types!ConceptDescription} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ConceptDescription},
 * or an error if any
 */
function conceptDescriptionFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForConceptDescription();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_CONCEPT_DESCRIPTION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.id === null) {
    return newDeserializationError("The required property 'id' is missing");
  }
  return new AasCommon.Either(new AasTypes.ConceptDescription(setter.id, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.administration, setter.embeddedDataSpecifications, setter.isCaseOf), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!ReferenceTypes}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function referenceTypesFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.referenceTypesFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of ReferenceTypes: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Reference}.
 */
var SetterForReference = /*#__PURE__*/function () {
  function SetterForReference() {
    _classCallCheck(this, SetterForReference);
    _defineProperty(this, "type", null);
    _defineProperty(this, "referredSemanticId", null);
    _defineProperty(this, "keys", null);
  }
  _createClass(SetterForReference, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link type}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypeFromJsonable",
    value: function setTypeFromJsonable(jsonable) {
      var parsedOrError = referenceTypesFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.type = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link referredSemanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setReferredSemanticIdFromJsonable",
    value: function setReferredSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.referredSemanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link keys}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setKeysFromJsonable",
    value: function setKeysFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator117 = _createForOfIteratorHelper(iterable),
        _step117;
      try {
        for (_iterator117.s(); !(_step117 = _iterator117.n()).done;) {
          var jsonableItem = _step117.value;
          var itemOrError = keyFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator117.e(err);
      } finally {
        _iterator117.f();
      }
      this.keys = items;
      return null;
    }
  }]);
  return SetterForReference;
}();
/**
 * Parse an instance of {@link types!Reference} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Reference},
 * or an error if any
 */
function referenceFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForReference();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_REFERENCE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.type === null) {
    return newDeserializationError("The required property 'type' is missing");
  }
  if (setter.keys === null) {
    return newDeserializationError("The required property 'keys' is missing");
  }
  return new AasCommon.Either(new AasTypes.Reference(setter.type, setter.keys, setter.referredSemanticId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Key}.
 */
var SetterForKey = /*#__PURE__*/function () {
  function SetterForKey() {
    _classCallCheck(this, SetterForKey);
    _defineProperty(this, "type", null);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForKey, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link type}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypeFromJsonable",
    value: function setTypeFromJsonable(jsonable) {
      var parsedOrError = keyTypesFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.type = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForKey;
}();
/**
 * Parse an instance of {@link types!Key} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Key},
 * or an error if any
 */
function keyFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForKey();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_KEY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.type === null) {
    return newDeserializationError("The required property 'type' is missing");
  }
  if (setter.value === null) {
    return newDeserializationError("The required property 'value' is missing");
  }
  return new AasCommon.Either(new AasTypes.Key(setter.type, setter.value), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!KeyTypes}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function keyTypesFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.keyTypesFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of KeyTypes: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!DataTypeDefXsd}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function dataTypeDefXsdFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.dataTypeDefXsdFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of DataTypeDefXsd: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IAbstractLangString}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function abstractLangStringFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = ABSTRACT_LANG_STRING_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IAbstractLangString: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringNameType}.
 */
var SetterForLangStringNameType = /*#__PURE__*/function () {
  function SetterForLangStringNameType() {
    _classCallCheck(this, SetterForLangStringNameType);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringNameType, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringNameType;
}();
/**
 * Parse an instance of {@link types!LangStringNameType} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringNameType},
 * or an error if any
 */
function langStringNameTypeFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringNameType();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_NAME_TYPE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new AasCommon.Either(new AasTypes.LangStringNameType(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringTextType}.
 */
var SetterForLangStringTextType = /*#__PURE__*/function () {
  function SetterForLangStringTextType() {
    _classCallCheck(this, SetterForLangStringTextType);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringTextType, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringTextType;
}();
/**
 * Parse an instance of {@link types!LangStringTextType} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringTextType},
 * or an error if any
 */
function langStringTextTypeFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringTextType();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_TEXT_TYPE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new AasCommon.Either(new AasTypes.LangStringTextType(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Environment}.
 */
var SetterForEnvironment = /*#__PURE__*/function () {
  function SetterForEnvironment() {
    _classCallCheck(this, SetterForEnvironment);
    _defineProperty(this, "assetAdministrationShells", null);
    _defineProperty(this, "submodels", null);
    _defineProperty(this, "conceptDescriptions", null);
  }
  _createClass(SetterForEnvironment, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link assetAdministrationShells}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAssetAdministrationShellsFromJsonable",
    value: function setAssetAdministrationShellsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator118 = _createForOfIteratorHelper(iterable),
        _step118;
      try {
        for (_iterator118.s(); !(_step118 = _iterator118.n()).done;) {
          var jsonableItem = _step118.value;
          var itemOrError = assetAdministrationShellFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator118.e(err);
      } finally {
        _iterator118.f();
      }
      this.assetAdministrationShells = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link submodels}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSubmodelsFromJsonable",
    value: function setSubmodelsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator119 = _createForOfIteratorHelper(iterable),
        _step119;
      try {
        for (_iterator119.s(); !(_step119 = _iterator119.n()).done;) {
          var jsonableItem = _step119.value;
          var itemOrError = submodelFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator119.e(err);
      } finally {
        _iterator119.f();
      }
      this.submodels = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link conceptDescriptions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setConceptDescriptionsFromJsonable",
    value: function setConceptDescriptionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator120 = _createForOfIteratorHelper(iterable),
        _step120;
      try {
        for (_iterator120.s(); !(_step120 = _iterator120.n()).done;) {
          var jsonableItem = _step120.value;
          var itemOrError = conceptDescriptionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator120.e(err);
      } finally {
        _iterator120.f();
      }
      this.conceptDescriptions = items;
      return null;
    }
  }]);
  return SetterForEnvironment;
}();
/**
 * Parse an instance of {@link types!Environment} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Environment},
 * or an error if any
 */
function environmentFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForEnvironment();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ENVIRONMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  return new AasCommon.Either(new AasTypes.Environment(setter.assetAdministrationShells, setter.submodels, setter.conceptDescriptions), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IDataSpecificationContent}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function dataSpecificationContentFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = DATA_SPECIFICATION_CONTENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IDataSpecificationContent: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!EmbeddedDataSpecification}.
 */
var SetterForEmbeddedDataSpecification = /*#__PURE__*/function () {
  function SetterForEmbeddedDataSpecification() {
    _classCallCheck(this, SetterForEmbeddedDataSpecification);
    _defineProperty(this, "dataSpecification", null);
    _defineProperty(this, "dataSpecificationContent", null);
  }
  _createClass(SetterForEmbeddedDataSpecification, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link dataSpecification}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDataSpecificationFromJsonable",
    value: function setDataSpecificationFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.dataSpecification = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link dataSpecificationContent}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDataSpecificationContentFromJsonable",
    value: function setDataSpecificationContentFromJsonable(jsonable) {
      var parsedOrError = dataSpecificationContentFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.dataSpecificationContent = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForEmbeddedDataSpecification;
}();
/**
 * Parse an instance of {@link types!EmbeddedDataSpecification} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!EmbeddedDataSpecification},
 * or an error if any
 */
function embeddedDataSpecificationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForEmbeddedDataSpecification();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_EMBEDDED_DATA_SPECIFICATION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.dataSpecification === null) {
    return newDeserializationError("The required property 'dataSpecification' is missing");
  }
  if (setter.dataSpecificationContent === null) {
    return newDeserializationError("The required property 'dataSpecificationContent' is missing");
  }
  return new AasCommon.Either(new AasTypes.EmbeddedDataSpecification(setter.dataSpecification, setter.dataSpecificationContent), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!DataTypeIec61360}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function dataTypeIec61360FromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = AasStringification.dataTypeIec61360FromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of DataTypeIec61360: ".concat(jsonable));
  }
  return new AasCommon.Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LevelType}.
 */
var SetterForLevelType = /*#__PURE__*/function () {
  function SetterForLevelType() {
    _classCallCheck(this, SetterForLevelType);
    _defineProperty(this, "min", null);
    _defineProperty(this, "nom", null);
    _defineProperty(this, "typ", null);
    _defineProperty(this, "max", null);
  }
  _createClass(SetterForLevelType, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link min}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMinFromJsonable",
    value: function setMinFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.min = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link nom}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setNomFromJsonable",
    value: function setNomFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.nom = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link typ}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypFromJsonable",
    value: function setTypFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.typ = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link max}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMaxFromJsonable",
    value: function setMaxFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.max = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLevelType;
}();
/**
 * Parse an instance of {@link types!LevelType} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LevelType},
 * or an error if any
 */
function levelTypeFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLevelType();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LEVEL_TYPE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.min === null) {
    return newDeserializationError("The required property 'min' is missing");
  }
  if (setter.nom === null) {
    return newDeserializationError("The required property 'nom' is missing");
  }
  if (setter.typ === null) {
    return newDeserializationError("The required property 'typ' is missing");
  }
  if (setter.max === null) {
    return newDeserializationError("The required property 'max' is missing");
  }
  return new AasCommon.Either(new AasTypes.LevelType(setter.min, setter.nom, setter.typ, setter.max), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!ValueReferencePair}.
 */
var SetterForValueReferencePair = /*#__PURE__*/function () {
  function SetterForValueReferencePair() {
    _classCallCheck(this, SetterForValueReferencePair);
    _defineProperty(this, "value", null);
    _defineProperty(this, "valueId", null);
  }
  _createClass(SetterForValueReferencePair, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueIdFromJsonable",
    value: function setValueIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForValueReferencePair;
}();
/**
 * Parse an instance of {@link types!ValueReferencePair} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ValueReferencePair},
 * or an error if any
 */
function valueReferencePairFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForValueReferencePair();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_VALUE_REFERENCE_PAIR.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.value === null) {
    return newDeserializationError("The required property 'value' is missing");
  }
  if (setter.valueId === null) {
    return newDeserializationError("The required property 'valueId' is missing");
  }
  return new AasCommon.Either(new AasTypes.ValueReferencePair(setter.value, setter.valueId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!ValueList}.
 */
var SetterForValueList = /*#__PURE__*/function () {
  function SetterForValueList() {
    _classCallCheck(this, SetterForValueList);
    _defineProperty(this, "valueReferencePairs", null);
  }
  _createClass(SetterForValueList, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueReferencePairs}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueReferencePairsFromJsonable",
    value: function setValueReferencePairsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator121 = _createForOfIteratorHelper(iterable),
        _step121;
      try {
        for (_iterator121.s(); !(_step121 = _iterator121.n()).done;) {
          var jsonableItem = _step121.value;
          var itemOrError = valueReferencePairFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator121.e(err);
      } finally {
        _iterator121.f();
      }
      this.valueReferencePairs = items;
      return null;
    }
  }]);
  return SetterForValueList;
}();
/**
 * Parse an instance of {@link types!ValueList} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ValueList},
 * or an error if any
 */
function valueListFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForValueList();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_VALUE_LIST.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.valueReferencePairs === null) {
    return newDeserializationError("The required property 'valueReferencePairs' is missing");
  }
  return new AasCommon.Either(new AasTypes.ValueList(setter.valueReferencePairs), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringPreferredNameTypeIec61360}.
 */
var SetterForLangStringPreferredNameTypeIec61360 = /*#__PURE__*/function () {
  function SetterForLangStringPreferredNameTypeIec61360() {
    _classCallCheck(this, SetterForLangStringPreferredNameTypeIec61360);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringPreferredNameTypeIec61360, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringPreferredNameTypeIec61360;
}();
/**
 * Parse an instance of {@link types!LangStringPreferredNameTypeIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringPreferredNameTypeIec61360},
 * or an error if any
 */
function langStringPreferredNameTypeIec61360FromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringPreferredNameTypeIec61360();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_PREFERRED_NAME_TYPE_IEC_61360.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new AasCommon.Either(new AasTypes.LangStringPreferredNameTypeIec61360(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringShortNameTypeIec61360}.
 */
var SetterForLangStringShortNameTypeIec61360 = /*#__PURE__*/function () {
  function SetterForLangStringShortNameTypeIec61360() {
    _classCallCheck(this, SetterForLangStringShortNameTypeIec61360);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringShortNameTypeIec61360, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringShortNameTypeIec61360;
}();
/**
 * Parse an instance of {@link types!LangStringShortNameTypeIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringShortNameTypeIec61360},
 * or an error if any
 */
function langStringShortNameTypeIec61360FromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringShortNameTypeIec61360();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_SHORT_NAME_TYPE_IEC_61360.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new AasCommon.Either(new AasTypes.LangStringShortNameTypeIec61360(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringDefinitionTypeIec61360}.
 */
var SetterForLangStringDefinitionTypeIec61360 = /*#__PURE__*/function () {
  function SetterForLangStringDefinitionTypeIec61360() {
    _classCallCheck(this, SetterForLangStringDefinitionTypeIec61360);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringDefinitionTypeIec61360, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringDefinitionTypeIec61360;
}();
/**
 * Parse an instance of {@link types!LangStringDefinitionTypeIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringDefinitionTypeIec61360},
 * or an error if any
 */
function langStringDefinitionTypeIec61360FromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringDefinitionTypeIec61360();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_DEFINITION_TYPE_IEC_61360.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new AasCommon.Either(new AasTypes.LangStringDefinitionTypeIec61360(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!DataSpecificationIec61360}.
 */
var SetterForDataSpecificationIec61360 = /*#__PURE__*/function () {
  function SetterForDataSpecificationIec61360() {
    _classCallCheck(this, SetterForDataSpecificationIec61360);
    _defineProperty(this, "preferredName", null);
    _defineProperty(this, "shortName", null);
    _defineProperty(this, "unit", null);
    _defineProperty(this, "unitId", null);
    _defineProperty(this, "sourceOfDefinition", null);
    _defineProperty(this, "symbol", null);
    _defineProperty(this, "dataType", null);
    _defineProperty(this, "definition", null);
    _defineProperty(this, "valueFormat", null);
    _defineProperty(this, "valueList", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "levelType", null);
  }
  _createClass(SetterForDataSpecificationIec61360, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link preferredName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setPreferredNameFromJsonable",
    value: function setPreferredNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator122 = _createForOfIteratorHelper(iterable),
        _step122;
      try {
        for (_iterator122.s(); !(_step122 = _iterator122.n()).done;) {
          var jsonableItem = _step122.value;
          var itemOrError = langStringPreferredNameTypeIec61360FromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator122.e(err);
      } finally {
        _iterator122.f();
      }
      this.preferredName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link shortName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setShortNameFromJsonable",
    value: function setShortNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator123 = _createForOfIteratorHelper(iterable),
        _step123;
      try {
        for (_iterator123.s(); !(_step123 = _iterator123.n()).done;) {
          var jsonableItem = _step123.value;
          var itemOrError = langStringShortNameTypeIec61360FromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator123.e(err);
      } finally {
        _iterator123.f();
      }
      this.shortName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link unit}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setUnitFromJsonable",
    value: function setUnitFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.unit = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link unitId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setUnitIdFromJsonable",
    value: function setUnitIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.unitId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link sourceOfDefinition}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSourceOfDefinitionFromJsonable",
    value: function setSourceOfDefinitionFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.sourceOfDefinition = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link symbol}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSymbolFromJsonable",
    value: function setSymbolFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.symbol = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link dataType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDataTypeFromJsonable",
    value: function setDataTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeIec61360FromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.dataType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link definition}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDefinitionFromJsonable",
    value: function setDefinitionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator124 = _createForOfIteratorHelper(iterable),
        _step124;
      try {
        for (_iterator124.s(); !(_step124 = _iterator124.n()).done;) {
          var jsonableItem = _step124.value;
          var itemOrError = langStringDefinitionTypeIec61360FromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator124.e(err);
      } finally {
        _iterator124.f();
      }
      this.definition = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueFormat}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFormatFromJsonable",
    value: function setValueFormatFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueFormat = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueList}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueListFromJsonable",
    value: function setValueListFromJsonable(jsonable) {
      var parsedOrError = valueListFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueList = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link levelType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLevelTypeFromJsonable",
    value: function setLevelTypeFromJsonable(jsonable) {
      var parsedOrError = levelTypeFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.levelType = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForDataSpecificationIec61360;
}();
/**
 * Parse an instance of {@link types!DataSpecificationIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!DataSpecificationIec61360},
 * or an error if any
 */
function dataSpecificationIec61360FromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForDataSpecificationIec61360();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_DATA_SPECIFICATION_IEC_61360.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment(jsonable, key));
      return new AasCommon.Either(null, error);
    }
  }
  if (setter.preferredName === null) {
    return newDeserializationError("The required property 'preferredName' is missing");
  }
  return new AasCommon.Either(new AasTypes.DataSpecificationIec61360(setter.preferredName, setter.shortName, setter.unit, setter.unitId, setter.sourceOfDefinition, setter.symbol, setter.dataType, setter.definition, setter.valueFormat, setter.valueList, setter.value, setter.levelType), null);
}
var HAS_SEMANTICS_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["Entity", entityFromJsonable], ["Extension", extensionFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Qualifier", qualifierFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["SpecificAssetId", specificAssetIdFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var SETTER_MAP_FOR_EXTENSION = new Map([["semanticId", SetterForExtension.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForExtension.prototype.setSupplementalSemanticIdsFromJsonable], ["name", SetterForExtension.prototype.setNameFromJsonable], ["valueType", SetterForExtension.prototype.setValueTypeFromJsonable], ["value", SetterForExtension.prototype.setValueFromJsonable], ["refersTo", SetterForExtension.prototype.setRefersToFromJsonable], ["modelType", SetterForExtension.prototype.ignore]]);
var HAS_EXTENSIONS_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["AssetAdministrationShell", assetAdministrationShellFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["ConceptDescription", conceptDescriptionFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var REFERABLE_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["AssetAdministrationShell", assetAdministrationShellFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["ConceptDescription", conceptDescriptionFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var IDENTIFIABLE_FROM_JSONABLE_DISPATCH = new Map([["AssetAdministrationShell", assetAdministrationShellFromJsonable], ["ConceptDescription", conceptDescriptionFromJsonable], ["Submodel", submodelFromJsonable]]);
var HAS_KIND_FROM_JSONABLE_DISPATCH = new Map([["Submodel", submodelFromJsonable]]);
var HAS_DATA_SPECIFICATION_FROM_JSONABLE_DISPATCH = new Map([["AdministrativeInformation", administrativeInformationFromJsonable], ["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["AssetAdministrationShell", assetAdministrationShellFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["ConceptDescription", conceptDescriptionFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var SETTER_MAP_FOR_ADMINISTRATIVE_INFORMATION = new Map([["embeddedDataSpecifications", SetterForAdministrativeInformation.prototype.setEmbeddedDataSpecificationsFromJsonable], ["version", SetterForAdministrativeInformation.prototype.setVersionFromJsonable], ["revision", SetterForAdministrativeInformation.prototype.setRevisionFromJsonable], ["creator", SetterForAdministrativeInformation.prototype.setCreatorFromJsonable], ["templateId", SetterForAdministrativeInformation.prototype.setTemplateIdFromJsonable], ["modelType", SetterForAdministrativeInformation.prototype.ignore]]);
var QUALIFIABLE_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var SETTER_MAP_FOR_QUALIFIER = new Map([["semanticId", SetterForQualifier.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForQualifier.prototype.setSupplementalSemanticIdsFromJsonable], ["kind", SetterForQualifier.prototype.setKindFromJsonable], ["type", SetterForQualifier.prototype.setTypeFromJsonable], ["valueType", SetterForQualifier.prototype.setValueTypeFromJsonable], ["value", SetterForQualifier.prototype.setValueFromJsonable], ["valueId", SetterForQualifier.prototype.setValueIdFromJsonable], ["modelType", SetterForQualifier.prototype.ignore]]);
var SETTER_MAP_FOR_ASSET_ADMINISTRATION_SHELL = new Map([["extensions", SetterForAssetAdministrationShell.prototype.setExtensionsFromJsonable], ["category", SetterForAssetAdministrationShell.prototype.setCategoryFromJsonable], ["idShort", SetterForAssetAdministrationShell.prototype.setIdShortFromJsonable], ["displayName", SetterForAssetAdministrationShell.prototype.setDisplayNameFromJsonable], ["description", SetterForAssetAdministrationShell.prototype.setDescriptionFromJsonable], ["administration", SetterForAssetAdministrationShell.prototype.setAdministrationFromJsonable], ["id", SetterForAssetAdministrationShell.prototype.setIdFromJsonable], ["embeddedDataSpecifications", SetterForAssetAdministrationShell.prototype.setEmbeddedDataSpecificationsFromJsonable], ["derivedFrom", SetterForAssetAdministrationShell.prototype.setDerivedFromFromJsonable], ["assetInformation", SetterForAssetAdministrationShell.prototype.setAssetInformationFromJsonable], ["submodels", SetterForAssetAdministrationShell.prototype.setSubmodelsFromJsonable], ["modelType", SetterForAssetAdministrationShell.prototype.ignore]]);
var SETTER_MAP_FOR_ASSET_INFORMATION = new Map([["assetKind", SetterForAssetInformation.prototype.setAssetKindFromJsonable], ["globalAssetId", SetterForAssetInformation.prototype.setGlobalAssetIdFromJsonable], ["specificAssetIds", SetterForAssetInformation.prototype.setSpecificAssetIdsFromJsonable], ["assetType", SetterForAssetInformation.prototype.setAssetTypeFromJsonable], ["defaultThumbnail", SetterForAssetInformation.prototype.setDefaultThumbnailFromJsonable], ["modelType", SetterForAssetInformation.prototype.ignore]]);
var SETTER_MAP_FOR_RESOURCE = new Map([["path", SetterForResource.prototype.setPathFromJsonable], ["contentType", SetterForResource.prototype.setContentTypeFromJsonable], ["modelType", SetterForResource.prototype.ignore]]);
var SETTER_MAP_FOR_SPECIFIC_ASSET_ID = new Map([["semanticId", SetterForSpecificAssetId.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForSpecificAssetId.prototype.setSupplementalSemanticIdsFromJsonable], ["name", SetterForSpecificAssetId.prototype.setNameFromJsonable], ["value", SetterForSpecificAssetId.prototype.setValueFromJsonable], ["externalSubjectId", SetterForSpecificAssetId.prototype.setExternalSubjectIdFromJsonable], ["modelType", SetterForSpecificAssetId.prototype.ignore]]);
var SETTER_MAP_FOR_SUBMODEL = new Map([["extensions", SetterForSubmodel.prototype.setExtensionsFromJsonable], ["category", SetterForSubmodel.prototype.setCategoryFromJsonable], ["idShort", SetterForSubmodel.prototype.setIdShortFromJsonable], ["displayName", SetterForSubmodel.prototype.setDisplayNameFromJsonable], ["description", SetterForSubmodel.prototype.setDescriptionFromJsonable], ["administration", SetterForSubmodel.prototype.setAdministrationFromJsonable], ["id", SetterForSubmodel.prototype.setIdFromJsonable], ["kind", SetterForSubmodel.prototype.setKindFromJsonable], ["semanticId", SetterForSubmodel.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForSubmodel.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForSubmodel.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForSubmodel.prototype.setEmbeddedDataSpecificationsFromJsonable], ["submodelElements", SetterForSubmodel.prototype.setSubmodelElementsFromJsonable], ["modelType", SetterForSubmodel.prototype.ignore]]);
var SUBMODEL_ELEMENT_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var RELATIONSHIP_ELEMENT_FROM_JSONABLE_DISPATCH = new Map([["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["RelationshipElement", relationshipElementFromJsonableWithoutDispatch]]);
var SETTER_MAP_FOR_RELATIONSHIP_ELEMENT = new Map([["extensions", SetterForRelationshipElement.prototype.setExtensionsFromJsonable], ["category", SetterForRelationshipElement.prototype.setCategoryFromJsonable], ["idShort", SetterForRelationshipElement.prototype.setIdShortFromJsonable], ["displayName", SetterForRelationshipElement.prototype.setDisplayNameFromJsonable], ["description", SetterForRelationshipElement.prototype.setDescriptionFromJsonable], ["semanticId", SetterForRelationshipElement.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForRelationshipElement.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForRelationshipElement.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForRelationshipElement.prototype.setEmbeddedDataSpecificationsFromJsonable], ["first", SetterForRelationshipElement.prototype.setFirstFromJsonable], ["second", SetterForRelationshipElement.prototype.setSecondFromJsonable], ["modelType", SetterForRelationshipElement.prototype.ignore]]);
var SETTER_MAP_FOR_SUBMODEL_ELEMENT_LIST = new Map([["extensions", SetterForSubmodelElementList.prototype.setExtensionsFromJsonable], ["category", SetterForSubmodelElementList.prototype.setCategoryFromJsonable], ["idShort", SetterForSubmodelElementList.prototype.setIdShortFromJsonable], ["displayName", SetterForSubmodelElementList.prototype.setDisplayNameFromJsonable], ["description", SetterForSubmodelElementList.prototype.setDescriptionFromJsonable], ["semanticId", SetterForSubmodelElementList.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForSubmodelElementList.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForSubmodelElementList.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForSubmodelElementList.prototype.setEmbeddedDataSpecificationsFromJsonable], ["orderRelevant", SetterForSubmodelElementList.prototype.setOrderRelevantFromJsonable], ["semanticIdListElement", SetterForSubmodelElementList.prototype.setSemanticIdListElementFromJsonable], ["typeValueListElement", SetterForSubmodelElementList.prototype.setTypeValueListElementFromJsonable], ["valueTypeListElement", SetterForSubmodelElementList.prototype.setValueTypeListElementFromJsonable], ["value", SetterForSubmodelElementList.prototype.setValueFromJsonable], ["modelType", SetterForSubmodelElementList.prototype.ignore]]);
var SETTER_MAP_FOR_SUBMODEL_ELEMENT_COLLECTION = new Map([["extensions", SetterForSubmodelElementCollection.prototype.setExtensionsFromJsonable], ["category", SetterForSubmodelElementCollection.prototype.setCategoryFromJsonable], ["idShort", SetterForSubmodelElementCollection.prototype.setIdShortFromJsonable], ["displayName", SetterForSubmodelElementCollection.prototype.setDisplayNameFromJsonable], ["description", SetterForSubmodelElementCollection.prototype.setDescriptionFromJsonable], ["semanticId", SetterForSubmodelElementCollection.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForSubmodelElementCollection.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForSubmodelElementCollection.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForSubmodelElementCollection.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForSubmodelElementCollection.prototype.setValueFromJsonable], ["modelType", SetterForSubmodelElementCollection.prototype.ignore]]);
var DATA_ELEMENT_FROM_JSONABLE_DISPATCH = new Map([["Blob", blobFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable]]);
var SETTER_MAP_FOR_PROPERTY = new Map([["extensions", SetterForProperty.prototype.setExtensionsFromJsonable], ["category", SetterForProperty.prototype.setCategoryFromJsonable], ["idShort", SetterForProperty.prototype.setIdShortFromJsonable], ["displayName", SetterForProperty.prototype.setDisplayNameFromJsonable], ["description", SetterForProperty.prototype.setDescriptionFromJsonable], ["semanticId", SetterForProperty.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForProperty.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForProperty.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForProperty.prototype.setEmbeddedDataSpecificationsFromJsonable], ["valueType", SetterForProperty.prototype.setValueTypeFromJsonable], ["value", SetterForProperty.prototype.setValueFromJsonable], ["valueId", SetterForProperty.prototype.setValueIdFromJsonable], ["modelType", SetterForProperty.prototype.ignore]]);
var SETTER_MAP_FOR_MULTI_LANGUAGE_PROPERTY = new Map([["extensions", SetterForMultiLanguageProperty.prototype.setExtensionsFromJsonable], ["category", SetterForMultiLanguageProperty.prototype.setCategoryFromJsonable], ["idShort", SetterForMultiLanguageProperty.prototype.setIdShortFromJsonable], ["displayName", SetterForMultiLanguageProperty.prototype.setDisplayNameFromJsonable], ["description", SetterForMultiLanguageProperty.prototype.setDescriptionFromJsonable], ["semanticId", SetterForMultiLanguageProperty.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForMultiLanguageProperty.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForMultiLanguageProperty.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForMultiLanguageProperty.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForMultiLanguageProperty.prototype.setValueFromJsonable], ["valueId", SetterForMultiLanguageProperty.prototype.setValueIdFromJsonable], ["modelType", SetterForMultiLanguageProperty.prototype.ignore]]);
var SETTER_MAP_FOR_RANGE = new Map([["extensions", SetterForRange.prototype.setExtensionsFromJsonable], ["category", SetterForRange.prototype.setCategoryFromJsonable], ["idShort", SetterForRange.prototype.setIdShortFromJsonable], ["displayName", SetterForRange.prototype.setDisplayNameFromJsonable], ["description", SetterForRange.prototype.setDescriptionFromJsonable], ["semanticId", SetterForRange.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForRange.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForRange.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForRange.prototype.setEmbeddedDataSpecificationsFromJsonable], ["valueType", SetterForRange.prototype.setValueTypeFromJsonable], ["min", SetterForRange.prototype.setMinFromJsonable], ["max", SetterForRange.prototype.setMaxFromJsonable], ["modelType", SetterForRange.prototype.ignore]]);
var SETTER_MAP_FOR_REFERENCE_ELEMENT = new Map([["extensions", SetterForReferenceElement.prototype.setExtensionsFromJsonable], ["category", SetterForReferenceElement.prototype.setCategoryFromJsonable], ["idShort", SetterForReferenceElement.prototype.setIdShortFromJsonable], ["displayName", SetterForReferenceElement.prototype.setDisplayNameFromJsonable], ["description", SetterForReferenceElement.prototype.setDescriptionFromJsonable], ["semanticId", SetterForReferenceElement.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForReferenceElement.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForReferenceElement.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForReferenceElement.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForReferenceElement.prototype.setValueFromJsonable], ["modelType", SetterForReferenceElement.prototype.ignore]]);
var SETTER_MAP_FOR_BLOB = new Map([["extensions", SetterForBlob.prototype.setExtensionsFromJsonable], ["category", SetterForBlob.prototype.setCategoryFromJsonable], ["idShort", SetterForBlob.prototype.setIdShortFromJsonable], ["displayName", SetterForBlob.prototype.setDisplayNameFromJsonable], ["description", SetterForBlob.prototype.setDescriptionFromJsonable], ["semanticId", SetterForBlob.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForBlob.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForBlob.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForBlob.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForBlob.prototype.setValueFromJsonable], ["contentType", SetterForBlob.prototype.setContentTypeFromJsonable], ["modelType", SetterForBlob.prototype.ignore]]);
var SETTER_MAP_FOR_FILE = new Map([["extensions", SetterForFile.prototype.setExtensionsFromJsonable], ["category", SetterForFile.prototype.setCategoryFromJsonable], ["idShort", SetterForFile.prototype.setIdShortFromJsonable], ["displayName", SetterForFile.prototype.setDisplayNameFromJsonable], ["description", SetterForFile.prototype.setDescriptionFromJsonable], ["semanticId", SetterForFile.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForFile.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForFile.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForFile.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForFile.prototype.setValueFromJsonable], ["contentType", SetterForFile.prototype.setContentTypeFromJsonable], ["modelType", SetterForFile.prototype.ignore]]);
var SETTER_MAP_FOR_ANNOTATED_RELATIONSHIP_ELEMENT = new Map([["extensions", SetterForAnnotatedRelationshipElement.prototype.setExtensionsFromJsonable], ["category", SetterForAnnotatedRelationshipElement.prototype.setCategoryFromJsonable], ["idShort", SetterForAnnotatedRelationshipElement.prototype.setIdShortFromJsonable], ["displayName", SetterForAnnotatedRelationshipElement.prototype.setDisplayNameFromJsonable], ["description", SetterForAnnotatedRelationshipElement.prototype.setDescriptionFromJsonable], ["semanticId", SetterForAnnotatedRelationshipElement.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForAnnotatedRelationshipElement.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForAnnotatedRelationshipElement.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForAnnotatedRelationshipElement.prototype.setEmbeddedDataSpecificationsFromJsonable], ["first", SetterForAnnotatedRelationshipElement.prototype.setFirstFromJsonable], ["second", SetterForAnnotatedRelationshipElement.prototype.setSecondFromJsonable], ["annotations", SetterForAnnotatedRelationshipElement.prototype.setAnnotationsFromJsonable], ["modelType", SetterForAnnotatedRelationshipElement.prototype.ignore]]);
var SETTER_MAP_FOR_ENTITY = new Map([["extensions", SetterForEntity.prototype.setExtensionsFromJsonable], ["category", SetterForEntity.prototype.setCategoryFromJsonable], ["idShort", SetterForEntity.prototype.setIdShortFromJsonable], ["displayName", SetterForEntity.prototype.setDisplayNameFromJsonable], ["description", SetterForEntity.prototype.setDescriptionFromJsonable], ["semanticId", SetterForEntity.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForEntity.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForEntity.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForEntity.prototype.setEmbeddedDataSpecificationsFromJsonable], ["statements", SetterForEntity.prototype.setStatementsFromJsonable], ["entityType", SetterForEntity.prototype.setEntityTypeFromJsonable], ["globalAssetId", SetterForEntity.prototype.setGlobalAssetIdFromJsonable], ["specificAssetIds", SetterForEntity.prototype.setSpecificAssetIdsFromJsonable], ["modelType", SetterForEntity.prototype.ignore]]);
var SETTER_MAP_FOR_EVENT_PAYLOAD = new Map([["source", SetterForEventPayload.prototype.setSourceFromJsonable], ["sourceSemanticId", SetterForEventPayload.prototype.setSourceSemanticIdFromJsonable], ["observableReference", SetterForEventPayload.prototype.setObservableReferenceFromJsonable], ["observableSemanticId", SetterForEventPayload.prototype.setObservableSemanticIdFromJsonable], ["topic", SetterForEventPayload.prototype.setTopicFromJsonable], ["subjectId", SetterForEventPayload.prototype.setSubjectIdFromJsonable], ["timeStamp", SetterForEventPayload.prototype.setTimeStampFromJsonable], ["payload", SetterForEventPayload.prototype.setPayloadFromJsonable], ["modelType", SetterForEventPayload.prototype.ignore]]);
var EVENT_ELEMENT_FROM_JSONABLE_DISPATCH = new Map([["BasicEventElement", basicEventElementFromJsonable]]);
var SETTER_MAP_FOR_BASIC_EVENT_ELEMENT = new Map([["extensions", SetterForBasicEventElement.prototype.setExtensionsFromJsonable], ["category", SetterForBasicEventElement.prototype.setCategoryFromJsonable], ["idShort", SetterForBasicEventElement.prototype.setIdShortFromJsonable], ["displayName", SetterForBasicEventElement.prototype.setDisplayNameFromJsonable], ["description", SetterForBasicEventElement.prototype.setDescriptionFromJsonable], ["semanticId", SetterForBasicEventElement.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForBasicEventElement.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForBasicEventElement.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForBasicEventElement.prototype.setEmbeddedDataSpecificationsFromJsonable], ["observed", SetterForBasicEventElement.prototype.setObservedFromJsonable], ["direction", SetterForBasicEventElement.prototype.setDirectionFromJsonable], ["state", SetterForBasicEventElement.prototype.setStateFromJsonable], ["messageTopic", SetterForBasicEventElement.prototype.setMessageTopicFromJsonable], ["messageBroker", SetterForBasicEventElement.prototype.setMessageBrokerFromJsonable], ["lastUpdate", SetterForBasicEventElement.prototype.setLastUpdateFromJsonable], ["minInterval", SetterForBasicEventElement.prototype.setMinIntervalFromJsonable], ["maxInterval", SetterForBasicEventElement.prototype.setMaxIntervalFromJsonable], ["modelType", SetterForBasicEventElement.prototype.ignore]]);
var SETTER_MAP_FOR_OPERATION = new Map([["extensions", SetterForOperation.prototype.setExtensionsFromJsonable], ["category", SetterForOperation.prototype.setCategoryFromJsonable], ["idShort", SetterForOperation.prototype.setIdShortFromJsonable], ["displayName", SetterForOperation.prototype.setDisplayNameFromJsonable], ["description", SetterForOperation.prototype.setDescriptionFromJsonable], ["semanticId", SetterForOperation.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForOperation.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForOperation.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForOperation.prototype.setEmbeddedDataSpecificationsFromJsonable], ["inputVariables", SetterForOperation.prototype.setInputVariablesFromJsonable], ["outputVariables", SetterForOperation.prototype.setOutputVariablesFromJsonable], ["inoutputVariables", SetterForOperation.prototype.setInoutputVariablesFromJsonable], ["modelType", SetterForOperation.prototype.ignore]]);
var SETTER_MAP_FOR_OPERATION_VARIABLE = new Map([["value", SetterForOperationVariable.prototype.setValueFromJsonable], ["modelType", SetterForOperationVariable.prototype.ignore]]);
var SETTER_MAP_FOR_CAPABILITY = new Map([["extensions", SetterForCapability.prototype.setExtensionsFromJsonable], ["category", SetterForCapability.prototype.setCategoryFromJsonable], ["idShort", SetterForCapability.prototype.setIdShortFromJsonable], ["displayName", SetterForCapability.prototype.setDisplayNameFromJsonable], ["description", SetterForCapability.prototype.setDescriptionFromJsonable], ["semanticId", SetterForCapability.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForCapability.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForCapability.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForCapability.prototype.setEmbeddedDataSpecificationsFromJsonable], ["modelType", SetterForCapability.prototype.ignore]]);
var SETTER_MAP_FOR_CONCEPT_DESCRIPTION = new Map([["extensions", SetterForConceptDescription.prototype.setExtensionsFromJsonable], ["category", SetterForConceptDescription.prototype.setCategoryFromJsonable], ["idShort", SetterForConceptDescription.prototype.setIdShortFromJsonable], ["displayName", SetterForConceptDescription.prototype.setDisplayNameFromJsonable], ["description", SetterForConceptDescription.prototype.setDescriptionFromJsonable], ["administration", SetterForConceptDescription.prototype.setAdministrationFromJsonable], ["id", SetterForConceptDescription.prototype.setIdFromJsonable], ["embeddedDataSpecifications", SetterForConceptDescription.prototype.setEmbeddedDataSpecificationsFromJsonable], ["isCaseOf", SetterForConceptDescription.prototype.setIsCaseOfFromJsonable], ["modelType", SetterForConceptDescription.prototype.ignore]]);
var SETTER_MAP_FOR_REFERENCE = new Map([["type", SetterForReference.prototype.setTypeFromJsonable], ["referredSemanticId", SetterForReference.prototype.setReferredSemanticIdFromJsonable], ["keys", SetterForReference.prototype.setKeysFromJsonable], ["modelType", SetterForReference.prototype.ignore]]);
var SETTER_MAP_FOR_KEY = new Map([["type", SetterForKey.prototype.setTypeFromJsonable], ["value", SetterForKey.prototype.setValueFromJsonable], ["modelType", SetterForKey.prototype.ignore]]);
var ABSTRACT_LANG_STRING_FROM_JSONABLE_DISPATCH = new Map([["LangStringDefinitionTypeIec61360", langStringDefinitionTypeIec61360FromJsonable], ["LangStringNameType", langStringNameTypeFromJsonable], ["LangStringPreferredNameTypeIec61360", langStringPreferredNameTypeIec61360FromJsonable], ["LangStringShortNameTypeIec61360", langStringShortNameTypeIec61360FromJsonable], ["LangStringTextType", langStringTextTypeFromJsonable]]);
var SETTER_MAP_FOR_LANG_STRING_NAME_TYPE = new Map([["language", SetterForLangStringNameType.prototype.setLanguageFromJsonable], ["text", SetterForLangStringNameType.prototype.setTextFromJsonable], ["modelType", SetterForLangStringNameType.prototype.ignore]]);
var SETTER_MAP_FOR_LANG_STRING_TEXT_TYPE = new Map([["language", SetterForLangStringTextType.prototype.setLanguageFromJsonable], ["text", SetterForLangStringTextType.prototype.setTextFromJsonable], ["modelType", SetterForLangStringTextType.prototype.ignore]]);
var SETTER_MAP_FOR_ENVIRONMENT = new Map([["assetAdministrationShells", SetterForEnvironment.prototype.setAssetAdministrationShellsFromJsonable], ["submodels", SetterForEnvironment.prototype.setSubmodelsFromJsonable], ["conceptDescriptions", SetterForEnvironment.prototype.setConceptDescriptionsFromJsonable], ["modelType", SetterForEnvironment.prototype.ignore]]);
var DATA_SPECIFICATION_CONTENT_FROM_JSONABLE_DISPATCH = new Map([["DataSpecificationIec61360", dataSpecificationIec61360FromJsonable]]);
var SETTER_MAP_FOR_EMBEDDED_DATA_SPECIFICATION = new Map([["dataSpecification", SetterForEmbeddedDataSpecification.prototype.setDataSpecificationFromJsonable], ["dataSpecificationContent", SetterForEmbeddedDataSpecification.prototype.setDataSpecificationContentFromJsonable], ["modelType", SetterForEmbeddedDataSpecification.prototype.ignore]]);
var SETTER_MAP_FOR_LEVEL_TYPE = new Map([["min", SetterForLevelType.prototype.setMinFromJsonable], ["nom", SetterForLevelType.prototype.setNomFromJsonable], ["typ", SetterForLevelType.prototype.setTypFromJsonable], ["max", SetterForLevelType.prototype.setMaxFromJsonable], ["modelType", SetterForLevelType.prototype.ignore]]);
var SETTER_MAP_FOR_VALUE_REFERENCE_PAIR = new Map([["value", SetterForValueReferencePair.prototype.setValueFromJsonable], ["valueId", SetterForValueReferencePair.prototype.setValueIdFromJsonable], ["modelType", SetterForValueReferencePair.prototype.ignore]]);
var SETTER_MAP_FOR_VALUE_LIST = new Map([["valueReferencePairs", SetterForValueList.prototype.setValueReferencePairsFromJsonable], ["modelType", SetterForValueList.prototype.ignore]]);
var SETTER_MAP_FOR_LANG_STRING_PREFERRED_NAME_TYPE_IEC_61360 = new Map([["language", SetterForLangStringPreferredNameTypeIec61360.prototype.setLanguageFromJsonable], ["text", SetterForLangStringPreferredNameTypeIec61360.prototype.setTextFromJsonable], ["modelType", SetterForLangStringPreferredNameTypeIec61360.prototype.ignore]]);
var SETTER_MAP_FOR_LANG_STRING_SHORT_NAME_TYPE_IEC_61360 = new Map([["language", SetterForLangStringShortNameTypeIec61360.prototype.setLanguageFromJsonable], ["text", SetterForLangStringShortNameTypeIec61360.prototype.setTextFromJsonable], ["modelType", SetterForLangStringShortNameTypeIec61360.prototype.ignore]]);
var SETTER_MAP_FOR_LANG_STRING_DEFINITION_TYPE_IEC_61360 = new Map([["language", SetterForLangStringDefinitionTypeIec61360.prototype.setLanguageFromJsonable], ["text", SetterForLangStringDefinitionTypeIec61360.prototype.setTextFromJsonable], ["modelType", SetterForLangStringDefinitionTypeIec61360.prototype.ignore]]);
var SETTER_MAP_FOR_DATA_SPECIFICATION_IEC_61360 = new Map([["preferredName", SetterForDataSpecificationIec61360.prototype.setPreferredNameFromJsonable], ["shortName", SetterForDataSpecificationIec61360.prototype.setShortNameFromJsonable], ["unit", SetterForDataSpecificationIec61360.prototype.setUnitFromJsonable], ["unitId", SetterForDataSpecificationIec61360.prototype.setUnitIdFromJsonable], ["sourceOfDefinition", SetterForDataSpecificationIec61360.prototype.setSourceOfDefinitionFromJsonable], ["symbol", SetterForDataSpecificationIec61360.prototype.setSymbolFromJsonable], ["dataType", SetterForDataSpecificationIec61360.prototype.setDataTypeFromJsonable], ["definition", SetterForDataSpecificationIec61360.prototype.setDefinitionFromJsonable], ["valueFormat", SetterForDataSpecificationIec61360.prototype.setValueFormatFromJsonable], ["valueList", SetterForDataSpecificationIec61360.prototype.setValueListFromJsonable], ["value", SetterForDataSpecificationIec61360.prototype.setValueFromJsonable], ["levelType", SetterForDataSpecificationIec61360.prototype.setLevelTypeFromJsonable], ["modelType", SetterForDataSpecificationIec61360.prototype.ignore]]);

// endregion

// region Serialization

/**
 * Transform the instance to its JSON-able representation.
 */
var Serializer = /*#__PURE__*/function (_AasTypes$AbstractTra) {
  _inherits(Serializer, _AasTypes$AbstractTra);
  var _super = _createSuper(Serializer);
  function Serializer() {
    _classCallCheck(this, Serializer);
    return _super.apply(this, arguments);
  }
  _createClass(Serializer, [{
    key: "transformExtension",
    value:
    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
    function transformExtension(that) {
      var jsonable = {};
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator125 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step125;
        try {
          for (_iterator125.s(); !(_step125 = _iterator125.n()).done;) {
            var item = _step125.value;
            supplementalSemanticIdsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator125.e(err);
        } finally {
          _iterator125.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      jsonable["name"] = that.name;
      if (that.valueType !== null) {
        jsonable["valueType"] = AasStringification.mustDataTypeDefXsdToString(that.valueType);
      }
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      if (that.refersTo !== null) {
        var refersToArray = new Array();
        var _iterator126 = _createForOfIteratorHelper(that.refersTo),
          _step126;
        try {
          for (_iterator126.s(); !(_step126 = _iterator126.n()).done;) {
            var _item = _step126.value;
            refersToArray.push(this.transform(_item));
          }
        } catch (err) {
          _iterator126.e(err);
        } finally {
          _iterator126.f();
        }
        jsonable["refersTo"] = refersToArray;
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformAdministrativeInformation",
    value: function transformAdministrativeInformation(that) {
      var jsonable = {};
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator127 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step127;
        try {
          for (_iterator127.s(); !(_step127 = _iterator127.n()).done;) {
            var item = _step127.value;
            embeddedDataSpecificationsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator127.e(err);
        } finally {
          _iterator127.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.version !== null) {
        jsonable["version"] = that.version;
      }
      if (that.revision !== null) {
        jsonable["revision"] = that.revision;
      }
      if (that.creator !== null) {
        jsonable["creator"] = this.transform(that.creator);
      }
      if (that.templateId !== null) {
        jsonable["templateId"] = that.templateId;
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformQualifier",
    value: function transformQualifier(that) {
      var jsonable = {};
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator128 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step128;
        try {
          for (_iterator128.s(); !(_step128 = _iterator128.n()).done;) {
            var item = _step128.value;
            supplementalSemanticIdsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator128.e(err);
        } finally {
          _iterator128.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.kind !== null) {
        jsonable["kind"] = AasStringification.mustQualifierKindToString(that.kind);
      }
      jsonable["type"] = that.type;
      jsonable["valueType"] = AasStringification.mustDataTypeDefXsdToString(that.valueType);
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      if (that.valueId !== null) {
        jsonable["valueId"] = this.transform(that.valueId);
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformAssetAdministrationShell",
    value: function transformAssetAdministrationShell(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator129 = _createForOfIteratorHelper(that.extensions),
          _step129;
        try {
          for (_iterator129.s(); !(_step129 = _iterator129.n()).done;) {
            var item = _step129.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator129.e(err);
        } finally {
          _iterator129.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator130 = _createForOfIteratorHelper(that.displayName),
          _step130;
        try {
          for (_iterator130.s(); !(_step130 = _iterator130.n()).done;) {
            var _item2 = _step130.value;
            displayNameArray.push(this.transform(_item2));
          }
        } catch (err) {
          _iterator130.e(err);
        } finally {
          _iterator130.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator131 = _createForOfIteratorHelper(that.description),
          _step131;
        try {
          for (_iterator131.s(); !(_step131 = _iterator131.n()).done;) {
            var _item3 = _step131.value;
            descriptionArray.push(this.transform(_item3));
          }
        } catch (err) {
          _iterator131.e(err);
        } finally {
          _iterator131.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.administration !== null) {
        jsonable["administration"] = this.transform(that.administration);
      }
      jsonable["id"] = that.id;
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator132 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step132;
        try {
          for (_iterator132.s(); !(_step132 = _iterator132.n()).done;) {
            var _item4 = _step132.value;
            embeddedDataSpecificationsArray.push(this.transform(_item4));
          }
        } catch (err) {
          _iterator132.e(err);
        } finally {
          _iterator132.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.derivedFrom !== null) {
        jsonable["derivedFrom"] = this.transform(that.derivedFrom);
      }
      jsonable["assetInformation"] = this.transform(that.assetInformation);
      if (that.submodels !== null) {
        var submodelsArray = new Array();
        var _iterator133 = _createForOfIteratorHelper(that.submodels),
          _step133;
        try {
          for (_iterator133.s(); !(_step133 = _iterator133.n()).done;) {
            var _item5 = _step133.value;
            submodelsArray.push(this.transform(_item5));
          }
        } catch (err) {
          _iterator133.e(err);
        } finally {
          _iterator133.f();
        }
        jsonable["submodels"] = submodelsArray;
      }
      jsonable["modelType"] = "AssetAdministrationShell";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformAssetInformation",
    value: function transformAssetInformation(that) {
      var jsonable = {};
      jsonable["assetKind"] = AasStringification.mustAssetKindToString(that.assetKind);
      if (that.globalAssetId !== null) {
        jsonable["globalAssetId"] = that.globalAssetId;
      }
      if (that.specificAssetIds !== null) {
        var specificAssetIdsArray = new Array();
        var _iterator134 = _createForOfIteratorHelper(that.specificAssetIds),
          _step134;
        try {
          for (_iterator134.s(); !(_step134 = _iterator134.n()).done;) {
            var item = _step134.value;
            specificAssetIdsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator134.e(err);
        } finally {
          _iterator134.f();
        }
        jsonable["specificAssetIds"] = specificAssetIdsArray;
      }
      if (that.assetType !== null) {
        jsonable["assetType"] = that.assetType;
      }
      if (that.defaultThumbnail !== null) {
        jsonable["defaultThumbnail"] = this.transform(that.defaultThumbnail);
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformResource",
    value: function transformResource(that) {
      var jsonable = {};
      jsonable["path"] = that.path;
      if (that.contentType !== null) {
        jsonable["contentType"] = that.contentType;
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformSpecificAssetId",
    value: function transformSpecificAssetId(that) {
      var jsonable = {};
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator135 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step135;
        try {
          for (_iterator135.s(); !(_step135 = _iterator135.n()).done;) {
            var item = _step135.value;
            supplementalSemanticIdsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator135.e(err);
        } finally {
          _iterator135.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      jsonable["name"] = that.name;
      jsonable["value"] = that.value;
      if (that.externalSubjectId !== null) {
        jsonable["externalSubjectId"] = this.transform(that.externalSubjectId);
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformSubmodel",
    value: function transformSubmodel(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator136 = _createForOfIteratorHelper(that.extensions),
          _step136;
        try {
          for (_iterator136.s(); !(_step136 = _iterator136.n()).done;) {
            var item = _step136.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator136.e(err);
        } finally {
          _iterator136.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator137 = _createForOfIteratorHelper(that.displayName),
          _step137;
        try {
          for (_iterator137.s(); !(_step137 = _iterator137.n()).done;) {
            var _item6 = _step137.value;
            displayNameArray.push(this.transform(_item6));
          }
        } catch (err) {
          _iterator137.e(err);
        } finally {
          _iterator137.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator138 = _createForOfIteratorHelper(that.description),
          _step138;
        try {
          for (_iterator138.s(); !(_step138 = _iterator138.n()).done;) {
            var _item7 = _step138.value;
            descriptionArray.push(this.transform(_item7));
          }
        } catch (err) {
          _iterator138.e(err);
        } finally {
          _iterator138.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.administration !== null) {
        jsonable["administration"] = this.transform(that.administration);
      }
      jsonable["id"] = that.id;
      if (that.kind !== null) {
        jsonable["kind"] = AasStringification.mustModellingKindToString(that.kind);
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator139 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step139;
        try {
          for (_iterator139.s(); !(_step139 = _iterator139.n()).done;) {
            var _item8 = _step139.value;
            supplementalSemanticIdsArray.push(this.transform(_item8));
          }
        } catch (err) {
          _iterator139.e(err);
        } finally {
          _iterator139.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator140 = _createForOfIteratorHelper(that.qualifiers),
          _step140;
        try {
          for (_iterator140.s(); !(_step140 = _iterator140.n()).done;) {
            var _item9 = _step140.value;
            qualifiersArray.push(this.transform(_item9));
          }
        } catch (err) {
          _iterator140.e(err);
        } finally {
          _iterator140.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator141 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step141;
        try {
          for (_iterator141.s(); !(_step141 = _iterator141.n()).done;) {
            var _item10 = _step141.value;
            embeddedDataSpecificationsArray.push(this.transform(_item10));
          }
        } catch (err) {
          _iterator141.e(err);
        } finally {
          _iterator141.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.submodelElements !== null) {
        var submodelElementsArray = new Array();
        var _iterator142 = _createForOfIteratorHelper(that.submodelElements),
          _step142;
        try {
          for (_iterator142.s(); !(_step142 = _iterator142.n()).done;) {
            var _item11 = _step142.value;
            submodelElementsArray.push(this.transform(_item11));
          }
        } catch (err) {
          _iterator142.e(err);
        } finally {
          _iterator142.f();
        }
        jsonable["submodelElements"] = submodelElementsArray;
      }
      jsonable["modelType"] = "Submodel";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformRelationshipElement",
    value: function transformRelationshipElement(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator143 = _createForOfIteratorHelper(that.extensions),
          _step143;
        try {
          for (_iterator143.s(); !(_step143 = _iterator143.n()).done;) {
            var item = _step143.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator143.e(err);
        } finally {
          _iterator143.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator144 = _createForOfIteratorHelper(that.displayName),
          _step144;
        try {
          for (_iterator144.s(); !(_step144 = _iterator144.n()).done;) {
            var _item12 = _step144.value;
            displayNameArray.push(this.transform(_item12));
          }
        } catch (err) {
          _iterator144.e(err);
        } finally {
          _iterator144.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator145 = _createForOfIteratorHelper(that.description),
          _step145;
        try {
          for (_iterator145.s(); !(_step145 = _iterator145.n()).done;) {
            var _item13 = _step145.value;
            descriptionArray.push(this.transform(_item13));
          }
        } catch (err) {
          _iterator145.e(err);
        } finally {
          _iterator145.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator146 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step146;
        try {
          for (_iterator146.s(); !(_step146 = _iterator146.n()).done;) {
            var _item14 = _step146.value;
            supplementalSemanticIdsArray.push(this.transform(_item14));
          }
        } catch (err) {
          _iterator146.e(err);
        } finally {
          _iterator146.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator147 = _createForOfIteratorHelper(that.qualifiers),
          _step147;
        try {
          for (_iterator147.s(); !(_step147 = _iterator147.n()).done;) {
            var _item15 = _step147.value;
            qualifiersArray.push(this.transform(_item15));
          }
        } catch (err) {
          _iterator147.e(err);
        } finally {
          _iterator147.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator148 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step148;
        try {
          for (_iterator148.s(); !(_step148 = _iterator148.n()).done;) {
            var _item16 = _step148.value;
            embeddedDataSpecificationsArray.push(this.transform(_item16));
          }
        } catch (err) {
          _iterator148.e(err);
        } finally {
          _iterator148.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["first"] = this.transform(that.first);
      jsonable["second"] = this.transform(that.second);
      jsonable["modelType"] = "RelationshipElement";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformSubmodelElementList",
    value: function transformSubmodelElementList(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator149 = _createForOfIteratorHelper(that.extensions),
          _step149;
        try {
          for (_iterator149.s(); !(_step149 = _iterator149.n()).done;) {
            var item = _step149.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator149.e(err);
        } finally {
          _iterator149.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator150 = _createForOfIteratorHelper(that.displayName),
          _step150;
        try {
          for (_iterator150.s(); !(_step150 = _iterator150.n()).done;) {
            var _item17 = _step150.value;
            displayNameArray.push(this.transform(_item17));
          }
        } catch (err) {
          _iterator150.e(err);
        } finally {
          _iterator150.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator151 = _createForOfIteratorHelper(that.description),
          _step151;
        try {
          for (_iterator151.s(); !(_step151 = _iterator151.n()).done;) {
            var _item18 = _step151.value;
            descriptionArray.push(this.transform(_item18));
          }
        } catch (err) {
          _iterator151.e(err);
        } finally {
          _iterator151.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator152 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step152;
        try {
          for (_iterator152.s(); !(_step152 = _iterator152.n()).done;) {
            var _item19 = _step152.value;
            supplementalSemanticIdsArray.push(this.transform(_item19));
          }
        } catch (err) {
          _iterator152.e(err);
        } finally {
          _iterator152.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator153 = _createForOfIteratorHelper(that.qualifiers),
          _step153;
        try {
          for (_iterator153.s(); !(_step153 = _iterator153.n()).done;) {
            var _item20 = _step153.value;
            qualifiersArray.push(this.transform(_item20));
          }
        } catch (err) {
          _iterator153.e(err);
        } finally {
          _iterator153.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator154 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step154;
        try {
          for (_iterator154.s(); !(_step154 = _iterator154.n()).done;) {
            var _item21 = _step154.value;
            embeddedDataSpecificationsArray.push(this.transform(_item21));
          }
        } catch (err) {
          _iterator154.e(err);
        } finally {
          _iterator154.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.orderRelevant !== null) {
        jsonable["orderRelevant"] = that.orderRelevant;
      }
      if (that.semanticIdListElement !== null) {
        jsonable["semanticIdListElement"] = this.transform(that.semanticIdListElement);
      }
      jsonable["typeValueListElement"] = AasStringification.mustAasSubmodelElementsToString(that.typeValueListElement);
      if (that.valueTypeListElement !== null) {
        jsonable["valueTypeListElement"] = AasStringification.mustDataTypeDefXsdToString(that.valueTypeListElement);
      }
      if (that.value !== null) {
        var valueArray = new Array();
        var _iterator155 = _createForOfIteratorHelper(that.value),
          _step155;
        try {
          for (_iterator155.s(); !(_step155 = _iterator155.n()).done;) {
            var _item22 = _step155.value;
            valueArray.push(this.transform(_item22));
          }
        } catch (err) {
          _iterator155.e(err);
        } finally {
          _iterator155.f();
        }
        jsonable["value"] = valueArray;
      }
      jsonable["modelType"] = "SubmodelElementList";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformSubmodelElementCollection",
    value: function transformSubmodelElementCollection(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator156 = _createForOfIteratorHelper(that.extensions),
          _step156;
        try {
          for (_iterator156.s(); !(_step156 = _iterator156.n()).done;) {
            var item = _step156.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator156.e(err);
        } finally {
          _iterator156.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator157 = _createForOfIteratorHelper(that.displayName),
          _step157;
        try {
          for (_iterator157.s(); !(_step157 = _iterator157.n()).done;) {
            var _item23 = _step157.value;
            displayNameArray.push(this.transform(_item23));
          }
        } catch (err) {
          _iterator157.e(err);
        } finally {
          _iterator157.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator158 = _createForOfIteratorHelper(that.description),
          _step158;
        try {
          for (_iterator158.s(); !(_step158 = _iterator158.n()).done;) {
            var _item24 = _step158.value;
            descriptionArray.push(this.transform(_item24));
          }
        } catch (err) {
          _iterator158.e(err);
        } finally {
          _iterator158.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator159 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step159;
        try {
          for (_iterator159.s(); !(_step159 = _iterator159.n()).done;) {
            var _item25 = _step159.value;
            supplementalSemanticIdsArray.push(this.transform(_item25));
          }
        } catch (err) {
          _iterator159.e(err);
        } finally {
          _iterator159.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator160 = _createForOfIteratorHelper(that.qualifiers),
          _step160;
        try {
          for (_iterator160.s(); !(_step160 = _iterator160.n()).done;) {
            var _item26 = _step160.value;
            qualifiersArray.push(this.transform(_item26));
          }
        } catch (err) {
          _iterator160.e(err);
        } finally {
          _iterator160.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator161 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step161;
        try {
          for (_iterator161.s(); !(_step161 = _iterator161.n()).done;) {
            var _item27 = _step161.value;
            embeddedDataSpecificationsArray.push(this.transform(_item27));
          }
        } catch (err) {
          _iterator161.e(err);
        } finally {
          _iterator161.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        var valueArray = new Array();
        var _iterator162 = _createForOfIteratorHelper(that.value),
          _step162;
        try {
          for (_iterator162.s(); !(_step162 = _iterator162.n()).done;) {
            var _item28 = _step162.value;
            valueArray.push(this.transform(_item28));
          }
        } catch (err) {
          _iterator162.e(err);
        } finally {
          _iterator162.f();
        }
        jsonable["value"] = valueArray;
      }
      jsonable["modelType"] = "SubmodelElementCollection";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformProperty",
    value: function transformProperty(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator163 = _createForOfIteratorHelper(that.extensions),
          _step163;
        try {
          for (_iterator163.s(); !(_step163 = _iterator163.n()).done;) {
            var item = _step163.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator163.e(err);
        } finally {
          _iterator163.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator164 = _createForOfIteratorHelper(that.displayName),
          _step164;
        try {
          for (_iterator164.s(); !(_step164 = _iterator164.n()).done;) {
            var _item29 = _step164.value;
            displayNameArray.push(this.transform(_item29));
          }
        } catch (err) {
          _iterator164.e(err);
        } finally {
          _iterator164.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator165 = _createForOfIteratorHelper(that.description),
          _step165;
        try {
          for (_iterator165.s(); !(_step165 = _iterator165.n()).done;) {
            var _item30 = _step165.value;
            descriptionArray.push(this.transform(_item30));
          }
        } catch (err) {
          _iterator165.e(err);
        } finally {
          _iterator165.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator166 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step166;
        try {
          for (_iterator166.s(); !(_step166 = _iterator166.n()).done;) {
            var _item31 = _step166.value;
            supplementalSemanticIdsArray.push(this.transform(_item31));
          }
        } catch (err) {
          _iterator166.e(err);
        } finally {
          _iterator166.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator167 = _createForOfIteratorHelper(that.qualifiers),
          _step167;
        try {
          for (_iterator167.s(); !(_step167 = _iterator167.n()).done;) {
            var _item32 = _step167.value;
            qualifiersArray.push(this.transform(_item32));
          }
        } catch (err) {
          _iterator167.e(err);
        } finally {
          _iterator167.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator168 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step168;
        try {
          for (_iterator168.s(); !(_step168 = _iterator168.n()).done;) {
            var _item33 = _step168.value;
            embeddedDataSpecificationsArray.push(this.transform(_item33));
          }
        } catch (err) {
          _iterator168.e(err);
        } finally {
          _iterator168.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["valueType"] = AasStringification.mustDataTypeDefXsdToString(that.valueType);
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      if (that.valueId !== null) {
        jsonable["valueId"] = this.transform(that.valueId);
      }
      jsonable["modelType"] = "Property";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformMultiLanguageProperty",
    value: function transformMultiLanguageProperty(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator169 = _createForOfIteratorHelper(that.extensions),
          _step169;
        try {
          for (_iterator169.s(); !(_step169 = _iterator169.n()).done;) {
            var item = _step169.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator169.e(err);
        } finally {
          _iterator169.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator170 = _createForOfIteratorHelper(that.displayName),
          _step170;
        try {
          for (_iterator170.s(); !(_step170 = _iterator170.n()).done;) {
            var _item34 = _step170.value;
            displayNameArray.push(this.transform(_item34));
          }
        } catch (err) {
          _iterator170.e(err);
        } finally {
          _iterator170.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator171 = _createForOfIteratorHelper(that.description),
          _step171;
        try {
          for (_iterator171.s(); !(_step171 = _iterator171.n()).done;) {
            var _item35 = _step171.value;
            descriptionArray.push(this.transform(_item35));
          }
        } catch (err) {
          _iterator171.e(err);
        } finally {
          _iterator171.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator172 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step172;
        try {
          for (_iterator172.s(); !(_step172 = _iterator172.n()).done;) {
            var _item36 = _step172.value;
            supplementalSemanticIdsArray.push(this.transform(_item36));
          }
        } catch (err) {
          _iterator172.e(err);
        } finally {
          _iterator172.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator173 = _createForOfIteratorHelper(that.qualifiers),
          _step173;
        try {
          for (_iterator173.s(); !(_step173 = _iterator173.n()).done;) {
            var _item37 = _step173.value;
            qualifiersArray.push(this.transform(_item37));
          }
        } catch (err) {
          _iterator173.e(err);
        } finally {
          _iterator173.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator174 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step174;
        try {
          for (_iterator174.s(); !(_step174 = _iterator174.n()).done;) {
            var _item38 = _step174.value;
            embeddedDataSpecificationsArray.push(this.transform(_item38));
          }
        } catch (err) {
          _iterator174.e(err);
        } finally {
          _iterator174.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        var valueArray = new Array();
        var _iterator175 = _createForOfIteratorHelper(that.value),
          _step175;
        try {
          for (_iterator175.s(); !(_step175 = _iterator175.n()).done;) {
            var _item39 = _step175.value;
            valueArray.push(this.transform(_item39));
          }
        } catch (err) {
          _iterator175.e(err);
        } finally {
          _iterator175.f();
        }
        jsonable["value"] = valueArray;
      }
      if (that.valueId !== null) {
        jsonable["valueId"] = this.transform(that.valueId);
      }
      jsonable["modelType"] = "MultiLanguageProperty";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformRange",
    value: function transformRange(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator176 = _createForOfIteratorHelper(that.extensions),
          _step176;
        try {
          for (_iterator176.s(); !(_step176 = _iterator176.n()).done;) {
            var item = _step176.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator176.e(err);
        } finally {
          _iterator176.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator177 = _createForOfIteratorHelper(that.displayName),
          _step177;
        try {
          for (_iterator177.s(); !(_step177 = _iterator177.n()).done;) {
            var _item40 = _step177.value;
            displayNameArray.push(this.transform(_item40));
          }
        } catch (err) {
          _iterator177.e(err);
        } finally {
          _iterator177.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator178 = _createForOfIteratorHelper(that.description),
          _step178;
        try {
          for (_iterator178.s(); !(_step178 = _iterator178.n()).done;) {
            var _item41 = _step178.value;
            descriptionArray.push(this.transform(_item41));
          }
        } catch (err) {
          _iterator178.e(err);
        } finally {
          _iterator178.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator179 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step179;
        try {
          for (_iterator179.s(); !(_step179 = _iterator179.n()).done;) {
            var _item42 = _step179.value;
            supplementalSemanticIdsArray.push(this.transform(_item42));
          }
        } catch (err) {
          _iterator179.e(err);
        } finally {
          _iterator179.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator180 = _createForOfIteratorHelper(that.qualifiers),
          _step180;
        try {
          for (_iterator180.s(); !(_step180 = _iterator180.n()).done;) {
            var _item43 = _step180.value;
            qualifiersArray.push(this.transform(_item43));
          }
        } catch (err) {
          _iterator180.e(err);
        } finally {
          _iterator180.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator181 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step181;
        try {
          for (_iterator181.s(); !(_step181 = _iterator181.n()).done;) {
            var _item44 = _step181.value;
            embeddedDataSpecificationsArray.push(this.transform(_item44));
          }
        } catch (err) {
          _iterator181.e(err);
        } finally {
          _iterator181.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["valueType"] = AasStringification.mustDataTypeDefXsdToString(that.valueType);
      if (that.min !== null) {
        jsonable["min"] = that.min;
      }
      if (that.max !== null) {
        jsonable["max"] = that.max;
      }
      jsonable["modelType"] = "Range";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformReferenceElement",
    value: function transformReferenceElement(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator182 = _createForOfIteratorHelper(that.extensions),
          _step182;
        try {
          for (_iterator182.s(); !(_step182 = _iterator182.n()).done;) {
            var item = _step182.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator182.e(err);
        } finally {
          _iterator182.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator183 = _createForOfIteratorHelper(that.displayName),
          _step183;
        try {
          for (_iterator183.s(); !(_step183 = _iterator183.n()).done;) {
            var _item45 = _step183.value;
            displayNameArray.push(this.transform(_item45));
          }
        } catch (err) {
          _iterator183.e(err);
        } finally {
          _iterator183.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator184 = _createForOfIteratorHelper(that.description),
          _step184;
        try {
          for (_iterator184.s(); !(_step184 = _iterator184.n()).done;) {
            var _item46 = _step184.value;
            descriptionArray.push(this.transform(_item46));
          }
        } catch (err) {
          _iterator184.e(err);
        } finally {
          _iterator184.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator185 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step185;
        try {
          for (_iterator185.s(); !(_step185 = _iterator185.n()).done;) {
            var _item47 = _step185.value;
            supplementalSemanticIdsArray.push(this.transform(_item47));
          }
        } catch (err) {
          _iterator185.e(err);
        } finally {
          _iterator185.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator186 = _createForOfIteratorHelper(that.qualifiers),
          _step186;
        try {
          for (_iterator186.s(); !(_step186 = _iterator186.n()).done;) {
            var _item48 = _step186.value;
            qualifiersArray.push(this.transform(_item48));
          }
        } catch (err) {
          _iterator186.e(err);
        } finally {
          _iterator186.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator187 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step187;
        try {
          for (_iterator187.s(); !(_step187 = _iterator187.n()).done;) {
            var _item49 = _step187.value;
            embeddedDataSpecificationsArray.push(this.transform(_item49));
          }
        } catch (err) {
          _iterator187.e(err);
        } finally {
          _iterator187.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        jsonable["value"] = this.transform(that.value);
      }
      jsonable["modelType"] = "ReferenceElement";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformBlob",
    value: function transformBlob(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator188 = _createForOfIteratorHelper(that.extensions),
          _step188;
        try {
          for (_iterator188.s(); !(_step188 = _iterator188.n()).done;) {
            var item = _step188.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator188.e(err);
        } finally {
          _iterator188.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator189 = _createForOfIteratorHelper(that.displayName),
          _step189;
        try {
          for (_iterator189.s(); !(_step189 = _iterator189.n()).done;) {
            var _item50 = _step189.value;
            displayNameArray.push(this.transform(_item50));
          }
        } catch (err) {
          _iterator189.e(err);
        } finally {
          _iterator189.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator190 = _createForOfIteratorHelper(that.description),
          _step190;
        try {
          for (_iterator190.s(); !(_step190 = _iterator190.n()).done;) {
            var _item51 = _step190.value;
            descriptionArray.push(this.transform(_item51));
          }
        } catch (err) {
          _iterator190.e(err);
        } finally {
          _iterator190.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator191 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step191;
        try {
          for (_iterator191.s(); !(_step191 = _iterator191.n()).done;) {
            var _item52 = _step191.value;
            supplementalSemanticIdsArray.push(this.transform(_item52));
          }
        } catch (err) {
          _iterator191.e(err);
        } finally {
          _iterator191.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator192 = _createForOfIteratorHelper(that.qualifiers),
          _step192;
        try {
          for (_iterator192.s(); !(_step192 = _iterator192.n()).done;) {
            var _item53 = _step192.value;
            qualifiersArray.push(this.transform(_item53));
          }
        } catch (err) {
          _iterator192.e(err);
        } finally {
          _iterator192.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator193 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step193;
        try {
          for (_iterator193.s(); !(_step193 = _iterator193.n()).done;) {
            var _item54 = _step193.value;
            embeddedDataSpecificationsArray.push(this.transform(_item54));
          }
        } catch (err) {
          _iterator193.e(err);
        } finally {
          _iterator193.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        jsonable["value"] = AasCommon.base64Encode(that.value);
      }
      jsonable["contentType"] = that.contentType;
      jsonable["modelType"] = "Blob";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformFile",
    value: function transformFile(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator194 = _createForOfIteratorHelper(that.extensions),
          _step194;
        try {
          for (_iterator194.s(); !(_step194 = _iterator194.n()).done;) {
            var item = _step194.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator194.e(err);
        } finally {
          _iterator194.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator195 = _createForOfIteratorHelper(that.displayName),
          _step195;
        try {
          for (_iterator195.s(); !(_step195 = _iterator195.n()).done;) {
            var _item55 = _step195.value;
            displayNameArray.push(this.transform(_item55));
          }
        } catch (err) {
          _iterator195.e(err);
        } finally {
          _iterator195.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator196 = _createForOfIteratorHelper(that.description),
          _step196;
        try {
          for (_iterator196.s(); !(_step196 = _iterator196.n()).done;) {
            var _item56 = _step196.value;
            descriptionArray.push(this.transform(_item56));
          }
        } catch (err) {
          _iterator196.e(err);
        } finally {
          _iterator196.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator197 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step197;
        try {
          for (_iterator197.s(); !(_step197 = _iterator197.n()).done;) {
            var _item57 = _step197.value;
            supplementalSemanticIdsArray.push(this.transform(_item57));
          }
        } catch (err) {
          _iterator197.e(err);
        } finally {
          _iterator197.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator198 = _createForOfIteratorHelper(that.qualifiers),
          _step198;
        try {
          for (_iterator198.s(); !(_step198 = _iterator198.n()).done;) {
            var _item58 = _step198.value;
            qualifiersArray.push(this.transform(_item58));
          }
        } catch (err) {
          _iterator198.e(err);
        } finally {
          _iterator198.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator199 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step199;
        try {
          for (_iterator199.s(); !(_step199 = _iterator199.n()).done;) {
            var _item59 = _step199.value;
            embeddedDataSpecificationsArray.push(this.transform(_item59));
          }
        } catch (err) {
          _iterator199.e(err);
        } finally {
          _iterator199.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      jsonable["contentType"] = that.contentType;
      jsonable["modelType"] = "File";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformAnnotatedRelationshipElement",
    value: function transformAnnotatedRelationshipElement(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator200 = _createForOfIteratorHelper(that.extensions),
          _step200;
        try {
          for (_iterator200.s(); !(_step200 = _iterator200.n()).done;) {
            var item = _step200.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator200.e(err);
        } finally {
          _iterator200.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator201 = _createForOfIteratorHelper(that.displayName),
          _step201;
        try {
          for (_iterator201.s(); !(_step201 = _iterator201.n()).done;) {
            var _item60 = _step201.value;
            displayNameArray.push(this.transform(_item60));
          }
        } catch (err) {
          _iterator201.e(err);
        } finally {
          _iterator201.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator202 = _createForOfIteratorHelper(that.description),
          _step202;
        try {
          for (_iterator202.s(); !(_step202 = _iterator202.n()).done;) {
            var _item61 = _step202.value;
            descriptionArray.push(this.transform(_item61));
          }
        } catch (err) {
          _iterator202.e(err);
        } finally {
          _iterator202.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator203 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step203;
        try {
          for (_iterator203.s(); !(_step203 = _iterator203.n()).done;) {
            var _item62 = _step203.value;
            supplementalSemanticIdsArray.push(this.transform(_item62));
          }
        } catch (err) {
          _iterator203.e(err);
        } finally {
          _iterator203.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator204 = _createForOfIteratorHelper(that.qualifiers),
          _step204;
        try {
          for (_iterator204.s(); !(_step204 = _iterator204.n()).done;) {
            var _item63 = _step204.value;
            qualifiersArray.push(this.transform(_item63));
          }
        } catch (err) {
          _iterator204.e(err);
        } finally {
          _iterator204.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator205 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step205;
        try {
          for (_iterator205.s(); !(_step205 = _iterator205.n()).done;) {
            var _item64 = _step205.value;
            embeddedDataSpecificationsArray.push(this.transform(_item64));
          }
        } catch (err) {
          _iterator205.e(err);
        } finally {
          _iterator205.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["first"] = this.transform(that.first);
      jsonable["second"] = this.transform(that.second);
      if (that.annotations !== null) {
        var annotationsArray = new Array();
        var _iterator206 = _createForOfIteratorHelper(that.annotations),
          _step206;
        try {
          for (_iterator206.s(); !(_step206 = _iterator206.n()).done;) {
            var _item65 = _step206.value;
            annotationsArray.push(this.transform(_item65));
          }
        } catch (err) {
          _iterator206.e(err);
        } finally {
          _iterator206.f();
        }
        jsonable["annotations"] = annotationsArray;
      }
      jsonable["modelType"] = "AnnotatedRelationshipElement";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformEntity",
    value: function transformEntity(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator207 = _createForOfIteratorHelper(that.extensions),
          _step207;
        try {
          for (_iterator207.s(); !(_step207 = _iterator207.n()).done;) {
            var item = _step207.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator207.e(err);
        } finally {
          _iterator207.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator208 = _createForOfIteratorHelper(that.displayName),
          _step208;
        try {
          for (_iterator208.s(); !(_step208 = _iterator208.n()).done;) {
            var _item66 = _step208.value;
            displayNameArray.push(this.transform(_item66));
          }
        } catch (err) {
          _iterator208.e(err);
        } finally {
          _iterator208.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator209 = _createForOfIteratorHelper(that.description),
          _step209;
        try {
          for (_iterator209.s(); !(_step209 = _iterator209.n()).done;) {
            var _item67 = _step209.value;
            descriptionArray.push(this.transform(_item67));
          }
        } catch (err) {
          _iterator209.e(err);
        } finally {
          _iterator209.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator210 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step210;
        try {
          for (_iterator210.s(); !(_step210 = _iterator210.n()).done;) {
            var _item68 = _step210.value;
            supplementalSemanticIdsArray.push(this.transform(_item68));
          }
        } catch (err) {
          _iterator210.e(err);
        } finally {
          _iterator210.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator211 = _createForOfIteratorHelper(that.qualifiers),
          _step211;
        try {
          for (_iterator211.s(); !(_step211 = _iterator211.n()).done;) {
            var _item69 = _step211.value;
            qualifiersArray.push(this.transform(_item69));
          }
        } catch (err) {
          _iterator211.e(err);
        } finally {
          _iterator211.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator212 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step212;
        try {
          for (_iterator212.s(); !(_step212 = _iterator212.n()).done;) {
            var _item70 = _step212.value;
            embeddedDataSpecificationsArray.push(this.transform(_item70));
          }
        } catch (err) {
          _iterator212.e(err);
        } finally {
          _iterator212.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.statements !== null) {
        var statementsArray = new Array();
        var _iterator213 = _createForOfIteratorHelper(that.statements),
          _step213;
        try {
          for (_iterator213.s(); !(_step213 = _iterator213.n()).done;) {
            var _item71 = _step213.value;
            statementsArray.push(this.transform(_item71));
          }
        } catch (err) {
          _iterator213.e(err);
        } finally {
          _iterator213.f();
        }
        jsonable["statements"] = statementsArray;
      }
      jsonable["entityType"] = AasStringification.mustEntityTypeToString(that.entityType);
      if (that.globalAssetId !== null) {
        jsonable["globalAssetId"] = that.globalAssetId;
      }
      if (that.specificAssetIds !== null) {
        var specificAssetIdsArray = new Array();
        var _iterator214 = _createForOfIteratorHelper(that.specificAssetIds),
          _step214;
        try {
          for (_iterator214.s(); !(_step214 = _iterator214.n()).done;) {
            var _item72 = _step214.value;
            specificAssetIdsArray.push(this.transform(_item72));
          }
        } catch (err) {
          _iterator214.e(err);
        } finally {
          _iterator214.f();
        }
        jsonable["specificAssetIds"] = specificAssetIdsArray;
      }
      jsonable["modelType"] = "Entity";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformEventPayload",
    value: function transformEventPayload(that) {
      var jsonable = {};
      jsonable["source"] = this.transform(that.source);
      if (that.sourceSemanticId !== null) {
        jsonable["sourceSemanticId"] = this.transform(that.sourceSemanticId);
      }
      jsonable["observableReference"] = this.transform(that.observableReference);
      if (that.observableSemanticId !== null) {
        jsonable["observableSemanticId"] = this.transform(that.observableSemanticId);
      }
      if (that.topic !== null) {
        jsonable["topic"] = that.topic;
      }
      if (that.subjectId !== null) {
        jsonable["subjectId"] = this.transform(that.subjectId);
      }
      jsonable["timeStamp"] = that.timeStamp;
      if (that.payload !== null) {
        jsonable["payload"] = AasCommon.base64Encode(that.payload);
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformBasicEventElement",
    value: function transformBasicEventElement(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator215 = _createForOfIteratorHelper(that.extensions),
          _step215;
        try {
          for (_iterator215.s(); !(_step215 = _iterator215.n()).done;) {
            var item = _step215.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator215.e(err);
        } finally {
          _iterator215.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator216 = _createForOfIteratorHelper(that.displayName),
          _step216;
        try {
          for (_iterator216.s(); !(_step216 = _iterator216.n()).done;) {
            var _item73 = _step216.value;
            displayNameArray.push(this.transform(_item73));
          }
        } catch (err) {
          _iterator216.e(err);
        } finally {
          _iterator216.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator217 = _createForOfIteratorHelper(that.description),
          _step217;
        try {
          for (_iterator217.s(); !(_step217 = _iterator217.n()).done;) {
            var _item74 = _step217.value;
            descriptionArray.push(this.transform(_item74));
          }
        } catch (err) {
          _iterator217.e(err);
        } finally {
          _iterator217.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator218 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step218;
        try {
          for (_iterator218.s(); !(_step218 = _iterator218.n()).done;) {
            var _item75 = _step218.value;
            supplementalSemanticIdsArray.push(this.transform(_item75));
          }
        } catch (err) {
          _iterator218.e(err);
        } finally {
          _iterator218.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator219 = _createForOfIteratorHelper(that.qualifiers),
          _step219;
        try {
          for (_iterator219.s(); !(_step219 = _iterator219.n()).done;) {
            var _item76 = _step219.value;
            qualifiersArray.push(this.transform(_item76));
          }
        } catch (err) {
          _iterator219.e(err);
        } finally {
          _iterator219.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator220 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step220;
        try {
          for (_iterator220.s(); !(_step220 = _iterator220.n()).done;) {
            var _item77 = _step220.value;
            embeddedDataSpecificationsArray.push(this.transform(_item77));
          }
        } catch (err) {
          _iterator220.e(err);
        } finally {
          _iterator220.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["observed"] = this.transform(that.observed);
      jsonable["direction"] = AasStringification.mustDirectionToString(that.direction);
      jsonable["state"] = AasStringification.mustStateOfEventToString(that.state);
      if (that.messageTopic !== null) {
        jsonable["messageTopic"] = that.messageTopic;
      }
      if (that.messageBroker !== null) {
        jsonable["messageBroker"] = this.transform(that.messageBroker);
      }
      if (that.lastUpdate !== null) {
        jsonable["lastUpdate"] = that.lastUpdate;
      }
      if (that.minInterval !== null) {
        jsonable["minInterval"] = that.minInterval;
      }
      if (that.maxInterval !== null) {
        jsonable["maxInterval"] = that.maxInterval;
      }
      jsonable["modelType"] = "BasicEventElement";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformOperation",
    value: function transformOperation(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator221 = _createForOfIteratorHelper(that.extensions),
          _step221;
        try {
          for (_iterator221.s(); !(_step221 = _iterator221.n()).done;) {
            var item = _step221.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator221.e(err);
        } finally {
          _iterator221.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator222 = _createForOfIteratorHelper(that.displayName),
          _step222;
        try {
          for (_iterator222.s(); !(_step222 = _iterator222.n()).done;) {
            var _item78 = _step222.value;
            displayNameArray.push(this.transform(_item78));
          }
        } catch (err) {
          _iterator222.e(err);
        } finally {
          _iterator222.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator223 = _createForOfIteratorHelper(that.description),
          _step223;
        try {
          for (_iterator223.s(); !(_step223 = _iterator223.n()).done;) {
            var _item79 = _step223.value;
            descriptionArray.push(this.transform(_item79));
          }
        } catch (err) {
          _iterator223.e(err);
        } finally {
          _iterator223.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator224 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step224;
        try {
          for (_iterator224.s(); !(_step224 = _iterator224.n()).done;) {
            var _item80 = _step224.value;
            supplementalSemanticIdsArray.push(this.transform(_item80));
          }
        } catch (err) {
          _iterator224.e(err);
        } finally {
          _iterator224.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator225 = _createForOfIteratorHelper(that.qualifiers),
          _step225;
        try {
          for (_iterator225.s(); !(_step225 = _iterator225.n()).done;) {
            var _item81 = _step225.value;
            qualifiersArray.push(this.transform(_item81));
          }
        } catch (err) {
          _iterator225.e(err);
        } finally {
          _iterator225.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator226 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step226;
        try {
          for (_iterator226.s(); !(_step226 = _iterator226.n()).done;) {
            var _item82 = _step226.value;
            embeddedDataSpecificationsArray.push(this.transform(_item82));
          }
        } catch (err) {
          _iterator226.e(err);
        } finally {
          _iterator226.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.inputVariables !== null) {
        var inputVariablesArray = new Array();
        var _iterator227 = _createForOfIteratorHelper(that.inputVariables),
          _step227;
        try {
          for (_iterator227.s(); !(_step227 = _iterator227.n()).done;) {
            var _item83 = _step227.value;
            inputVariablesArray.push(this.transform(_item83));
          }
        } catch (err) {
          _iterator227.e(err);
        } finally {
          _iterator227.f();
        }
        jsonable["inputVariables"] = inputVariablesArray;
      }
      if (that.outputVariables !== null) {
        var outputVariablesArray = new Array();
        var _iterator228 = _createForOfIteratorHelper(that.outputVariables),
          _step228;
        try {
          for (_iterator228.s(); !(_step228 = _iterator228.n()).done;) {
            var _item84 = _step228.value;
            outputVariablesArray.push(this.transform(_item84));
          }
        } catch (err) {
          _iterator228.e(err);
        } finally {
          _iterator228.f();
        }
        jsonable["outputVariables"] = outputVariablesArray;
      }
      if (that.inoutputVariables !== null) {
        var inoutputVariablesArray = new Array();
        var _iterator229 = _createForOfIteratorHelper(that.inoutputVariables),
          _step229;
        try {
          for (_iterator229.s(); !(_step229 = _iterator229.n()).done;) {
            var _item85 = _step229.value;
            inoutputVariablesArray.push(this.transform(_item85));
          }
        } catch (err) {
          _iterator229.e(err);
        } finally {
          _iterator229.f();
        }
        jsonable["inoutputVariables"] = inoutputVariablesArray;
      }
      jsonable["modelType"] = "Operation";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformOperationVariable",
    value: function transformOperationVariable(that) {
      var jsonable = {};
      jsonable["value"] = this.transform(that.value);
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformCapability",
    value: function transformCapability(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator230 = _createForOfIteratorHelper(that.extensions),
          _step230;
        try {
          for (_iterator230.s(); !(_step230 = _iterator230.n()).done;) {
            var item = _step230.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator230.e(err);
        } finally {
          _iterator230.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator231 = _createForOfIteratorHelper(that.displayName),
          _step231;
        try {
          for (_iterator231.s(); !(_step231 = _iterator231.n()).done;) {
            var _item86 = _step231.value;
            displayNameArray.push(this.transform(_item86));
          }
        } catch (err) {
          _iterator231.e(err);
        } finally {
          _iterator231.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator232 = _createForOfIteratorHelper(that.description),
          _step232;
        try {
          for (_iterator232.s(); !(_step232 = _iterator232.n()).done;) {
            var _item87 = _step232.value;
            descriptionArray.push(this.transform(_item87));
          }
        } catch (err) {
          _iterator232.e(err);
        } finally {
          _iterator232.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator233 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step233;
        try {
          for (_iterator233.s(); !(_step233 = _iterator233.n()).done;) {
            var _item88 = _step233.value;
            supplementalSemanticIdsArray.push(this.transform(_item88));
          }
        } catch (err) {
          _iterator233.e(err);
        } finally {
          _iterator233.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator234 = _createForOfIteratorHelper(that.qualifiers),
          _step234;
        try {
          for (_iterator234.s(); !(_step234 = _iterator234.n()).done;) {
            var _item89 = _step234.value;
            qualifiersArray.push(this.transform(_item89));
          }
        } catch (err) {
          _iterator234.e(err);
        } finally {
          _iterator234.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator235 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step235;
        try {
          for (_iterator235.s(); !(_step235 = _iterator235.n()).done;) {
            var _item90 = _step235.value;
            embeddedDataSpecificationsArray.push(this.transform(_item90));
          }
        } catch (err) {
          _iterator235.e(err);
        } finally {
          _iterator235.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["modelType"] = "Capability";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformConceptDescription",
    value: function transformConceptDescription(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator236 = _createForOfIteratorHelper(that.extensions),
          _step236;
        try {
          for (_iterator236.s(); !(_step236 = _iterator236.n()).done;) {
            var item = _step236.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator236.e(err);
        } finally {
          _iterator236.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator237 = _createForOfIteratorHelper(that.displayName),
          _step237;
        try {
          for (_iterator237.s(); !(_step237 = _iterator237.n()).done;) {
            var _item91 = _step237.value;
            displayNameArray.push(this.transform(_item91));
          }
        } catch (err) {
          _iterator237.e(err);
        } finally {
          _iterator237.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator238 = _createForOfIteratorHelper(that.description),
          _step238;
        try {
          for (_iterator238.s(); !(_step238 = _iterator238.n()).done;) {
            var _item92 = _step238.value;
            descriptionArray.push(this.transform(_item92));
          }
        } catch (err) {
          _iterator238.e(err);
        } finally {
          _iterator238.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.administration !== null) {
        jsonable["administration"] = this.transform(that.administration);
      }
      jsonable["id"] = that.id;
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator239 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step239;
        try {
          for (_iterator239.s(); !(_step239 = _iterator239.n()).done;) {
            var _item93 = _step239.value;
            embeddedDataSpecificationsArray.push(this.transform(_item93));
          }
        } catch (err) {
          _iterator239.e(err);
        } finally {
          _iterator239.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.isCaseOf !== null) {
        var isCaseOfArray = new Array();
        var _iterator240 = _createForOfIteratorHelper(that.isCaseOf),
          _step240;
        try {
          for (_iterator240.s(); !(_step240 = _iterator240.n()).done;) {
            var _item94 = _step240.value;
            isCaseOfArray.push(this.transform(_item94));
          }
        } catch (err) {
          _iterator240.e(err);
        } finally {
          _iterator240.f();
        }
        jsonable["isCaseOf"] = isCaseOfArray;
      }
      jsonable["modelType"] = "ConceptDescription";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformReference",
    value: function transformReference(that) {
      var jsonable = {};
      jsonable["type"] = AasStringification.mustReferenceTypesToString(that.type);
      if (that.referredSemanticId !== null) {
        jsonable["referredSemanticId"] = this.transform(that.referredSemanticId);
      }
      var keysArray = new Array();
      var _iterator241 = _createForOfIteratorHelper(that.keys),
        _step241;
      try {
        for (_iterator241.s(); !(_step241 = _iterator241.n()).done;) {
          var item = _step241.value;
          keysArray.push(this.transform(item));
        }
      } catch (err) {
        _iterator241.e(err);
      } finally {
        _iterator241.f();
      }
      jsonable["keys"] = keysArray;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformKey",
    value: function transformKey(that) {
      var jsonable = {};
      jsonable["type"] = AasStringification.mustKeyTypesToString(that.type);
      jsonable["value"] = that.value;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringNameType",
    value: function transformLangStringNameType(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringTextType",
    value: function transformLangStringTextType(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformEnvironment",
    value: function transformEnvironment(that) {
      var jsonable = {};
      if (that.assetAdministrationShells !== null) {
        var assetAdministrationShellsArray = new Array();
        var _iterator242 = _createForOfIteratorHelper(that.assetAdministrationShells),
          _step242;
        try {
          for (_iterator242.s(); !(_step242 = _iterator242.n()).done;) {
            var item = _step242.value;
            assetAdministrationShellsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator242.e(err);
        } finally {
          _iterator242.f();
        }
        jsonable["assetAdministrationShells"] = assetAdministrationShellsArray;
      }
      if (that.submodels !== null) {
        var submodelsArray = new Array();
        var _iterator243 = _createForOfIteratorHelper(that.submodels),
          _step243;
        try {
          for (_iterator243.s(); !(_step243 = _iterator243.n()).done;) {
            var _item95 = _step243.value;
            submodelsArray.push(this.transform(_item95));
          }
        } catch (err) {
          _iterator243.e(err);
        } finally {
          _iterator243.f();
        }
        jsonable["submodels"] = submodelsArray;
      }
      if (that.conceptDescriptions !== null) {
        var conceptDescriptionsArray = new Array();
        var _iterator244 = _createForOfIteratorHelper(that.conceptDescriptions),
          _step244;
        try {
          for (_iterator244.s(); !(_step244 = _iterator244.n()).done;) {
            var _item96 = _step244.value;
            conceptDescriptionsArray.push(this.transform(_item96));
          }
        } catch (err) {
          _iterator244.e(err);
        } finally {
          _iterator244.f();
        }
        jsonable["conceptDescriptions"] = conceptDescriptionsArray;
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformEmbeddedDataSpecification",
    value: function transformEmbeddedDataSpecification(that) {
      var jsonable = {};
      jsonable["dataSpecification"] = this.transform(that.dataSpecification);
      jsonable["dataSpecificationContent"] = this.transform(that.dataSpecificationContent);
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLevelType",
    value: function transformLevelType(that) {
      var jsonable = {};
      jsonable["min"] = that.min;
      jsonable["nom"] = that.nom;
      jsonable["typ"] = that.typ;
      jsonable["max"] = that.max;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformValueReferencePair",
    value: function transformValueReferencePair(that) {
      var jsonable = {};
      jsonable["value"] = that.value;
      jsonable["valueId"] = this.transform(that.valueId);
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformValueList",
    value: function transformValueList(that) {
      var jsonable = {};
      var valueReferencePairsArray = new Array();
      var _iterator245 = _createForOfIteratorHelper(that.valueReferencePairs),
        _step245;
      try {
        for (_iterator245.s(); !(_step245 = _iterator245.n()).done;) {
          var item = _step245.value;
          valueReferencePairsArray.push(this.transform(item));
        }
      } catch (err) {
        _iterator245.e(err);
      } finally {
        _iterator245.f();
      }
      jsonable["valueReferencePairs"] = valueReferencePairsArray;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringPreferredNameTypeIec61360",
    value: function transformLangStringPreferredNameTypeIec61360(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringShortNameTypeIec61360",
    value: function transformLangStringShortNameTypeIec61360(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringDefinitionTypeIec61360",
    value: function transformLangStringDefinitionTypeIec61360(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformDataSpecificationIec61360",
    value: function transformDataSpecificationIec61360(that) {
      var jsonable = {};
      var preferredNameArray = new Array();
      var _iterator246 = _createForOfIteratorHelper(that.preferredName),
        _step246;
      try {
        for (_iterator246.s(); !(_step246 = _iterator246.n()).done;) {
          var _item98 = _step246.value;
          preferredNameArray.push(this.transform(_item98));
        }
      } catch (err) {
        _iterator246.e(err);
      } finally {
        _iterator246.f();
      }
      jsonable["preferredName"] = preferredNameArray;
      if (that.shortName !== null) {
        var shortNameArray = new Array();
        var _iterator247 = _createForOfIteratorHelper(that.shortName),
          _step247;
        try {
          for (_iterator247.s(); !(_step247 = _iterator247.n()).done;) {
            var item = _step247.value;
            shortNameArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator247.e(err);
        } finally {
          _iterator247.f();
        }
        jsonable["shortName"] = shortNameArray;
      }
      if (that.unit !== null) {
        jsonable["unit"] = that.unit;
      }
      if (that.unitId !== null) {
        jsonable["unitId"] = this.transform(that.unitId);
      }
      if (that.sourceOfDefinition !== null) {
        jsonable["sourceOfDefinition"] = that.sourceOfDefinition;
      }
      if (that.symbol !== null) {
        jsonable["symbol"] = that.symbol;
      }
      if (that.dataType !== null) {
        jsonable["dataType"] = AasStringification.mustDataTypeIec61360ToString(that.dataType);
      }
      if (that.definition !== null) {
        var definitionArray = new Array();
        var _iterator248 = _createForOfIteratorHelper(that.definition),
          _step248;
        try {
          for (_iterator248.s(); !(_step248 = _iterator248.n()).done;) {
            var _item97 = _step248.value;
            definitionArray.push(this.transform(_item97));
          }
        } catch (err) {
          _iterator248.e(err);
        } finally {
          _iterator248.f();
        }
        jsonable["definition"] = definitionArray;
      }
      if (that.valueFormat !== null) {
        jsonable["valueFormat"] = that.valueFormat;
      }
      if (that.valueList !== null) {
        jsonable["valueList"] = this.transform(that.valueList);
      }
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      if (that.levelType !== null) {
        jsonable["levelType"] = this.transform(that.levelType);
      }
      jsonable["modelType"] = "DataSpecificationIec61360";
      return jsonable;
    }
  }]);
  return Serializer;
}(AasTypes.AbstractTransformer);
var SERIALIZER = new Serializer();

/**
 * Convert `that` to a JSON-able structure.
 *
 * @param that - AAS data to be recursively converted to a JSON-able structure
 * @returns
 * JSON-able structure which can be further processed with, say,
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify|JSON.stringify})
 */
function toJsonable(that) {
  return SERIALIZER.transform(that);
}

// endregion

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
//# sourceMappingURL=jsonization.js.map