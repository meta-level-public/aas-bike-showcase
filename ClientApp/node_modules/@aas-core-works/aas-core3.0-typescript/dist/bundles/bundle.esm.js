function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

var _marked$2 = /*#__PURE__*/_regeneratorRuntime().mark(range),
  _marked2$2 = /*#__PURE__*/_regeneratorRuntime().mark(map);
/**
 * Provide common functions shared among the modules.
 */

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

/**
 * Create an iterator over the given range of numbers.
 *
 * @param start - inclusive start of the range
 * @param end - exclusive end of the range
 * @returns iterator over the range
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function range(start, end) {
  var i;
  return _regeneratorRuntime().wrap(function range$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        i = start;
      case 1:
        if (!(i < end)) {
          _context.next = 7;
          break;
        }
        _context.next = 4;
        return i;
      case 4:
        i++;
        _context.next = 1;
        break;
      case 7:
      case "end":
        return _context.stop();
    }
  }, _marked$2);
}

/**
 * Retrieve the `index`-th item from the `array`.
 *
 * @remarks
 * This is a fill for `Array.prototype.at`.
 * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at
 *
 * @param array - to get the element from
 * @param index - zero-based index of the `array`. Negative index counts back.
 * @returns item, or `undefined` if `index` out-of-bound
 * @typeParam T - type of the array items
 */
function at(array, index) {
  if (index < 0) {
    return array[array.length + index];
  } else {
    return array[index];
  }
}

/**
 * Check that all the values of the iterable are `true`.
 *
 * @param iterable - to iterate over
 * @returns `true` if all values in `iterable` are set
 */
function every(iterable) {
  // NOTE (mristin, 2022-11-24):
  // We introduce this function so that we can keep the constraint verification
  // purely functional. Unfortunately, `every` and `some` are only available
  // in arrays and not in `IterableIterator`.
  var _iterator = _createForOfIteratorHelper(iterable),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _item = _step.value;
      if (!_item) {
        return false;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return true;
}

/**
 * Check that at least one value of the iterable is `true`.
 *
 * @param iterable - to iterate over
 * @returns `true` if at least one value in `iterable` is set
 */
function some(iterable) {
  // NOTE (mristin, 2022-11-24):
  // We introduce this function so that we can keep the constraint verification
  // purely functional. Unfortunately, `every` and `some` are only available
  // in arrays and not in `IterableIterator`.
  var _iterator2 = _createForOfIteratorHelper(iterable),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _item2 = _step2.value;
      if (_item2) {
        return true;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return false;
}

/**
 * Map the items of an iterable.
 *
 * @param iterable - to be mapped
 * @param mappingFunction - to be applied on `iterable`
 * @returns mapped items of `iterable`
 * @typeParam S - type of an item of the `iterable`
 * @typeParam T - type of the transformed item of the `iterable`
 */
function map(iterable, mappingFunction) {
  var _iterator3, _step3, _item3;
  return _regeneratorRuntime().wrap(function map$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        // NOTE (mristin, 2022-11-24):
        // We introduce this function so that we can keep the constraint verification
        // purely functional.
        _iterator3 = _createForOfIteratorHelper(iterable);
        _context2.prev = 1;
        _iterator3.s();
      case 3:
        if ((_step3 = _iterator3.n()).done) {
          _context2.next = 9;
          break;
        }
        _item3 = _step3.value;
        _context2.next = 7;
        return mappingFunction(_item3);
      case 7:
        _context2.next = 3;
        break;
      case 9:
        _context2.next = 14;
        break;
      case 11:
        _context2.prev = 11;
        _context2.t0 = _context2["catch"](1);
        _iterator3.e(_context2.t0);
      case 14:
        _context2.prev = 14;
        _iterator3.f();
        return _context2.finish(14);
      case 17:
      case "end":
        return _context2.stop();
    }
  }, _marked2$2, null, [[1, 11, 14, 17]]);
}

/**
 * Represent either a result, or an error.
 *
 * @typeParam ValueT - type of the resulting value
 * @typeParam ErrorT - type of the error
 */
var Either = /*#__PURE__*/function () {
  function Either(value, error) {
    _classCallCheck(this, Either);
    if (value === null && error === null) {
      throw new Error("Unexpected both value and error null in an Either");
    }
    if (value !== null && error !== null) {
      throw new Error("Unexpected both value and error non-null in an Either");
    }
    this.value = value;
    this.error = error;
  }
  _createClass(Either, [{
    key: "mustValue",
    value:
    /**
     * value if something successful
     */

    /**
     * error if something failed
     */

    /**
     * Assert that value is set and return it.
     *
     * @returns {@link value}, or throw if `null`
     */
    function mustValue() {
      if (this.value === null) {
        throw new Error("Expected value to be set, but it was null");
      }
      return this.value;
    }
  }]);
  return Either;
}();
var BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var BASE64_LOOKUP = new Uint8Array(256);

// NOTE (mristin, 2022-11-25):
// Initialize to 255 so that we can detect invalid values in the input during decoding.
for (var i = 0; i < BASE64_LOOKUP.length; i++) {
  BASE64_LOOKUP[i] = 255;
}

// NOTE (mristin, 2022-11-25):
// Initialize valid values to the corresponding decoding points.
for (var _i = 0; _i < BASE64_CHARS.length; _i++) {
  BASE64_LOOKUP[BASE64_CHARS.charCodeAt(_i)] = _i;
}

/**
 * Encode a byte array in base64.
 *
 * @remarks
 * We provide our own implementation so that we do not run into compatibility
 * issues with node.js, different browsers etc.
 * See:
 * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer
 *
 * @param bytes - to be encoded
 * @returns `bytes` encoded as base64 text
 */
function base64Encode(bytes) {
  // NOTE (mristin, 2022-11-25):
  // This implementation is vaguely based on:
  // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js,
  // https://github.com/niklasvh/base64-arraybuffer/blob/master/src/index.ts and
  // https://github.com/beatgammit/base64-js/blob/master/index.js.

  // NOTE (mristin, 2022-11-25):
  // We assume that string concatenation is actually *faster* than joining an array
  // of strings, see:
  // https://stackoverflow.com/questions/51185/are-javascript-strings-immutable-do-i-need-a-string-builder-in-javascript

  if (bytes.length === 0) {
    return "";
  }
  var encoded = "";
  var len = bytes.length;
  for (var _i2 = 0; _i2 < len; _i2 += 3) {
    encoded += BASE64_CHARS[bytes[_i2] >> 2];
    encoded += BASE64_CHARS[(bytes[_i2] & 3) << 4 | bytes[_i2 + 1] >> 4];
    encoded += BASE64_CHARS[(bytes[_i2 + 1] & 15) << 2 | bytes[_i2 + 2] >> 6];
    encoded += BASE64_CHARS[bytes[_i2 + 2] & 63];
  }

  // NOTE (mristin, 2022-11-25):
  // We assume here that `substring` will be optimized for cases where we do not keep
  // the original reference to the string. We tested a bit with
  // https://www.measurethat.net/.

  if (len % 3 === 2) {
    encoded = encoded.substring(0, encoded.length - 1) + "=";
  } else if (len % 3 === 1) {
    encoded = encoded.substring(0, encoded.length - 2) + "==";
  } else ;
  return encoded;
}

/**
 * Decode a base64-encoded byte array.
 *
 * @remarks
 * We provide our own implementation so that we do not run into compatibility
 * issues with node.js, different browsers etc.
 * See:
 * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer
 *
 * @param text - to be decoded
 * @returns either the array or an error, if `text` is not a valid base64 encoding
 */
function base64Decode(text) {
  // NOTE (mristin, 2022-11-25):
  // This implementation is vaguely based on:
  // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js,
  // https://github.com/niklasvh/base64-arraybuffer/blob/master/src/index.ts and
  // https://github.com/beatgammit/base64-js/blob/master/index.js.

  var len = text.length;
  var lenWoPad = len;

  // NOTE (mristin, 2022-11-25):
  // Some implementations forget the padding, so we try to be robust and check
  // for the padding manually.
  var bytesLength = text.length * 0.75;
  if (text[len - 1] === "=") {
    bytesLength--;
    lenWoPad--;
    if (text[len - 2] === "=") {
      bytesLength--;
      lenWoPad--;
    }
  }
  var bytes = new Uint8Array(bytesLength);
  var base64LookupLen = BASE64_LOOKUP.length;
  var pointer = 0;
  for (var _i3 = 0; _i3 < len; _i3 += 4) {
    // NOTE (mristin, 2022-11-25):
    // Admittedly, this is very verbose code, but we want to be efficient, so we
    // opted for performance over readability here.

    var charCode0 = text.charCodeAt(_i3);
    if (charCode0 >= base64LookupLen) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3, ": ").concat(text[_i3], " (code: ").concat(charCode0, ")"));
    }
    var encoded0 = BASE64_LOOKUP[charCode0];
    if (encoded0 === 255) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3, ": ").concat(text[_i3], " (code: ").concat(charCode0, ")"));
    }
    var charCode1 = text.charCodeAt(_i3 + 1);
    if (charCode1 >= base64LookupLen) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 1, ": ").concat(text[_i3 + 1], " (code: ").concat(charCode1, ")"));
    }
    var encoded1 = BASE64_LOOKUP[charCode1];
    if (encoded1 === 255) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 1, ": ").concat(text[_i3 + 1], " (code: ").concat(charCode1, ")"));
    }

    // We map padding to 65, which is the value of "A".
    var charCode2 = _i3 + 2 < lenWoPad ? text.charCodeAt(_i3 + 2) : 65;
    if (charCode2 >= base64LookupLen) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 2, ": ").concat(text[_i3 + 2], " (code: ").concat(charCode2, ")"));
    }
    var encoded2 = BASE64_LOOKUP[charCode2];
    if (encoded2 === 255) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 2, ": ").concat(text[_i3 + 2], " (code: ").concat(charCode2, ")"));
    }

    // We map padding to 65, which is the value of "A".
    var charCode3 = _i3 + 3 < lenWoPad ? text.charCodeAt(_i3 + 3) : 65;
    if (charCode3 >= base64LookupLen) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 3, ": ").concat(text[_i3 + 3], " (code: ").concat(charCode3, ")"));
    }
    var encoded3 = BASE64_LOOKUP[charCode3];
    if (encoded3 === 255) {
      return new Either(null, "Expected a valid character from base64-encoded string, " + "but got at index ".concat(_i3 + 3, ": ").concat(text[_i3 + 3], " (code: ").concat(charCode3, ")"));
    }
    bytes[pointer] = encoded0 << 2 | encoded1 >> 4;
    pointer++;
    bytes[pointer] = (encoded1 & 15) << 4 | encoded2 >> 2;
    pointer++;
    bytes[pointer] = (encoded2 & 3) << 6 | encoded3 & 63;
    pointer++;
  }

  // NOTE (mristin, 2022-12-02):
  // We expect Uint8Array to silently ignore writes outside of the buffer,
  // but we still want to check here in case the underlying platform was flaky about it.
  if (bytes.length !== bytesLength) {
    throw new Error("Expected bytes to have length ".concat(bytesLength, ", but got ").concat(bytes.length));
  }
  return new Either(bytes, null);
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

var common = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Either: Either,
  at: at,
  base64Decode: base64Decode,
  base64Encode: base64Encode,
  every: every,
  map: map,
  range: range,
  some: some
});

var _marked$1=/*#__PURE__*/_regeneratorRuntime().mark(overModelType),_marked2$1=/*#__PURE__*/_regeneratorRuntime().mark(overModellingKind),_marked3$1=/*#__PURE__*/_regeneratorRuntime().mark(overQualifierKind),_marked4$1=/*#__PURE__*/_regeneratorRuntime().mark(overAssetKind),_marked5$1=/*#__PURE__*/_regeneratorRuntime().mark(overAasSubmodelElements),_marked6$1=/*#__PURE__*/_regeneratorRuntime().mark(overEntityType),_marked7$1=/*#__PURE__*/_regeneratorRuntime().mark(overDirection),_marked8$1=/*#__PURE__*/_regeneratorRuntime().mark(overStateOfEvent),_marked9$1=/*#__PURE__*/_regeneratorRuntime().mark(overReferenceTypes),_marked10$1=/*#__PURE__*/_regeneratorRuntime().mark(overKeyTypes),_marked11$1=/*#__PURE__*/_regeneratorRuntime().mark(overDataTypeDefXsd),_marked12$1=/*#__PURE__*/_regeneratorRuntime().mark(overDataTypeIec61360);/**
 * Provide an implementation of the Asset Administration Shell (AAS) V3.0.
 *
 * @remarks
 * The presented version of the Metamodel is related to the work of
 * aas-core-works, which can be found here: https://github.com/aas-core-works.
 *
 * The presented content is neither related to the IDTA nor
 * Plattform Industrie 4.0 and does not represent an official publication.
 *
 * We diverge from the book in the following points.
 *
 * We did not implement the following constraints as they are too general and can not
 * be formalized as part of the core library, but affects external components such as
 * AAS registry or AAS server:
 *
 * * Constraint AASd-022
 *
 * We did not implement the following constraints since they depend on registry and
 * de-referencing of {@link Reference} objects:
 *
 * * Constraint AASd-006
 * * Constraint AASd-007
 * * Constraint AASc-3a-003
 *
 * Some constraints are not enforceable as they depend on the wider context
 * such as language understanding, so we could not formalize them:
 *
 * * Constraint AASd-012: This constraint requires that the texts inside
 *   `Multi_language_property` shall have the same meanings in the separate languages.
 *   This cannot be tested.
 * * Constraint AASd-116: In the book, Constraint AASd-116 imposes a
 *   case-insensitive equality against `globalAssetId`. This is culturally-dependent,
 *   and depends on the system settings. For example, the case-folding
 *   for the letters "i" and "I" is different in Turkish from English.
 *
 *   We implement the constraint as case-sensitive instead to allow for interoperability
 *   across different culture settings.
 *
 * Furthermore, we diverge from the book in the following points regarding
 * the enumerations. We have to implement subsets of enumerations as sets as common
 * programming languages do not support inheritance of enumerations. The relationship
 * between the properties and the sets is defined through invariants. This causes
 * the following divergences:
 *
 * * We decided therefore to remove the enumeration `DataTypeDefRDF`
 *   and keep only {@link DataTypeDefXsd} as enumeration. Otherwise, we would have
 *   to write redundant invariants all over the meta-model because `DataTypeDefRDF`
 *   is actually never used in any type definition.
 * * The enumeration {@link AasSubmodelElements} is used in two different contexts.
 *   One context is the definition of key types in a reference. Another context is
 *   the definition of element types in a {@link SubmodelElementList}.
 *
 *   To avoid confusion, we introduce two separate enumerations for the separate contexts.
 *   Firstly, a set of {@link KeyTypes}, {@link constants!AAS_SUBMODEL_ELEMENTS_AS_KEYS} to
 *   represent the first context (key type in a reference).
 *   Secondly, the enumeration {@link AasSubmodelElements} is kept as designator
 *   for {@link SubmodelElementList.typeValueListElement}.
 * * The specification introduces several types of `Lang_string_set`.
 *   These types differ between the allowed length of their text inside the singular
 *   `Lang_string` objects. Since the native representation of `Lang_string_set` as
 *   `List` of `Lang_string` is required by specification, it is impossible to
 *   introduce separate `Lang_string_set` types. Therefore, the distinction is drawn here
 *   between the `Lang_string` types.
 *
 *   `DefinitionTypeIEC61360` is represented as a
 *   `List` of {@link LangStringDefinitionTypeIec61360}
 *
 *   `MultiLanguageNameType` is represented as a
 *   `List` of {@link LangStringNameType}
 *
 *   `PreferredNameTypeIEC61360` is represented as a
 *   `List` of {@link LangStringPreferredNameTypeIec61360}
 *
 *   `ShortNameTypeIEC61360` is represented as a
 *   `List` of {@link LangStringShortNameTypeIec61360}
 *
 *   `MultiLanguageTextType` is represented as a
 *   `List` of {@link LangStringTextType}
 *
 *   Furthermore, since `Lang_string` is not used anywhere, we rename it to
 *   {@link IAbstractLangString}.
 *
 * Concerning the data specifications, we embed them within
 * {@link IHasDataSpecification} instead of referencing them *via* an external reference.
 * The working group decided to change the rules for serialization *after* the book was
 * published. The data specifications are critical in applications, but there is no
 * possibility to access them through a data channel as they are not part of
 * an environment.
 */ // This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
/**
 * Represent runtime model type of an instance.
 */var ModelType=/*#__PURE__*/function(ModelType){ModelType[ModelType["Extension"]=0]="Extension";ModelType[ModelType["AdministrativeInformation"]=1]="AdministrativeInformation";ModelType[ModelType["Qualifier"]=2]="Qualifier";ModelType[ModelType["AssetAdministrationShell"]=3]="AssetAdministrationShell";ModelType[ModelType["AssetInformation"]=4]="AssetInformation";ModelType[ModelType["Resource"]=5]="Resource";ModelType[ModelType["SpecificAssetId"]=6]="SpecificAssetId";ModelType[ModelType["Submodel"]=7]="Submodel";ModelType[ModelType["RelationshipElement"]=8]="RelationshipElement";ModelType[ModelType["SubmodelElementList"]=9]="SubmodelElementList";ModelType[ModelType["SubmodelElementCollection"]=10]="SubmodelElementCollection";ModelType[ModelType["Property"]=11]="Property";ModelType[ModelType["MultiLanguageProperty"]=12]="MultiLanguageProperty";ModelType[ModelType["Range"]=13]="Range";ModelType[ModelType["ReferenceElement"]=14]="ReferenceElement";ModelType[ModelType["Blob"]=15]="Blob";ModelType[ModelType["File"]=16]="File";ModelType[ModelType["AnnotatedRelationshipElement"]=17]="AnnotatedRelationshipElement";ModelType[ModelType["Entity"]=18]="Entity";ModelType[ModelType["EventPayload"]=19]="EventPayload";ModelType[ModelType["BasicEventElement"]=20]="BasicEventElement";ModelType[ModelType["Operation"]=21]="Operation";ModelType[ModelType["OperationVariable"]=22]="OperationVariable";ModelType[ModelType["Capability"]=23]="Capability";ModelType[ModelType["ConceptDescription"]=24]="ConceptDescription";ModelType[ModelType["Reference"]=25]="Reference";ModelType[ModelType["Key"]=26]="Key";ModelType[ModelType["LangStringNameType"]=27]="LangStringNameType";ModelType[ModelType["LangStringTextType"]=28]="LangStringTextType";ModelType[ModelType["Environment"]=29]="Environment";ModelType[ModelType["EmbeddedDataSpecification"]=30]="EmbeddedDataSpecification";ModelType[ModelType["LevelType"]=31]="LevelType";ModelType[ModelType["ValueReferencePair"]=32]="ValueReferencePair";ModelType[ModelType["ValueList"]=33]="ValueList";ModelType[ModelType["LangStringPreferredNameTypeIec61360"]=34]="LangStringPreferredNameTypeIec61360";ModelType[ModelType["LangStringShortNameTypeIec61360"]=35]="LangStringShortNameTypeIec61360";ModelType[ModelType["LangStringDefinitionTypeIec61360"]=36]="LangStringDefinitionTypeIec61360";ModelType[ModelType["DataSpecificationIec61360"]=37]="DataSpecificationIec61360";return ModelType;}({});/**
 * Iterate over the literals of {@link ModelType}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overModelType(){return _regeneratorRuntime().wrap(function overModelType$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return 0;case 2:_context.next=4;return 1;case 4:_context.next=6;return 2;case 6:_context.next=8;return 3;case 8:_context.next=10;return 4;case 10:_context.next=12;return 5;case 12:_context.next=14;return 6;case 14:_context.next=16;return 7;case 16:_context.next=18;return 8;case 18:_context.next=20;return 9;case 20:_context.next=22;return 10;case 22:_context.next=24;return 11;case 24:_context.next=26;return 12;case 26:_context.next=28;return 13;case 28:_context.next=30;return 14;case 30:_context.next=32;return 15;case 32:_context.next=34;return 16;case 34:_context.next=36;return 17;case 36:_context.next=38;return 18;case 38:_context.next=40;return 19;case 40:_context.next=42;return 20;case 42:_context.next=44;return 21;case 44:_context.next=46;return 22;case 46:_context.next=48;return 23;case 48:_context.next=50;return 24;case 50:_context.next=52;return 25;case 52:_context.next=54;return 26;case 54:_context.next=56;return 27;case 56:_context.next=58;return 28;case 58:_context.next=60;return 29;case 60:_context.next=62;return 30;case 62:_context.next=64;return 31;case 64:_context.next=66;return 32;case 66:_context.next=68;return 33;case 68:_context.next=70;return 34;case 70:_context.next=72;return 35;case 72:_context.next=74;return 36;case 74:_context.next=76;return 37;case 76:case"end":return _context.stop();}},_marked$1);}/**
 * Represent the most general class of an AAS model.
 */var Class=/*#__PURE__*/_createClass(function Class(){_classCallCheck(this,Class);});/**
 * Element that can have a semantic definition plus some supplemental semantic
 * definitions.
 *
 * Constraint `AASd-118`:
 * If there are ID {@link supplementalSemanticIds} defined
 * then there shall be also a main semantic ID {@link semanticId}.
 */ /**
 * Single extension of an element.
 */var Extension=/*#__PURE__*/function(_Class){_inherits(Extension,_Class);var _super=_createSuper(Extension);function Extension(name){var _this;var semanticId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var supplementalSemanticIds=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var valueType=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var value=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var refersTo=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;_classCallCheck(this,Extension);_this=_super.call(this);_this.semanticId=semanticId;_this.supplementalSemanticIds=supplementalSemanticIds;_this.name=name;_this.valueType=valueType;_this.value=value;_this.refersTo=refersTo;return _this;}_createClass(Extension,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 0;// Extension
}/**
   * Identifier of the semantic definition of the element. It is called semantic ID
   * of the element or also main semantic ID of the element.
   *
   * @remarks
   * **Note**:
   * It is recommended to use a global reference.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context2.next=2;break;}return _context2.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context2.abrupt("return");case 3:case"end":return _context2.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link refersTo} if it is set, or yield nothing.
   */},{key:"overRefersToOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overRefersToOrEmpty(){return _regeneratorRuntime().wrap(function overRefersToOrEmpty$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:if(!(this.refersTo!==null)){_context3.next=2;break;}return _context3.delegateYield(this.refersTo,"t0",2);case 2:return _context3.abrupt("return");case 3:case"end":return _context3.stop();}},overRefersToOrEmpty,this);})/**
   * @returns {@link valueType} if set or the default value otherwise.
   */},{key:"valueTypeOrDefault",value:function valueTypeOrDefault(){return this.valueType!==null?this.valueType:DataTypeDefXsd.String;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:if(!(this.semanticId!==null)){_context4.next=3;break;}_context4.next=3;return this.semanticId;case 3:if(!(this.supplementalSemanticIds!==null)){_context4.next=5;break;}return _context4.delegateYield(this.supplementalSemanticIds,"t0",5);case 5:if(!(this.refersTo!==null)){_context4.next=7;break;}return _context4.delegateYield(this.refersTo,"t1",7);case 7:case"end":return _context4.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator,_step,anItem,_iterator2,_step2,anotherItem;return _regeneratorRuntime().wrap(function descend$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:if(!(this.semanticId!==null)){_context5.next=4;break;}_context5.next=3;return this.semanticId;case 3:return _context5.delegateYield(this.semanticId.descend(),"t0",4);case 4:if(!(this.supplementalSemanticIds!==null)){_context5.next=23;break;}_iterator=_createForOfIteratorHelper(this.supplementalSemanticIds);_context5.prev=6;_iterator.s();case 8:if((_step=_iterator.n()).done){_context5.next=15;break;}anItem=_step.value;_context5.next=12;return anItem;case 12:return _context5.delegateYield(anItem.descend(),"t1",13);case 13:_context5.next=8;break;case 15:_context5.next=20;break;case 17:_context5.prev=17;_context5.t2=_context5["catch"](6);_iterator.e(_context5.t2);case 20:_context5.prev=20;_iterator.f();return _context5.finish(20);case 23:if(!(this.refersTo!==null)){_context5.next=42;break;}_iterator2=_createForOfIteratorHelper(this.refersTo);_context5.prev=25;_iterator2.s();case 27:if((_step2=_iterator2.n()).done){_context5.next=34;break;}anotherItem=_step2.value;_context5.next=31;return anotherItem;case 31:return _context5.delegateYield(anotherItem.descend(),"t3",32);case 32:_context5.next=27;break;case 34:_context5.next=39;break;case 36:_context5.prev=36;_context5.t4=_context5["catch"](25);_iterator2.e(_context5.t4);case 39:_context5.prev=39;_iterator2.f();return _context5.finish(39);case 42:case"end":return _context5.stop();}},descend,this,[[6,17,20,23],[25,36,39,42]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitExtension(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitExtensionWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformExtension(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformExtensionWithContext(this,context);}}]);return Extension;}(Class);/**
 * Element that can be extended by proprietary extensions.
 *
 * @remarks
 * **Note**:
 * Extensions are proprietary, i.e. they do not support global interoperability.
 */ /**
 * Enumeration for denoting whether an element is a template or an instance.
 */var ModellingKind=/*#__PURE__*/function(ModellingKind){ModellingKind[ModellingKind["Template"]=0]="Template";ModellingKind[ModellingKind["Instance"]=1]="Instance";return ModellingKind;}({});/**
 * Iterate over the literals of {@link ModellingKind}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overModellingKind(){return _regeneratorRuntime().wrap(function overModellingKind$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:_context6.next=2;return 0;case 2:_context6.next=4;return 1;case 4:case"end":return _context6.stop();}},_marked2$1);}/**
 * An element with a kind is an element that can either represent a template or an
 * instance.
 *
 * @remarks
 * Default for an element is that it is representing an instance.
 */ /**
 * Administrative meta-information for an element like version
 * information.
 *
 * Constraint `AASd-005`:
 * If {@link AdministrativeInformation.version} is not specified then also {@link AdministrativeInformation.revision} shall be
 * unspecified. This means, a revision requires a version. If there is no version
 * there is no revision neither. Revision is optional.
 */var AdministrativeInformation=/*#__PURE__*/function(_Class2){_inherits(AdministrativeInformation,_Class2);var _super2=_createSuper(AdministrativeInformation);function AdministrativeInformation(){var _this2;var embeddedDataSpecifications=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var version=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var revision=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var creator=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var templateId=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;_classCallCheck(this,AdministrativeInformation);_this2=_super2.call(this);_this2.embeddedDataSpecifications=embeddedDataSpecifications;_this2.version=version;_this2.revision=revision;_this2.creator=creator;_this2.templateId=templateId;return _this2;}_createClass(AdministrativeInformation,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 1;// AdministrativeInformation
}/**
   * Embedded data specification.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context7){while(1)switch(_context7.prev=_context7.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context7.next=2;break;}return _context7.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context7.abrupt("return");case 3:case"end":return _context7.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context8){while(1)switch(_context8.prev=_context8.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context8.next=2;break;}return _context8.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:if(!(this.creator!==null)){_context8.next=5;break;}_context8.next=5;return this.creator;case 5:case"end":return _context8.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator3,_step3,anItem;return _regeneratorRuntime().wrap(function descend$(_context9){while(1)switch(_context9.prev=_context9.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context9.next=19;break;}_iterator3=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context9.prev=2;_iterator3.s();case 4:if((_step3=_iterator3.n()).done){_context9.next=11;break;}anItem=_step3.value;_context9.next=8;return anItem;case 8:return _context9.delegateYield(anItem.descend(),"t0",9);case 9:_context9.next=4;break;case 11:_context9.next=16;break;case 13:_context9.prev=13;_context9.t1=_context9["catch"](2);_iterator3.e(_context9.t1);case 16:_context9.prev=16;_iterator3.f();return _context9.finish(16);case 19:if(!(this.creator!==null)){_context9.next=23;break;}_context9.next=22;return this.creator;case 22:return _context9.delegateYield(this.creator.descend(),"t2",23);case 23:case"end":return _context9.stop();}},descend,this,[[2,13,16,19]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitAdministrativeInformation(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitAdministrativeInformationWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformAdministrativeInformation(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformAdministrativeInformationWithContext(this,context);}}]);return AdministrativeInformation;}(Class);/**
 * The value of a qualifiable element may be further qualified by one or more
 * qualifiers.
 *
 * Constraint `AASd-119`:
 * If any {@link Qualifier.kind} value of {@link qualifiers} is
 * equal to {@link QualifierKind.TemplateQualifier} and the qualified element
 * inherits from {@link IHasKind} then the qualified element shall be of
 * kind Template ({@link IHasKind.kind} = {@link ModellingKind.Template}).
 *
 * **Note**:
 * This constraint is checked at {@link Submodel}.
 */ /**
 * Enumeration for kinds of qualifiers.
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */var QualifierKind=/*#__PURE__*/function(QualifierKind){QualifierKind[QualifierKind["ValueQualifier"]=0]="ValueQualifier";QualifierKind[QualifierKind["ConceptQualifier"]=1]="ConceptQualifier";QualifierKind[QualifierKind["TemplateQualifier"]=2]="TemplateQualifier";return QualifierKind;}({});/**
 * Iterate over the literals of {@link QualifierKind}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overQualifierKind(){return _regeneratorRuntime().wrap(function overQualifierKind$(_context10){while(1)switch(_context10.prev=_context10.next){case 0:_context10.next=2;return 0;case 2:_context10.next=4;return 1;case 4:_context10.next=6;return 2;case 6:case"end":return _context10.stop();}},_marked3$1);}/**
 * A qualifier is a type-value-pair that makes additional statements w.r.t. the value
 * of the element.
 *
 * Constraint `AASd-006`:
 * If both the {@link Qualifier.value} and the {@link Qualifier.valueId} of
 * a {@link Qualifier} are present then the {@link Qualifier.value} needs
 * to be identical to the value of the referenced coded value
 * in {@link Qualifier.valueId}.
 *
 * Constraint `AASd-020`:
 * The value of {@link Qualifier.value} shall be consistent to the data type as
 * defined in {@link Qualifier.valueType}.
 */var Qualifier=/*#__PURE__*/function(_Class3){_inherits(Qualifier,_Class3);var _super3=_createSuper(Qualifier);function Qualifier(type,valueType){var _this3;var semanticId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var supplementalSemanticIds=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var kind=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var value=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var valueId=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;_classCallCheck(this,Qualifier);_this3=_super3.call(this);_this3.semanticId=semanticId;_this3.supplementalSemanticIds=supplementalSemanticIds;_this3.type=type;_this3.valueType=valueType;_this3.kind=kind;_this3.value=value;_this3.valueId=valueId;return _this3;}_createClass(Qualifier,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 2;// Qualifier
}/**
   * Identifier of the semantic definition of the element. It is called semantic ID
   * of the element or also main semantic ID of the element.
   *
   * @remarks
   * **Note**:
   * It is recommended to use a global reference.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context11){while(1)switch(_context11.prev=_context11.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context11.next=2;break;}return _context11.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context11.abrupt("return");case 3:case"end":return _context11.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * @returns {@link kind} if set or the default value otherwise.
   */},{key:"kindOrDefault",value:function kindOrDefault(){return this.kind!==null?this.kind:QualifierKind.ConceptQualifier;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context12){while(1)switch(_context12.prev=_context12.next){case 0:if(!(this.semanticId!==null)){_context12.next=3;break;}_context12.next=3;return this.semanticId;case 3:if(!(this.supplementalSemanticIds!==null)){_context12.next=5;break;}return _context12.delegateYield(this.supplementalSemanticIds,"t0",5);case 5:if(!(this.valueId!==null)){_context12.next=8;break;}_context12.next=8;return this.valueId;case 8:case"end":return _context12.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator4,_step4,anItem;return _regeneratorRuntime().wrap(function descend$(_context13){while(1)switch(_context13.prev=_context13.next){case 0:if(!(this.semanticId!==null)){_context13.next=4;break;}_context13.next=3;return this.semanticId;case 3:return _context13.delegateYield(this.semanticId.descend(),"t0",4);case 4:if(!(this.supplementalSemanticIds!==null)){_context13.next=23;break;}_iterator4=_createForOfIteratorHelper(this.supplementalSemanticIds);_context13.prev=6;_iterator4.s();case 8:if((_step4=_iterator4.n()).done){_context13.next=15;break;}anItem=_step4.value;_context13.next=12;return anItem;case 12:return _context13.delegateYield(anItem.descend(),"t1",13);case 13:_context13.next=8;break;case 15:_context13.next=20;break;case 17:_context13.prev=17;_context13.t2=_context13["catch"](6);_iterator4.e(_context13.t2);case 20:_context13.prev=20;_iterator4.f();return _context13.finish(20);case 23:if(!(this.valueId!==null)){_context13.next=27;break;}_context13.next=26;return this.valueId;case 26:return _context13.delegateYield(this.valueId.descend(),"t3",27);case 27:case"end":return _context13.stop();}},descend,this,[[6,17,20,23]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitQualifier(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitQualifierWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformQualifier(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformQualifierWithContext(this,context);}}]);return Qualifier;}(Class);/**
 * An asset administration shell.
 */var AssetAdministrationShell=/*#__PURE__*/function(_Class4){_inherits(AssetAdministrationShell,_Class4);var _super4=_createSuper(AssetAdministrationShell);function AssetAdministrationShell(id,assetInformation){var _this4;var extensions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var category=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var idShort=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var displayName=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var description=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var administration=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var embeddedDataSpecifications=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var derivedFrom=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var submodels=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;_classCallCheck(this,AssetAdministrationShell);_this4=_super4.call(this);_this4.extensions=extensions;_this4.idShort=idShort;_this4.displayName=displayName;_this4.category=category;_this4.description=description;_this4.id=id;_this4.administration=administration;_this4.embeddedDataSpecifications=embeddedDataSpecifications;_this4.derivedFrom=derivedFrom;_this4.assetInformation=assetInformation;_this4.submodels=submodels;return _this4;}_createClass(AssetAdministrationShell,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 3;// AssetAdministrationShell
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context14){while(1)switch(_context14.prev=_context14.next){case 0:if(!(this.extensions!==null)){_context14.next=2;break;}return _context14.delegateYield(this.extensions,"t0",2);case 2:return _context14.abrupt("return");case 3:case"end":return _context14.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context15){while(1)switch(_context15.prev=_context15.next){case 0:if(!(this.displayName!==null)){_context15.next=2;break;}return _context15.delegateYield(this.displayName,"t0",2);case 2:return _context15.abrupt("return");case 3:case"end":return _context15.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context16){while(1)switch(_context16.prev=_context16.next){case 0:if(!(this.description!==null)){_context16.next=2;break;}return _context16.delegateYield(this.description,"t0",2);case 2:return _context16.abrupt("return");case 3:case"end":return _context16.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context17){while(1)switch(_context17.prev=_context17.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context17.next=2;break;}return _context17.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context17.abrupt("return");case 3:case"end":return _context17.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Yield from {@link submodels} if it is set, or yield nothing.
   */},{key:"overSubmodelsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSubmodelsOrEmpty(){return _regeneratorRuntime().wrap(function overSubmodelsOrEmpty$(_context18){while(1)switch(_context18.prev=_context18.next){case 0:if(!(this.submodels!==null)){_context18.next=2;break;}return _context18.delegateYield(this.submodels,"t0",2);case 2:return _context18.abrupt("return");case 3:case"end":return _context18.stop();}},overSubmodelsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context19){while(1)switch(_context19.prev=_context19.next){case 0:if(!(this.extensions!==null)){_context19.next=2;break;}return _context19.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context19.next=4;break;}return _context19.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context19.next=6;break;}return _context19.delegateYield(this.description,"t2",6);case 6:if(!(this.administration!==null)){_context19.next=9;break;}_context19.next=9;return this.administration;case 9:if(!(this.embeddedDataSpecifications!==null)){_context19.next=11;break;}return _context19.delegateYield(this.embeddedDataSpecifications,"t3",11);case 11:if(!(this.derivedFrom!==null)){_context19.next=14;break;}_context19.next=14;return this.derivedFrom;case 14:_context19.next=16;return this.assetInformation;case 16:if(!(this.submodels!==null)){_context19.next=18;break;}return _context19.delegateYield(this.submodels,"t4",18);case 18:case"end":return _context19.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator5,_step5,anItem,_iterator6,_step6,anotherItem,_iterator7,_step7,yetAnotherItem,_iterator8,_step8,yetYetAnotherItem,_iterator9,_step9,yetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context20){while(1)switch(_context20.prev=_context20.next){case 0:if(!(this.extensions!==null)){_context20.next=19;break;}_iterator5=_createForOfIteratorHelper(this.extensions);_context20.prev=2;_iterator5.s();case 4:if((_step5=_iterator5.n()).done){_context20.next=11;break;}anItem=_step5.value;_context20.next=8;return anItem;case 8:return _context20.delegateYield(anItem.descend(),"t0",9);case 9:_context20.next=4;break;case 11:_context20.next=16;break;case 13:_context20.prev=13;_context20.t1=_context20["catch"](2);_iterator5.e(_context20.t1);case 16:_context20.prev=16;_iterator5.f();return _context20.finish(16);case 19:if(!(this.displayName!==null)){_context20.next=38;break;}_iterator6=_createForOfIteratorHelper(this.displayName);_context20.prev=21;_iterator6.s();case 23:if((_step6=_iterator6.n()).done){_context20.next=30;break;}anotherItem=_step6.value;_context20.next=27;return anotherItem;case 27:return _context20.delegateYield(anotherItem.descend(),"t2",28);case 28:_context20.next=23;break;case 30:_context20.next=35;break;case 32:_context20.prev=32;_context20.t3=_context20["catch"](21);_iterator6.e(_context20.t3);case 35:_context20.prev=35;_iterator6.f();return _context20.finish(35);case 38:if(!(this.description!==null)){_context20.next=57;break;}_iterator7=_createForOfIteratorHelper(this.description);_context20.prev=40;_iterator7.s();case 42:if((_step7=_iterator7.n()).done){_context20.next=49;break;}yetAnotherItem=_step7.value;_context20.next=46;return yetAnotherItem;case 46:return _context20.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context20.next=42;break;case 49:_context20.next=54;break;case 51:_context20.prev=51;_context20.t5=_context20["catch"](40);_iterator7.e(_context20.t5);case 54:_context20.prev=54;_iterator7.f();return _context20.finish(54);case 57:if(!(this.administration!==null)){_context20.next=61;break;}_context20.next=60;return this.administration;case 60:return _context20.delegateYield(this.administration.descend(),"t6",61);case 61:if(!(this.embeddedDataSpecifications!==null)){_context20.next=80;break;}_iterator8=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context20.prev=63;_iterator8.s();case 65:if((_step8=_iterator8.n()).done){_context20.next=72;break;}yetYetAnotherItem=_step8.value;_context20.next=69;return yetYetAnotherItem;case 69:return _context20.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context20.next=65;break;case 72:_context20.next=77;break;case 74:_context20.prev=74;_context20.t8=_context20["catch"](63);_iterator8.e(_context20.t8);case 77:_context20.prev=77;_iterator8.f();return _context20.finish(77);case 80:if(!(this.derivedFrom!==null)){_context20.next=84;break;}_context20.next=83;return this.derivedFrom;case 83:return _context20.delegateYield(this.derivedFrom.descend(),"t9",84);case 84:_context20.next=86;return this.assetInformation;case 86:return _context20.delegateYield(this.assetInformation.descend(),"t10",87);case 87:if(!(this.submodels!==null)){_context20.next=106;break;}_iterator9=_createForOfIteratorHelper(this.submodels);_context20.prev=89;_iterator9.s();case 91:if((_step9=_iterator9.n()).done){_context20.next=98;break;}yetYetYetAnotherItem=_step9.value;_context20.next=95;return yetYetYetAnotherItem;case 95:return _context20.delegateYield(yetYetYetAnotherItem.descend(),"t11",96);case 96:_context20.next=91;break;case 98:_context20.next=103;break;case 100:_context20.prev=100;_context20.t12=_context20["catch"](89);_iterator9.e(_context20.t12);case 103:_context20.prev=103;_iterator9.f();return _context20.finish(103);case 106:case"end":return _context20.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[89,100,103,106]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitAssetAdministrationShell(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitAssetAdministrationShellWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformAssetAdministrationShell(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformAssetAdministrationShellWithContext(this,context);}}]);return AssetAdministrationShell;}(Class);/**
 * In {@link AssetInformation} identifying meta data of the asset that is
 * represented by an AAS is defined.
 *
 * @remarks
 * The asset may either represent an asset type or an asset instance.
 *
 * The asset has a globally unique identifier plus – if needed – additional domain
 * specific (proprietary) identifiers. However, to support the corner case of very
 * first phase of lifecycle where a stabilised/constant_set global asset identifier
 * does not already exist, the corresponding attribute {@link AssetInformation.globalAssetId} is
 * optional.
 *
 * Constraint `AASd-116`:
 * `globalAssetId` is a reserved key. If used as value for
 * {@link SpecificAssetId.name} then {@link SpecificAssetId.value} shall be
 * identical to {@link AssetInformation.globalAssetId}.
 *
 * **Note**:
 * Constraint AASd-116 is important to enable a generic search across
 * global and specific asset IDs.
 *
 * **Note**:
 * In the book, Constraint AASd-116 imposes a
 * case-insensitive equality against `globalAssetId`. This is
 * culturally-dependent, and depends on the system settings.
 * For example, the case-folding for the letters "i" and "I" is
 * different in Turkish from English.
 *
 * We implement the constraint as case-sensitive instead to allow
 * for interoperability across different culture settings.
 *
 * Constraint `AASd-131`:
 * For {@link AssetInformation} either the {@link AssetInformation.globalAssetId} shall be
 * defined or at least one item in {@link AssetInformation.specificAssetIds}.
 */var AssetInformation=/*#__PURE__*/function(_Class5){_inherits(AssetInformation,_Class5);var _super5=_createSuper(AssetInformation);function AssetInformation(assetKind){var _this5;var globalAssetId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var specificAssetIds=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var assetType=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var defaultThumbnail=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;_classCallCheck(this,AssetInformation);_this5=_super5.call(this);_this5.assetKind=assetKind;_this5.globalAssetId=globalAssetId;_this5.specificAssetIds=specificAssetIds;_this5.assetType=assetType;_this5.defaultThumbnail=defaultThumbnail;return _this5;}_createClass(AssetInformation,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 4;// AssetInformation
}/**
   * Denotes whether the Asset is of kind {@link AssetKind.Type} or
   * {@link AssetKind.Instance}.
   */},{key:"overSpecificAssetIdsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link specificAssetIds} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overSpecificAssetIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSpecificAssetIdsOrEmpty$(_context21){while(1)switch(_context21.prev=_context21.next){case 0:if(!(this.specificAssetIds!==null)){_context21.next=2;break;}return _context21.delegateYield(this.specificAssetIds,"t0",2);case 2:return _context21.abrupt("return");case 3:case"end":return _context21.stop();}},overSpecificAssetIdsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context22){while(1)switch(_context22.prev=_context22.next){case 0:if(!(this.specificAssetIds!==null)){_context22.next=2;break;}return _context22.delegateYield(this.specificAssetIds,"t0",2);case 2:if(!(this.defaultThumbnail!==null)){_context22.next=5;break;}_context22.next=5;return this.defaultThumbnail;case 5:case"end":return _context22.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator10,_step10,anItem;return _regeneratorRuntime().wrap(function descend$(_context23){while(1)switch(_context23.prev=_context23.next){case 0:if(!(this.specificAssetIds!==null)){_context23.next=19;break;}_iterator10=_createForOfIteratorHelper(this.specificAssetIds);_context23.prev=2;_iterator10.s();case 4:if((_step10=_iterator10.n()).done){_context23.next=11;break;}anItem=_step10.value;_context23.next=8;return anItem;case 8:return _context23.delegateYield(anItem.descend(),"t0",9);case 9:_context23.next=4;break;case 11:_context23.next=16;break;case 13:_context23.prev=13;_context23.t1=_context23["catch"](2);_iterator10.e(_context23.t1);case 16:_context23.prev=16;_iterator10.f();return _context23.finish(16);case 19:if(!(this.defaultThumbnail!==null)){_context23.next=23;break;}_context23.next=22;return this.defaultThumbnail;case 22:return _context23.delegateYield(this.defaultThumbnail.descend(),"t2",23);case 23:case"end":return _context23.stop();}},descend,this,[[2,13,16,19]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitAssetInformation(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitAssetInformationWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformAssetInformation(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformAssetInformationWithContext(this,context);}}]);return AssetInformation;}(Class);/**
 * Resource represents an address to a file (a locator). The value is an URI that
 * can represent an absolute or relative path
 */var Resource=/*#__PURE__*/function(_Class6){_inherits(Resource,_Class6);var _super6=_createSuper(Resource);function Resource(path){var _this6;var contentType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,Resource);_this6=_super6.call(this);_this6.path=path;_this6.contentType=contentType;return _this6;}_createClass(Resource,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 5;// Resource
}/**
   * Path and name of the resource (with file extension).
   *
   * @remarks
   * The path can be absolute or relative.
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context24){while(1)switch(_context24.prev=_context24.next){case 0:case"end":return _context24.stop();}},descendOnce);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context25){while(1)switch(_context25.prev=_context25.next){case 0:case"end":return _context25.stop();}},descend);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitResource(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitResourceWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformResource(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformResourceWithContext(this,context);}}]);return Resource;}(Class);/**
 * Enumeration for denoting whether an asset is a type asset or an instance asset.
 */var AssetKind=/*#__PURE__*/function(AssetKind){AssetKind[AssetKind["Type"]=0]="Type";AssetKind[AssetKind["Instance"]=1]="Instance";AssetKind[AssetKind["NotApplicable"]=2]="NotApplicable";return AssetKind;}({});/**
 * Iterate over the literals of {@link AssetKind}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overAssetKind(){return _regeneratorRuntime().wrap(function overAssetKind$(_context26){while(1)switch(_context26.prev=_context26.next){case 0:_context26.next=2;return 0;case 2:_context26.next=4;return 1;case 4:_context26.next=6;return 2;case 6:case"end":return _context26.stop();}},_marked4$1);}/**
 * A specific asset ID describes a generic supplementary identifying attribute of the
 * asset.
 *
 * @remarks
 * The specific asset ID is not necessarily globally unique.
 *
 * Constraint `AASd-133`:
 * {@link SpecificAssetId.externalSubjectId} shall be an external reference,
 * i.e. {@link Reference.type} = {@link ReferenceTypes.ExternalReference}.
 */var SpecificAssetId=/*#__PURE__*/function(_Class7){_inherits(SpecificAssetId,_Class7);var _super7=_createSuper(SpecificAssetId);function SpecificAssetId(name,value){var _this7;var semanticId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var supplementalSemanticIds=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var externalSubjectId=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;_classCallCheck(this,SpecificAssetId);_this7=_super7.call(this);_this7.semanticId=semanticId;_this7.supplementalSemanticIds=supplementalSemanticIds;_this7.name=name;_this7.value=value;_this7.externalSubjectId=externalSubjectId;return _this7;}_createClass(SpecificAssetId,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 6;// SpecificAssetId
}/**
   * Identifier of the semantic definition of the element. It is called semantic ID
   * of the element or also main semantic ID of the element.
   *
   * @remarks
   * **Note**:
   * It is recommended to use a global reference.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context27){while(1)switch(_context27.prev=_context27.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context27.next=2;break;}return _context27.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context27.abrupt("return");case 3:case"end":return _context27.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context28){while(1)switch(_context28.prev=_context28.next){case 0:if(!(this.semanticId!==null)){_context28.next=3;break;}_context28.next=3;return this.semanticId;case 3:if(!(this.supplementalSemanticIds!==null)){_context28.next=5;break;}return _context28.delegateYield(this.supplementalSemanticIds,"t0",5);case 5:if(!(this.externalSubjectId!==null)){_context28.next=8;break;}_context28.next=8;return this.externalSubjectId;case 8:case"end":return _context28.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator11,_step11,anItem;return _regeneratorRuntime().wrap(function descend$(_context29){while(1)switch(_context29.prev=_context29.next){case 0:if(!(this.semanticId!==null)){_context29.next=4;break;}_context29.next=3;return this.semanticId;case 3:return _context29.delegateYield(this.semanticId.descend(),"t0",4);case 4:if(!(this.supplementalSemanticIds!==null)){_context29.next=23;break;}_iterator11=_createForOfIteratorHelper(this.supplementalSemanticIds);_context29.prev=6;_iterator11.s();case 8:if((_step11=_iterator11.n()).done){_context29.next=15;break;}anItem=_step11.value;_context29.next=12;return anItem;case 12:return _context29.delegateYield(anItem.descend(),"t1",13);case 13:_context29.next=8;break;case 15:_context29.next=20;break;case 17:_context29.prev=17;_context29.t2=_context29["catch"](6);_iterator11.e(_context29.t2);case 20:_context29.prev=20;_iterator11.f();return _context29.finish(20);case 23:if(!(this.externalSubjectId!==null)){_context29.next=27;break;}_context29.next=26;return this.externalSubjectId;case 26:return _context29.delegateYield(this.externalSubjectId.descend(),"t3",27);case 27:case"end":return _context29.stop();}},descend,this,[[6,17,20,23]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitSpecificAssetId(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitSpecificAssetIdWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformSpecificAssetId(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformSpecificAssetIdWithContext(this,context);}}]);return SpecificAssetId;}(Class);/**
 * A submodel defines a specific aspect of the asset represented by the AAS.
 *
 * @remarks
 * A submodel is used to structure the digital representation and technical
 * functionality of an Administration Shell into distinguishable parts. Each submodel
 * refers to a well-defined domain or subject matter. Submodels can become
 * standardized and, thus, become submodels templates.
 */var Submodel=/*#__PURE__*/function(_Class8){_inherits(Submodel,_Class8);var _super8=_createSuper(Submodel);function Submodel(id){var _this8;var extensions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var idShort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var displayName=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var description=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var administration=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var kind=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var semanticId=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var supplementalSemanticIds=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var qualifiers=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;var embeddedDataSpecifications=arguments.length>11&&arguments[11]!==undefined?arguments[11]:null;var submodelElements=arguments.length>12&&arguments[12]!==undefined?arguments[12]:null;_classCallCheck(this,Submodel);_this8=_super8.call(this);_this8.extensions=extensions;_this8.idShort=idShort;_this8.displayName=displayName;_this8.category=category;_this8.description=description;_this8.id=id;_this8.administration=administration;_this8.kind=kind;_this8.semanticId=semanticId;_this8.supplementalSemanticIds=supplementalSemanticIds;_this8.qualifiers=qualifiers;_this8.embeddedDataSpecifications=embeddedDataSpecifications;_this8.submodelElements=submodelElements;return _this8;}_createClass(Submodel,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 7;// Submodel
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context30){while(1)switch(_context30.prev=_context30.next){case 0:if(!(this.extensions!==null)){_context30.next=2;break;}return _context30.delegateYield(this.extensions,"t0",2);case 2:return _context30.abrupt("return");case 3:case"end":return _context30.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context31){while(1)switch(_context31.prev=_context31.next){case 0:if(!(this.displayName!==null)){_context31.next=2;break;}return _context31.delegateYield(this.displayName,"t0",2);case 2:return _context31.abrupt("return");case 3:case"end":return _context31.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context32){while(1)switch(_context32.prev=_context32.next){case 0:if(!(this.description!==null)){_context32.next=2;break;}return _context32.delegateYield(this.description,"t0",2);case 2:return _context32.abrupt("return");case 3:case"end":return _context32.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context33){while(1)switch(_context33.prev=_context33.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context33.next=2;break;}return _context33.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context33.abrupt("return");case 3:case"end":return _context33.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context34){while(1)switch(_context34.prev=_context34.next){case 0:if(!(this.qualifiers!==null)){_context34.next=2;break;}return _context34.delegateYield(this.qualifiers,"t0",2);case 2:return _context34.abrupt("return");case 3:case"end":return _context34.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context35){while(1)switch(_context35.prev=_context35.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context35.next=2;break;}return _context35.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context35.abrupt("return");case 3:case"end":return _context35.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Yield from {@link submodelElements} if it is set, or yield nothing.
   */},{key:"overSubmodelElementsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSubmodelElementsOrEmpty(){return _regeneratorRuntime().wrap(function overSubmodelElementsOrEmpty$(_context36){while(1)switch(_context36.prev=_context36.next){case 0:if(!(this.submodelElements!==null)){_context36.next=2;break;}return _context36.delegateYield(this.submodelElements,"t0",2);case 2:return _context36.abrupt("return");case 3:case"end":return _context36.stop();}},overSubmodelElementsOrEmpty,this);})/**
   * @returns {@link kind} if set or the default value otherwise.
   */},{key:"kindOrDefault",value:function kindOrDefault(){return this.kind!==null?this.kind:ModellingKind.Instance;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context37){while(1)switch(_context37.prev=_context37.next){case 0:if(!(this.extensions!==null)){_context37.next=2;break;}return _context37.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context37.next=4;break;}return _context37.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context37.next=6;break;}return _context37.delegateYield(this.description,"t2",6);case 6:if(!(this.administration!==null)){_context37.next=9;break;}_context37.next=9;return this.administration;case 9:if(!(this.semanticId!==null)){_context37.next=12;break;}_context37.next=12;return this.semanticId;case 12:if(!(this.supplementalSemanticIds!==null)){_context37.next=14;break;}return _context37.delegateYield(this.supplementalSemanticIds,"t3",14);case 14:if(!(this.qualifiers!==null)){_context37.next=16;break;}return _context37.delegateYield(this.qualifiers,"t4",16);case 16:if(!(this.embeddedDataSpecifications!==null)){_context37.next=18;break;}return _context37.delegateYield(this.embeddedDataSpecifications,"t5",18);case 18:if(!(this.submodelElements!==null)){_context37.next=20;break;}return _context37.delegateYield(this.submodelElements,"t6",20);case 20:case"end":return _context37.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator12,_step12,anItem,_iterator13,_step13,anotherItem,_iterator14,_step14,yetAnotherItem,_iterator15,_step15,yetYetAnotherItem,_iterator16,_step16,yetYetYetAnotherItem,_iterator17,_step17,yetYetYetYetAnotherItem,_iterator18,_step18,yetYetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context38){while(1)switch(_context38.prev=_context38.next){case 0:if(!(this.extensions!==null)){_context38.next=19;break;}_iterator12=_createForOfIteratorHelper(this.extensions);_context38.prev=2;_iterator12.s();case 4:if((_step12=_iterator12.n()).done){_context38.next=11;break;}anItem=_step12.value;_context38.next=8;return anItem;case 8:return _context38.delegateYield(anItem.descend(),"t0",9);case 9:_context38.next=4;break;case 11:_context38.next=16;break;case 13:_context38.prev=13;_context38.t1=_context38["catch"](2);_iterator12.e(_context38.t1);case 16:_context38.prev=16;_iterator12.f();return _context38.finish(16);case 19:if(!(this.displayName!==null)){_context38.next=38;break;}_iterator13=_createForOfIteratorHelper(this.displayName);_context38.prev=21;_iterator13.s();case 23:if((_step13=_iterator13.n()).done){_context38.next=30;break;}anotherItem=_step13.value;_context38.next=27;return anotherItem;case 27:return _context38.delegateYield(anotherItem.descend(),"t2",28);case 28:_context38.next=23;break;case 30:_context38.next=35;break;case 32:_context38.prev=32;_context38.t3=_context38["catch"](21);_iterator13.e(_context38.t3);case 35:_context38.prev=35;_iterator13.f();return _context38.finish(35);case 38:if(!(this.description!==null)){_context38.next=57;break;}_iterator14=_createForOfIteratorHelper(this.description);_context38.prev=40;_iterator14.s();case 42:if((_step14=_iterator14.n()).done){_context38.next=49;break;}yetAnotherItem=_step14.value;_context38.next=46;return yetAnotherItem;case 46:return _context38.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context38.next=42;break;case 49:_context38.next=54;break;case 51:_context38.prev=51;_context38.t5=_context38["catch"](40);_iterator14.e(_context38.t5);case 54:_context38.prev=54;_iterator14.f();return _context38.finish(54);case 57:if(!(this.administration!==null)){_context38.next=61;break;}_context38.next=60;return this.administration;case 60:return _context38.delegateYield(this.administration.descend(),"t6",61);case 61:if(!(this.semanticId!==null)){_context38.next=65;break;}_context38.next=64;return this.semanticId;case 64:return _context38.delegateYield(this.semanticId.descend(),"t7",65);case 65:if(!(this.supplementalSemanticIds!==null)){_context38.next=84;break;}_iterator15=_createForOfIteratorHelper(this.supplementalSemanticIds);_context38.prev=67;_iterator15.s();case 69:if((_step15=_iterator15.n()).done){_context38.next=76;break;}yetYetAnotherItem=_step15.value;_context38.next=73;return yetYetAnotherItem;case 73:return _context38.delegateYield(yetYetAnotherItem.descend(),"t8",74);case 74:_context38.next=69;break;case 76:_context38.next=81;break;case 78:_context38.prev=78;_context38.t9=_context38["catch"](67);_iterator15.e(_context38.t9);case 81:_context38.prev=81;_iterator15.f();return _context38.finish(81);case 84:if(!(this.qualifiers!==null)){_context38.next=103;break;}_iterator16=_createForOfIteratorHelper(this.qualifiers);_context38.prev=86;_iterator16.s();case 88:if((_step16=_iterator16.n()).done){_context38.next=95;break;}yetYetYetAnotherItem=_step16.value;_context38.next=92;return yetYetYetAnotherItem;case 92:return _context38.delegateYield(yetYetYetAnotherItem.descend(),"t10",93);case 93:_context38.next=88;break;case 95:_context38.next=100;break;case 97:_context38.prev=97;_context38.t11=_context38["catch"](86);_iterator16.e(_context38.t11);case 100:_context38.prev=100;_iterator16.f();return _context38.finish(100);case 103:if(!(this.embeddedDataSpecifications!==null)){_context38.next=122;break;}_iterator17=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context38.prev=105;_iterator17.s();case 107:if((_step17=_iterator17.n()).done){_context38.next=114;break;}yetYetYetYetAnotherItem=_step17.value;_context38.next=111;return yetYetYetYetAnotherItem;case 111:return _context38.delegateYield(yetYetYetYetAnotherItem.descend(),"t12",112);case 112:_context38.next=107;break;case 114:_context38.next=119;break;case 116:_context38.prev=116;_context38.t13=_context38["catch"](105);_iterator17.e(_context38.t13);case 119:_context38.prev=119;_iterator17.f();return _context38.finish(119);case 122:if(!(this.submodelElements!==null)){_context38.next=141;break;}_iterator18=_createForOfIteratorHelper(this.submodelElements);_context38.prev=124;_iterator18.s();case 126:if((_step18=_iterator18.n()).done){_context38.next=133;break;}yetYetYetYetYetAnotherItem=_step18.value;_context38.next=130;return yetYetYetYetYetAnotherItem;case 130:return _context38.delegateYield(yetYetYetYetYetAnotherItem.descend(),"t14",131);case 131:_context38.next=126;break;case 133:_context38.next=138;break;case 135:_context38.prev=135;_context38.t15=_context38["catch"](124);_iterator18.e(_context38.t15);case 138:_context38.prev=138;_iterator18.f();return _context38.finish(138);case 141:case"end":return _context38.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[67,78,81,84],[86,97,100,103],[105,116,119,122],[124,135,138,141]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitSubmodel(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitSubmodelWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformSubmodel(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformSubmodelWithContext(this,context);}}]);return Submodel;}(Class);/**
 * A submodel element is an element suitable for the description and differentiation of
 * assets.
 *
 * @remarks
 * It is recommended to add a {@link IHasSemantics.semanticId} to a submodel element.
 *
 * Constraint `AASd-129`:
 * If any {@link Qualifier.kind} value of {@link qualifiers} (attribute qualifier
 * inherited via Qualifiable) is equal to {@link QualifierKind.TemplateQualifier}
 * then the submodel element shall be part of a submodel template, i.e.
 * a Submodel with {@link Submodel.kind} (attribute kind inherited via
 * {@link IHasKind}) value is equal to {@link ModellingKind.Template}.
 */ // eslint-disable-next-line @typescript-eslint/no-empty-interface
/**
 * A relationship element is used to define a relationship between two elements
 * being either referable (model reference) or external (global reference).
 */var RelationshipElement=/*#__PURE__*/function(_Class9){_inherits(RelationshipElement,_Class9);var _super9=_createSuper(RelationshipElement);function RelationshipElement(first,second){var _this9;var extensions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var category=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var idShort=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var displayName=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var description=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var semanticId=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var supplementalSemanticIds=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var qualifiers=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var embeddedDataSpecifications=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;_classCallCheck(this,RelationshipElement);_this9=_super9.call(this);_this9.extensions=extensions;_this9.idShort=idShort;_this9.displayName=displayName;_this9.category=category;_this9.description=description;_this9.semanticId=semanticId;_this9.supplementalSemanticIds=supplementalSemanticIds;_this9.qualifiers=qualifiers;_this9.embeddedDataSpecifications=embeddedDataSpecifications;_this9.first=first;_this9.second=second;return _this9;}_createClass(RelationshipElement,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 8;// RelationshipElement
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context39){while(1)switch(_context39.prev=_context39.next){case 0:if(!(this.extensions!==null)){_context39.next=2;break;}return _context39.delegateYield(this.extensions,"t0",2);case 2:return _context39.abrupt("return");case 3:case"end":return _context39.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context40){while(1)switch(_context40.prev=_context40.next){case 0:if(!(this.displayName!==null)){_context40.next=2;break;}return _context40.delegateYield(this.displayName,"t0",2);case 2:return _context40.abrupt("return");case 3:case"end":return _context40.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context41){while(1)switch(_context41.prev=_context41.next){case 0:if(!(this.description!==null)){_context41.next=2;break;}return _context41.delegateYield(this.description,"t0",2);case 2:return _context41.abrupt("return");case 3:case"end":return _context41.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context42){while(1)switch(_context42.prev=_context42.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context42.next=2;break;}return _context42.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context42.abrupt("return");case 3:case"end":return _context42.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context43){while(1)switch(_context43.prev=_context43.next){case 0:if(!(this.qualifiers!==null)){_context43.next=2;break;}return _context43.delegateYield(this.qualifiers,"t0",2);case 2:return _context43.abrupt("return");case 3:case"end":return _context43.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context44){while(1)switch(_context44.prev=_context44.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context44.next=2;break;}return _context44.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context44.abrupt("return");case 3:case"end":return _context44.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context45){while(1)switch(_context45.prev=_context45.next){case 0:if(!(this.extensions!==null)){_context45.next=2;break;}return _context45.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context45.next=4;break;}return _context45.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context45.next=6;break;}return _context45.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context45.next=9;break;}_context45.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context45.next=11;break;}return _context45.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context45.next=13;break;}return _context45.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context45.next=15;break;}return _context45.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:_context45.next=17;return this.first;case 17:_context45.next=19;return this.second;case 19:case"end":return _context45.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator19,_step19,anItem,_iterator20,_step20,anotherItem,_iterator21,_step21,yetAnotherItem,_iterator22,_step22,yetYetAnotherItem,_iterator23,_step23,yetYetYetAnotherItem,_iterator24,_step24,yetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context46){while(1)switch(_context46.prev=_context46.next){case 0:if(!(this.extensions!==null)){_context46.next=19;break;}_iterator19=_createForOfIteratorHelper(this.extensions);_context46.prev=2;_iterator19.s();case 4:if((_step19=_iterator19.n()).done){_context46.next=11;break;}anItem=_step19.value;_context46.next=8;return anItem;case 8:return _context46.delegateYield(anItem.descend(),"t0",9);case 9:_context46.next=4;break;case 11:_context46.next=16;break;case 13:_context46.prev=13;_context46.t1=_context46["catch"](2);_iterator19.e(_context46.t1);case 16:_context46.prev=16;_iterator19.f();return _context46.finish(16);case 19:if(!(this.displayName!==null)){_context46.next=38;break;}_iterator20=_createForOfIteratorHelper(this.displayName);_context46.prev=21;_iterator20.s();case 23:if((_step20=_iterator20.n()).done){_context46.next=30;break;}anotherItem=_step20.value;_context46.next=27;return anotherItem;case 27:return _context46.delegateYield(anotherItem.descend(),"t2",28);case 28:_context46.next=23;break;case 30:_context46.next=35;break;case 32:_context46.prev=32;_context46.t3=_context46["catch"](21);_iterator20.e(_context46.t3);case 35:_context46.prev=35;_iterator20.f();return _context46.finish(35);case 38:if(!(this.description!==null)){_context46.next=57;break;}_iterator21=_createForOfIteratorHelper(this.description);_context46.prev=40;_iterator21.s();case 42:if((_step21=_iterator21.n()).done){_context46.next=49;break;}yetAnotherItem=_step21.value;_context46.next=46;return yetAnotherItem;case 46:return _context46.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context46.next=42;break;case 49:_context46.next=54;break;case 51:_context46.prev=51;_context46.t5=_context46["catch"](40);_iterator21.e(_context46.t5);case 54:_context46.prev=54;_iterator21.f();return _context46.finish(54);case 57:if(!(this.semanticId!==null)){_context46.next=61;break;}_context46.next=60;return this.semanticId;case 60:return _context46.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context46.next=80;break;}_iterator22=_createForOfIteratorHelper(this.supplementalSemanticIds);_context46.prev=63;_iterator22.s();case 65:if((_step22=_iterator22.n()).done){_context46.next=72;break;}yetYetAnotherItem=_step22.value;_context46.next=69;return yetYetAnotherItem;case 69:return _context46.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context46.next=65;break;case 72:_context46.next=77;break;case 74:_context46.prev=74;_context46.t8=_context46["catch"](63);_iterator22.e(_context46.t8);case 77:_context46.prev=77;_iterator22.f();return _context46.finish(77);case 80:if(!(this.qualifiers!==null)){_context46.next=99;break;}_iterator23=_createForOfIteratorHelper(this.qualifiers);_context46.prev=82;_iterator23.s();case 84:if((_step23=_iterator23.n()).done){_context46.next=91;break;}yetYetYetAnotherItem=_step23.value;_context46.next=88;return yetYetYetAnotherItem;case 88:return _context46.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context46.next=84;break;case 91:_context46.next=96;break;case 93:_context46.prev=93;_context46.t10=_context46["catch"](82);_iterator23.e(_context46.t10);case 96:_context46.prev=96;_iterator23.f();return _context46.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context46.next=118;break;}_iterator24=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context46.prev=101;_iterator24.s();case 103:if((_step24=_iterator24.n()).done){_context46.next=110;break;}yetYetYetYetAnotherItem=_step24.value;_context46.next=107;return yetYetYetYetAnotherItem;case 107:return _context46.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context46.next=103;break;case 110:_context46.next=115;break;case 112:_context46.prev=112;_context46.t12=_context46["catch"](101);_iterator24.e(_context46.t12);case 115:_context46.prev=115;_iterator24.f();return _context46.finish(115);case 118:_context46.next=120;return this.first;case 120:return _context46.delegateYield(this.first.descend(),"t13",121);case 121:_context46.next=123;return this.second;case 123:return _context46.delegateYield(this.second.descend(),"t14",124);case 124:case"end":return _context46.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitRelationshipElement(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitRelationshipElementWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformRelationshipElement(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformRelationshipElementWithContext(this,context);}}]);return RelationshipElement;}(Class);/**
 * Enumeration of all possible elements of a {@link SubmodelElementList}.
 */var AasSubmodelElements=/*#__PURE__*/function(AasSubmodelElements){AasSubmodelElements[AasSubmodelElements["AnnotatedRelationshipElement"]=0]="AnnotatedRelationshipElement";AasSubmodelElements[AasSubmodelElements["BasicEventElement"]=1]="BasicEventElement";AasSubmodelElements[AasSubmodelElements["Blob"]=2]="Blob";AasSubmodelElements[AasSubmodelElements["Capability"]=3]="Capability";AasSubmodelElements[AasSubmodelElements["DataElement"]=4]="DataElement";AasSubmodelElements[AasSubmodelElements["Entity"]=5]="Entity";AasSubmodelElements[AasSubmodelElements["EventElement"]=6]="EventElement";AasSubmodelElements[AasSubmodelElements["File"]=7]="File";AasSubmodelElements[AasSubmodelElements["MultiLanguageProperty"]=8]="MultiLanguageProperty";AasSubmodelElements[AasSubmodelElements["Operation"]=9]="Operation";AasSubmodelElements[AasSubmodelElements["Property"]=10]="Property";AasSubmodelElements[AasSubmodelElements["Range"]=11]="Range";AasSubmodelElements[AasSubmodelElements["ReferenceElement"]=12]="ReferenceElement";AasSubmodelElements[AasSubmodelElements["RelationshipElement"]=13]="RelationshipElement";AasSubmodelElements[AasSubmodelElements["SubmodelElement"]=14]="SubmodelElement";AasSubmodelElements[AasSubmodelElements["SubmodelElementList"]=15]="SubmodelElementList";AasSubmodelElements[AasSubmodelElements["SubmodelElementCollection"]=16]="SubmodelElementCollection";return AasSubmodelElements;}({});/**
 * Iterate over the literals of {@link AasSubmodelElements}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overAasSubmodelElements(){return _regeneratorRuntime().wrap(function overAasSubmodelElements$(_context47){while(1)switch(_context47.prev=_context47.next){case 0:_context47.next=2;return 0;case 2:_context47.next=4;return 1;case 4:_context47.next=6;return 2;case 6:_context47.next=8;return 3;case 8:_context47.next=10;return 4;case 10:_context47.next=12;return 5;case 12:_context47.next=14;return 6;case 14:_context47.next=16;return 7;case 16:_context47.next=18;return 8;case 18:_context47.next=20;return 9;case 20:_context47.next=22;return 10;case 22:_context47.next=24;return 11;case 24:_context47.next=26;return 12;case 26:_context47.next=28;return 13;case 28:_context47.next=30;return 14;case 30:_context47.next=32;return 15;case 32:_context47.next=34;return 16;case 34:case"end":return _context47.stop();}},_marked5$1);}/**
 * A submodel element list is an ordered list of submodel elements.
 *
 * @remarks
 * The numbering starts with zero (0).
 *
 * Constraint `AASd-107`:
 * If a first level child element in a {@link SubmodelElementList} has
 * a {@link IHasSemantics.semanticId} it
 * shall be identical to {@link SubmodelElementList.semanticIdListElement}.
 *
 * Constraint `AASd-114`:
 * If two first level child elements in a {@link SubmodelElementList} have
 * a {@link IHasSemantics.semanticId} then they shall be identical.
 *
 * Constraint `AASd-115`:
 * If a first level child element in a {@link SubmodelElementList} does not
 * specify a {@link IHasSemantics.semanticId} then the value is assumed to be
 * identical to {@link SubmodelElementList.semanticIdListElement}.
 *
 * Constraint `AASd-120`:
 * The {@link SubmodelElementList.idShort} of a {@link ISubmodelElement} being a direct child of a
 * {@link SubmodelElementList} shall not be specified.
 *
 * Constraint `AASd-108`:
 * All first level child elements in a {@link SubmodelElementList} shall have
 * the same submodel element type as specified in {@link SubmodelElementList.typeValueListElement}.
 *
 * Constraint `AASd-109`:
 * If {@link SubmodelElementList.typeValueListElement} is equal to
 * {@link AasSubmodelElements.Property} or
 * {@link AasSubmodelElements.Range}
 * {@link SubmodelElementList.valueTypeListElement} shall be set and all first
 * level child elements in the {@link SubmodelElementList} shall have
 * the value type as specified in {@link SubmodelElementList.valueTypeListElement}.
 */var SubmodelElementList=/*#__PURE__*/function(_Class10){_inherits(SubmodelElementList,_Class10);var _super10=_createSuper(SubmodelElementList);function SubmodelElementList(typeValueListElement){var _this10;var extensions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var idShort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var displayName=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var description=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var semanticId=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var supplementalSemanticIds=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var qualifiers=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var embeddedDataSpecifications=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var orderRelevant=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;var semanticIdListElement=arguments.length>11&&arguments[11]!==undefined?arguments[11]:null;var valueTypeListElement=arguments.length>12&&arguments[12]!==undefined?arguments[12]:null;var value=arguments.length>13&&arguments[13]!==undefined?arguments[13]:null;_classCallCheck(this,SubmodelElementList);_this10=_super10.call(this);_this10.extensions=extensions;_this10.idShort=idShort;_this10.displayName=displayName;_this10.category=category;_this10.description=description;_this10.semanticId=semanticId;_this10.supplementalSemanticIds=supplementalSemanticIds;_this10.qualifiers=qualifiers;_this10.embeddedDataSpecifications=embeddedDataSpecifications;_this10.typeValueListElement=typeValueListElement;_this10.orderRelevant=orderRelevant;_this10.semanticIdListElement=semanticIdListElement;_this10.valueTypeListElement=valueTypeListElement;_this10.value=value;return _this10;}_createClass(SubmodelElementList,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 9;// SubmodelElementList
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context48){while(1)switch(_context48.prev=_context48.next){case 0:if(!(this.extensions!==null)){_context48.next=2;break;}return _context48.delegateYield(this.extensions,"t0",2);case 2:return _context48.abrupt("return");case 3:case"end":return _context48.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context49){while(1)switch(_context49.prev=_context49.next){case 0:if(!(this.displayName!==null)){_context49.next=2;break;}return _context49.delegateYield(this.displayName,"t0",2);case 2:return _context49.abrupt("return");case 3:case"end":return _context49.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context50){while(1)switch(_context50.prev=_context50.next){case 0:if(!(this.description!==null)){_context50.next=2;break;}return _context50.delegateYield(this.description,"t0",2);case 2:return _context50.abrupt("return");case 3:case"end":return _context50.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context51){while(1)switch(_context51.prev=_context51.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context51.next=2;break;}return _context51.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context51.abrupt("return");case 3:case"end":return _context51.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context52){while(1)switch(_context52.prev=_context52.next){case 0:if(!(this.qualifiers!==null)){_context52.next=2;break;}return _context52.delegateYield(this.qualifiers,"t0",2);case 2:return _context52.abrupt("return");case 3:case"end":return _context52.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context53){while(1)switch(_context53.prev=_context53.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context53.next=2;break;}return _context53.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context53.abrupt("return");case 3:case"end":return _context53.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Yield from {@link value} if it is set, or yield nothing.
   */},{key:"overValueOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overValueOrEmpty(){return _regeneratorRuntime().wrap(function overValueOrEmpty$(_context54){while(1)switch(_context54.prev=_context54.next){case 0:if(!(this.value!==null)){_context54.next=2;break;}return _context54.delegateYield(this.value,"t0",2);case 2:return _context54.abrupt("return");case 3:case"end":return _context54.stop();}},overValueOrEmpty,this);})/**
   * @returns {@link orderRelevant} if set or the default value otherwise.
   */},{key:"orderRelevantOrDefault",value:function orderRelevantOrDefault(){return this.orderRelevant!==null?this.orderRelevant:true;}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context55){while(1)switch(_context55.prev=_context55.next){case 0:if(!(this.extensions!==null)){_context55.next=2;break;}return _context55.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context55.next=4;break;}return _context55.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context55.next=6;break;}return _context55.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context55.next=9;break;}_context55.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context55.next=11;break;}return _context55.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context55.next=13;break;}return _context55.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context55.next=15;break;}return _context55.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:if(!(this.semanticIdListElement!==null)){_context55.next=18;break;}_context55.next=18;return this.semanticIdListElement;case 18:if(!(this.value!==null)){_context55.next=20;break;}return _context55.delegateYield(this.value,"t6",20);case 20:case"end":return _context55.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator25,_step25,anItem,_iterator26,_step26,anotherItem,_iterator27,_step27,yetAnotherItem,_iterator28,_step28,yetYetAnotherItem,_iterator29,_step29,yetYetYetAnotherItem,_iterator30,_step30,yetYetYetYetAnotherItem,_iterator31,_step31,yetYetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context56){while(1)switch(_context56.prev=_context56.next){case 0:if(!(this.extensions!==null)){_context56.next=19;break;}_iterator25=_createForOfIteratorHelper(this.extensions);_context56.prev=2;_iterator25.s();case 4:if((_step25=_iterator25.n()).done){_context56.next=11;break;}anItem=_step25.value;_context56.next=8;return anItem;case 8:return _context56.delegateYield(anItem.descend(),"t0",9);case 9:_context56.next=4;break;case 11:_context56.next=16;break;case 13:_context56.prev=13;_context56.t1=_context56["catch"](2);_iterator25.e(_context56.t1);case 16:_context56.prev=16;_iterator25.f();return _context56.finish(16);case 19:if(!(this.displayName!==null)){_context56.next=38;break;}_iterator26=_createForOfIteratorHelper(this.displayName);_context56.prev=21;_iterator26.s();case 23:if((_step26=_iterator26.n()).done){_context56.next=30;break;}anotherItem=_step26.value;_context56.next=27;return anotherItem;case 27:return _context56.delegateYield(anotherItem.descend(),"t2",28);case 28:_context56.next=23;break;case 30:_context56.next=35;break;case 32:_context56.prev=32;_context56.t3=_context56["catch"](21);_iterator26.e(_context56.t3);case 35:_context56.prev=35;_iterator26.f();return _context56.finish(35);case 38:if(!(this.description!==null)){_context56.next=57;break;}_iterator27=_createForOfIteratorHelper(this.description);_context56.prev=40;_iterator27.s();case 42:if((_step27=_iterator27.n()).done){_context56.next=49;break;}yetAnotherItem=_step27.value;_context56.next=46;return yetAnotherItem;case 46:return _context56.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context56.next=42;break;case 49:_context56.next=54;break;case 51:_context56.prev=51;_context56.t5=_context56["catch"](40);_iterator27.e(_context56.t5);case 54:_context56.prev=54;_iterator27.f();return _context56.finish(54);case 57:if(!(this.semanticId!==null)){_context56.next=61;break;}_context56.next=60;return this.semanticId;case 60:return _context56.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context56.next=80;break;}_iterator28=_createForOfIteratorHelper(this.supplementalSemanticIds);_context56.prev=63;_iterator28.s();case 65:if((_step28=_iterator28.n()).done){_context56.next=72;break;}yetYetAnotherItem=_step28.value;_context56.next=69;return yetYetAnotherItem;case 69:return _context56.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context56.next=65;break;case 72:_context56.next=77;break;case 74:_context56.prev=74;_context56.t8=_context56["catch"](63);_iterator28.e(_context56.t8);case 77:_context56.prev=77;_iterator28.f();return _context56.finish(77);case 80:if(!(this.qualifiers!==null)){_context56.next=99;break;}_iterator29=_createForOfIteratorHelper(this.qualifiers);_context56.prev=82;_iterator29.s();case 84:if((_step29=_iterator29.n()).done){_context56.next=91;break;}yetYetYetAnotherItem=_step29.value;_context56.next=88;return yetYetYetAnotherItem;case 88:return _context56.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context56.next=84;break;case 91:_context56.next=96;break;case 93:_context56.prev=93;_context56.t10=_context56["catch"](82);_iterator29.e(_context56.t10);case 96:_context56.prev=96;_iterator29.f();return _context56.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context56.next=118;break;}_iterator30=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context56.prev=101;_iterator30.s();case 103:if((_step30=_iterator30.n()).done){_context56.next=110;break;}yetYetYetYetAnotherItem=_step30.value;_context56.next=107;return yetYetYetYetAnotherItem;case 107:return _context56.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context56.next=103;break;case 110:_context56.next=115;break;case 112:_context56.prev=112;_context56.t12=_context56["catch"](101);_iterator30.e(_context56.t12);case 115:_context56.prev=115;_iterator30.f();return _context56.finish(115);case 118:if(!(this.semanticIdListElement!==null)){_context56.next=122;break;}_context56.next=121;return this.semanticIdListElement;case 121:return _context56.delegateYield(this.semanticIdListElement.descend(),"t13",122);case 122:if(!(this.value!==null)){_context56.next=141;break;}_iterator31=_createForOfIteratorHelper(this.value);_context56.prev=124;_iterator31.s();case 126:if((_step31=_iterator31.n()).done){_context56.next=133;break;}yetYetYetYetYetAnotherItem=_step31.value;_context56.next=130;return yetYetYetYetYetAnotherItem;case 130:return _context56.delegateYield(yetYetYetYetYetAnotherItem.descend(),"t14",131);case 131:_context56.next=126;break;case 133:_context56.next=138;break;case 135:_context56.prev=135;_context56.t15=_context56["catch"](124);_iterator31.e(_context56.t15);case 138:_context56.prev=138;_iterator31.f();return _context56.finish(138);case 141:case"end":return _context56.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118],[124,135,138,141]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitSubmodelElementList(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitSubmodelElementListWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformSubmodelElementList(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformSubmodelElementListWithContext(this,context);}}]);return SubmodelElementList;}(Class);/**
 * A submodel element collection is a kind of struct, i.e. a a logical encapsulation
 * of multiple named values. It has a fixed number of submodel elements.
 */var SubmodelElementCollection=/*#__PURE__*/function(_Class11){_inherits(SubmodelElementCollection,_Class11);var _super11=_createSuper(SubmodelElementCollection);function SubmodelElementCollection(){var _this11;var extensions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var category=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var idShort=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var displayName=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var description=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var semanticId=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var supplementalSemanticIds=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var qualifiers=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var embeddedDataSpecifications=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var value=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;_classCallCheck(this,SubmodelElementCollection);_this11=_super11.call(this);_this11.extensions=extensions;_this11.idShort=idShort;_this11.displayName=displayName;_this11.category=category;_this11.description=description;_this11.semanticId=semanticId;_this11.supplementalSemanticIds=supplementalSemanticIds;_this11.qualifiers=qualifiers;_this11.embeddedDataSpecifications=embeddedDataSpecifications;_this11.value=value;return _this11;}_createClass(SubmodelElementCollection,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 10;// SubmodelElementCollection
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context57){while(1)switch(_context57.prev=_context57.next){case 0:if(!(this.extensions!==null)){_context57.next=2;break;}return _context57.delegateYield(this.extensions,"t0",2);case 2:return _context57.abrupt("return");case 3:case"end":return _context57.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context58){while(1)switch(_context58.prev=_context58.next){case 0:if(!(this.displayName!==null)){_context58.next=2;break;}return _context58.delegateYield(this.displayName,"t0",2);case 2:return _context58.abrupt("return");case 3:case"end":return _context58.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context59){while(1)switch(_context59.prev=_context59.next){case 0:if(!(this.description!==null)){_context59.next=2;break;}return _context59.delegateYield(this.description,"t0",2);case 2:return _context59.abrupt("return");case 3:case"end":return _context59.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context60){while(1)switch(_context60.prev=_context60.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context60.next=2;break;}return _context60.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context60.abrupt("return");case 3:case"end":return _context60.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context61){while(1)switch(_context61.prev=_context61.next){case 0:if(!(this.qualifiers!==null)){_context61.next=2;break;}return _context61.delegateYield(this.qualifiers,"t0",2);case 2:return _context61.abrupt("return");case 3:case"end":return _context61.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context62){while(1)switch(_context62.prev=_context62.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context62.next=2;break;}return _context62.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context62.abrupt("return");case 3:case"end":return _context62.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Yield from {@link value} if it is set, or yield nothing.
   */},{key:"overValueOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overValueOrEmpty(){return _regeneratorRuntime().wrap(function overValueOrEmpty$(_context63){while(1)switch(_context63.prev=_context63.next){case 0:if(!(this.value!==null)){_context63.next=2;break;}return _context63.delegateYield(this.value,"t0",2);case 2:return _context63.abrupt("return");case 3:case"end":return _context63.stop();}},overValueOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context64){while(1)switch(_context64.prev=_context64.next){case 0:if(!(this.extensions!==null)){_context64.next=2;break;}return _context64.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context64.next=4;break;}return _context64.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context64.next=6;break;}return _context64.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context64.next=9;break;}_context64.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context64.next=11;break;}return _context64.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context64.next=13;break;}return _context64.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context64.next=15;break;}return _context64.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:if(!(this.value!==null)){_context64.next=17;break;}return _context64.delegateYield(this.value,"t6",17);case 17:case"end":return _context64.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator32,_step32,anItem,_iterator33,_step33,anotherItem,_iterator34,_step34,yetAnotherItem,_iterator35,_step35,yetYetAnotherItem,_iterator36,_step36,yetYetYetAnotherItem,_iterator37,_step37,yetYetYetYetAnotherItem,_iterator38,_step38,yetYetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context65){while(1)switch(_context65.prev=_context65.next){case 0:if(!(this.extensions!==null)){_context65.next=19;break;}_iterator32=_createForOfIteratorHelper(this.extensions);_context65.prev=2;_iterator32.s();case 4:if((_step32=_iterator32.n()).done){_context65.next=11;break;}anItem=_step32.value;_context65.next=8;return anItem;case 8:return _context65.delegateYield(anItem.descend(),"t0",9);case 9:_context65.next=4;break;case 11:_context65.next=16;break;case 13:_context65.prev=13;_context65.t1=_context65["catch"](2);_iterator32.e(_context65.t1);case 16:_context65.prev=16;_iterator32.f();return _context65.finish(16);case 19:if(!(this.displayName!==null)){_context65.next=38;break;}_iterator33=_createForOfIteratorHelper(this.displayName);_context65.prev=21;_iterator33.s();case 23:if((_step33=_iterator33.n()).done){_context65.next=30;break;}anotherItem=_step33.value;_context65.next=27;return anotherItem;case 27:return _context65.delegateYield(anotherItem.descend(),"t2",28);case 28:_context65.next=23;break;case 30:_context65.next=35;break;case 32:_context65.prev=32;_context65.t3=_context65["catch"](21);_iterator33.e(_context65.t3);case 35:_context65.prev=35;_iterator33.f();return _context65.finish(35);case 38:if(!(this.description!==null)){_context65.next=57;break;}_iterator34=_createForOfIteratorHelper(this.description);_context65.prev=40;_iterator34.s();case 42:if((_step34=_iterator34.n()).done){_context65.next=49;break;}yetAnotherItem=_step34.value;_context65.next=46;return yetAnotherItem;case 46:return _context65.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context65.next=42;break;case 49:_context65.next=54;break;case 51:_context65.prev=51;_context65.t5=_context65["catch"](40);_iterator34.e(_context65.t5);case 54:_context65.prev=54;_iterator34.f();return _context65.finish(54);case 57:if(!(this.semanticId!==null)){_context65.next=61;break;}_context65.next=60;return this.semanticId;case 60:return _context65.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context65.next=80;break;}_iterator35=_createForOfIteratorHelper(this.supplementalSemanticIds);_context65.prev=63;_iterator35.s();case 65:if((_step35=_iterator35.n()).done){_context65.next=72;break;}yetYetAnotherItem=_step35.value;_context65.next=69;return yetYetAnotherItem;case 69:return _context65.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context65.next=65;break;case 72:_context65.next=77;break;case 74:_context65.prev=74;_context65.t8=_context65["catch"](63);_iterator35.e(_context65.t8);case 77:_context65.prev=77;_iterator35.f();return _context65.finish(77);case 80:if(!(this.qualifiers!==null)){_context65.next=99;break;}_iterator36=_createForOfIteratorHelper(this.qualifiers);_context65.prev=82;_iterator36.s();case 84:if((_step36=_iterator36.n()).done){_context65.next=91;break;}yetYetYetAnotherItem=_step36.value;_context65.next=88;return yetYetYetAnotherItem;case 88:return _context65.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context65.next=84;break;case 91:_context65.next=96;break;case 93:_context65.prev=93;_context65.t10=_context65["catch"](82);_iterator36.e(_context65.t10);case 96:_context65.prev=96;_iterator36.f();return _context65.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context65.next=118;break;}_iterator37=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context65.prev=101;_iterator37.s();case 103:if((_step37=_iterator37.n()).done){_context65.next=110;break;}yetYetYetYetAnotherItem=_step37.value;_context65.next=107;return yetYetYetYetAnotherItem;case 107:return _context65.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context65.next=103;break;case 110:_context65.next=115;break;case 112:_context65.prev=112;_context65.t12=_context65["catch"](101);_iterator37.e(_context65.t12);case 115:_context65.prev=115;_iterator37.f();return _context65.finish(115);case 118:if(!(this.value!==null)){_context65.next=137;break;}_iterator38=_createForOfIteratorHelper(this.value);_context65.prev=120;_iterator38.s();case 122:if((_step38=_iterator38.n()).done){_context65.next=129;break;}yetYetYetYetYetAnotherItem=_step38.value;_context65.next=126;return yetYetYetYetYetAnotherItem;case 126:return _context65.delegateYield(yetYetYetYetYetAnotherItem.descend(),"t13",127);case 127:_context65.next=122;break;case 129:_context65.next=134;break;case 131:_context65.prev=131;_context65.t14=_context65["catch"](120);_iterator38.e(_context65.t14);case 134:_context65.prev=134;_iterator38.f();return _context65.finish(134);case 137:case"end":return _context65.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118],[120,131,134,137]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitSubmodelElementCollection(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitSubmodelElementCollectionWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformSubmodelElementCollection(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformSubmodelElementCollectionWithContext(this,context);}}]);return SubmodelElementCollection;}(Class);/**
 * A data element is a submodel element that is not further composed out of
 * other submodel elements.
 *
 * @remarks
 * A data element is a submodel element that has a value. The type of value differs
 * for different subtypes of data elements.
 *
 * Constraint `AASd-090`:
 * For data elements {@link category} shall be one of the following
 * values: `CONSTANT`, `PARAMETER` or `VARIABLE`.
 *
 * Default: `VARIABLE`
 */ /**
 * A property is a data element that has a single value.
 *
 * Constraint `AASd-007`:
 * If both, the {@link Property.value} and the {@link Property.valueId} are
 * present then the value of {@link Property.value} needs to be identical to
 * the value of the referenced coded value in {@link Property.valueId}.
 */var Property=/*#__PURE__*/function(_Class12){_inherits(Property,_Class12);var _super12=_createSuper(Property);function Property(valueType){var _this12;var extensions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var idShort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var displayName=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var description=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var semanticId=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var supplementalSemanticIds=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var qualifiers=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var embeddedDataSpecifications=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var value=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;var valueId=arguments.length>11&&arguments[11]!==undefined?arguments[11]:null;_classCallCheck(this,Property);_this12=_super12.call(this);_this12.extensions=extensions;_this12.idShort=idShort;_this12.displayName=displayName;_this12.category=category;_this12.description=description;_this12.semanticId=semanticId;_this12.supplementalSemanticIds=supplementalSemanticIds;_this12.qualifiers=qualifiers;_this12.embeddedDataSpecifications=embeddedDataSpecifications;_this12.valueType=valueType;_this12.value=value;_this12.valueId=valueId;return _this12;}_createClass(Property,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 11;// Property
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context66){while(1)switch(_context66.prev=_context66.next){case 0:if(!(this.extensions!==null)){_context66.next=2;break;}return _context66.delegateYield(this.extensions,"t0",2);case 2:return _context66.abrupt("return");case 3:case"end":return _context66.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context67){while(1)switch(_context67.prev=_context67.next){case 0:if(!(this.displayName!==null)){_context67.next=2;break;}return _context67.delegateYield(this.displayName,"t0",2);case 2:return _context67.abrupt("return");case 3:case"end":return _context67.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context68){while(1)switch(_context68.prev=_context68.next){case 0:if(!(this.description!==null)){_context68.next=2;break;}return _context68.delegateYield(this.description,"t0",2);case 2:return _context68.abrupt("return");case 3:case"end":return _context68.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context69){while(1)switch(_context69.prev=_context69.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context69.next=2;break;}return _context69.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context69.abrupt("return");case 3:case"end":return _context69.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context70){while(1)switch(_context70.prev=_context70.next){case 0:if(!(this.qualifiers!==null)){_context70.next=2;break;}return _context70.delegateYield(this.qualifiers,"t0",2);case 2:return _context70.abrupt("return");case 3:case"end":return _context70.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context71){while(1)switch(_context71.prev=_context71.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context71.next=2;break;}return _context71.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context71.abrupt("return");case 3:case"end":return _context71.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * @returns {@link category} if set or the default value otherwise.
   */},{key:"categoryOrDefault",value:function categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context72){while(1)switch(_context72.prev=_context72.next){case 0:if(!(this.extensions!==null)){_context72.next=2;break;}return _context72.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context72.next=4;break;}return _context72.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context72.next=6;break;}return _context72.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context72.next=9;break;}_context72.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context72.next=11;break;}return _context72.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context72.next=13;break;}return _context72.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context72.next=15;break;}return _context72.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:if(!(this.valueId!==null)){_context72.next=18;break;}_context72.next=18;return this.valueId;case 18:case"end":return _context72.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator39,_step39,anItem,_iterator40,_step40,anotherItem,_iterator41,_step41,yetAnotherItem,_iterator42,_step42,yetYetAnotherItem,_iterator43,_step43,yetYetYetAnotherItem,_iterator44,_step44,yetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context73){while(1)switch(_context73.prev=_context73.next){case 0:if(!(this.extensions!==null)){_context73.next=19;break;}_iterator39=_createForOfIteratorHelper(this.extensions);_context73.prev=2;_iterator39.s();case 4:if((_step39=_iterator39.n()).done){_context73.next=11;break;}anItem=_step39.value;_context73.next=8;return anItem;case 8:return _context73.delegateYield(anItem.descend(),"t0",9);case 9:_context73.next=4;break;case 11:_context73.next=16;break;case 13:_context73.prev=13;_context73.t1=_context73["catch"](2);_iterator39.e(_context73.t1);case 16:_context73.prev=16;_iterator39.f();return _context73.finish(16);case 19:if(!(this.displayName!==null)){_context73.next=38;break;}_iterator40=_createForOfIteratorHelper(this.displayName);_context73.prev=21;_iterator40.s();case 23:if((_step40=_iterator40.n()).done){_context73.next=30;break;}anotherItem=_step40.value;_context73.next=27;return anotherItem;case 27:return _context73.delegateYield(anotherItem.descend(),"t2",28);case 28:_context73.next=23;break;case 30:_context73.next=35;break;case 32:_context73.prev=32;_context73.t3=_context73["catch"](21);_iterator40.e(_context73.t3);case 35:_context73.prev=35;_iterator40.f();return _context73.finish(35);case 38:if(!(this.description!==null)){_context73.next=57;break;}_iterator41=_createForOfIteratorHelper(this.description);_context73.prev=40;_iterator41.s();case 42:if((_step41=_iterator41.n()).done){_context73.next=49;break;}yetAnotherItem=_step41.value;_context73.next=46;return yetAnotherItem;case 46:return _context73.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context73.next=42;break;case 49:_context73.next=54;break;case 51:_context73.prev=51;_context73.t5=_context73["catch"](40);_iterator41.e(_context73.t5);case 54:_context73.prev=54;_iterator41.f();return _context73.finish(54);case 57:if(!(this.semanticId!==null)){_context73.next=61;break;}_context73.next=60;return this.semanticId;case 60:return _context73.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context73.next=80;break;}_iterator42=_createForOfIteratorHelper(this.supplementalSemanticIds);_context73.prev=63;_iterator42.s();case 65:if((_step42=_iterator42.n()).done){_context73.next=72;break;}yetYetAnotherItem=_step42.value;_context73.next=69;return yetYetAnotherItem;case 69:return _context73.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context73.next=65;break;case 72:_context73.next=77;break;case 74:_context73.prev=74;_context73.t8=_context73["catch"](63);_iterator42.e(_context73.t8);case 77:_context73.prev=77;_iterator42.f();return _context73.finish(77);case 80:if(!(this.qualifiers!==null)){_context73.next=99;break;}_iterator43=_createForOfIteratorHelper(this.qualifiers);_context73.prev=82;_iterator43.s();case 84:if((_step43=_iterator43.n()).done){_context73.next=91;break;}yetYetYetAnotherItem=_step43.value;_context73.next=88;return yetYetYetAnotherItem;case 88:return _context73.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context73.next=84;break;case 91:_context73.next=96;break;case 93:_context73.prev=93;_context73.t10=_context73["catch"](82);_iterator43.e(_context73.t10);case 96:_context73.prev=96;_iterator43.f();return _context73.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context73.next=118;break;}_iterator44=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context73.prev=101;_iterator44.s();case 103:if((_step44=_iterator44.n()).done){_context73.next=110;break;}yetYetYetYetAnotherItem=_step44.value;_context73.next=107;return yetYetYetYetAnotherItem;case 107:return _context73.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context73.next=103;break;case 110:_context73.next=115;break;case 112:_context73.prev=112;_context73.t12=_context73["catch"](101);_iterator44.e(_context73.t12);case 115:_context73.prev=115;_iterator44.f();return _context73.finish(115);case 118:if(!(this.valueId!==null)){_context73.next=122;break;}_context73.next=121;return this.valueId;case 121:return _context73.delegateYield(this.valueId.descend(),"t13",122);case 122:case"end":return _context73.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitProperty(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitPropertyWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformProperty(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformPropertyWithContext(this,context);}}]);return Property;}(Class);/**
 * A property is a data element that has a multi-language value.
 *
 * Constraint `AASd-012`:
 * If both the {@link MultiLanguageProperty.value} and the {@link MultiLanguageProperty.valueId} are present then for each
 * string in a specific language the meaning must be the same as specified in
 * {@link MultiLanguageProperty.valueId}.
 */var MultiLanguageProperty=/*#__PURE__*/function(_Class13){_inherits(MultiLanguageProperty,_Class13);var _super13=_createSuper(MultiLanguageProperty);function MultiLanguageProperty(){var _this13;var extensions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var category=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var idShort=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var displayName=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var description=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var semanticId=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var supplementalSemanticIds=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var qualifiers=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var embeddedDataSpecifications=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var value=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var valueId=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;_classCallCheck(this,MultiLanguageProperty);_this13=_super13.call(this);_this13.extensions=extensions;_this13.idShort=idShort;_this13.displayName=displayName;_this13.category=category;_this13.description=description;_this13.semanticId=semanticId;_this13.supplementalSemanticIds=supplementalSemanticIds;_this13.qualifiers=qualifiers;_this13.embeddedDataSpecifications=embeddedDataSpecifications;_this13.value=value;_this13.valueId=valueId;return _this13;}_createClass(MultiLanguageProperty,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 12;// MultiLanguageProperty
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context74){while(1)switch(_context74.prev=_context74.next){case 0:if(!(this.extensions!==null)){_context74.next=2;break;}return _context74.delegateYield(this.extensions,"t0",2);case 2:return _context74.abrupt("return");case 3:case"end":return _context74.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context75){while(1)switch(_context75.prev=_context75.next){case 0:if(!(this.displayName!==null)){_context75.next=2;break;}return _context75.delegateYield(this.displayName,"t0",2);case 2:return _context75.abrupt("return");case 3:case"end":return _context75.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context76){while(1)switch(_context76.prev=_context76.next){case 0:if(!(this.description!==null)){_context76.next=2;break;}return _context76.delegateYield(this.description,"t0",2);case 2:return _context76.abrupt("return");case 3:case"end":return _context76.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context77){while(1)switch(_context77.prev=_context77.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context77.next=2;break;}return _context77.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context77.abrupt("return");case 3:case"end":return _context77.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context78){while(1)switch(_context78.prev=_context78.next){case 0:if(!(this.qualifiers!==null)){_context78.next=2;break;}return _context78.delegateYield(this.qualifiers,"t0",2);case 2:return _context78.abrupt("return");case 3:case"end":return _context78.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context79){while(1)switch(_context79.prev=_context79.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context79.next=2;break;}return _context79.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context79.abrupt("return");case 3:case"end":return _context79.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Yield from {@link value} if it is set, or yield nothing.
   */},{key:"overValueOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overValueOrEmpty(){return _regeneratorRuntime().wrap(function overValueOrEmpty$(_context80){while(1)switch(_context80.prev=_context80.next){case 0:if(!(this.value!==null)){_context80.next=2;break;}return _context80.delegateYield(this.value,"t0",2);case 2:return _context80.abrupt("return");case 3:case"end":return _context80.stop();}},overValueOrEmpty,this);})/**
   * @returns {@link category} if set or the default value otherwise.
   */},{key:"categoryOrDefault",value:function categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context81){while(1)switch(_context81.prev=_context81.next){case 0:if(!(this.extensions!==null)){_context81.next=2;break;}return _context81.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context81.next=4;break;}return _context81.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context81.next=6;break;}return _context81.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context81.next=9;break;}_context81.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context81.next=11;break;}return _context81.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context81.next=13;break;}return _context81.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context81.next=15;break;}return _context81.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:if(!(this.value!==null)){_context81.next=17;break;}return _context81.delegateYield(this.value,"t6",17);case 17:if(!(this.valueId!==null)){_context81.next=20;break;}_context81.next=20;return this.valueId;case 20:case"end":return _context81.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator45,_step45,anItem,_iterator46,_step46,anotherItem,_iterator47,_step47,yetAnotherItem,_iterator48,_step48,yetYetAnotherItem,_iterator49,_step49,yetYetYetAnotherItem,_iterator50,_step50,yetYetYetYetAnotherItem,_iterator51,_step51,yetYetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context82){while(1)switch(_context82.prev=_context82.next){case 0:if(!(this.extensions!==null)){_context82.next=19;break;}_iterator45=_createForOfIteratorHelper(this.extensions);_context82.prev=2;_iterator45.s();case 4:if((_step45=_iterator45.n()).done){_context82.next=11;break;}anItem=_step45.value;_context82.next=8;return anItem;case 8:return _context82.delegateYield(anItem.descend(),"t0",9);case 9:_context82.next=4;break;case 11:_context82.next=16;break;case 13:_context82.prev=13;_context82.t1=_context82["catch"](2);_iterator45.e(_context82.t1);case 16:_context82.prev=16;_iterator45.f();return _context82.finish(16);case 19:if(!(this.displayName!==null)){_context82.next=38;break;}_iterator46=_createForOfIteratorHelper(this.displayName);_context82.prev=21;_iterator46.s();case 23:if((_step46=_iterator46.n()).done){_context82.next=30;break;}anotherItem=_step46.value;_context82.next=27;return anotherItem;case 27:return _context82.delegateYield(anotherItem.descend(),"t2",28);case 28:_context82.next=23;break;case 30:_context82.next=35;break;case 32:_context82.prev=32;_context82.t3=_context82["catch"](21);_iterator46.e(_context82.t3);case 35:_context82.prev=35;_iterator46.f();return _context82.finish(35);case 38:if(!(this.description!==null)){_context82.next=57;break;}_iterator47=_createForOfIteratorHelper(this.description);_context82.prev=40;_iterator47.s();case 42:if((_step47=_iterator47.n()).done){_context82.next=49;break;}yetAnotherItem=_step47.value;_context82.next=46;return yetAnotherItem;case 46:return _context82.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context82.next=42;break;case 49:_context82.next=54;break;case 51:_context82.prev=51;_context82.t5=_context82["catch"](40);_iterator47.e(_context82.t5);case 54:_context82.prev=54;_iterator47.f();return _context82.finish(54);case 57:if(!(this.semanticId!==null)){_context82.next=61;break;}_context82.next=60;return this.semanticId;case 60:return _context82.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context82.next=80;break;}_iterator48=_createForOfIteratorHelper(this.supplementalSemanticIds);_context82.prev=63;_iterator48.s();case 65:if((_step48=_iterator48.n()).done){_context82.next=72;break;}yetYetAnotherItem=_step48.value;_context82.next=69;return yetYetAnotherItem;case 69:return _context82.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context82.next=65;break;case 72:_context82.next=77;break;case 74:_context82.prev=74;_context82.t8=_context82["catch"](63);_iterator48.e(_context82.t8);case 77:_context82.prev=77;_iterator48.f();return _context82.finish(77);case 80:if(!(this.qualifiers!==null)){_context82.next=99;break;}_iterator49=_createForOfIteratorHelper(this.qualifiers);_context82.prev=82;_iterator49.s();case 84:if((_step49=_iterator49.n()).done){_context82.next=91;break;}yetYetYetAnotherItem=_step49.value;_context82.next=88;return yetYetYetAnotherItem;case 88:return _context82.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context82.next=84;break;case 91:_context82.next=96;break;case 93:_context82.prev=93;_context82.t10=_context82["catch"](82);_iterator49.e(_context82.t10);case 96:_context82.prev=96;_iterator49.f();return _context82.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context82.next=118;break;}_iterator50=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context82.prev=101;_iterator50.s();case 103:if((_step50=_iterator50.n()).done){_context82.next=110;break;}yetYetYetYetAnotherItem=_step50.value;_context82.next=107;return yetYetYetYetAnotherItem;case 107:return _context82.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context82.next=103;break;case 110:_context82.next=115;break;case 112:_context82.prev=112;_context82.t12=_context82["catch"](101);_iterator50.e(_context82.t12);case 115:_context82.prev=115;_iterator50.f();return _context82.finish(115);case 118:if(!(this.value!==null)){_context82.next=137;break;}_iterator51=_createForOfIteratorHelper(this.value);_context82.prev=120;_iterator51.s();case 122:if((_step51=_iterator51.n()).done){_context82.next=129;break;}yetYetYetYetYetAnotherItem=_step51.value;_context82.next=126;return yetYetYetYetYetAnotherItem;case 126:return _context82.delegateYield(yetYetYetYetYetAnotherItem.descend(),"t13",127);case 127:_context82.next=122;break;case 129:_context82.next=134;break;case 131:_context82.prev=131;_context82.t14=_context82["catch"](120);_iterator51.e(_context82.t14);case 134:_context82.prev=134;_iterator51.f();return _context82.finish(134);case 137:if(!(this.valueId!==null)){_context82.next=141;break;}_context82.next=140;return this.valueId;case 140:return _context82.delegateYield(this.valueId.descend(),"t15",141);case 141:case"end":return _context82.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118],[120,131,134,137]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitMultiLanguageProperty(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitMultiLanguagePropertyWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformMultiLanguageProperty(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformMultiLanguagePropertyWithContext(this,context);}}]);return MultiLanguageProperty;}(Class);/**
 * A range data element is a data element that defines a range with min and max.
 */var Range=/*#__PURE__*/function(_Class14){_inherits(Range,_Class14);var _super14=_createSuper(Range);function Range(valueType){var _this14;var extensions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var idShort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var displayName=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var description=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var semanticId=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var supplementalSemanticIds=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var qualifiers=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var embeddedDataSpecifications=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var min=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;var max=arguments.length>11&&arguments[11]!==undefined?arguments[11]:null;_classCallCheck(this,Range);_this14=_super14.call(this);_this14.extensions=extensions;_this14.idShort=idShort;_this14.displayName=displayName;_this14.category=category;_this14.description=description;_this14.semanticId=semanticId;_this14.supplementalSemanticIds=supplementalSemanticIds;_this14.qualifiers=qualifiers;_this14.embeddedDataSpecifications=embeddedDataSpecifications;_this14.valueType=valueType;_this14.min=min;_this14.max=max;return _this14;}_createClass(Range,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 13;// Range
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context83){while(1)switch(_context83.prev=_context83.next){case 0:if(!(this.extensions!==null)){_context83.next=2;break;}return _context83.delegateYield(this.extensions,"t0",2);case 2:return _context83.abrupt("return");case 3:case"end":return _context83.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context84){while(1)switch(_context84.prev=_context84.next){case 0:if(!(this.displayName!==null)){_context84.next=2;break;}return _context84.delegateYield(this.displayName,"t0",2);case 2:return _context84.abrupt("return");case 3:case"end":return _context84.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context85){while(1)switch(_context85.prev=_context85.next){case 0:if(!(this.description!==null)){_context85.next=2;break;}return _context85.delegateYield(this.description,"t0",2);case 2:return _context85.abrupt("return");case 3:case"end":return _context85.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context86){while(1)switch(_context86.prev=_context86.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context86.next=2;break;}return _context86.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context86.abrupt("return");case 3:case"end":return _context86.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context87){while(1)switch(_context87.prev=_context87.next){case 0:if(!(this.qualifiers!==null)){_context87.next=2;break;}return _context87.delegateYield(this.qualifiers,"t0",2);case 2:return _context87.abrupt("return");case 3:case"end":return _context87.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context88){while(1)switch(_context88.prev=_context88.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context88.next=2;break;}return _context88.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context88.abrupt("return");case 3:case"end":return _context88.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * @returns {@link category} if set or the default value otherwise.
   */},{key:"categoryOrDefault",value:function categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context89){while(1)switch(_context89.prev=_context89.next){case 0:if(!(this.extensions!==null)){_context89.next=2;break;}return _context89.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context89.next=4;break;}return _context89.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context89.next=6;break;}return _context89.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context89.next=9;break;}_context89.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context89.next=11;break;}return _context89.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context89.next=13;break;}return _context89.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context89.next=15;break;}return _context89.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:case"end":return _context89.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator52,_step52,anItem,_iterator53,_step53,anotherItem,_iterator54,_step54,yetAnotherItem,_iterator55,_step55,yetYetAnotherItem,_iterator56,_step56,yetYetYetAnotherItem,_iterator57,_step57,yetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context90){while(1)switch(_context90.prev=_context90.next){case 0:if(!(this.extensions!==null)){_context90.next=19;break;}_iterator52=_createForOfIteratorHelper(this.extensions);_context90.prev=2;_iterator52.s();case 4:if((_step52=_iterator52.n()).done){_context90.next=11;break;}anItem=_step52.value;_context90.next=8;return anItem;case 8:return _context90.delegateYield(anItem.descend(),"t0",9);case 9:_context90.next=4;break;case 11:_context90.next=16;break;case 13:_context90.prev=13;_context90.t1=_context90["catch"](2);_iterator52.e(_context90.t1);case 16:_context90.prev=16;_iterator52.f();return _context90.finish(16);case 19:if(!(this.displayName!==null)){_context90.next=38;break;}_iterator53=_createForOfIteratorHelper(this.displayName);_context90.prev=21;_iterator53.s();case 23:if((_step53=_iterator53.n()).done){_context90.next=30;break;}anotherItem=_step53.value;_context90.next=27;return anotherItem;case 27:return _context90.delegateYield(anotherItem.descend(),"t2",28);case 28:_context90.next=23;break;case 30:_context90.next=35;break;case 32:_context90.prev=32;_context90.t3=_context90["catch"](21);_iterator53.e(_context90.t3);case 35:_context90.prev=35;_iterator53.f();return _context90.finish(35);case 38:if(!(this.description!==null)){_context90.next=57;break;}_iterator54=_createForOfIteratorHelper(this.description);_context90.prev=40;_iterator54.s();case 42:if((_step54=_iterator54.n()).done){_context90.next=49;break;}yetAnotherItem=_step54.value;_context90.next=46;return yetAnotherItem;case 46:return _context90.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context90.next=42;break;case 49:_context90.next=54;break;case 51:_context90.prev=51;_context90.t5=_context90["catch"](40);_iterator54.e(_context90.t5);case 54:_context90.prev=54;_iterator54.f();return _context90.finish(54);case 57:if(!(this.semanticId!==null)){_context90.next=61;break;}_context90.next=60;return this.semanticId;case 60:return _context90.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context90.next=80;break;}_iterator55=_createForOfIteratorHelper(this.supplementalSemanticIds);_context90.prev=63;_iterator55.s();case 65:if((_step55=_iterator55.n()).done){_context90.next=72;break;}yetYetAnotherItem=_step55.value;_context90.next=69;return yetYetAnotherItem;case 69:return _context90.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context90.next=65;break;case 72:_context90.next=77;break;case 74:_context90.prev=74;_context90.t8=_context90["catch"](63);_iterator55.e(_context90.t8);case 77:_context90.prev=77;_iterator55.f();return _context90.finish(77);case 80:if(!(this.qualifiers!==null)){_context90.next=99;break;}_iterator56=_createForOfIteratorHelper(this.qualifiers);_context90.prev=82;_iterator56.s();case 84:if((_step56=_iterator56.n()).done){_context90.next=91;break;}yetYetYetAnotherItem=_step56.value;_context90.next=88;return yetYetYetAnotherItem;case 88:return _context90.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context90.next=84;break;case 91:_context90.next=96;break;case 93:_context90.prev=93;_context90.t10=_context90["catch"](82);_iterator56.e(_context90.t10);case 96:_context90.prev=96;_iterator56.f();return _context90.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context90.next=118;break;}_iterator57=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context90.prev=101;_iterator57.s();case 103:if((_step57=_iterator57.n()).done){_context90.next=110;break;}yetYetYetYetAnotherItem=_step57.value;_context90.next=107;return yetYetYetYetAnotherItem;case 107:return _context90.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context90.next=103;break;case 110:_context90.next=115;break;case 112:_context90.prev=112;_context90.t12=_context90["catch"](101);_iterator57.e(_context90.t12);case 115:_context90.prev=115;_iterator57.f();return _context90.finish(115);case 118:case"end":return _context90.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitRange(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitRangeWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformRange(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformRangeWithContext(this,context);}}]);return Range;}(Class);/**
 * A reference element is a data element that defines a logical reference to another
 * element within the same or another AAS or a reference to an external object or
 * entity.
 */var ReferenceElement=/*#__PURE__*/function(_Class15){_inherits(ReferenceElement,_Class15);var _super15=_createSuper(ReferenceElement);function ReferenceElement(){var _this15;var extensions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var category=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var idShort=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var displayName=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var description=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var semanticId=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var supplementalSemanticIds=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var qualifiers=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var embeddedDataSpecifications=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var value=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;_classCallCheck(this,ReferenceElement);_this15=_super15.call(this);_this15.extensions=extensions;_this15.idShort=idShort;_this15.displayName=displayName;_this15.category=category;_this15.description=description;_this15.semanticId=semanticId;_this15.supplementalSemanticIds=supplementalSemanticIds;_this15.qualifiers=qualifiers;_this15.embeddedDataSpecifications=embeddedDataSpecifications;_this15.value=value;return _this15;}_createClass(ReferenceElement,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 14;// ReferenceElement
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context91){while(1)switch(_context91.prev=_context91.next){case 0:if(!(this.extensions!==null)){_context91.next=2;break;}return _context91.delegateYield(this.extensions,"t0",2);case 2:return _context91.abrupt("return");case 3:case"end":return _context91.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context92){while(1)switch(_context92.prev=_context92.next){case 0:if(!(this.displayName!==null)){_context92.next=2;break;}return _context92.delegateYield(this.displayName,"t0",2);case 2:return _context92.abrupt("return");case 3:case"end":return _context92.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context93){while(1)switch(_context93.prev=_context93.next){case 0:if(!(this.description!==null)){_context93.next=2;break;}return _context93.delegateYield(this.description,"t0",2);case 2:return _context93.abrupt("return");case 3:case"end":return _context93.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context94){while(1)switch(_context94.prev=_context94.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context94.next=2;break;}return _context94.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context94.abrupt("return");case 3:case"end":return _context94.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context95){while(1)switch(_context95.prev=_context95.next){case 0:if(!(this.qualifiers!==null)){_context95.next=2;break;}return _context95.delegateYield(this.qualifiers,"t0",2);case 2:return _context95.abrupt("return");case 3:case"end":return _context95.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context96){while(1)switch(_context96.prev=_context96.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context96.next=2;break;}return _context96.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context96.abrupt("return");case 3:case"end":return _context96.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * @returns {@link category} if set or the default value otherwise.
   */},{key:"categoryOrDefault",value:function categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context97){while(1)switch(_context97.prev=_context97.next){case 0:if(!(this.extensions!==null)){_context97.next=2;break;}return _context97.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context97.next=4;break;}return _context97.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context97.next=6;break;}return _context97.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context97.next=9;break;}_context97.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context97.next=11;break;}return _context97.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context97.next=13;break;}return _context97.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context97.next=15;break;}return _context97.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:if(!(this.value!==null)){_context97.next=18;break;}_context97.next=18;return this.value;case 18:case"end":return _context97.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator58,_step58,anItem,_iterator59,_step59,anotherItem,_iterator60,_step60,yetAnotherItem,_iterator61,_step61,yetYetAnotherItem,_iterator62,_step62,yetYetYetAnotherItem,_iterator63,_step63,yetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context98){while(1)switch(_context98.prev=_context98.next){case 0:if(!(this.extensions!==null)){_context98.next=19;break;}_iterator58=_createForOfIteratorHelper(this.extensions);_context98.prev=2;_iterator58.s();case 4:if((_step58=_iterator58.n()).done){_context98.next=11;break;}anItem=_step58.value;_context98.next=8;return anItem;case 8:return _context98.delegateYield(anItem.descend(),"t0",9);case 9:_context98.next=4;break;case 11:_context98.next=16;break;case 13:_context98.prev=13;_context98.t1=_context98["catch"](2);_iterator58.e(_context98.t1);case 16:_context98.prev=16;_iterator58.f();return _context98.finish(16);case 19:if(!(this.displayName!==null)){_context98.next=38;break;}_iterator59=_createForOfIteratorHelper(this.displayName);_context98.prev=21;_iterator59.s();case 23:if((_step59=_iterator59.n()).done){_context98.next=30;break;}anotherItem=_step59.value;_context98.next=27;return anotherItem;case 27:return _context98.delegateYield(anotherItem.descend(),"t2",28);case 28:_context98.next=23;break;case 30:_context98.next=35;break;case 32:_context98.prev=32;_context98.t3=_context98["catch"](21);_iterator59.e(_context98.t3);case 35:_context98.prev=35;_iterator59.f();return _context98.finish(35);case 38:if(!(this.description!==null)){_context98.next=57;break;}_iterator60=_createForOfIteratorHelper(this.description);_context98.prev=40;_iterator60.s();case 42:if((_step60=_iterator60.n()).done){_context98.next=49;break;}yetAnotherItem=_step60.value;_context98.next=46;return yetAnotherItem;case 46:return _context98.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context98.next=42;break;case 49:_context98.next=54;break;case 51:_context98.prev=51;_context98.t5=_context98["catch"](40);_iterator60.e(_context98.t5);case 54:_context98.prev=54;_iterator60.f();return _context98.finish(54);case 57:if(!(this.semanticId!==null)){_context98.next=61;break;}_context98.next=60;return this.semanticId;case 60:return _context98.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context98.next=80;break;}_iterator61=_createForOfIteratorHelper(this.supplementalSemanticIds);_context98.prev=63;_iterator61.s();case 65:if((_step61=_iterator61.n()).done){_context98.next=72;break;}yetYetAnotherItem=_step61.value;_context98.next=69;return yetYetAnotherItem;case 69:return _context98.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context98.next=65;break;case 72:_context98.next=77;break;case 74:_context98.prev=74;_context98.t8=_context98["catch"](63);_iterator61.e(_context98.t8);case 77:_context98.prev=77;_iterator61.f();return _context98.finish(77);case 80:if(!(this.qualifiers!==null)){_context98.next=99;break;}_iterator62=_createForOfIteratorHelper(this.qualifiers);_context98.prev=82;_iterator62.s();case 84:if((_step62=_iterator62.n()).done){_context98.next=91;break;}yetYetYetAnotherItem=_step62.value;_context98.next=88;return yetYetYetAnotherItem;case 88:return _context98.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context98.next=84;break;case 91:_context98.next=96;break;case 93:_context98.prev=93;_context98.t10=_context98["catch"](82);_iterator62.e(_context98.t10);case 96:_context98.prev=96;_iterator62.f();return _context98.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context98.next=118;break;}_iterator63=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context98.prev=101;_iterator63.s();case 103:if((_step63=_iterator63.n()).done){_context98.next=110;break;}yetYetYetYetAnotherItem=_step63.value;_context98.next=107;return yetYetYetYetAnotherItem;case 107:return _context98.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context98.next=103;break;case 110:_context98.next=115;break;case 112:_context98.prev=112;_context98.t12=_context98["catch"](101);_iterator63.e(_context98.t12);case 115:_context98.prev=115;_iterator63.f();return _context98.finish(115);case 118:if(!(this.value!==null)){_context98.next=122;break;}_context98.next=121;return this.value;case 121:return _context98.delegateYield(this.value.descend(),"t13",122);case 122:case"end":return _context98.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitReferenceElement(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitReferenceElementWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformReferenceElement(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformReferenceElementWithContext(this,context);}}]);return ReferenceElement;}(Class);/**
 * A {@link Blob} is a data element that represents a file that is contained with its
 * source code in the value attribute.
 */var Blob=/*#__PURE__*/function(_Class16){_inherits(Blob,_Class16);var _super16=_createSuper(Blob);function Blob(contentType){var _this16;var extensions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var idShort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var displayName=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var description=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var semanticId=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var supplementalSemanticIds=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var qualifiers=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var embeddedDataSpecifications=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var value=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;_classCallCheck(this,Blob);_this16=_super16.call(this);_this16.extensions=extensions;_this16.idShort=idShort;_this16.displayName=displayName;_this16.category=category;_this16.description=description;_this16.semanticId=semanticId;_this16.supplementalSemanticIds=supplementalSemanticIds;_this16.qualifiers=qualifiers;_this16.embeddedDataSpecifications=embeddedDataSpecifications;_this16.contentType=contentType;_this16.value=value;return _this16;}_createClass(Blob,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 15;// Blob
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context99){while(1)switch(_context99.prev=_context99.next){case 0:if(!(this.extensions!==null)){_context99.next=2;break;}return _context99.delegateYield(this.extensions,"t0",2);case 2:return _context99.abrupt("return");case 3:case"end":return _context99.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context100){while(1)switch(_context100.prev=_context100.next){case 0:if(!(this.displayName!==null)){_context100.next=2;break;}return _context100.delegateYield(this.displayName,"t0",2);case 2:return _context100.abrupt("return");case 3:case"end":return _context100.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context101){while(1)switch(_context101.prev=_context101.next){case 0:if(!(this.description!==null)){_context101.next=2;break;}return _context101.delegateYield(this.description,"t0",2);case 2:return _context101.abrupt("return");case 3:case"end":return _context101.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context102){while(1)switch(_context102.prev=_context102.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context102.next=2;break;}return _context102.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context102.abrupt("return");case 3:case"end":return _context102.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context103){while(1)switch(_context103.prev=_context103.next){case 0:if(!(this.qualifiers!==null)){_context103.next=2;break;}return _context103.delegateYield(this.qualifiers,"t0",2);case 2:return _context103.abrupt("return");case 3:case"end":return _context103.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context104){while(1)switch(_context104.prev=_context104.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context104.next=2;break;}return _context104.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context104.abrupt("return");case 3:case"end":return _context104.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * @returns {@link category} if set or the default value otherwise.
   */},{key:"categoryOrDefault",value:function categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context105){while(1)switch(_context105.prev=_context105.next){case 0:if(!(this.extensions!==null)){_context105.next=2;break;}return _context105.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context105.next=4;break;}return _context105.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context105.next=6;break;}return _context105.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context105.next=9;break;}_context105.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context105.next=11;break;}return _context105.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context105.next=13;break;}return _context105.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context105.next=15;break;}return _context105.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:case"end":return _context105.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator64,_step64,anItem,_iterator65,_step65,anotherItem,_iterator66,_step66,yetAnotherItem,_iterator67,_step67,yetYetAnotherItem,_iterator68,_step68,yetYetYetAnotherItem,_iterator69,_step69,yetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context106){while(1)switch(_context106.prev=_context106.next){case 0:if(!(this.extensions!==null)){_context106.next=19;break;}_iterator64=_createForOfIteratorHelper(this.extensions);_context106.prev=2;_iterator64.s();case 4:if((_step64=_iterator64.n()).done){_context106.next=11;break;}anItem=_step64.value;_context106.next=8;return anItem;case 8:return _context106.delegateYield(anItem.descend(),"t0",9);case 9:_context106.next=4;break;case 11:_context106.next=16;break;case 13:_context106.prev=13;_context106.t1=_context106["catch"](2);_iterator64.e(_context106.t1);case 16:_context106.prev=16;_iterator64.f();return _context106.finish(16);case 19:if(!(this.displayName!==null)){_context106.next=38;break;}_iterator65=_createForOfIteratorHelper(this.displayName);_context106.prev=21;_iterator65.s();case 23:if((_step65=_iterator65.n()).done){_context106.next=30;break;}anotherItem=_step65.value;_context106.next=27;return anotherItem;case 27:return _context106.delegateYield(anotherItem.descend(),"t2",28);case 28:_context106.next=23;break;case 30:_context106.next=35;break;case 32:_context106.prev=32;_context106.t3=_context106["catch"](21);_iterator65.e(_context106.t3);case 35:_context106.prev=35;_iterator65.f();return _context106.finish(35);case 38:if(!(this.description!==null)){_context106.next=57;break;}_iterator66=_createForOfIteratorHelper(this.description);_context106.prev=40;_iterator66.s();case 42:if((_step66=_iterator66.n()).done){_context106.next=49;break;}yetAnotherItem=_step66.value;_context106.next=46;return yetAnotherItem;case 46:return _context106.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context106.next=42;break;case 49:_context106.next=54;break;case 51:_context106.prev=51;_context106.t5=_context106["catch"](40);_iterator66.e(_context106.t5);case 54:_context106.prev=54;_iterator66.f();return _context106.finish(54);case 57:if(!(this.semanticId!==null)){_context106.next=61;break;}_context106.next=60;return this.semanticId;case 60:return _context106.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context106.next=80;break;}_iterator67=_createForOfIteratorHelper(this.supplementalSemanticIds);_context106.prev=63;_iterator67.s();case 65:if((_step67=_iterator67.n()).done){_context106.next=72;break;}yetYetAnotherItem=_step67.value;_context106.next=69;return yetYetAnotherItem;case 69:return _context106.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context106.next=65;break;case 72:_context106.next=77;break;case 74:_context106.prev=74;_context106.t8=_context106["catch"](63);_iterator67.e(_context106.t8);case 77:_context106.prev=77;_iterator67.f();return _context106.finish(77);case 80:if(!(this.qualifiers!==null)){_context106.next=99;break;}_iterator68=_createForOfIteratorHelper(this.qualifiers);_context106.prev=82;_iterator68.s();case 84:if((_step68=_iterator68.n()).done){_context106.next=91;break;}yetYetYetAnotherItem=_step68.value;_context106.next=88;return yetYetYetAnotherItem;case 88:return _context106.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context106.next=84;break;case 91:_context106.next=96;break;case 93:_context106.prev=93;_context106.t10=_context106["catch"](82);_iterator68.e(_context106.t10);case 96:_context106.prev=96;_iterator68.f();return _context106.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context106.next=118;break;}_iterator69=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context106.prev=101;_iterator69.s();case 103:if((_step69=_iterator69.n()).done){_context106.next=110;break;}yetYetYetYetAnotherItem=_step69.value;_context106.next=107;return yetYetYetYetAnotherItem;case 107:return _context106.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context106.next=103;break;case 110:_context106.next=115;break;case 112:_context106.prev=112;_context106.t12=_context106["catch"](101);_iterator69.e(_context106.t12);case 115:_context106.prev=115;_iterator69.f();return _context106.finish(115);case 118:case"end":return _context106.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitBlob(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitBlobWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformBlob(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformBlobWithContext(this,context);}}]);return Blob;}(Class);/**
 * A File is a data element that represents an address to a file (a locator).
 *
 * @remarks
 * The value is an URI that can represent an absolute or relative path.
 */var File=/*#__PURE__*/function(_Class17){_inherits(File,_Class17);var _super17=_createSuper(File);function File(contentType){var _this17;var extensions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var idShort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var displayName=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var description=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var semanticId=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var supplementalSemanticIds=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var qualifiers=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var embeddedDataSpecifications=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var value=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;_classCallCheck(this,File);_this17=_super17.call(this);_this17.extensions=extensions;_this17.idShort=idShort;_this17.displayName=displayName;_this17.category=category;_this17.description=description;_this17.semanticId=semanticId;_this17.supplementalSemanticIds=supplementalSemanticIds;_this17.qualifiers=qualifiers;_this17.embeddedDataSpecifications=embeddedDataSpecifications;_this17.contentType=contentType;_this17.value=value;return _this17;}_createClass(File,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 16;// File
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context107){while(1)switch(_context107.prev=_context107.next){case 0:if(!(this.extensions!==null)){_context107.next=2;break;}return _context107.delegateYield(this.extensions,"t0",2);case 2:return _context107.abrupt("return");case 3:case"end":return _context107.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context108){while(1)switch(_context108.prev=_context108.next){case 0:if(!(this.displayName!==null)){_context108.next=2;break;}return _context108.delegateYield(this.displayName,"t0",2);case 2:return _context108.abrupt("return");case 3:case"end":return _context108.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context109){while(1)switch(_context109.prev=_context109.next){case 0:if(!(this.description!==null)){_context109.next=2;break;}return _context109.delegateYield(this.description,"t0",2);case 2:return _context109.abrupt("return");case 3:case"end":return _context109.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context110){while(1)switch(_context110.prev=_context110.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context110.next=2;break;}return _context110.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context110.abrupt("return");case 3:case"end":return _context110.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context111){while(1)switch(_context111.prev=_context111.next){case 0:if(!(this.qualifiers!==null)){_context111.next=2;break;}return _context111.delegateYield(this.qualifiers,"t0",2);case 2:return _context111.abrupt("return");case 3:case"end":return _context111.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context112){while(1)switch(_context112.prev=_context112.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context112.next=2;break;}return _context112.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context112.abrupt("return");case 3:case"end":return _context112.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * @returns {@link category} if set or the default value otherwise.
   */},{key:"categoryOrDefault",value:function categoryOrDefault(){return this.category!==null?this.category:"VARIABLE";}/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context113){while(1)switch(_context113.prev=_context113.next){case 0:if(!(this.extensions!==null)){_context113.next=2;break;}return _context113.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context113.next=4;break;}return _context113.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context113.next=6;break;}return _context113.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context113.next=9;break;}_context113.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context113.next=11;break;}return _context113.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context113.next=13;break;}return _context113.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context113.next=15;break;}return _context113.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:case"end":return _context113.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator70,_step70,anItem,_iterator71,_step71,anotherItem,_iterator72,_step72,yetAnotherItem,_iterator73,_step73,yetYetAnotherItem,_iterator74,_step74,yetYetYetAnotherItem,_iterator75,_step75,yetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context114){while(1)switch(_context114.prev=_context114.next){case 0:if(!(this.extensions!==null)){_context114.next=19;break;}_iterator70=_createForOfIteratorHelper(this.extensions);_context114.prev=2;_iterator70.s();case 4:if((_step70=_iterator70.n()).done){_context114.next=11;break;}anItem=_step70.value;_context114.next=8;return anItem;case 8:return _context114.delegateYield(anItem.descend(),"t0",9);case 9:_context114.next=4;break;case 11:_context114.next=16;break;case 13:_context114.prev=13;_context114.t1=_context114["catch"](2);_iterator70.e(_context114.t1);case 16:_context114.prev=16;_iterator70.f();return _context114.finish(16);case 19:if(!(this.displayName!==null)){_context114.next=38;break;}_iterator71=_createForOfIteratorHelper(this.displayName);_context114.prev=21;_iterator71.s();case 23:if((_step71=_iterator71.n()).done){_context114.next=30;break;}anotherItem=_step71.value;_context114.next=27;return anotherItem;case 27:return _context114.delegateYield(anotherItem.descend(),"t2",28);case 28:_context114.next=23;break;case 30:_context114.next=35;break;case 32:_context114.prev=32;_context114.t3=_context114["catch"](21);_iterator71.e(_context114.t3);case 35:_context114.prev=35;_iterator71.f();return _context114.finish(35);case 38:if(!(this.description!==null)){_context114.next=57;break;}_iterator72=_createForOfIteratorHelper(this.description);_context114.prev=40;_iterator72.s();case 42:if((_step72=_iterator72.n()).done){_context114.next=49;break;}yetAnotherItem=_step72.value;_context114.next=46;return yetAnotherItem;case 46:return _context114.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context114.next=42;break;case 49:_context114.next=54;break;case 51:_context114.prev=51;_context114.t5=_context114["catch"](40);_iterator72.e(_context114.t5);case 54:_context114.prev=54;_iterator72.f();return _context114.finish(54);case 57:if(!(this.semanticId!==null)){_context114.next=61;break;}_context114.next=60;return this.semanticId;case 60:return _context114.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context114.next=80;break;}_iterator73=_createForOfIteratorHelper(this.supplementalSemanticIds);_context114.prev=63;_iterator73.s();case 65:if((_step73=_iterator73.n()).done){_context114.next=72;break;}yetYetAnotherItem=_step73.value;_context114.next=69;return yetYetAnotherItem;case 69:return _context114.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context114.next=65;break;case 72:_context114.next=77;break;case 74:_context114.prev=74;_context114.t8=_context114["catch"](63);_iterator73.e(_context114.t8);case 77:_context114.prev=77;_iterator73.f();return _context114.finish(77);case 80:if(!(this.qualifiers!==null)){_context114.next=99;break;}_iterator74=_createForOfIteratorHelper(this.qualifiers);_context114.prev=82;_iterator74.s();case 84:if((_step74=_iterator74.n()).done){_context114.next=91;break;}yetYetYetAnotherItem=_step74.value;_context114.next=88;return yetYetYetAnotherItem;case 88:return _context114.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context114.next=84;break;case 91:_context114.next=96;break;case 93:_context114.prev=93;_context114.t10=_context114["catch"](82);_iterator74.e(_context114.t10);case 96:_context114.prev=96;_iterator74.f();return _context114.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context114.next=118;break;}_iterator75=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context114.prev=101;_iterator75.s();case 103:if((_step75=_iterator75.n()).done){_context114.next=110;break;}yetYetYetYetAnotherItem=_step75.value;_context114.next=107;return yetYetYetYetAnotherItem;case 107:return _context114.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context114.next=103;break;case 110:_context114.next=115;break;case 112:_context114.prev=112;_context114.t12=_context114["catch"](101);_iterator75.e(_context114.t12);case 115:_context114.prev=115;_iterator75.f();return _context114.finish(115);case 118:case"end":return _context114.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitFile(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitFileWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformFile(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformFileWithContext(this,context);}}]);return File;}(Class);/**
 * An annotated relationship element is a relationship element that can be annotated
 * with additional data elements.
 */var AnnotatedRelationshipElement=/*#__PURE__*/function(_Class18){_inherits(AnnotatedRelationshipElement,_Class18);var _super18=_createSuper(AnnotatedRelationshipElement);function AnnotatedRelationshipElement(first,second){var _this18;var extensions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var category=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var idShort=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var displayName=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var description=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var semanticId=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var supplementalSemanticIds=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var qualifiers=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var embeddedDataSpecifications=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;var annotations=arguments.length>11&&arguments[11]!==undefined?arguments[11]:null;_classCallCheck(this,AnnotatedRelationshipElement);_this18=_super18.call(this);_this18.extensions=extensions;_this18.idShort=idShort;_this18.displayName=displayName;_this18.category=category;_this18.description=description;_this18.semanticId=semanticId;_this18.supplementalSemanticIds=supplementalSemanticIds;_this18.qualifiers=qualifiers;_this18.embeddedDataSpecifications=embeddedDataSpecifications;_this18.first=first;_this18.second=second;_this18.annotations=annotations;return _this18;}_createClass(AnnotatedRelationshipElement,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 17;// AnnotatedRelationshipElement
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context115){while(1)switch(_context115.prev=_context115.next){case 0:if(!(this.extensions!==null)){_context115.next=2;break;}return _context115.delegateYield(this.extensions,"t0",2);case 2:return _context115.abrupt("return");case 3:case"end":return _context115.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context116){while(1)switch(_context116.prev=_context116.next){case 0:if(!(this.displayName!==null)){_context116.next=2;break;}return _context116.delegateYield(this.displayName,"t0",2);case 2:return _context116.abrupt("return");case 3:case"end":return _context116.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context117){while(1)switch(_context117.prev=_context117.next){case 0:if(!(this.description!==null)){_context117.next=2;break;}return _context117.delegateYield(this.description,"t0",2);case 2:return _context117.abrupt("return");case 3:case"end":return _context117.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context118){while(1)switch(_context118.prev=_context118.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context118.next=2;break;}return _context118.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context118.abrupt("return");case 3:case"end":return _context118.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context119){while(1)switch(_context119.prev=_context119.next){case 0:if(!(this.qualifiers!==null)){_context119.next=2;break;}return _context119.delegateYield(this.qualifiers,"t0",2);case 2:return _context119.abrupt("return");case 3:case"end":return _context119.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context120){while(1)switch(_context120.prev=_context120.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context120.next=2;break;}return _context120.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context120.abrupt("return");case 3:case"end":return _context120.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Yield from {@link annotations} if it is set, or yield nothing.
   */},{key:"overAnnotationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overAnnotationsOrEmpty(){return _regeneratorRuntime().wrap(function overAnnotationsOrEmpty$(_context121){while(1)switch(_context121.prev=_context121.next){case 0:if(!(this.annotations!==null)){_context121.next=2;break;}return _context121.delegateYield(this.annotations,"t0",2);case 2:return _context121.abrupt("return");case 3:case"end":return _context121.stop();}},overAnnotationsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context122){while(1)switch(_context122.prev=_context122.next){case 0:if(!(this.extensions!==null)){_context122.next=2;break;}return _context122.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context122.next=4;break;}return _context122.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context122.next=6;break;}return _context122.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context122.next=9;break;}_context122.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context122.next=11;break;}return _context122.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context122.next=13;break;}return _context122.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context122.next=15;break;}return _context122.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:_context122.next=17;return this.first;case 17:_context122.next=19;return this.second;case 19:if(!(this.annotations!==null)){_context122.next=21;break;}return _context122.delegateYield(this.annotations,"t6",21);case 21:case"end":return _context122.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator76,_step76,anItem,_iterator77,_step77,anotherItem,_iterator78,_step78,yetAnotherItem,_iterator79,_step79,yetYetAnotherItem,_iterator80,_step80,yetYetYetAnotherItem,_iterator81,_step81,yetYetYetYetAnotherItem,_iterator82,_step82,yetYetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context123){while(1)switch(_context123.prev=_context123.next){case 0:if(!(this.extensions!==null)){_context123.next=19;break;}_iterator76=_createForOfIteratorHelper(this.extensions);_context123.prev=2;_iterator76.s();case 4:if((_step76=_iterator76.n()).done){_context123.next=11;break;}anItem=_step76.value;_context123.next=8;return anItem;case 8:return _context123.delegateYield(anItem.descend(),"t0",9);case 9:_context123.next=4;break;case 11:_context123.next=16;break;case 13:_context123.prev=13;_context123.t1=_context123["catch"](2);_iterator76.e(_context123.t1);case 16:_context123.prev=16;_iterator76.f();return _context123.finish(16);case 19:if(!(this.displayName!==null)){_context123.next=38;break;}_iterator77=_createForOfIteratorHelper(this.displayName);_context123.prev=21;_iterator77.s();case 23:if((_step77=_iterator77.n()).done){_context123.next=30;break;}anotherItem=_step77.value;_context123.next=27;return anotherItem;case 27:return _context123.delegateYield(anotherItem.descend(),"t2",28);case 28:_context123.next=23;break;case 30:_context123.next=35;break;case 32:_context123.prev=32;_context123.t3=_context123["catch"](21);_iterator77.e(_context123.t3);case 35:_context123.prev=35;_iterator77.f();return _context123.finish(35);case 38:if(!(this.description!==null)){_context123.next=57;break;}_iterator78=_createForOfIteratorHelper(this.description);_context123.prev=40;_iterator78.s();case 42:if((_step78=_iterator78.n()).done){_context123.next=49;break;}yetAnotherItem=_step78.value;_context123.next=46;return yetAnotherItem;case 46:return _context123.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context123.next=42;break;case 49:_context123.next=54;break;case 51:_context123.prev=51;_context123.t5=_context123["catch"](40);_iterator78.e(_context123.t5);case 54:_context123.prev=54;_iterator78.f();return _context123.finish(54);case 57:if(!(this.semanticId!==null)){_context123.next=61;break;}_context123.next=60;return this.semanticId;case 60:return _context123.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context123.next=80;break;}_iterator79=_createForOfIteratorHelper(this.supplementalSemanticIds);_context123.prev=63;_iterator79.s();case 65:if((_step79=_iterator79.n()).done){_context123.next=72;break;}yetYetAnotherItem=_step79.value;_context123.next=69;return yetYetAnotherItem;case 69:return _context123.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context123.next=65;break;case 72:_context123.next=77;break;case 74:_context123.prev=74;_context123.t8=_context123["catch"](63);_iterator79.e(_context123.t8);case 77:_context123.prev=77;_iterator79.f();return _context123.finish(77);case 80:if(!(this.qualifiers!==null)){_context123.next=99;break;}_iterator80=_createForOfIteratorHelper(this.qualifiers);_context123.prev=82;_iterator80.s();case 84:if((_step80=_iterator80.n()).done){_context123.next=91;break;}yetYetYetAnotherItem=_step80.value;_context123.next=88;return yetYetYetAnotherItem;case 88:return _context123.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context123.next=84;break;case 91:_context123.next=96;break;case 93:_context123.prev=93;_context123.t10=_context123["catch"](82);_iterator80.e(_context123.t10);case 96:_context123.prev=96;_iterator80.f();return _context123.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context123.next=118;break;}_iterator81=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context123.prev=101;_iterator81.s();case 103:if((_step81=_iterator81.n()).done){_context123.next=110;break;}yetYetYetYetAnotherItem=_step81.value;_context123.next=107;return yetYetYetYetAnotherItem;case 107:return _context123.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context123.next=103;break;case 110:_context123.next=115;break;case 112:_context123.prev=112;_context123.t12=_context123["catch"](101);_iterator81.e(_context123.t12);case 115:_context123.prev=115;_iterator81.f();return _context123.finish(115);case 118:_context123.next=120;return this.first;case 120:return _context123.delegateYield(this.first.descend(),"t13",121);case 121:_context123.next=123;return this.second;case 123:return _context123.delegateYield(this.second.descend(),"t14",124);case 124:if(!(this.annotations!==null)){_context123.next=143;break;}_iterator82=_createForOfIteratorHelper(this.annotations);_context123.prev=126;_iterator82.s();case 128:if((_step82=_iterator82.n()).done){_context123.next=135;break;}yetYetYetYetYetAnotherItem=_step82.value;_context123.next=132;return yetYetYetYetYetAnotherItem;case 132:return _context123.delegateYield(yetYetYetYetYetAnotherItem.descend(),"t15",133);case 133:_context123.next=128;break;case 135:_context123.next=140;break;case 137:_context123.prev=137;_context123.t16=_context123["catch"](126);_iterator82.e(_context123.t16);case 140:_context123.prev=140;_iterator82.f();return _context123.finish(140);case 143:case"end":return _context123.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118],[126,137,140,143]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitAnnotatedRelationshipElement(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitAnnotatedRelationshipElementWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformAnnotatedRelationshipElement(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformAnnotatedRelationshipElementWithContext(this,context);}}]);return AnnotatedRelationshipElement;}(Class);/**
 * An entity is a submodel element that is used to model entities.
 *
 * Constraint `AASd-014`:
 * Either the attribute {@link Entity.globalAssetId} or {@link Entity.specificAssetIds}
 * of an {@link Entity} must be set if {@link Entity.entityType} is set to
 * {@link EntityType.SelfManagedEntity}. They are not existing otherwise.
 */var Entity=/*#__PURE__*/function(_Class19){_inherits(Entity,_Class19);var _super19=_createSuper(Entity);function Entity(entityType){var _this19;var extensions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var idShort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var displayName=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var description=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var semanticId=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var supplementalSemanticIds=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var qualifiers=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var embeddedDataSpecifications=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var statements=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;var globalAssetId=arguments.length>11&&arguments[11]!==undefined?arguments[11]:null;var specificAssetIds=arguments.length>12&&arguments[12]!==undefined?arguments[12]:null;_classCallCheck(this,Entity);_this19=_super19.call(this);_this19.extensions=extensions;_this19.idShort=idShort;_this19.displayName=displayName;_this19.category=category;_this19.description=description;_this19.semanticId=semanticId;_this19.supplementalSemanticIds=supplementalSemanticIds;_this19.qualifiers=qualifiers;_this19.embeddedDataSpecifications=embeddedDataSpecifications;_this19.statements=statements;_this19.entityType=entityType;_this19.globalAssetId=globalAssetId;_this19.specificAssetIds=specificAssetIds;return _this19;}_createClass(Entity,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 18;// Entity
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context124){while(1)switch(_context124.prev=_context124.next){case 0:if(!(this.extensions!==null)){_context124.next=2;break;}return _context124.delegateYield(this.extensions,"t0",2);case 2:return _context124.abrupt("return");case 3:case"end":return _context124.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context125){while(1)switch(_context125.prev=_context125.next){case 0:if(!(this.displayName!==null)){_context125.next=2;break;}return _context125.delegateYield(this.displayName,"t0",2);case 2:return _context125.abrupt("return");case 3:case"end":return _context125.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context126){while(1)switch(_context126.prev=_context126.next){case 0:if(!(this.description!==null)){_context126.next=2;break;}return _context126.delegateYield(this.description,"t0",2);case 2:return _context126.abrupt("return");case 3:case"end":return _context126.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context127){while(1)switch(_context127.prev=_context127.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context127.next=2;break;}return _context127.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context127.abrupt("return");case 3:case"end":return _context127.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context128){while(1)switch(_context128.prev=_context128.next){case 0:if(!(this.qualifiers!==null)){_context128.next=2;break;}return _context128.delegateYield(this.qualifiers,"t0",2);case 2:return _context128.abrupt("return");case 3:case"end":return _context128.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context129){while(1)switch(_context129.prev=_context129.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context129.next=2;break;}return _context129.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context129.abrupt("return");case 3:case"end":return _context129.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Yield from {@link statements} if it is set, or yield nothing.
   */},{key:"overStatementsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overStatementsOrEmpty(){return _regeneratorRuntime().wrap(function overStatementsOrEmpty$(_context130){while(1)switch(_context130.prev=_context130.next){case 0:if(!(this.statements!==null)){_context130.next=2;break;}return _context130.delegateYield(this.statements,"t0",2);case 2:return _context130.abrupt("return");case 3:case"end":return _context130.stop();}},overStatementsOrEmpty,this);})/**
   * Yield from {@link specificAssetIds} if it is set, or yield nothing.
   */},{key:"overSpecificAssetIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSpecificAssetIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSpecificAssetIdsOrEmpty$(_context131){while(1)switch(_context131.prev=_context131.next){case 0:if(!(this.specificAssetIds!==null)){_context131.next=2;break;}return _context131.delegateYield(this.specificAssetIds,"t0",2);case 2:return _context131.abrupt("return");case 3:case"end":return _context131.stop();}},overSpecificAssetIdsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context132){while(1)switch(_context132.prev=_context132.next){case 0:if(!(this.extensions!==null)){_context132.next=2;break;}return _context132.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context132.next=4;break;}return _context132.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context132.next=6;break;}return _context132.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context132.next=9;break;}_context132.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context132.next=11;break;}return _context132.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context132.next=13;break;}return _context132.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context132.next=15;break;}return _context132.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:if(!(this.statements!==null)){_context132.next=17;break;}return _context132.delegateYield(this.statements,"t6",17);case 17:if(!(this.specificAssetIds!==null)){_context132.next=19;break;}return _context132.delegateYield(this.specificAssetIds,"t7",19);case 19:case"end":return _context132.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator83,_step83,anItem,_iterator84,_step84,anotherItem,_iterator85,_step85,yetAnotherItem,_iterator86,_step86,yetYetAnotherItem,_iterator87,_step87,yetYetYetAnotherItem,_iterator88,_step88,yetYetYetYetAnotherItem,_iterator89,_step89,yetYetYetYetYetAnotherItem,_iterator90,_step90,yetYetYetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context133){while(1)switch(_context133.prev=_context133.next){case 0:if(!(this.extensions!==null)){_context133.next=19;break;}_iterator83=_createForOfIteratorHelper(this.extensions);_context133.prev=2;_iterator83.s();case 4:if((_step83=_iterator83.n()).done){_context133.next=11;break;}anItem=_step83.value;_context133.next=8;return anItem;case 8:return _context133.delegateYield(anItem.descend(),"t0",9);case 9:_context133.next=4;break;case 11:_context133.next=16;break;case 13:_context133.prev=13;_context133.t1=_context133["catch"](2);_iterator83.e(_context133.t1);case 16:_context133.prev=16;_iterator83.f();return _context133.finish(16);case 19:if(!(this.displayName!==null)){_context133.next=38;break;}_iterator84=_createForOfIteratorHelper(this.displayName);_context133.prev=21;_iterator84.s();case 23:if((_step84=_iterator84.n()).done){_context133.next=30;break;}anotherItem=_step84.value;_context133.next=27;return anotherItem;case 27:return _context133.delegateYield(anotherItem.descend(),"t2",28);case 28:_context133.next=23;break;case 30:_context133.next=35;break;case 32:_context133.prev=32;_context133.t3=_context133["catch"](21);_iterator84.e(_context133.t3);case 35:_context133.prev=35;_iterator84.f();return _context133.finish(35);case 38:if(!(this.description!==null)){_context133.next=57;break;}_iterator85=_createForOfIteratorHelper(this.description);_context133.prev=40;_iterator85.s();case 42:if((_step85=_iterator85.n()).done){_context133.next=49;break;}yetAnotherItem=_step85.value;_context133.next=46;return yetAnotherItem;case 46:return _context133.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context133.next=42;break;case 49:_context133.next=54;break;case 51:_context133.prev=51;_context133.t5=_context133["catch"](40);_iterator85.e(_context133.t5);case 54:_context133.prev=54;_iterator85.f();return _context133.finish(54);case 57:if(!(this.semanticId!==null)){_context133.next=61;break;}_context133.next=60;return this.semanticId;case 60:return _context133.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context133.next=80;break;}_iterator86=_createForOfIteratorHelper(this.supplementalSemanticIds);_context133.prev=63;_iterator86.s();case 65:if((_step86=_iterator86.n()).done){_context133.next=72;break;}yetYetAnotherItem=_step86.value;_context133.next=69;return yetYetAnotherItem;case 69:return _context133.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context133.next=65;break;case 72:_context133.next=77;break;case 74:_context133.prev=74;_context133.t8=_context133["catch"](63);_iterator86.e(_context133.t8);case 77:_context133.prev=77;_iterator86.f();return _context133.finish(77);case 80:if(!(this.qualifiers!==null)){_context133.next=99;break;}_iterator87=_createForOfIteratorHelper(this.qualifiers);_context133.prev=82;_iterator87.s();case 84:if((_step87=_iterator87.n()).done){_context133.next=91;break;}yetYetYetAnotherItem=_step87.value;_context133.next=88;return yetYetYetAnotherItem;case 88:return _context133.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context133.next=84;break;case 91:_context133.next=96;break;case 93:_context133.prev=93;_context133.t10=_context133["catch"](82);_iterator87.e(_context133.t10);case 96:_context133.prev=96;_iterator87.f();return _context133.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context133.next=118;break;}_iterator88=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context133.prev=101;_iterator88.s();case 103:if((_step88=_iterator88.n()).done){_context133.next=110;break;}yetYetYetYetAnotherItem=_step88.value;_context133.next=107;return yetYetYetYetAnotherItem;case 107:return _context133.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context133.next=103;break;case 110:_context133.next=115;break;case 112:_context133.prev=112;_context133.t12=_context133["catch"](101);_iterator88.e(_context133.t12);case 115:_context133.prev=115;_iterator88.f();return _context133.finish(115);case 118:if(!(this.statements!==null)){_context133.next=137;break;}_iterator89=_createForOfIteratorHelper(this.statements);_context133.prev=120;_iterator89.s();case 122:if((_step89=_iterator89.n()).done){_context133.next=129;break;}yetYetYetYetYetAnotherItem=_step89.value;_context133.next=126;return yetYetYetYetYetAnotherItem;case 126:return _context133.delegateYield(yetYetYetYetYetAnotherItem.descend(),"t13",127);case 127:_context133.next=122;break;case 129:_context133.next=134;break;case 131:_context133.prev=131;_context133.t14=_context133["catch"](120);_iterator89.e(_context133.t14);case 134:_context133.prev=134;_iterator89.f();return _context133.finish(134);case 137:if(!(this.specificAssetIds!==null)){_context133.next=156;break;}_iterator90=_createForOfIteratorHelper(this.specificAssetIds);_context133.prev=139;_iterator90.s();case 141:if((_step90=_iterator90.n()).done){_context133.next=148;break;}yetYetYetYetYetYetAnotherItem=_step90.value;_context133.next=145;return yetYetYetYetYetYetAnotherItem;case 145:return _context133.delegateYield(yetYetYetYetYetYetAnotherItem.descend(),"t15",146);case 146:_context133.next=141;break;case 148:_context133.next=153;break;case 150:_context133.prev=150;_context133.t16=_context133["catch"](139);_iterator90.e(_context133.t16);case 153:_context133.prev=153;_iterator90.f();return _context133.finish(153);case 156:case"end":return _context133.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118],[120,131,134,137],[139,150,153,156]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitEntity(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitEntityWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformEntity(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformEntityWithContext(this,context);}}]);return Entity;}(Class);/**
 * Enumeration for denoting whether an entity is a self-managed entity or a co-managed
 * entity.
 */var EntityType=/*#__PURE__*/function(EntityType){EntityType[EntityType["CoManagedEntity"]=0]="CoManagedEntity";EntityType[EntityType["SelfManagedEntity"]=1]="SelfManagedEntity";return EntityType;}({});/**
 * Iterate over the literals of {@link EntityType}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overEntityType(){return _regeneratorRuntime().wrap(function overEntityType$(_context134){while(1)switch(_context134.prev=_context134.next){case 0:_context134.next=2;return 0;case 2:_context134.next=4;return 1;case 4:case"end":return _context134.stop();}},_marked6$1);}/**
 * Direction
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */var Direction=/*#__PURE__*/function(Direction){Direction[Direction["Input"]=0]="Input";Direction[Direction["Output"]=1]="Output";return Direction;}({});/**
 * Iterate over the literals of {@link Direction}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overDirection(){return _regeneratorRuntime().wrap(function overDirection$(_context135){while(1)switch(_context135.prev=_context135.next){case 0:_context135.next=2;return 0;case 2:_context135.next=4;return 1;case 4:case"end":return _context135.stop();}},_marked7$1);}/**
 * State of an event
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */var StateOfEvent=/*#__PURE__*/function(StateOfEvent){StateOfEvent[StateOfEvent["On"]=0]="On";StateOfEvent[StateOfEvent["Off"]=1]="Off";return StateOfEvent;}({});/**
 * Iterate over the literals of {@link StateOfEvent}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overStateOfEvent(){return _regeneratorRuntime().wrap(function overStateOfEvent$(_context136){while(1)switch(_context136.prev=_context136.next){case 0:_context136.next=2;return 0;case 2:_context136.next=4;return 1;case 4:case"end":return _context136.stop();}},_marked8$1);}/**
 * Defines the necessary information of an event instance sent out or received.
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */var EventPayload=/*#__PURE__*/function(_Class20){_inherits(EventPayload,_Class20);var _super20=_createSuper(EventPayload);function EventPayload(source,observableReference,timeStamp){var _this20;var sourceSemanticId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var observableSemanticId=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var topic=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var subjectId=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var payload=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;_classCallCheck(this,EventPayload);_this20=_super20.call(this);_this20.source=source;_this20.observableReference=observableReference;_this20.timeStamp=timeStamp;_this20.sourceSemanticId=sourceSemanticId;_this20.observableSemanticId=observableSemanticId;_this20.topic=topic;_this20.subjectId=subjectId;_this20.payload=payload;return _this20;}_createClass(EventPayload,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 19;// EventPayload
}/**
   * Reference to the source event element, including identification of
   * {@link AssetAdministrationShell}, {@link Submodel},
   * {@link ISubmodelElement}'s.
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context137){while(1)switch(_context137.prev=_context137.next){case 0:_context137.next=2;return this.source;case 2:if(!(this.sourceSemanticId!==null)){_context137.next=5;break;}_context137.next=5;return this.sourceSemanticId;case 5:_context137.next=7;return this.observableReference;case 7:if(!(this.observableSemanticId!==null)){_context137.next=10;break;}_context137.next=10;return this.observableSemanticId;case 10:if(!(this.subjectId!==null)){_context137.next=13;break;}_context137.next=13;return this.subjectId;case 13:case"end":return _context137.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context138){while(1)switch(_context138.prev=_context138.next){case 0:_context138.next=2;return this.source;case 2:return _context138.delegateYield(this.source.descend(),"t0",3);case 3:if(!(this.sourceSemanticId!==null)){_context138.next=7;break;}_context138.next=6;return this.sourceSemanticId;case 6:return _context138.delegateYield(this.sourceSemanticId.descend(),"t1",7);case 7:_context138.next=9;return this.observableReference;case 9:return _context138.delegateYield(this.observableReference.descend(),"t2",10);case 10:if(!(this.observableSemanticId!==null)){_context138.next=14;break;}_context138.next=13;return this.observableSemanticId;case 13:return _context138.delegateYield(this.observableSemanticId.descend(),"t3",14);case 14:if(!(this.subjectId!==null)){_context138.next=18;break;}_context138.next=17;return this.subjectId;case 17:return _context138.delegateYield(this.subjectId.descend(),"t4",18);case 18:case"end":return _context138.stop();}},descend,this);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitEventPayload(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitEventPayloadWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformEventPayload(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformEventPayloadWithContext(this,context);}}]);return EventPayload;}(Class);/**
 * An event element.
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */ // eslint-disable-next-line @typescript-eslint/no-empty-interface
/**
 * A basic event element.
 *
 * @remarks
 * **Note**:
 * This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */var BasicEventElement=/*#__PURE__*/function(_Class21){_inherits(BasicEventElement,_Class21);var _super21=_createSuper(BasicEventElement);function BasicEventElement(observed,direction,state){var _this21;var extensions=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var category=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var idShort=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var displayName=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var description=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var semanticId=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var supplementalSemanticIds=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var qualifiers=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;var embeddedDataSpecifications=arguments.length>11&&arguments[11]!==undefined?arguments[11]:null;var messageTopic=arguments.length>12&&arguments[12]!==undefined?arguments[12]:null;var messageBroker=arguments.length>13&&arguments[13]!==undefined?arguments[13]:null;var lastUpdate=arguments.length>14&&arguments[14]!==undefined?arguments[14]:null;var minInterval=arguments.length>15&&arguments[15]!==undefined?arguments[15]:null;var maxInterval=arguments.length>16&&arguments[16]!==undefined?arguments[16]:null;_classCallCheck(this,BasicEventElement);_this21=_super21.call(this);_this21.extensions=extensions;_this21.idShort=idShort;_this21.displayName=displayName;_this21.category=category;_this21.description=description;_this21.semanticId=semanticId;_this21.supplementalSemanticIds=supplementalSemanticIds;_this21.qualifiers=qualifiers;_this21.embeddedDataSpecifications=embeddedDataSpecifications;_this21.observed=observed;_this21.direction=direction;_this21.state=state;_this21.messageTopic=messageTopic;_this21.messageBroker=messageBroker;_this21.lastUpdate=lastUpdate;_this21.minInterval=minInterval;_this21.maxInterval=maxInterval;return _this21;}_createClass(BasicEventElement,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 20;// BasicEventElement
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context139){while(1)switch(_context139.prev=_context139.next){case 0:if(!(this.extensions!==null)){_context139.next=2;break;}return _context139.delegateYield(this.extensions,"t0",2);case 2:return _context139.abrupt("return");case 3:case"end":return _context139.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context140){while(1)switch(_context140.prev=_context140.next){case 0:if(!(this.displayName!==null)){_context140.next=2;break;}return _context140.delegateYield(this.displayName,"t0",2);case 2:return _context140.abrupt("return");case 3:case"end":return _context140.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context141){while(1)switch(_context141.prev=_context141.next){case 0:if(!(this.description!==null)){_context141.next=2;break;}return _context141.delegateYield(this.description,"t0",2);case 2:return _context141.abrupt("return");case 3:case"end":return _context141.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context142){while(1)switch(_context142.prev=_context142.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context142.next=2;break;}return _context142.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context142.abrupt("return");case 3:case"end":return _context142.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context143){while(1)switch(_context143.prev=_context143.next){case 0:if(!(this.qualifiers!==null)){_context143.next=2;break;}return _context143.delegateYield(this.qualifiers,"t0",2);case 2:return _context143.abrupt("return");case 3:case"end":return _context143.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context144){while(1)switch(_context144.prev=_context144.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context144.next=2;break;}return _context144.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context144.abrupt("return");case 3:case"end":return _context144.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context145){while(1)switch(_context145.prev=_context145.next){case 0:if(!(this.extensions!==null)){_context145.next=2;break;}return _context145.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context145.next=4;break;}return _context145.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context145.next=6;break;}return _context145.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context145.next=9;break;}_context145.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context145.next=11;break;}return _context145.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context145.next=13;break;}return _context145.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context145.next=15;break;}return _context145.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:_context145.next=17;return this.observed;case 17:if(!(this.messageBroker!==null)){_context145.next=20;break;}_context145.next=20;return this.messageBroker;case 20:case"end":return _context145.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator91,_step91,anItem,_iterator92,_step92,anotherItem,_iterator93,_step93,yetAnotherItem,_iterator94,_step94,yetYetAnotherItem,_iterator95,_step95,yetYetYetAnotherItem,_iterator96,_step96,yetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context146){while(1)switch(_context146.prev=_context146.next){case 0:if(!(this.extensions!==null)){_context146.next=19;break;}_iterator91=_createForOfIteratorHelper(this.extensions);_context146.prev=2;_iterator91.s();case 4:if((_step91=_iterator91.n()).done){_context146.next=11;break;}anItem=_step91.value;_context146.next=8;return anItem;case 8:return _context146.delegateYield(anItem.descend(),"t0",9);case 9:_context146.next=4;break;case 11:_context146.next=16;break;case 13:_context146.prev=13;_context146.t1=_context146["catch"](2);_iterator91.e(_context146.t1);case 16:_context146.prev=16;_iterator91.f();return _context146.finish(16);case 19:if(!(this.displayName!==null)){_context146.next=38;break;}_iterator92=_createForOfIteratorHelper(this.displayName);_context146.prev=21;_iterator92.s();case 23:if((_step92=_iterator92.n()).done){_context146.next=30;break;}anotherItem=_step92.value;_context146.next=27;return anotherItem;case 27:return _context146.delegateYield(anotherItem.descend(),"t2",28);case 28:_context146.next=23;break;case 30:_context146.next=35;break;case 32:_context146.prev=32;_context146.t3=_context146["catch"](21);_iterator92.e(_context146.t3);case 35:_context146.prev=35;_iterator92.f();return _context146.finish(35);case 38:if(!(this.description!==null)){_context146.next=57;break;}_iterator93=_createForOfIteratorHelper(this.description);_context146.prev=40;_iterator93.s();case 42:if((_step93=_iterator93.n()).done){_context146.next=49;break;}yetAnotherItem=_step93.value;_context146.next=46;return yetAnotherItem;case 46:return _context146.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context146.next=42;break;case 49:_context146.next=54;break;case 51:_context146.prev=51;_context146.t5=_context146["catch"](40);_iterator93.e(_context146.t5);case 54:_context146.prev=54;_iterator93.f();return _context146.finish(54);case 57:if(!(this.semanticId!==null)){_context146.next=61;break;}_context146.next=60;return this.semanticId;case 60:return _context146.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context146.next=80;break;}_iterator94=_createForOfIteratorHelper(this.supplementalSemanticIds);_context146.prev=63;_iterator94.s();case 65:if((_step94=_iterator94.n()).done){_context146.next=72;break;}yetYetAnotherItem=_step94.value;_context146.next=69;return yetYetAnotherItem;case 69:return _context146.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context146.next=65;break;case 72:_context146.next=77;break;case 74:_context146.prev=74;_context146.t8=_context146["catch"](63);_iterator94.e(_context146.t8);case 77:_context146.prev=77;_iterator94.f();return _context146.finish(77);case 80:if(!(this.qualifiers!==null)){_context146.next=99;break;}_iterator95=_createForOfIteratorHelper(this.qualifiers);_context146.prev=82;_iterator95.s();case 84:if((_step95=_iterator95.n()).done){_context146.next=91;break;}yetYetYetAnotherItem=_step95.value;_context146.next=88;return yetYetYetAnotherItem;case 88:return _context146.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context146.next=84;break;case 91:_context146.next=96;break;case 93:_context146.prev=93;_context146.t10=_context146["catch"](82);_iterator95.e(_context146.t10);case 96:_context146.prev=96;_iterator95.f();return _context146.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context146.next=118;break;}_iterator96=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context146.prev=101;_iterator96.s();case 103:if((_step96=_iterator96.n()).done){_context146.next=110;break;}yetYetYetYetAnotherItem=_step96.value;_context146.next=107;return yetYetYetYetAnotherItem;case 107:return _context146.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context146.next=103;break;case 110:_context146.next=115;break;case 112:_context146.prev=112;_context146.t12=_context146["catch"](101);_iterator96.e(_context146.t12);case 115:_context146.prev=115;_iterator96.f();return _context146.finish(115);case 118:_context146.next=120;return this.observed;case 120:return _context146.delegateYield(this.observed.descend(),"t13",121);case 121:if(!(this.messageBroker!==null)){_context146.next=125;break;}_context146.next=124;return this.messageBroker;case 124:return _context146.delegateYield(this.messageBroker.descend(),"t14",125);case 125:case"end":return _context146.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitBasicEventElement(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitBasicEventElementWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformBasicEventElement(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformBasicEventElementWithContext(this,context);}}]);return BasicEventElement;}(Class);/**
 * An operation is a submodel element with input and output variables.
 *
 * Constraint `AASd-134`:
 * For an {@link Operation} the {@link IReferable.idShort} of all
 * {@link OperationVariable.value}'s in
 * {@link Operation.inputVariables}, {@link Operation.outputVariables}
 * and {@link Operation.inoutputVariables} shall be unique.
 */var Operation=/*#__PURE__*/function(_Class22){_inherits(Operation,_Class22);var _super22=_createSuper(Operation);function Operation(){var _this22;var extensions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var category=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var idShort=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var displayName=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var description=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var semanticId=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var supplementalSemanticIds=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var qualifiers=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var embeddedDataSpecifications=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var inputVariables=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var outputVariables=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;var inoutputVariables=arguments.length>11&&arguments[11]!==undefined?arguments[11]:null;_classCallCheck(this,Operation);_this22=_super22.call(this);_this22.extensions=extensions;_this22.idShort=idShort;_this22.displayName=displayName;_this22.category=category;_this22.description=description;_this22.semanticId=semanticId;_this22.supplementalSemanticIds=supplementalSemanticIds;_this22.qualifiers=qualifiers;_this22.embeddedDataSpecifications=embeddedDataSpecifications;_this22.inputVariables=inputVariables;_this22.outputVariables=outputVariables;_this22.inoutputVariables=inoutputVariables;return _this22;}_createClass(Operation,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 21;// Operation
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context147){while(1)switch(_context147.prev=_context147.next){case 0:if(!(this.extensions!==null)){_context147.next=2;break;}return _context147.delegateYield(this.extensions,"t0",2);case 2:return _context147.abrupt("return");case 3:case"end":return _context147.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context148){while(1)switch(_context148.prev=_context148.next){case 0:if(!(this.displayName!==null)){_context148.next=2;break;}return _context148.delegateYield(this.displayName,"t0",2);case 2:return _context148.abrupt("return");case 3:case"end":return _context148.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context149){while(1)switch(_context149.prev=_context149.next){case 0:if(!(this.description!==null)){_context149.next=2;break;}return _context149.delegateYield(this.description,"t0",2);case 2:return _context149.abrupt("return");case 3:case"end":return _context149.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context150){while(1)switch(_context150.prev=_context150.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context150.next=2;break;}return _context150.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context150.abrupt("return");case 3:case"end":return _context150.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context151){while(1)switch(_context151.prev=_context151.next){case 0:if(!(this.qualifiers!==null)){_context151.next=2;break;}return _context151.delegateYield(this.qualifiers,"t0",2);case 2:return _context151.abrupt("return");case 3:case"end":return _context151.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context152){while(1)switch(_context152.prev=_context152.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context152.next=2;break;}return _context152.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context152.abrupt("return");case 3:case"end":return _context152.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Yield from {@link inputVariables} if it is set, or yield nothing.
   */},{key:"overInputVariablesOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overInputVariablesOrEmpty(){return _regeneratorRuntime().wrap(function overInputVariablesOrEmpty$(_context153){while(1)switch(_context153.prev=_context153.next){case 0:if(!(this.inputVariables!==null)){_context153.next=2;break;}return _context153.delegateYield(this.inputVariables,"t0",2);case 2:return _context153.abrupt("return");case 3:case"end":return _context153.stop();}},overInputVariablesOrEmpty,this);})/**
   * Yield from {@link outputVariables} if it is set, or yield nothing.
   */},{key:"overOutputVariablesOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overOutputVariablesOrEmpty(){return _regeneratorRuntime().wrap(function overOutputVariablesOrEmpty$(_context154){while(1)switch(_context154.prev=_context154.next){case 0:if(!(this.outputVariables!==null)){_context154.next=2;break;}return _context154.delegateYield(this.outputVariables,"t0",2);case 2:return _context154.abrupt("return");case 3:case"end":return _context154.stop();}},overOutputVariablesOrEmpty,this);})/**
   * Yield from {@link inoutputVariables} if it is set, or yield nothing.
   */},{key:"overInoutputVariablesOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overInoutputVariablesOrEmpty(){return _regeneratorRuntime().wrap(function overInoutputVariablesOrEmpty$(_context155){while(1)switch(_context155.prev=_context155.next){case 0:if(!(this.inoutputVariables!==null)){_context155.next=2;break;}return _context155.delegateYield(this.inoutputVariables,"t0",2);case 2:return _context155.abrupt("return");case 3:case"end":return _context155.stop();}},overInoutputVariablesOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context156){while(1)switch(_context156.prev=_context156.next){case 0:if(!(this.extensions!==null)){_context156.next=2;break;}return _context156.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context156.next=4;break;}return _context156.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context156.next=6;break;}return _context156.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context156.next=9;break;}_context156.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context156.next=11;break;}return _context156.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context156.next=13;break;}return _context156.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context156.next=15;break;}return _context156.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:if(!(this.inputVariables!==null)){_context156.next=17;break;}return _context156.delegateYield(this.inputVariables,"t6",17);case 17:if(!(this.outputVariables!==null)){_context156.next=19;break;}return _context156.delegateYield(this.outputVariables,"t7",19);case 19:if(!(this.inoutputVariables!==null)){_context156.next=21;break;}return _context156.delegateYield(this.inoutputVariables,"t8",21);case 21:case"end":return _context156.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator97,_step97,anItem,_iterator98,_step98,anotherItem,_iterator99,_step99,yetAnotherItem,_iterator100,_step100,yetYetAnotherItem,_iterator101,_step101,yetYetYetAnotherItem,_iterator102,_step102,yetYetYetYetAnotherItem,_iterator103,_step103,yetYetYetYetYetAnotherItem,_iterator104,_step104,yetYetYetYetYetYetAnotherItem,_iterator105,_step105,yetYetYetYetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context157){while(1)switch(_context157.prev=_context157.next){case 0:if(!(this.extensions!==null)){_context157.next=19;break;}_iterator97=_createForOfIteratorHelper(this.extensions);_context157.prev=2;_iterator97.s();case 4:if((_step97=_iterator97.n()).done){_context157.next=11;break;}anItem=_step97.value;_context157.next=8;return anItem;case 8:return _context157.delegateYield(anItem.descend(),"t0",9);case 9:_context157.next=4;break;case 11:_context157.next=16;break;case 13:_context157.prev=13;_context157.t1=_context157["catch"](2);_iterator97.e(_context157.t1);case 16:_context157.prev=16;_iterator97.f();return _context157.finish(16);case 19:if(!(this.displayName!==null)){_context157.next=38;break;}_iterator98=_createForOfIteratorHelper(this.displayName);_context157.prev=21;_iterator98.s();case 23:if((_step98=_iterator98.n()).done){_context157.next=30;break;}anotherItem=_step98.value;_context157.next=27;return anotherItem;case 27:return _context157.delegateYield(anotherItem.descend(),"t2",28);case 28:_context157.next=23;break;case 30:_context157.next=35;break;case 32:_context157.prev=32;_context157.t3=_context157["catch"](21);_iterator98.e(_context157.t3);case 35:_context157.prev=35;_iterator98.f();return _context157.finish(35);case 38:if(!(this.description!==null)){_context157.next=57;break;}_iterator99=_createForOfIteratorHelper(this.description);_context157.prev=40;_iterator99.s();case 42:if((_step99=_iterator99.n()).done){_context157.next=49;break;}yetAnotherItem=_step99.value;_context157.next=46;return yetAnotherItem;case 46:return _context157.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context157.next=42;break;case 49:_context157.next=54;break;case 51:_context157.prev=51;_context157.t5=_context157["catch"](40);_iterator99.e(_context157.t5);case 54:_context157.prev=54;_iterator99.f();return _context157.finish(54);case 57:if(!(this.semanticId!==null)){_context157.next=61;break;}_context157.next=60;return this.semanticId;case 60:return _context157.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context157.next=80;break;}_iterator100=_createForOfIteratorHelper(this.supplementalSemanticIds);_context157.prev=63;_iterator100.s();case 65:if((_step100=_iterator100.n()).done){_context157.next=72;break;}yetYetAnotherItem=_step100.value;_context157.next=69;return yetYetAnotherItem;case 69:return _context157.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context157.next=65;break;case 72:_context157.next=77;break;case 74:_context157.prev=74;_context157.t8=_context157["catch"](63);_iterator100.e(_context157.t8);case 77:_context157.prev=77;_iterator100.f();return _context157.finish(77);case 80:if(!(this.qualifiers!==null)){_context157.next=99;break;}_iterator101=_createForOfIteratorHelper(this.qualifiers);_context157.prev=82;_iterator101.s();case 84:if((_step101=_iterator101.n()).done){_context157.next=91;break;}yetYetYetAnotherItem=_step101.value;_context157.next=88;return yetYetYetAnotherItem;case 88:return _context157.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context157.next=84;break;case 91:_context157.next=96;break;case 93:_context157.prev=93;_context157.t10=_context157["catch"](82);_iterator101.e(_context157.t10);case 96:_context157.prev=96;_iterator101.f();return _context157.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context157.next=118;break;}_iterator102=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context157.prev=101;_iterator102.s();case 103:if((_step102=_iterator102.n()).done){_context157.next=110;break;}yetYetYetYetAnotherItem=_step102.value;_context157.next=107;return yetYetYetYetAnotherItem;case 107:return _context157.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context157.next=103;break;case 110:_context157.next=115;break;case 112:_context157.prev=112;_context157.t12=_context157["catch"](101);_iterator102.e(_context157.t12);case 115:_context157.prev=115;_iterator102.f();return _context157.finish(115);case 118:if(!(this.inputVariables!==null)){_context157.next=137;break;}_iterator103=_createForOfIteratorHelper(this.inputVariables);_context157.prev=120;_iterator103.s();case 122:if((_step103=_iterator103.n()).done){_context157.next=129;break;}yetYetYetYetYetAnotherItem=_step103.value;_context157.next=126;return yetYetYetYetYetAnotherItem;case 126:return _context157.delegateYield(yetYetYetYetYetAnotherItem.descend(),"t13",127);case 127:_context157.next=122;break;case 129:_context157.next=134;break;case 131:_context157.prev=131;_context157.t14=_context157["catch"](120);_iterator103.e(_context157.t14);case 134:_context157.prev=134;_iterator103.f();return _context157.finish(134);case 137:if(!(this.outputVariables!==null)){_context157.next=156;break;}_iterator104=_createForOfIteratorHelper(this.outputVariables);_context157.prev=139;_iterator104.s();case 141:if((_step104=_iterator104.n()).done){_context157.next=148;break;}yetYetYetYetYetYetAnotherItem=_step104.value;_context157.next=145;return yetYetYetYetYetYetAnotherItem;case 145:return _context157.delegateYield(yetYetYetYetYetYetAnotherItem.descend(),"t15",146);case 146:_context157.next=141;break;case 148:_context157.next=153;break;case 150:_context157.prev=150;_context157.t16=_context157["catch"](139);_iterator104.e(_context157.t16);case 153:_context157.prev=153;_iterator104.f();return _context157.finish(153);case 156:if(!(this.inoutputVariables!==null)){_context157.next=175;break;}_iterator105=_createForOfIteratorHelper(this.inoutputVariables);_context157.prev=158;_iterator105.s();case 160:if((_step105=_iterator105.n()).done){_context157.next=167;break;}yetYetYetYetYetYetYetAnotherItem=_step105.value;_context157.next=164;return yetYetYetYetYetYetYetAnotherItem;case 164:return _context157.delegateYield(yetYetYetYetYetYetYetAnotherItem.descend(),"t17",165);case 165:_context157.next=160;break;case 167:_context157.next=172;break;case 169:_context157.prev=169;_context157.t18=_context157["catch"](158);_iterator105.e(_context157.t18);case 172:_context157.prev=172;_iterator105.f();return _context157.finish(172);case 175:case"end":return _context157.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118],[120,131,134,137],[139,150,153,156],[158,169,172,175]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitOperation(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitOperationWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformOperation(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformOperationWithContext(this,context);}}]);return Operation;}(Class);/**
 * The value of an operation variable is a submodel element that is used as input
 * and/or output variable of an operation.
 */var OperationVariable=/*#__PURE__*/function(_Class23){_inherits(OperationVariable,_Class23);var _super23=_createSuper(OperationVariable);function OperationVariable(value){var _this23;_classCallCheck(this,OperationVariable);_this23=_super23.call(this);_this23.value=value;return _this23;}_createClass(OperationVariable,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 22;// OperationVariable
}/**
   * Describes an argument or result of an operation via a submodel element
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context158){while(1)switch(_context158.prev=_context158.next){case 0:_context158.next=2;return this.value;case 2:case"end":return _context158.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context159){while(1)switch(_context159.prev=_context159.next){case 0:_context159.next=2;return this.value;case 2:return _context159.delegateYield(this.value.descend(),"t0",3);case 3:case"end":return _context159.stop();}},descend,this);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitOperationVariable(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitOperationVariableWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformOperationVariable(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformOperationVariableWithContext(this,context);}}]);return OperationVariable;}(Class);/**
 * A capability is the implementation-independent description of the potential of an
 * asset to achieve a certain effect in the physical or virtual world.
 *
 * @remarks
 * **Note**:
 * The {@link Capability.semanticId} of a capability is typically an ontology.
 * Thus, reasoning on capabilities is enabled.
 */var Capability=/*#__PURE__*/function(_Class24){_inherits(Capability,_Class24);var _super24=_createSuper(Capability);function Capability(){var _this24;var extensions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var category=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var idShort=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var displayName=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var description=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var semanticId=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var supplementalSemanticIds=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var qualifiers=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var embeddedDataSpecifications=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;_classCallCheck(this,Capability);_this24=_super24.call(this);_this24.extensions=extensions;_this24.idShort=idShort;_this24.displayName=displayName;_this24.category=category;_this24.description=description;_this24.semanticId=semanticId;_this24.supplementalSemanticIds=supplementalSemanticIds;_this24.qualifiers=qualifiers;_this24.embeddedDataSpecifications=embeddedDataSpecifications;return _this24;}_createClass(Capability,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 23;// Capability
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context160){while(1)switch(_context160.prev=_context160.next){case 0:if(!(this.extensions!==null)){_context160.next=2;break;}return _context160.delegateYield(this.extensions,"t0",2);case 2:return _context160.abrupt("return");case 3:case"end":return _context160.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context161){while(1)switch(_context161.prev=_context161.next){case 0:if(!(this.displayName!==null)){_context161.next=2;break;}return _context161.delegateYield(this.displayName,"t0",2);case 2:return _context161.abrupt("return");case 3:case"end":return _context161.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context162){while(1)switch(_context162.prev=_context162.next){case 0:if(!(this.description!==null)){_context162.next=2;break;}return _context162.delegateYield(this.description,"t0",2);case 2:return _context162.abrupt("return");case 3:case"end":return _context162.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link supplementalSemanticIds} if it is set, or yield nothing.
   */},{key:"overSupplementalSemanticIdsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSupplementalSemanticIdsOrEmpty(){return _regeneratorRuntime().wrap(function overSupplementalSemanticIdsOrEmpty$(_context163){while(1)switch(_context163.prev=_context163.next){case 0:if(!(this.supplementalSemanticIds!==null)){_context163.next=2;break;}return _context163.delegateYield(this.supplementalSemanticIds,"t0",2);case 2:return _context163.abrupt("return");case 3:case"end":return _context163.stop();}},overSupplementalSemanticIdsOrEmpty,this);})/**
   * Yield from {@link qualifiers} if it is set, or yield nothing.
   */},{key:"overQualifiersOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overQualifiersOrEmpty(){return _regeneratorRuntime().wrap(function overQualifiersOrEmpty$(_context164){while(1)switch(_context164.prev=_context164.next){case 0:if(!(this.qualifiers!==null)){_context164.next=2;break;}return _context164.delegateYield(this.qualifiers,"t0",2);case 2:return _context164.abrupt("return");case 3:case"end":return _context164.stop();}},overQualifiersOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context165){while(1)switch(_context165.prev=_context165.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context165.next=2;break;}return _context165.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context165.abrupt("return");case 3:case"end":return _context165.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context166){while(1)switch(_context166.prev=_context166.next){case 0:if(!(this.extensions!==null)){_context166.next=2;break;}return _context166.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context166.next=4;break;}return _context166.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context166.next=6;break;}return _context166.delegateYield(this.description,"t2",6);case 6:if(!(this.semanticId!==null)){_context166.next=9;break;}_context166.next=9;return this.semanticId;case 9:if(!(this.supplementalSemanticIds!==null)){_context166.next=11;break;}return _context166.delegateYield(this.supplementalSemanticIds,"t3",11);case 11:if(!(this.qualifiers!==null)){_context166.next=13;break;}return _context166.delegateYield(this.qualifiers,"t4",13);case 13:if(!(this.embeddedDataSpecifications!==null)){_context166.next=15;break;}return _context166.delegateYield(this.embeddedDataSpecifications,"t5",15);case 15:case"end":return _context166.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator106,_step106,anItem,_iterator107,_step107,anotherItem,_iterator108,_step108,yetAnotherItem,_iterator109,_step109,yetYetAnotherItem,_iterator110,_step110,yetYetYetAnotherItem,_iterator111,_step111,yetYetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context167){while(1)switch(_context167.prev=_context167.next){case 0:if(!(this.extensions!==null)){_context167.next=19;break;}_iterator106=_createForOfIteratorHelper(this.extensions);_context167.prev=2;_iterator106.s();case 4:if((_step106=_iterator106.n()).done){_context167.next=11;break;}anItem=_step106.value;_context167.next=8;return anItem;case 8:return _context167.delegateYield(anItem.descend(),"t0",9);case 9:_context167.next=4;break;case 11:_context167.next=16;break;case 13:_context167.prev=13;_context167.t1=_context167["catch"](2);_iterator106.e(_context167.t1);case 16:_context167.prev=16;_iterator106.f();return _context167.finish(16);case 19:if(!(this.displayName!==null)){_context167.next=38;break;}_iterator107=_createForOfIteratorHelper(this.displayName);_context167.prev=21;_iterator107.s();case 23:if((_step107=_iterator107.n()).done){_context167.next=30;break;}anotherItem=_step107.value;_context167.next=27;return anotherItem;case 27:return _context167.delegateYield(anotherItem.descend(),"t2",28);case 28:_context167.next=23;break;case 30:_context167.next=35;break;case 32:_context167.prev=32;_context167.t3=_context167["catch"](21);_iterator107.e(_context167.t3);case 35:_context167.prev=35;_iterator107.f();return _context167.finish(35);case 38:if(!(this.description!==null)){_context167.next=57;break;}_iterator108=_createForOfIteratorHelper(this.description);_context167.prev=40;_iterator108.s();case 42:if((_step108=_iterator108.n()).done){_context167.next=49;break;}yetAnotherItem=_step108.value;_context167.next=46;return yetAnotherItem;case 46:return _context167.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context167.next=42;break;case 49:_context167.next=54;break;case 51:_context167.prev=51;_context167.t5=_context167["catch"](40);_iterator108.e(_context167.t5);case 54:_context167.prev=54;_iterator108.f();return _context167.finish(54);case 57:if(!(this.semanticId!==null)){_context167.next=61;break;}_context167.next=60;return this.semanticId;case 60:return _context167.delegateYield(this.semanticId.descend(),"t6",61);case 61:if(!(this.supplementalSemanticIds!==null)){_context167.next=80;break;}_iterator109=_createForOfIteratorHelper(this.supplementalSemanticIds);_context167.prev=63;_iterator109.s();case 65:if((_step109=_iterator109.n()).done){_context167.next=72;break;}yetYetAnotherItem=_step109.value;_context167.next=69;return yetYetAnotherItem;case 69:return _context167.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context167.next=65;break;case 72:_context167.next=77;break;case 74:_context167.prev=74;_context167.t8=_context167["catch"](63);_iterator109.e(_context167.t8);case 77:_context167.prev=77;_iterator109.f();return _context167.finish(77);case 80:if(!(this.qualifiers!==null)){_context167.next=99;break;}_iterator110=_createForOfIteratorHelper(this.qualifiers);_context167.prev=82;_iterator110.s();case 84:if((_step110=_iterator110.n()).done){_context167.next=91;break;}yetYetYetAnotherItem=_step110.value;_context167.next=88;return yetYetYetAnotherItem;case 88:return _context167.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context167.next=84;break;case 91:_context167.next=96;break;case 93:_context167.prev=93;_context167.t10=_context167["catch"](82);_iterator110.e(_context167.t10);case 96:_context167.prev=96;_iterator110.f();return _context167.finish(96);case 99:if(!(this.embeddedDataSpecifications!==null)){_context167.next=118;break;}_iterator111=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context167.prev=101;_iterator111.s();case 103:if((_step111=_iterator111.n()).done){_context167.next=110;break;}yetYetYetYetAnotherItem=_step111.value;_context167.next=107;return yetYetYetYetAnotherItem;case 107:return _context167.delegateYield(yetYetYetYetAnotherItem.descend(),"t11",108);case 108:_context167.next=103;break;case 110:_context167.next=115;break;case 112:_context167.prev=112;_context167.t12=_context167["catch"](101);_iterator111.e(_context167.t12);case 115:_context167.prev=115;_iterator111.f();return _context167.finish(115);case 118:case"end":return _context167.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99],[101,112,115,118]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitCapability(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitCapabilityWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformCapability(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformCapabilityWithContext(this,context);}}]);return Capability;}(Class);/**
 * The semantics of a property or other elements that may have a semantic description
 * is defined by a concept description.
 *
 * @remarks
 * The description of the concept should follow a standardized schema (realized as
 * data specification template).
 *
 * Constraint `AASc-3a-004`:
 * For a {@link ConceptDescription} with {@link ConceptDescription.category} `PROPERTY` or
 * `VALUE` using data specification IEC61360,
 * the {@link DataSpecificationIec61360.dataType} is mandatory and shall be
 * one of: `DATE`, `STRING`, `STRING_TRANSLATABLE`, `INTEGER_MEASURE`,
 * `INTEGER_COUNT`, `INTEGER_CURRENCY`, `REAL_MEASURE`, `REAL_COUNT`,
 * `REAL_CURRENCY`, `BOOLEAN`, `RATIONAL`, `RATIONAL_MEASURE`,
 * `TIME`, `TIMESTAMP`.
 *
 * **Note**:
 * Note: categories are deprecated since V3.0 of Part 1a of the document series
 * "Details of the Asset Administration Shell".
 *
 * Constraint `AASc-3a-005`:
 * For a {@link ConceptDescription} with {@link ConceptDescription.category} `REFERENCE`
 * using data specification template IEC61360,
 * the {@link DataSpecificationIec61360.dataType} shall be
 * one of: `STRING`, `IRI`, `IRDI`.
 *
 * **Note**:
 * Note: categories are deprecated since V3.0 of Part 1a of the document series
 * "Details of the Asset Administration Shell".
 *
 * Constraint `AASc-3a-006`:
 * For a {@link ConceptDescription} with {@link ConceptDescription.category} `DOCUMENT`
 * using data specification IEC61360,
 * the {@link DataSpecificationIec61360.dataType} shall be one of `FILE`,
 * `BLOB`, `HTML`
 *
 * **Note**:
 * Categories are deprecated since V3.0 of Part 1a of the document series
 * "Details of the Asset Administration Shell".
 *
 * Constraint `AASc-3a-007`:
 * For a {@link ConceptDescription} with {@link ConceptDescription.category} `QUALIFIER_TYPE`
 * using data specification IEC61360,
 * the {@link DataSpecificationIec61360.dataType} is mandatory and shall be
 * defined.
 *
 * **Note**:
 * Categories are deprecated since V3.0 of Part 1a of the document series
 * "Details of the Asset Administration Shell".
 *
 * Constraint `AASc-3a-008`:
 * For a {@link ConceptDescription} using data specification template IEC61360,
 * {@link DataSpecificationIec61360.definition} is mandatory and shall be
 * defined at least in English.
 *
 * Exception: The concept description describes a value, i.e.
 * {@link DataSpecificationIec61360.value} is defined.
 *
 * Constraint `AASc-3a-003`:
 * For a {@link ConceptDescription} using data specification template IEC61360,
 * referenced via {@link DataSpecificationIec61360.valueList}
 * {@link ValueReferencePair.valueId}
 * the {@link DataSpecificationIec61360.value} shall be set.
 */var ConceptDescription=/*#__PURE__*/function(_Class25){_inherits(ConceptDescription,_Class25);var _super25=_createSuper(ConceptDescription);function ConceptDescription(id){var _this25;var extensions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var idShort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var displayName=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var description=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var administration=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var embeddedDataSpecifications=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var isCaseOf=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;_classCallCheck(this,ConceptDescription);_this25=_super25.call(this);_this25.extensions=extensions;_this25.idShort=idShort;_this25.displayName=displayName;_this25.category=category;_this25.description=description;_this25.id=id;_this25.administration=administration;_this25.embeddedDataSpecifications=embeddedDataSpecifications;_this25.isCaseOf=isCaseOf;return _this25;}_createClass(ConceptDescription,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 24;// ConceptDescription
}/**
   * An extension of the element.
   */},{key:"overExtensionsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link extensions} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overExtensionsOrEmpty(){return _regeneratorRuntime().wrap(function overExtensionsOrEmpty$(_context168){while(1)switch(_context168.prev=_context168.next){case 0:if(!(this.extensions!==null)){_context168.next=2;break;}return _context168.delegateYield(this.extensions,"t0",2);case 2:return _context168.abrupt("return");case 3:case"end":return _context168.stop();}},overExtensionsOrEmpty,this);})/**
   * Yield from {@link displayName} if it is set, or yield nothing.
   */},{key:"overDisplayNameOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDisplayNameOrEmpty(){return _regeneratorRuntime().wrap(function overDisplayNameOrEmpty$(_context169){while(1)switch(_context169.prev=_context169.next){case 0:if(!(this.displayName!==null)){_context169.next=2;break;}return _context169.delegateYield(this.displayName,"t0",2);case 2:return _context169.abrupt("return");case 3:case"end":return _context169.stop();}},overDisplayNameOrEmpty,this);})/**
   * Yield from {@link description} if it is set, or yield nothing.
   */},{key:"overDescriptionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDescriptionOrEmpty(){return _regeneratorRuntime().wrap(function overDescriptionOrEmpty$(_context170){while(1)switch(_context170.prev=_context170.next){case 0:if(!(this.description!==null)){_context170.next=2;break;}return _context170.delegateYield(this.description,"t0",2);case 2:return _context170.abrupt("return");case 3:case"end":return _context170.stop();}},overDescriptionOrEmpty,this);})/**
   * Yield from {@link embeddedDataSpecifications} if it is set, or yield nothing.
   */},{key:"overEmbeddedDataSpecificationsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overEmbeddedDataSpecificationsOrEmpty(){return _regeneratorRuntime().wrap(function overEmbeddedDataSpecificationsOrEmpty$(_context171){while(1)switch(_context171.prev=_context171.next){case 0:if(!(this.embeddedDataSpecifications!==null)){_context171.next=2;break;}return _context171.delegateYield(this.embeddedDataSpecifications,"t0",2);case 2:return _context171.abrupt("return");case 3:case"end":return _context171.stop();}},overEmbeddedDataSpecificationsOrEmpty,this);})/**
   * Yield from {@link isCaseOf} if it is set, or yield nothing.
   */},{key:"overIsCaseOfOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overIsCaseOfOrEmpty(){return _regeneratorRuntime().wrap(function overIsCaseOfOrEmpty$(_context172){while(1)switch(_context172.prev=_context172.next){case 0:if(!(this.isCaseOf!==null)){_context172.next=2;break;}return _context172.delegateYield(this.isCaseOf,"t0",2);case 2:return _context172.abrupt("return");case 3:case"end":return _context172.stop();}},overIsCaseOfOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context173){while(1)switch(_context173.prev=_context173.next){case 0:if(!(this.extensions!==null)){_context173.next=2;break;}return _context173.delegateYield(this.extensions,"t0",2);case 2:if(!(this.displayName!==null)){_context173.next=4;break;}return _context173.delegateYield(this.displayName,"t1",4);case 4:if(!(this.description!==null)){_context173.next=6;break;}return _context173.delegateYield(this.description,"t2",6);case 6:if(!(this.administration!==null)){_context173.next=9;break;}_context173.next=9;return this.administration;case 9:if(!(this.embeddedDataSpecifications!==null)){_context173.next=11;break;}return _context173.delegateYield(this.embeddedDataSpecifications,"t3",11);case 11:if(!(this.isCaseOf!==null)){_context173.next=13;break;}return _context173.delegateYield(this.isCaseOf,"t4",13);case 13:case"end":return _context173.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator112,_step112,anItem,_iterator113,_step113,anotherItem,_iterator114,_step114,yetAnotherItem,_iterator115,_step115,yetYetAnotherItem,_iterator116,_step116,yetYetYetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context174){while(1)switch(_context174.prev=_context174.next){case 0:if(!(this.extensions!==null)){_context174.next=19;break;}_iterator112=_createForOfIteratorHelper(this.extensions);_context174.prev=2;_iterator112.s();case 4:if((_step112=_iterator112.n()).done){_context174.next=11;break;}anItem=_step112.value;_context174.next=8;return anItem;case 8:return _context174.delegateYield(anItem.descend(),"t0",9);case 9:_context174.next=4;break;case 11:_context174.next=16;break;case 13:_context174.prev=13;_context174.t1=_context174["catch"](2);_iterator112.e(_context174.t1);case 16:_context174.prev=16;_iterator112.f();return _context174.finish(16);case 19:if(!(this.displayName!==null)){_context174.next=38;break;}_iterator113=_createForOfIteratorHelper(this.displayName);_context174.prev=21;_iterator113.s();case 23:if((_step113=_iterator113.n()).done){_context174.next=30;break;}anotherItem=_step113.value;_context174.next=27;return anotherItem;case 27:return _context174.delegateYield(anotherItem.descend(),"t2",28);case 28:_context174.next=23;break;case 30:_context174.next=35;break;case 32:_context174.prev=32;_context174.t3=_context174["catch"](21);_iterator113.e(_context174.t3);case 35:_context174.prev=35;_iterator113.f();return _context174.finish(35);case 38:if(!(this.description!==null)){_context174.next=57;break;}_iterator114=_createForOfIteratorHelper(this.description);_context174.prev=40;_iterator114.s();case 42:if((_step114=_iterator114.n()).done){_context174.next=49;break;}yetAnotherItem=_step114.value;_context174.next=46;return yetAnotherItem;case 46:return _context174.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context174.next=42;break;case 49:_context174.next=54;break;case 51:_context174.prev=51;_context174.t5=_context174["catch"](40);_iterator114.e(_context174.t5);case 54:_context174.prev=54;_iterator114.f();return _context174.finish(54);case 57:if(!(this.administration!==null)){_context174.next=61;break;}_context174.next=60;return this.administration;case 60:return _context174.delegateYield(this.administration.descend(),"t6",61);case 61:if(!(this.embeddedDataSpecifications!==null)){_context174.next=80;break;}_iterator115=_createForOfIteratorHelper(this.embeddedDataSpecifications);_context174.prev=63;_iterator115.s();case 65:if((_step115=_iterator115.n()).done){_context174.next=72;break;}yetYetAnotherItem=_step115.value;_context174.next=69;return yetYetAnotherItem;case 69:return _context174.delegateYield(yetYetAnotherItem.descend(),"t7",70);case 70:_context174.next=65;break;case 72:_context174.next=77;break;case 74:_context174.prev=74;_context174.t8=_context174["catch"](63);_iterator115.e(_context174.t8);case 77:_context174.prev=77;_iterator115.f();return _context174.finish(77);case 80:if(!(this.isCaseOf!==null)){_context174.next=99;break;}_iterator116=_createForOfIteratorHelper(this.isCaseOf);_context174.prev=82;_iterator116.s();case 84:if((_step116=_iterator116.n()).done){_context174.next=91;break;}yetYetYetAnotherItem=_step116.value;_context174.next=88;return yetYetYetAnotherItem;case 88:return _context174.delegateYield(yetYetYetAnotherItem.descend(),"t9",89);case 89:_context174.next=84;break;case 91:_context174.next=96;break;case 93:_context174.prev=93;_context174.t10=_context174["catch"](82);_iterator116.e(_context174.t10);case 96:_context174.prev=96;_iterator116.f();return _context174.finish(96);case 99:case"end":return _context174.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57],[63,74,77,80],[82,93,96,99]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitConceptDescription(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitConceptDescriptionWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformConceptDescription(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformConceptDescriptionWithContext(this,context);}}]);return ConceptDescription;}(Class);/**
 * Reference types
 */var ReferenceTypes=/*#__PURE__*/function(ReferenceTypes){ReferenceTypes[ReferenceTypes["ExternalReference"]=0]="ExternalReference";ReferenceTypes[ReferenceTypes["ModelReference"]=1]="ModelReference";return ReferenceTypes;}({});/**
 * Iterate over the literals of {@link ReferenceTypes}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overReferenceTypes(){return _regeneratorRuntime().wrap(function overReferenceTypes$(_context175){while(1)switch(_context175.prev=_context175.next){case 0:_context175.next=2;return 0;case 2:_context175.next=4;return 1;case 4:case"end":return _context175.stop();}},_marked9$1);}/**
 * Reference to either a model element of the same or another AAS or to an external
 * entity.
 *
 * @remarks
 * A reference is an ordered list of keys.
 *
 * A model reference is an ordered list of keys, each key referencing an element. The
 * complete list of keys may for example be concatenated to a path that then gives
 * unique access to an element.
 *
 * An external reference is a reference to an external entity.
 *
 * Constraint `AASd-121`:
 * For {@link Reference}'s the value of {@link Key.type} of the first key of "
 * {@link Reference.keys} shall be one of {@link constants!GLOBALLY_IDENTIFIABLES}.
 *
 * Constraint `AASd-122`:
 * For external references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ExternalReference}, the value
 * of {@link Key.type} of the first key of {@link Reference.keys} shall be one of
 * {@link constants!GENERIC_GLOBALLY_IDENTIFIABLES}.
 *
 * Constraint `AASd-123`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, the value
 * of {@link Key.type} of the first key of {@link Reference.keys} shall be one of
 * {@link constants!AAS_IDENTIFIABLES}.
 *
 * Constraint `AASd-124`:
 * For external references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ExternalReference}, the last
 * key of {@link Reference.keys} shall be either one of
 * {@link constants!GENERIC_GLOBALLY_IDENTIFIABLES} or one of
 * {@link constants!GENERIC_FRAGMENT_KEYS}.
 *
 * Constraint `AASd-125`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, with more
 * than one key in {@link Reference.keys} the value of {@link Key.type}
 * of each of the keys following the first
 * key of {@link Reference.keys} shall be one of {@link constants!FRAGMENT_KEYS}.
 *
 * **Note**:
 * Constraint AASd-125 ensures that the shortest path is used.
 *
 * Constraint `AASd-126`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, with more
 * than one key in {@link Reference.keys} the value of {@link Key.type}
 * of the last key in the reference key chain may be
 * one of {@link constants!GENERIC_FRAGMENT_KEYS} or no key at all
 * shall have a value out of {@link constants!GENERIC_FRAGMENT_KEYS}.
 *
 * Constraint `AASd-127`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, with more
 * than one key in {@link Reference.keys} a key with {@link Key.type}
 * {@link KeyTypes.FragmentReference} shall be preceded by a key with
 * {@link Key.type} {@link KeyTypes.File} or {@link KeyTypes.Blob}. All other
 * AAS fragments, i.e. {@link Key.type} values
 * out of {@link constants!AAS_SUBMODEL_ELEMENTS_AS_KEYS}, do not support fragments.
 *
 * **Note**:
 * Which kind of fragments are supported depends on the content type and the
 * specification of allowed fragment identifiers for the corresponding resource
 * being referenced via the reference.
 *
 * Constraint `AASd-128`:
 * For model references, i.e. {@link Reference}'s with
 * {@link Reference.type} = {@link ReferenceTypes.ModelReference}, the
 * {@link Key.value} of a {@link Key} preceded by a {@link Key} with
 * {@link Key.type} = {@link KeyTypes.SubmodelElementList} is an integer
 * number denoting the position in the array of the submodel element list.
 */var Reference=/*#__PURE__*/function(_Class26){_inherits(Reference,_Class26);var _super26=_createSuper(Reference);function Reference(type,keys){var _this26;var referredSemanticId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck(this,Reference);_this26=_super26.call(this);_this26.type=type;_this26.keys=keys;_this26.referredSemanticId=referredSemanticId;return _this26;}_createClass(Reference,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 25;// Reference
}/**
   * Type of the reference.
   *
   * @remarks
   * Denotes, whether reference is an external reference or a model reference.
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context176){while(1)switch(_context176.prev=_context176.next){case 0:if(!(this.referredSemanticId!==null)){_context176.next=3;break;}_context176.next=3;return this.referredSemanticId;case 3:return _context176.delegateYield(this.keys,"t0",4);case 4:case"end":return _context176.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator117,_step117,anItem;return _regeneratorRuntime().wrap(function descend$(_context177){while(1)switch(_context177.prev=_context177.next){case 0:if(!(this.referredSemanticId!==null)){_context177.next=4;break;}_context177.next=3;return this.referredSemanticId;case 3:return _context177.delegateYield(this.referredSemanticId.descend(),"t0",4);case 4:_iterator117=_createForOfIteratorHelper(this.keys);_context177.prev=5;_iterator117.s();case 7:if((_step117=_iterator117.n()).done){_context177.next=14;break;}anItem=_step117.value;_context177.next=11;return anItem;case 11:return _context177.delegateYield(anItem.descend(),"t1",12);case 12:_context177.next=7;break;case 14:_context177.next=19;break;case 16:_context177.prev=16;_context177.t2=_context177["catch"](5);_iterator117.e(_context177.t2);case 19:_context177.prev=19;_iterator117.f();return _context177.finish(19);case 22:case"end":return _context177.stop();}},descend,this,[[5,16,19,22]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitReference(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitReferenceWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformReference(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformReferenceWithContext(this,context);}}]);return Reference;}(Class);/**
 * A key is a reference to an element by its ID.
 */var Key=/*#__PURE__*/function(_Class27){_inherits(Key,_Class27);var _super27=_createSuper(Key);function Key(type,value){var _this27;_classCallCheck(this,Key);_this27=_super27.call(this);_this27.type=type;_this27.value=value;return _this27;}_createClass(Key,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 26;// Key
}/**
   * Denotes which kind of entity is referenced.
   *
   * @remarks
   * In case {@link type} = {@link KeyTypes.GlobalReference},
   * the key represents a reference to a source that can be globally identified.
   *
   * In case {@link type} = {@link KeyTypes.FragmentReference} the key represents
   * a bookmark or a similar local identifier within its parent element as specified
   * by the key that precedes this key.
   *
   * In all other cases the key references a model element of the same or of another AAS.
   * The name of the model element is explicitly listed.
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context178){while(1)switch(_context178.prev=_context178.next){case 0:case"end":return _context178.stop();}},descendOnce);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context179){while(1)switch(_context179.prev=_context179.next){case 0:case"end":return _context179.stop();}},descend);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitKey(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitKeyWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformKey(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformKeyWithContext(this,context);}}]);return Key;}(Class);/**
 * Enumeration of different key value types within a key.
 */var KeyTypes=/*#__PURE__*/function(KeyTypes){KeyTypes[KeyTypes["AnnotatedRelationshipElement"]=0]="AnnotatedRelationshipElement";KeyTypes[KeyTypes["AssetAdministrationShell"]=1]="AssetAdministrationShell";KeyTypes[KeyTypes["BasicEventElement"]=2]="BasicEventElement";KeyTypes[KeyTypes["Blob"]=3]="Blob";KeyTypes[KeyTypes["Capability"]=4]="Capability";KeyTypes[KeyTypes["ConceptDescription"]=5]="ConceptDescription";KeyTypes[KeyTypes["DataElement"]=6]="DataElement";KeyTypes[KeyTypes["Entity"]=7]="Entity";KeyTypes[KeyTypes["EventElement"]=8]="EventElement";KeyTypes[KeyTypes["File"]=9]="File";KeyTypes[KeyTypes["FragmentReference"]=10]="FragmentReference";KeyTypes[KeyTypes["GlobalReference"]=11]="GlobalReference";KeyTypes[KeyTypes["Identifiable"]=12]="Identifiable";KeyTypes[KeyTypes["MultiLanguageProperty"]=13]="MultiLanguageProperty";KeyTypes[KeyTypes["Operation"]=14]="Operation";KeyTypes[KeyTypes["Property"]=15]="Property";KeyTypes[KeyTypes["Range"]=16]="Range";KeyTypes[KeyTypes["Referable"]=17]="Referable";KeyTypes[KeyTypes["ReferenceElement"]=18]="ReferenceElement";KeyTypes[KeyTypes["RelationshipElement"]=19]="RelationshipElement";KeyTypes[KeyTypes["Submodel"]=20]="Submodel";KeyTypes[KeyTypes["SubmodelElement"]=21]="SubmodelElement";KeyTypes[KeyTypes["SubmodelElementCollection"]=22]="SubmodelElementCollection";KeyTypes[KeyTypes["SubmodelElementList"]=23]="SubmodelElementList";return KeyTypes;}({});/**
 * Iterate over the literals of {@link KeyTypes}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overKeyTypes(){return _regeneratorRuntime().wrap(function overKeyTypes$(_context180){while(1)switch(_context180.prev=_context180.next){case 0:_context180.next=2;return 0;case 2:_context180.next=4;return 1;case 4:_context180.next=6;return 2;case 6:_context180.next=8;return 3;case 8:_context180.next=10;return 4;case 10:_context180.next=12;return 5;case 12:_context180.next=14;return 6;case 14:_context180.next=16;return 7;case 16:_context180.next=18;return 8;case 18:_context180.next=20;return 9;case 20:_context180.next=22;return 10;case 22:_context180.next=24;return 11;case 24:_context180.next=26;return 12;case 26:_context180.next=28;return 13;case 28:_context180.next=30;return 14;case 30:_context180.next=32;return 15;case 32:_context180.next=34;return 16;case 34:_context180.next=36;return 17;case 36:_context180.next=38;return 18;case 38:_context180.next=40;return 19;case 40:_context180.next=42;return 20;case 42:_context180.next=44;return 21;case 44:_context180.next=46;return 22;case 46:_context180.next=48;return 23;case 48:case"end":return _context180.stop();}},_marked10$1);}/**
 * Enumeration listing all XSD anySimpleTypes
 */var DataTypeDefXsd=/*#__PURE__*/function(DataTypeDefXsd){DataTypeDefXsd[DataTypeDefXsd["AnyUri"]=0]="AnyUri";DataTypeDefXsd[DataTypeDefXsd["Base64Binary"]=1]="Base64Binary";DataTypeDefXsd[DataTypeDefXsd["Boolean"]=2]="Boolean";DataTypeDefXsd[DataTypeDefXsd["Byte"]=3]="Byte";DataTypeDefXsd[DataTypeDefXsd["Date"]=4]="Date";DataTypeDefXsd[DataTypeDefXsd["DateTime"]=5]="DateTime";DataTypeDefXsd[DataTypeDefXsd["Decimal"]=6]="Decimal";DataTypeDefXsd[DataTypeDefXsd["Double"]=7]="Double";DataTypeDefXsd[DataTypeDefXsd["Duration"]=8]="Duration";DataTypeDefXsd[DataTypeDefXsd["Float"]=9]="Float";DataTypeDefXsd[DataTypeDefXsd["GDay"]=10]="GDay";DataTypeDefXsd[DataTypeDefXsd["GMonth"]=11]="GMonth";DataTypeDefXsd[DataTypeDefXsd["GMonthDay"]=12]="GMonthDay";DataTypeDefXsd[DataTypeDefXsd["GYear"]=13]="GYear";DataTypeDefXsd[DataTypeDefXsd["GYearMonth"]=14]="GYearMonth";DataTypeDefXsd[DataTypeDefXsd["HexBinary"]=15]="HexBinary";DataTypeDefXsd[DataTypeDefXsd["Int"]=16]="Int";DataTypeDefXsd[DataTypeDefXsd["Integer"]=17]="Integer";DataTypeDefXsd[DataTypeDefXsd["Long"]=18]="Long";DataTypeDefXsd[DataTypeDefXsd["NegativeInteger"]=19]="NegativeInteger";DataTypeDefXsd[DataTypeDefXsd["NonNegativeInteger"]=20]="NonNegativeInteger";DataTypeDefXsd[DataTypeDefXsd["NonPositiveInteger"]=21]="NonPositiveInteger";DataTypeDefXsd[DataTypeDefXsd["PositiveInteger"]=22]="PositiveInteger";DataTypeDefXsd[DataTypeDefXsd["Short"]=23]="Short";DataTypeDefXsd[DataTypeDefXsd["String"]=24]="String";DataTypeDefXsd[DataTypeDefXsd["Time"]=25]="Time";DataTypeDefXsd[DataTypeDefXsd["UnsignedByte"]=26]="UnsignedByte";DataTypeDefXsd[DataTypeDefXsd["UnsignedInt"]=27]="UnsignedInt";DataTypeDefXsd[DataTypeDefXsd["UnsignedLong"]=28]="UnsignedLong";DataTypeDefXsd[DataTypeDefXsd["UnsignedShort"]=29]="UnsignedShort";return DataTypeDefXsd;}({});/**
 * Iterate over the literals of {@link DataTypeDefXsd}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overDataTypeDefXsd(){return _regeneratorRuntime().wrap(function overDataTypeDefXsd$(_context181){while(1)switch(_context181.prev=_context181.next){case 0:_context181.next=2;return 0;case 2:_context181.next=4;return 1;case 4:_context181.next=6;return 2;case 6:_context181.next=8;return 3;case 8:_context181.next=10;return 4;case 10:_context181.next=12;return 5;case 12:_context181.next=14;return 6;case 14:_context181.next=16;return 7;case 16:_context181.next=18;return 8;case 18:_context181.next=20;return 9;case 20:_context181.next=22;return 10;case 22:_context181.next=24;return 11;case 24:_context181.next=26;return 12;case 26:_context181.next=28;return 13;case 28:_context181.next=30;return 14;case 30:_context181.next=32;return 15;case 32:_context181.next=34;return 16;case 34:_context181.next=36;return 17;case 36:_context181.next=38;return 18;case 38:_context181.next=40;return 19;case 40:_context181.next=42;return 20;case 42:_context181.next=44;return 21;case 44:_context181.next=46;return 22;case 46:_context181.next=48;return 23;case 48:_context181.next=50;return 24;case 50:_context181.next=52;return 25;case 52:_context181.next=54;return 26;case 54:_context181.next=56;return 27;case 56:_context181.next=58;return 28;case 58:_context181.next=60;return 29;case 60:case"end":return _context181.stop();}},_marked11$1);}/**
 * Strings with language tags
 */ /**
 * String with length 128 maximum and minimum 1 characters and with language tags
 */var LangStringNameType=/*#__PURE__*/function(_Class28){_inherits(LangStringNameType,_Class28);var _super28=_createSuper(LangStringNameType);function LangStringNameType(language,text){var _this28;_classCallCheck(this,LangStringNameType);_this28=_super28.call(this);_this28.language=language;_this28.text=text;return _this28;}_createClass(LangStringNameType,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 27;// LangStringNameType
}/**
   * Language tag conforming to BCP 47
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context182){while(1)switch(_context182.prev=_context182.next){case 0:case"end":return _context182.stop();}},descendOnce);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context183){while(1)switch(_context183.prev=_context183.next){case 0:case"end":return _context183.stop();}},descend);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitLangStringNameType(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitLangStringNameTypeWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformLangStringNameType(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformLangStringNameTypeWithContext(this,context);}}]);return LangStringNameType;}(Class);/**
 * String with length 1023 maximum and minimum 1 characters and with language tags
 */var LangStringTextType=/*#__PURE__*/function(_Class29){_inherits(LangStringTextType,_Class29);var _super29=_createSuper(LangStringTextType);function LangStringTextType(language,text){var _this29;_classCallCheck(this,LangStringTextType);_this29=_super29.call(this);_this29.language=language;_this29.text=text;return _this29;}_createClass(LangStringTextType,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 28;// LangStringTextType
}/**
   * Language tag conforming to BCP 47
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context184){while(1)switch(_context184.prev=_context184.next){case 0:case"end":return _context184.stop();}},descendOnce);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context185){while(1)switch(_context185.prev=_context185.next){case 0:case"end":return _context185.stop();}},descend);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitLangStringTextType(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitLangStringTextTypeWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformLangStringTextType(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformLangStringTextTypeWithContext(this,context);}}]);return LangStringTextType;}(Class);/**
 * Container for the sets of different identifiables.
 *
 * @remarks
 * **Note**:
 * w.r.t. file exchange: There is exactly one environment independent on how many
 * files the contained elements are split. If the file is split then there
 * shall be no element with the same identifier in two different files.
 */var Environment=/*#__PURE__*/function(_Class30){_inherits(Environment,_Class30);var _super30=_createSuper(Environment);function Environment(){var _this30;var assetAdministrationShells=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var submodels=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var conceptDescriptions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck(this,Environment);_this30=_super30.call(this);_this30.assetAdministrationShells=assetAdministrationShells;_this30.submodels=submodels;_this30.conceptDescriptions=conceptDescriptions;return _this30;}_createClass(Environment,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 29;// Environment
}/**
   * Asset administration shell
   */},{key:"overAssetAdministrationShellsOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link assetAdministrationShells} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overAssetAdministrationShellsOrEmpty(){return _regeneratorRuntime().wrap(function overAssetAdministrationShellsOrEmpty$(_context186){while(1)switch(_context186.prev=_context186.next){case 0:if(!(this.assetAdministrationShells!==null)){_context186.next=2;break;}return _context186.delegateYield(this.assetAdministrationShells,"t0",2);case 2:return _context186.abrupt("return");case 3:case"end":return _context186.stop();}},overAssetAdministrationShellsOrEmpty,this);})/**
   * Yield from {@link submodels} if it is set, or yield nothing.
   */},{key:"overSubmodelsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overSubmodelsOrEmpty(){return _regeneratorRuntime().wrap(function overSubmodelsOrEmpty$(_context187){while(1)switch(_context187.prev=_context187.next){case 0:if(!(this.submodels!==null)){_context187.next=2;break;}return _context187.delegateYield(this.submodels,"t0",2);case 2:return _context187.abrupt("return");case 3:case"end":return _context187.stop();}},overSubmodelsOrEmpty,this);})/**
   * Yield from {@link conceptDescriptions} if it is set, or yield nothing.
   */},{key:"overConceptDescriptionsOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overConceptDescriptionsOrEmpty(){return _regeneratorRuntime().wrap(function overConceptDescriptionsOrEmpty$(_context188){while(1)switch(_context188.prev=_context188.next){case 0:if(!(this.conceptDescriptions!==null)){_context188.next=2;break;}return _context188.delegateYield(this.conceptDescriptions,"t0",2);case 2:return _context188.abrupt("return");case 3:case"end":return _context188.stop();}},overConceptDescriptionsOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context189){while(1)switch(_context189.prev=_context189.next){case 0:if(!(this.assetAdministrationShells!==null)){_context189.next=2;break;}return _context189.delegateYield(this.assetAdministrationShells,"t0",2);case 2:if(!(this.submodels!==null)){_context189.next=4;break;}return _context189.delegateYield(this.submodels,"t1",4);case 4:if(!(this.conceptDescriptions!==null)){_context189.next=6;break;}return _context189.delegateYield(this.conceptDescriptions,"t2",6);case 6:case"end":return _context189.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator118,_step118,anItem,_iterator119,_step119,anotherItem,_iterator120,_step120,yetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context190){while(1)switch(_context190.prev=_context190.next){case 0:if(!(this.assetAdministrationShells!==null)){_context190.next=19;break;}_iterator118=_createForOfIteratorHelper(this.assetAdministrationShells);_context190.prev=2;_iterator118.s();case 4:if((_step118=_iterator118.n()).done){_context190.next=11;break;}anItem=_step118.value;_context190.next=8;return anItem;case 8:return _context190.delegateYield(anItem.descend(),"t0",9);case 9:_context190.next=4;break;case 11:_context190.next=16;break;case 13:_context190.prev=13;_context190.t1=_context190["catch"](2);_iterator118.e(_context190.t1);case 16:_context190.prev=16;_iterator118.f();return _context190.finish(16);case 19:if(!(this.submodels!==null)){_context190.next=38;break;}_iterator119=_createForOfIteratorHelper(this.submodels);_context190.prev=21;_iterator119.s();case 23:if((_step119=_iterator119.n()).done){_context190.next=30;break;}anotherItem=_step119.value;_context190.next=27;return anotherItem;case 27:return _context190.delegateYield(anotherItem.descend(),"t2",28);case 28:_context190.next=23;break;case 30:_context190.next=35;break;case 32:_context190.prev=32;_context190.t3=_context190["catch"](21);_iterator119.e(_context190.t3);case 35:_context190.prev=35;_iterator119.f();return _context190.finish(35);case 38:if(!(this.conceptDescriptions!==null)){_context190.next=57;break;}_iterator120=_createForOfIteratorHelper(this.conceptDescriptions);_context190.prev=40;_iterator120.s();case 42:if((_step120=_iterator120.n()).done){_context190.next=49;break;}yetAnotherItem=_step120.value;_context190.next=46;return yetAnotherItem;case 46:return _context190.delegateYield(yetAnotherItem.descend(),"t4",47);case 47:_context190.next=42;break;case 49:_context190.next=54;break;case 51:_context190.prev=51;_context190.t5=_context190["catch"](40);_iterator120.e(_context190.t5);case 54:_context190.prev=54;_iterator120.f();return _context190.finish(54);case 57:case"end":return _context190.stop();}},descend,this,[[2,13,16,19],[21,32,35,38],[40,51,54,57]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitEnvironment(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitEnvironmentWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformEnvironment(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformEnvironmentWithContext(this,context);}}]);return Environment;}(Class);/**
 * Data specification content is part of a data specification template and defines
 * which additional attributes shall be added to the element instance that references
 * the data specification template and meta information about the template itself.
 *
 * Constraint `AASc-3a-050`:
 * If the {@link DataSpecificationIec61360} is used
 * for an element, the value of
 * {@link IHasDataSpecification.embeddedDataSpecifications}
 * shall contain the global reference to the IRI of the corresponding
 * data specification template
 * https://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/3/0
 */ // eslint-disable-next-line @typescript-eslint/no-empty-interface
/**
 * Embed the content of a data specification.
 */var EmbeddedDataSpecification=/*#__PURE__*/function(_Class31){_inherits(EmbeddedDataSpecification,_Class31);var _super31=_createSuper(EmbeddedDataSpecification);function EmbeddedDataSpecification(dataSpecification,dataSpecificationContent){var _this31;_classCallCheck(this,EmbeddedDataSpecification);_this31=_super31.call(this);_this31.dataSpecification=dataSpecification;_this31.dataSpecificationContent=dataSpecificationContent;return _this31;}_createClass(EmbeddedDataSpecification,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 30;// EmbeddedDataSpecification
}/**
   * Reference to the data specification
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context191){while(1)switch(_context191.prev=_context191.next){case 0:_context191.next=2;return this.dataSpecification;case 2:_context191.next=4;return this.dataSpecificationContent;case 4:case"end":return _context191.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context192){while(1)switch(_context192.prev=_context192.next){case 0:_context192.next=2;return this.dataSpecification;case 2:return _context192.delegateYield(this.dataSpecification.descend(),"t0",3);case 3:_context192.next=5;return this.dataSpecificationContent;case 5:return _context192.delegateYield(this.dataSpecificationContent.descend(),"t1",6);case 6:case"end":return _context192.stop();}},descend,this);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitEmbeddedDataSpecification(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitEmbeddedDataSpecificationWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformEmbeddedDataSpecification(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformEmbeddedDataSpecificationWithContext(this,context);}}]);return EmbeddedDataSpecification;}(Class);var DataTypeIec61360=/*#__PURE__*/function(DataTypeIec61360){DataTypeIec61360[DataTypeIec61360["Date"]=0]="Date";DataTypeIec61360[DataTypeIec61360["String"]=1]="String";DataTypeIec61360[DataTypeIec61360["StringTranslatable"]=2]="StringTranslatable";DataTypeIec61360[DataTypeIec61360["IntegerMeasure"]=3]="IntegerMeasure";DataTypeIec61360[DataTypeIec61360["IntegerCount"]=4]="IntegerCount";DataTypeIec61360[DataTypeIec61360["IntegerCurrency"]=5]="IntegerCurrency";DataTypeIec61360[DataTypeIec61360["RealMeasure"]=6]="RealMeasure";DataTypeIec61360[DataTypeIec61360["RealCount"]=7]="RealCount";DataTypeIec61360[DataTypeIec61360["RealCurrency"]=8]="RealCurrency";DataTypeIec61360[DataTypeIec61360["Boolean"]=9]="Boolean";DataTypeIec61360[DataTypeIec61360["Iri"]=10]="Iri";DataTypeIec61360[DataTypeIec61360["Irdi"]=11]="Irdi";DataTypeIec61360[DataTypeIec61360["Rational"]=12]="Rational";DataTypeIec61360[DataTypeIec61360["RationalMeasure"]=13]="RationalMeasure";DataTypeIec61360[DataTypeIec61360["Time"]=14]="Time";DataTypeIec61360[DataTypeIec61360["Timestamp"]=15]="Timestamp";DataTypeIec61360[DataTypeIec61360["File"]=16]="File";DataTypeIec61360[DataTypeIec61360["Html"]=17]="Html";DataTypeIec61360[DataTypeIec61360["Blob"]=18]="Blob";return DataTypeIec61360;}({});/**
 * Iterate over the literals of {@link DataTypeIec61360}.
 *
 * @remark
 * TypeScript does not provide an elegant way to iterate over the literals, so
 * this function helps you avoid common errors and pitfalls.
 *
 * @return iterator over the literals
 */function overDataTypeIec61360(){return _regeneratorRuntime().wrap(function overDataTypeIec61360$(_context193){while(1)switch(_context193.prev=_context193.next){case 0:_context193.next=2;return 0;case 2:_context193.next=4;return 1;case 4:_context193.next=6;return 2;case 6:_context193.next=8;return 3;case 8:_context193.next=10;return 4;case 10:_context193.next=12;return 5;case 12:_context193.next=14;return 6;case 14:_context193.next=16;return 7;case 16:_context193.next=18;return 8;case 18:_context193.next=20;return 9;case 20:_context193.next=22;return 10;case 22:_context193.next=24;return 11;case 24:_context193.next=26;return 12;case 26:_context193.next=28;return 13;case 28:_context193.next=30;return 14;case 30:_context193.next=32;return 15;case 32:_context193.next=34;return 16;case 34:_context193.next=36;return 17;case 36:_context193.next=38;return 18;case 38:case"end":return _context193.stop();}},_marked12$1);}/**
 * Value represented by up to four variants of a numeric value in a specific role:
 * `MIN`, `NOM`, `TYP` and `MAX`. True means that the value is available,
 * false means the value is not available.
 *
 * @remarks
 * EXAMPLE from [IEC61360-1]: In the case of having a property which is
 * of the LEVEL_TYPE min/max − expressing a range − only those two values
 * need to be provided.
 *
 * **Note**:
 * This is how AAS deals with the following combinations of level types:
 *
 * * Either all attributes are false. In this case the concept is mapped
 *   to a {@link Property} and level type is ignored.
 * * At most one of the attributes is set to true. In this case
 *   the concept is mapped to a {@link Property}.
 * * Min and max are set to true. In this case the concept is mapped
 *   to a {@link Range}.
 * * More than one attribute is set to true but not min and max only
 *   (see second case). In this case the concept is mapped
 *   to a {@link SubmodelElementCollection} with the corresponding
 *   number of Properties.
 *   Example: If attribute {@link LevelType.min} and {@link LevelType.nom} are set to true
 *   then the concept is mapped to a {@link SubmodelElementCollection}
 *   with two Properties within: min and nom.
 *   The data type of both Properties is the same.
 *
 * **Note**:
 * In the cases 2. and 4. the {@link Property.semanticId} of the Property
 * or Properties within the {@link SubmodelElementCollection} needs to include
 * information about the level type. Otherwise, the semantics is not described
 * in a unique way. Please refer to the specification.
 */var LevelType=/*#__PURE__*/function(_Class32){_inherits(LevelType,_Class32);var _super32=_createSuper(LevelType);function LevelType(min,nom,typ,max){var _this32;_classCallCheck(this,LevelType);_this32=_super32.call(this);_this32.min=min;_this32.nom=nom;_this32.typ=typ;_this32.max=max;return _this32;}_createClass(LevelType,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 31;// LevelType
}/**
   * Minimum of the value
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context194){while(1)switch(_context194.prev=_context194.next){case 0:case"end":return _context194.stop();}},descendOnce);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context195){while(1)switch(_context195.prev=_context195.next){case 0:case"end":return _context195.stop();}},descend);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitLevelType(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitLevelTypeWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformLevelType(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformLevelTypeWithContext(this,context);}}]);return LevelType;}(Class);/**
 * A value reference pair within a value list. Each value has a global unique id
 * defining its semantic.
 */var ValueReferencePair=/*#__PURE__*/function(_Class33){_inherits(ValueReferencePair,_Class33);var _super33=_createSuper(ValueReferencePair);function ValueReferencePair(value,valueId){var _this33;_classCallCheck(this,ValueReferencePair);_this33=_super33.call(this);_this33.value=value;_this33.valueId=valueId;return _this33;}_createClass(ValueReferencePair,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 32;// ValueReferencePair
}/**
   * The value of the referenced concept definition of the value in {@link valueId}.
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context196){while(1)switch(_context196.prev=_context196.next){case 0:_context196.next=2;return this.valueId;case 2:case"end":return _context196.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context197){while(1)switch(_context197.prev=_context197.next){case 0:_context197.next=2;return this.valueId;case 2:return _context197.delegateYield(this.valueId.descend(),"t0",3);case 3:case"end":return _context197.stop();}},descend,this);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitValueReferencePair(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitValueReferencePairWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformValueReferencePair(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformValueReferencePairWithContext(this,context);}}]);return ValueReferencePair;}(Class);/**
 * A set of value reference pairs.
 */var ValueList=/*#__PURE__*/function(_Class34){_inherits(ValueList,_Class34);var _super34=_createSuper(ValueList);function ValueList(valueReferencePairs){var _this34;_classCallCheck(this,ValueList);_this34=_super34.call(this);_this34.valueReferencePairs=valueReferencePairs;return _this34;}_createClass(ValueList,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 33;// ValueList
}/**
   * A pair of a value together with its global unique id.
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context198){while(1)switch(_context198.prev=_context198.next){case 0:return _context198.delegateYield(this.valueReferencePairs,"t0",1);case 1:case"end":return _context198.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator121,_step121,anItem;return _regeneratorRuntime().wrap(function descend$(_context199){while(1)switch(_context199.prev=_context199.next){case 0:_iterator121=_createForOfIteratorHelper(this.valueReferencePairs);_context199.prev=1;_iterator121.s();case 3:if((_step121=_iterator121.n()).done){_context199.next=10;break;}anItem=_step121.value;_context199.next=7;return anItem;case 7:return _context199.delegateYield(anItem.descend(),"t0",8);case 8:_context199.next=3;break;case 10:_context199.next=15;break;case 12:_context199.prev=12;_context199.t1=_context199["catch"](1);_iterator121.e(_context199.t1);case 15:_context199.prev=15;_iterator121.f();return _context199.finish(15);case 18:case"end":return _context199.stop();}},descend,this,[[1,12,15,18]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitValueList(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitValueListWithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformValueList(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformValueListWithContext(this,context);}}]);return ValueList;}(Class);/**
 * String with length 255 maximum and minimum 1 characters and with language tags
 *
 * @remarks
 * **Note**:
 * It is advised to keep the length of the name limited to 35 characters.
 */var LangStringPreferredNameTypeIec61360=/*#__PURE__*/function(_Class35){_inherits(LangStringPreferredNameTypeIec61360,_Class35);var _super35=_createSuper(LangStringPreferredNameTypeIec61360);function LangStringPreferredNameTypeIec61360(language,text){var _this35;_classCallCheck(this,LangStringPreferredNameTypeIec61360);_this35=_super35.call(this);_this35.language=language;_this35.text=text;return _this35;}_createClass(LangStringPreferredNameTypeIec61360,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 34;// LangStringPreferredNameTypeIec61360
}/**
   * Language tag conforming to BCP 47
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context200){while(1)switch(_context200.prev=_context200.next){case 0:case"end":return _context200.stop();}},descendOnce);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context201){while(1)switch(_context201.prev=_context201.next){case 0:case"end":return _context201.stop();}},descend);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitLangStringPreferredNameTypeIec61360(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitLangStringPreferredNameTypeIec61360WithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformLangStringPreferredNameTypeIec61360(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformLangStringPreferredNameTypeIec61360WithContext(this,context);}}]);return LangStringPreferredNameTypeIec61360;}(Class);/**
 * String with length 18 maximum and minimum 1 characters and with language tags
 */var LangStringShortNameTypeIec61360=/*#__PURE__*/function(_Class36){_inherits(LangStringShortNameTypeIec61360,_Class36);var _super36=_createSuper(LangStringShortNameTypeIec61360);function LangStringShortNameTypeIec61360(language,text){var _this36;_classCallCheck(this,LangStringShortNameTypeIec61360);_this36=_super36.call(this);_this36.language=language;_this36.text=text;return _this36;}_createClass(LangStringShortNameTypeIec61360,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 35;// LangStringShortNameTypeIec61360
}/**
   * Language tag conforming to BCP 47
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context202){while(1)switch(_context202.prev=_context202.next){case 0:case"end":return _context202.stop();}},descendOnce);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context203){while(1)switch(_context203.prev=_context203.next){case 0:case"end":return _context203.stop();}},descend);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitLangStringShortNameTypeIec61360(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitLangStringShortNameTypeIec61360WithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformLangStringShortNameTypeIec61360(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformLangStringShortNameTypeIec61360WithContext(this,context);}}]);return LangStringShortNameTypeIec61360;}(Class);/**
 * String with length 1023 maximum and minimum 1 characters and with language tags
 */var LangStringDefinitionTypeIec61360=/*#__PURE__*/function(_Class37){_inherits(LangStringDefinitionTypeIec61360,_Class37);var _super37=_createSuper(LangStringDefinitionTypeIec61360);function LangStringDefinitionTypeIec61360(language,text){var _this37;_classCallCheck(this,LangStringDefinitionTypeIec61360);_this37=_super37.call(this);_this37.language=language;_this37.text=text;return _this37;}_createClass(LangStringDefinitionTypeIec61360,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 36;// LangStringDefinitionTypeIec61360
}/**
   * Language tag conforming to BCP 47
   */},{key:"descendOnce",value:/*#__PURE__*/ /**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context204){while(1)switch(_context204.prev=_context204.next){case 0:case"end":return _context204.stop();}},descendOnce);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){return _regeneratorRuntime().wrap(function descend$(_context205){while(1)switch(_context205.prev=_context205.next){case 0:case"end":return _context205.stop();}},descend);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitLangStringDefinitionTypeIec61360(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitLangStringDefinitionTypeIec61360WithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformLangStringDefinitionTypeIec61360(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformLangStringDefinitionTypeIec61360WithContext(this,context);}}]);return LangStringDefinitionTypeIec61360;}(Class);/**
 * Content of data specification template for concept descriptions for properties,
 * values and value lists conformant to IEC 61360.
 *
 * @remarks
 * **Note**:
 * IEC61360 requires also a globally unique identifier for a concept
 * description. This ID is not part of the data specification template.
 * Instead the {@link ConceptDescription.id} as inherited via
 * {@link IIdentifiable} is used. Same holds for administrative
 * information like the version and revision.
 *
 * **Note**:
 * {@link ConceptDescription.idShort} and {@link DataSpecificationIec61360.shortName} are very
 * similar. However, in this case the decision was to add
 * {@link DataSpecificationIec61360.shortName} explicitly to the data specification. Same holds for
 * {@link ConceptDescription.displayName} and
 * {@link DataSpecificationIec61360.preferredName}. Same holds for
 * {@link ConceptDescription.description} and {@link DataSpecificationIec61360.definition}.
 *
 * Constraint `AASc-3a-010`:
 * If {@link DataSpecificationIec61360.value} is not empty then {@link DataSpecificationIec61360.valueList} shall be empty
 * and vice versa.
 *
 * **Note**:
 * It is also possible that both {@link DataSpecificationIec61360.value} and {@link DataSpecificationIec61360.valueList} are
 * empty. This is the case for concept descriptions that define the semantics
 * of a property but do not have an enumeration ({@link DataSpecificationIec61360.valueList}) as
 * data type.
 *
 * **Note**:
 * Although it is possible to define a {@link ConceptDescription} for a
 * :attr:´value_list`,
 * it is not possible to reuse this {@link DataSpecificationIec61360.valueList}.
 * It is only possible to directly add a {@link DataSpecificationIec61360.valueList} as data type
 * to a specific semantic definition of a property.
 *
 * Constraint `AASc-3a-009`:
 * If {@link DataSpecificationIec61360.dataType} one of:
 * {@link DataTypeIec61360.IntegerMeasure},
 * {@link DataTypeIec61360.RealMeasure},
 * {@link DataTypeIec61360.RationalMeasure},
 * {@link DataTypeIec61360.IntegerCurrency},
 * {@link DataTypeIec61360.RealCurrency}, then {@link DataSpecificationIec61360.unit} or
 * {@link DataSpecificationIec61360.unitId} shall be defined.
 */var DataSpecificationIec61360=/*#__PURE__*/function(_Class38){_inherits(DataSpecificationIec61360,_Class38);var _super38=_createSuper(DataSpecificationIec61360);function DataSpecificationIec61360(preferredName){var _this38;var shortName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var unitId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var sourceOfDefinition=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var symbol=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var dataType=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var definition=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;var valueFormat=arguments.length>8&&arguments[8]!==undefined?arguments[8]:null;var valueList=arguments.length>9&&arguments[9]!==undefined?arguments[9]:null;var value=arguments.length>10&&arguments[10]!==undefined?arguments[10]:null;var levelType=arguments.length>11&&arguments[11]!==undefined?arguments[11]:null;_classCallCheck(this,DataSpecificationIec61360);_this38=_super38.call(this);_this38.preferredName=preferredName;_this38.shortName=shortName;_this38.unit=unit;_this38.unitId=unitId;_this38.sourceOfDefinition=sourceOfDefinition;_this38.symbol=symbol;_this38.dataType=dataType;_this38.definition=definition;_this38.valueFormat=valueFormat;_this38.valueList=valueList;_this38.value=value;_this38.levelType=levelType;return _this38;}_createClass(DataSpecificationIec61360,[{key:"modelType",value:/**
   * Indicate the runtime model type of the instance.
   */function modelType(){// NOTE (mristin, 2022-12-03):
// We yield numbers instead of literals to avoid name lookups on platforms
// which do not provide JIT compilation of hot paths.
return 37;// DataSpecificationIec61360
}/**
   * Preferred name
   *
   * @remarks
   * **Note**:
   * It is advised to keep the length of the name limited to 35 characters.
   *
   * Constraint `AASc-3a-002`:
   * {@link preferredName} shall be provided at least in English.
   */},{key:"overShortNameOrEmpty",value:/*#__PURE__*/ /**
   * Yield from {@link shortName} if it is set, or yield nothing.
   */_regeneratorRuntime().mark(function overShortNameOrEmpty(){return _regeneratorRuntime().wrap(function overShortNameOrEmpty$(_context206){while(1)switch(_context206.prev=_context206.next){case 0:if(!(this.shortName!==null)){_context206.next=2;break;}return _context206.delegateYield(this.shortName,"t0",2);case 2:return _context206.abrupt("return");case 3:case"end":return _context206.stop();}},overShortNameOrEmpty,this);})/**
   * Yield from {@link definition} if it is set, or yield nothing.
   */},{key:"overDefinitionOrEmpty",value:/*#__PURE__*/_regeneratorRuntime().mark(function overDefinitionOrEmpty(){return _regeneratorRuntime().wrap(function overDefinitionOrEmpty$(_context207){while(1)switch(_context207.prev=_context207.next){case 0:if(!(this.definition!==null)){_context207.next=2;break;}return _context207.delegateYield(this.definition,"t0",2);case 2:return _context207.abrupt("return");case 3:case"end":return _context207.stop();}},overDefinitionOrEmpty,this);})/**
   * Iterate over the instances referenced from this instance.
   *
   * We do not recurse into the referenced instances.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descendOnce",value:/*#__PURE__*/_regeneratorRuntime().mark(function descendOnce(){return _regeneratorRuntime().wrap(function descendOnce$(_context208){while(1)switch(_context208.prev=_context208.next){case 0:return _context208.delegateYield(this.preferredName,"t0",1);case 1:if(!(this.shortName!==null)){_context208.next=3;break;}return _context208.delegateYield(this.shortName,"t1",3);case 3:if(!(this.unitId!==null)){_context208.next=6;break;}_context208.next=6;return this.unitId;case 6:if(!(this.definition!==null)){_context208.next=8;break;}return _context208.delegateYield(this.definition,"t2",8);case 8:if(!(this.valueList!==null)){_context208.next=11;break;}_context208.next=11;return this.valueList;case 11:if(!(this.levelType!==null)){_context208.next=14;break;}_context208.next=14;return this.levelType;case 14:case"end":return _context208.stop();}},descendOnce,this);})/**
   * Iterate recursively over the instances referenced from this instance.
   *
   * @returns Iterator over the referenced instances
   */},{key:"descend",value:/*#__PURE__*/_regeneratorRuntime().mark(function descend(){var _iterator122,_step122,anItem,_iterator123,_step123,anotherItem,_iterator124,_step124,yetAnotherItem;return _regeneratorRuntime().wrap(function descend$(_context209){while(1)switch(_context209.prev=_context209.next){case 0:_iterator122=_createForOfIteratorHelper(this.preferredName);_context209.prev=1;_iterator122.s();case 3:if((_step122=_iterator122.n()).done){_context209.next=10;break;}anItem=_step122.value;_context209.next=7;return anItem;case 7:return _context209.delegateYield(anItem.descend(),"t0",8);case 8:_context209.next=3;break;case 10:_context209.next=15;break;case 12:_context209.prev=12;_context209.t1=_context209["catch"](1);_iterator122.e(_context209.t1);case 15:_context209.prev=15;_iterator122.f();return _context209.finish(15);case 18:if(!(this.shortName!==null)){_context209.next=37;break;}_iterator123=_createForOfIteratorHelper(this.shortName);_context209.prev=20;_iterator123.s();case 22:if((_step123=_iterator123.n()).done){_context209.next=29;break;}anotherItem=_step123.value;_context209.next=26;return anotherItem;case 26:return _context209.delegateYield(anotherItem.descend(),"t2",27);case 27:_context209.next=22;break;case 29:_context209.next=34;break;case 31:_context209.prev=31;_context209.t3=_context209["catch"](20);_iterator123.e(_context209.t3);case 34:_context209.prev=34;_iterator123.f();return _context209.finish(34);case 37:if(!(this.unitId!==null)){_context209.next=41;break;}_context209.next=40;return this.unitId;case 40:return _context209.delegateYield(this.unitId.descend(),"t4",41);case 41:if(!(this.definition!==null)){_context209.next=60;break;}_iterator124=_createForOfIteratorHelper(this.definition);_context209.prev=43;_iterator124.s();case 45:if((_step124=_iterator124.n()).done){_context209.next=52;break;}yetAnotherItem=_step124.value;_context209.next=49;return yetAnotherItem;case 49:return _context209.delegateYield(yetAnotherItem.descend(),"t5",50);case 50:_context209.next=45;break;case 52:_context209.next=57;break;case 54:_context209.prev=54;_context209.t6=_context209["catch"](43);_iterator124.e(_context209.t6);case 57:_context209.prev=57;_iterator124.f();return _context209.finish(57);case 60:if(!(this.valueList!==null)){_context209.next=64;break;}_context209.next=63;return this.valueList;case 63:return _context209.delegateYield(this.valueList.descend(),"t7",64);case 64:if(!(this.levelType!==null)){_context209.next=68;break;}_context209.next=67;return this.levelType;case 67:return _context209.delegateYield(this.levelType.descend(),"t8",68);case 68:case"end":return _context209.stop();}},descend,this,[[1,12,15,18],[20,31,34,37],[43,54,57,60]]);})/**
   * Dispatch `visitor` on this instance.
   *
   * @param visitor - to visit this instance
   */},{key:"accept",value:function accept(visitor){visitor.visitDataSpecificationIec61360(this);}/**
   * Dispatch `visitor` with `context` on this instance.
   *
   * @param visitor - to visit this instance
   * @param context - to be passed along to the dispatched visitor method
   * @typeParam ContextT - type of the context
   */},{key:"acceptWithContext",value:function acceptWithContext(visitor,context){visitor.visitDataSpecificationIec61360WithContext(this,context);}/**
   * Dispatch the `transformer` on this instance.
   *
   * @param transformer - to transform this instance
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   */},{key:"transform",value:function transform(transformer){return transformer.transformDataSpecificationIec61360(this);}/**
   * Dispatch the `transformer` on this instance in `context`.
   *
   * @param transformer - to transform this instance
   * @param context - to be passed along to the `transformer`
   * @returns transformation of this instance
   * @paramType T - type of the transformation result
   * @paramType ContextT - type of the transformation context
   */},{key:"transformWithContext",value:function transformWithContext(transformer,context){return transformer.transformDataSpecificationIec61360WithContext(this,context);}}]);return DataSpecificationIec61360;}(Class);/**
 * Visit the instances of the model.
 */var AbstractVisitor=/*#__PURE__*/function(){function AbstractVisitor(){_classCallCheck(this,AbstractVisitor);}_createClass(AbstractVisitor,[{key:"visit",value:/**
   * Double-dispatch on `that`.
   */function visit(that){that.accept(this);}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */}]);return AbstractVisitor;}();/**
 * Visit the instances of the model with context.
 *
 * @typeParam ContextT - type of the visitation context
 */var AbstractVisitorWithContext=/*#__PURE__*/function(){function AbstractVisitorWithContext(){_classCallCheck(this,AbstractVisitorWithContext);}_createClass(AbstractVisitorWithContext,[{key:"visitWithContext",value:/**
   * Double-dispatch on `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */function visitWithContext(that,context){that.acceptWithContext(this,context);}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */}]);return AbstractVisitorWithContext;}();/**
 * Visit the instances of the model without action.
 *
 * @remarks
 * This visitor is not meant to be directly used. Instead, you usually
 * inherit from it, and implement only the relevant visit methods.
 */var PassThroughVisitor=/*#__PURE__*/function(_AbstractVisitor){_inherits(PassThroughVisitor,_AbstractVisitor);var _super39=_createSuper(PassThroughVisitor);function PassThroughVisitor(){_classCallCheck(this,PassThroughVisitor);return _super39.apply(this,arguments);}_createClass(PassThroughVisitor,[{key:"visitExtension",value:/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */function visitExtension(that){var _iterator125=_createForOfIteratorHelper(that.descendOnce()),_step125;try{for(_iterator125.s();!(_step125=_iterator125.n()).done;){var another=_step125.value;this.visit(another);}}catch(err){_iterator125.e(err);}finally{_iterator125.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitAdministrativeInformation",value:function visitAdministrativeInformation(that){var _iterator126=_createForOfIteratorHelper(that.descendOnce()),_step126;try{for(_iterator126.s();!(_step126=_iterator126.n()).done;){var another=_step126.value;this.visit(another);}}catch(err){_iterator126.e(err);}finally{_iterator126.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitQualifier",value:function visitQualifier(that){var _iterator127=_createForOfIteratorHelper(that.descendOnce()),_step127;try{for(_iterator127.s();!(_step127=_iterator127.n()).done;){var another=_step127.value;this.visit(another);}}catch(err){_iterator127.e(err);}finally{_iterator127.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitAssetAdministrationShell",value:function visitAssetAdministrationShell(that){var _iterator128=_createForOfIteratorHelper(that.descendOnce()),_step128;try{for(_iterator128.s();!(_step128=_iterator128.n()).done;){var another=_step128.value;this.visit(another);}}catch(err){_iterator128.e(err);}finally{_iterator128.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitAssetInformation",value:function visitAssetInformation(that){var _iterator129=_createForOfIteratorHelper(that.descendOnce()),_step129;try{for(_iterator129.s();!(_step129=_iterator129.n()).done;){var another=_step129.value;this.visit(another);}}catch(err){_iterator129.e(err);}finally{_iterator129.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitResource",value:function visitResource(that){var _iterator130=_createForOfIteratorHelper(that.descendOnce()),_step130;try{for(_iterator130.s();!(_step130=_iterator130.n()).done;){var another=_step130.value;this.visit(another);}}catch(err){_iterator130.e(err);}finally{_iterator130.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitSpecificAssetId",value:function visitSpecificAssetId(that){var _iterator131=_createForOfIteratorHelper(that.descendOnce()),_step131;try{for(_iterator131.s();!(_step131=_iterator131.n()).done;){var another=_step131.value;this.visit(another);}}catch(err){_iterator131.e(err);}finally{_iterator131.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitSubmodel",value:function visitSubmodel(that){var _iterator132=_createForOfIteratorHelper(that.descendOnce()),_step132;try{for(_iterator132.s();!(_step132=_iterator132.n()).done;){var another=_step132.value;this.visit(another);}}catch(err){_iterator132.e(err);}finally{_iterator132.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitRelationshipElement",value:function visitRelationshipElement(that){var _iterator133=_createForOfIteratorHelper(that.descendOnce()),_step133;try{for(_iterator133.s();!(_step133=_iterator133.n()).done;){var another=_step133.value;this.visit(another);}}catch(err){_iterator133.e(err);}finally{_iterator133.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitSubmodelElementList",value:function visitSubmodelElementList(that){var _iterator134=_createForOfIteratorHelper(that.descendOnce()),_step134;try{for(_iterator134.s();!(_step134=_iterator134.n()).done;){var another=_step134.value;this.visit(another);}}catch(err){_iterator134.e(err);}finally{_iterator134.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitSubmodelElementCollection",value:function visitSubmodelElementCollection(that){var _iterator135=_createForOfIteratorHelper(that.descendOnce()),_step135;try{for(_iterator135.s();!(_step135=_iterator135.n()).done;){var another=_step135.value;this.visit(another);}}catch(err){_iterator135.e(err);}finally{_iterator135.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitProperty",value:function visitProperty(that){var _iterator136=_createForOfIteratorHelper(that.descendOnce()),_step136;try{for(_iterator136.s();!(_step136=_iterator136.n()).done;){var another=_step136.value;this.visit(another);}}catch(err){_iterator136.e(err);}finally{_iterator136.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitMultiLanguageProperty",value:function visitMultiLanguageProperty(that){var _iterator137=_createForOfIteratorHelper(that.descendOnce()),_step137;try{for(_iterator137.s();!(_step137=_iterator137.n()).done;){var another=_step137.value;this.visit(another);}}catch(err){_iterator137.e(err);}finally{_iterator137.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitRange",value:function visitRange(that){var _iterator138=_createForOfIteratorHelper(that.descendOnce()),_step138;try{for(_iterator138.s();!(_step138=_iterator138.n()).done;){var another=_step138.value;this.visit(another);}}catch(err){_iterator138.e(err);}finally{_iterator138.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitReferenceElement",value:function visitReferenceElement(that){var _iterator139=_createForOfIteratorHelper(that.descendOnce()),_step139;try{for(_iterator139.s();!(_step139=_iterator139.n()).done;){var another=_step139.value;this.visit(another);}}catch(err){_iterator139.e(err);}finally{_iterator139.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitBlob",value:function visitBlob(that){var _iterator140=_createForOfIteratorHelper(that.descendOnce()),_step140;try{for(_iterator140.s();!(_step140=_iterator140.n()).done;){var another=_step140.value;this.visit(another);}}catch(err){_iterator140.e(err);}finally{_iterator140.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitFile",value:function visitFile(that){var _iterator141=_createForOfIteratorHelper(that.descendOnce()),_step141;try{for(_iterator141.s();!(_step141=_iterator141.n()).done;){var another=_step141.value;this.visit(another);}}catch(err){_iterator141.e(err);}finally{_iterator141.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitAnnotatedRelationshipElement",value:function visitAnnotatedRelationshipElement(that){var _iterator142=_createForOfIteratorHelper(that.descendOnce()),_step142;try{for(_iterator142.s();!(_step142=_iterator142.n()).done;){var another=_step142.value;this.visit(another);}}catch(err){_iterator142.e(err);}finally{_iterator142.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitEntity",value:function visitEntity(that){var _iterator143=_createForOfIteratorHelper(that.descendOnce()),_step143;try{for(_iterator143.s();!(_step143=_iterator143.n()).done;){var another=_step143.value;this.visit(another);}}catch(err){_iterator143.e(err);}finally{_iterator143.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitEventPayload",value:function visitEventPayload(that){var _iterator144=_createForOfIteratorHelper(that.descendOnce()),_step144;try{for(_iterator144.s();!(_step144=_iterator144.n()).done;){var another=_step144.value;this.visit(another);}}catch(err){_iterator144.e(err);}finally{_iterator144.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitBasicEventElement",value:function visitBasicEventElement(that){var _iterator145=_createForOfIteratorHelper(that.descendOnce()),_step145;try{for(_iterator145.s();!(_step145=_iterator145.n()).done;){var another=_step145.value;this.visit(another);}}catch(err){_iterator145.e(err);}finally{_iterator145.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitOperation",value:function visitOperation(that){var _iterator146=_createForOfIteratorHelper(that.descendOnce()),_step146;try{for(_iterator146.s();!(_step146=_iterator146.n()).done;){var another=_step146.value;this.visit(another);}}catch(err){_iterator146.e(err);}finally{_iterator146.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitOperationVariable",value:function visitOperationVariable(that){var _iterator147=_createForOfIteratorHelper(that.descendOnce()),_step147;try{for(_iterator147.s();!(_step147=_iterator147.n()).done;){var another=_step147.value;this.visit(another);}}catch(err){_iterator147.e(err);}finally{_iterator147.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitCapability",value:function visitCapability(that){var _iterator148=_createForOfIteratorHelper(that.descendOnce()),_step148;try{for(_iterator148.s();!(_step148=_iterator148.n()).done;){var another=_step148.value;this.visit(another);}}catch(err){_iterator148.e(err);}finally{_iterator148.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitConceptDescription",value:function visitConceptDescription(that){var _iterator149=_createForOfIteratorHelper(that.descendOnce()),_step149;try{for(_iterator149.s();!(_step149=_iterator149.n()).done;){var another=_step149.value;this.visit(another);}}catch(err){_iterator149.e(err);}finally{_iterator149.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitReference",value:function visitReference(that){var _iterator150=_createForOfIteratorHelper(that.descendOnce()),_step150;try{for(_iterator150.s();!(_step150=_iterator150.n()).done;){var another=_step150.value;this.visit(another);}}catch(err){_iterator150.e(err);}finally{_iterator150.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitKey",value:function visitKey(that){var _iterator151=_createForOfIteratorHelper(that.descendOnce()),_step151;try{for(_iterator151.s();!(_step151=_iterator151.n()).done;){var another=_step151.value;this.visit(another);}}catch(err){_iterator151.e(err);}finally{_iterator151.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitLangStringNameType",value:function visitLangStringNameType(that){var _iterator152=_createForOfIteratorHelper(that.descendOnce()),_step152;try{for(_iterator152.s();!(_step152=_iterator152.n()).done;){var another=_step152.value;this.visit(another);}}catch(err){_iterator152.e(err);}finally{_iterator152.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitLangStringTextType",value:function visitLangStringTextType(that){var _iterator153=_createForOfIteratorHelper(that.descendOnce()),_step153;try{for(_iterator153.s();!(_step153=_iterator153.n()).done;){var another=_step153.value;this.visit(another);}}catch(err){_iterator153.e(err);}finally{_iterator153.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitEnvironment",value:function visitEnvironment(that){var _iterator154=_createForOfIteratorHelper(that.descendOnce()),_step154;try{for(_iterator154.s();!(_step154=_iterator154.n()).done;){var another=_step154.value;this.visit(another);}}catch(err){_iterator154.e(err);}finally{_iterator154.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitEmbeddedDataSpecification",value:function visitEmbeddedDataSpecification(that){var _iterator155=_createForOfIteratorHelper(that.descendOnce()),_step155;try{for(_iterator155.s();!(_step155=_iterator155.n()).done;){var another=_step155.value;this.visit(another);}}catch(err){_iterator155.e(err);}finally{_iterator155.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitLevelType",value:function visitLevelType(that){var _iterator156=_createForOfIteratorHelper(that.descendOnce()),_step156;try{for(_iterator156.s();!(_step156=_iterator156.n()).done;){var another=_step156.value;this.visit(another);}}catch(err){_iterator156.e(err);}finally{_iterator156.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitValueReferencePair",value:function visitValueReferencePair(that){var _iterator157=_createForOfIteratorHelper(that.descendOnce()),_step157;try{for(_iterator157.s();!(_step157=_iterator157.n()).done;){var another=_step157.value;this.visit(another);}}catch(err){_iterator157.e(err);}finally{_iterator157.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitValueList",value:function visitValueList(that){var _iterator158=_createForOfIteratorHelper(that.descendOnce()),_step158;try{for(_iterator158.s();!(_step158=_iterator158.n()).done;){var another=_step158.value;this.visit(another);}}catch(err){_iterator158.e(err);}finally{_iterator158.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitLangStringPreferredNameTypeIec61360",value:function visitLangStringPreferredNameTypeIec61360(that){var _iterator159=_createForOfIteratorHelper(that.descendOnce()),_step159;try{for(_iterator159.s();!(_step159=_iterator159.n()).done;){var another=_step159.value;this.visit(another);}}catch(err){_iterator159.e(err);}finally{_iterator159.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitLangStringShortNameTypeIec61360",value:function visitLangStringShortNameTypeIec61360(that){var _iterator160=_createForOfIteratorHelper(that.descendOnce()),_step160;try{for(_iterator160.s();!(_step160=_iterator160.n()).done;){var another=_step160.value;this.visit(another);}}catch(err){_iterator160.e(err);}finally{_iterator160.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitLangStringDefinitionTypeIec61360",value:function visitLangStringDefinitionTypeIec61360(that){var _iterator161=_createForOfIteratorHelper(that.descendOnce()),_step161;try{for(_iterator161.s();!(_step161=_iterator161.n()).done;){var another=_step161.value;this.visit(another);}}catch(err){_iterator161.e(err);}finally{_iterator161.f();}}/**
   * Visit `that`.
   *
   * @param that - instance to be visited
   */},{key:"visitDataSpecificationIec61360",value:function visitDataSpecificationIec61360(that){var _iterator162=_createForOfIteratorHelper(that.descendOnce()),_step162;try{for(_iterator162.s();!(_step162=_iterator162.n()).done;){var another=_step162.value;this.visit(another);}}catch(err){_iterator162.e(err);}finally{_iterator162.f();}}}]);return PassThroughVisitor;}(AbstractVisitor);/**
 * Visit the instances of the model without action and in context.
 *
 * @remarks
 * This visitor is not meant to be directly used. Instead, you usually
 * inherit from it, and implement only the relevant visit methods.
 */var PassThroughVisitorWithContext=/*#__PURE__*/function(_AbstractVisitorWithC){_inherits(PassThroughVisitorWithContext,_AbstractVisitorWithC);var _super40=_createSuper(PassThroughVisitorWithContext);function PassThroughVisitorWithContext(){_classCallCheck(this,PassThroughVisitorWithContext);return _super40.apply(this,arguments);}_createClass(PassThroughVisitorWithContext,[{key:"visitWithContext",value:/**
   * Double-dispatch on `that` in `context`.
   */function visitWithContext(that,context){that.acceptWithContext(this,context);}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitExtensionWithContext",value:function visitExtensionWithContext(that,context){var _iterator163=_createForOfIteratorHelper(that.descendOnce()),_step163;try{for(_iterator163.s();!(_step163=_iterator163.n()).done;){var another=_step163.value;this.visitWithContext(another,context);}}catch(err){_iterator163.e(err);}finally{_iterator163.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitAdministrativeInformationWithContext",value:function visitAdministrativeInformationWithContext(that,context){var _iterator164=_createForOfIteratorHelper(that.descendOnce()),_step164;try{for(_iterator164.s();!(_step164=_iterator164.n()).done;){var another=_step164.value;this.visitWithContext(another,context);}}catch(err){_iterator164.e(err);}finally{_iterator164.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitQualifierWithContext",value:function visitQualifierWithContext(that,context){var _iterator165=_createForOfIteratorHelper(that.descendOnce()),_step165;try{for(_iterator165.s();!(_step165=_iterator165.n()).done;){var another=_step165.value;this.visitWithContext(another,context);}}catch(err){_iterator165.e(err);}finally{_iterator165.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitAssetAdministrationShellWithContext",value:function visitAssetAdministrationShellWithContext(that,context){var _iterator166=_createForOfIteratorHelper(that.descendOnce()),_step166;try{for(_iterator166.s();!(_step166=_iterator166.n()).done;){var another=_step166.value;this.visitWithContext(another,context);}}catch(err){_iterator166.e(err);}finally{_iterator166.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitAssetInformationWithContext",value:function visitAssetInformationWithContext(that,context){var _iterator167=_createForOfIteratorHelper(that.descendOnce()),_step167;try{for(_iterator167.s();!(_step167=_iterator167.n()).done;){var another=_step167.value;this.visitWithContext(another,context);}}catch(err){_iterator167.e(err);}finally{_iterator167.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitResourceWithContext",value:function visitResourceWithContext(that,context){var _iterator168=_createForOfIteratorHelper(that.descendOnce()),_step168;try{for(_iterator168.s();!(_step168=_iterator168.n()).done;){var another=_step168.value;this.visitWithContext(another,context);}}catch(err){_iterator168.e(err);}finally{_iterator168.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitSpecificAssetIdWithContext",value:function visitSpecificAssetIdWithContext(that,context){var _iterator169=_createForOfIteratorHelper(that.descendOnce()),_step169;try{for(_iterator169.s();!(_step169=_iterator169.n()).done;){var another=_step169.value;this.visitWithContext(another,context);}}catch(err){_iterator169.e(err);}finally{_iterator169.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitSubmodelWithContext",value:function visitSubmodelWithContext(that,context){var _iterator170=_createForOfIteratorHelper(that.descendOnce()),_step170;try{for(_iterator170.s();!(_step170=_iterator170.n()).done;){var another=_step170.value;this.visitWithContext(another,context);}}catch(err){_iterator170.e(err);}finally{_iterator170.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitRelationshipElementWithContext",value:function visitRelationshipElementWithContext(that,context){var _iterator171=_createForOfIteratorHelper(that.descendOnce()),_step171;try{for(_iterator171.s();!(_step171=_iterator171.n()).done;){var another=_step171.value;this.visitWithContext(another,context);}}catch(err){_iterator171.e(err);}finally{_iterator171.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitSubmodelElementListWithContext",value:function visitSubmodelElementListWithContext(that,context){var _iterator172=_createForOfIteratorHelper(that.descendOnce()),_step172;try{for(_iterator172.s();!(_step172=_iterator172.n()).done;){var another=_step172.value;this.visitWithContext(another,context);}}catch(err){_iterator172.e(err);}finally{_iterator172.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitSubmodelElementCollectionWithContext",value:function visitSubmodelElementCollectionWithContext(that,context){var _iterator173=_createForOfIteratorHelper(that.descendOnce()),_step173;try{for(_iterator173.s();!(_step173=_iterator173.n()).done;){var another=_step173.value;this.visitWithContext(another,context);}}catch(err){_iterator173.e(err);}finally{_iterator173.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitPropertyWithContext",value:function visitPropertyWithContext(that,context){var _iterator174=_createForOfIteratorHelper(that.descendOnce()),_step174;try{for(_iterator174.s();!(_step174=_iterator174.n()).done;){var another=_step174.value;this.visitWithContext(another,context);}}catch(err){_iterator174.e(err);}finally{_iterator174.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitMultiLanguagePropertyWithContext",value:function visitMultiLanguagePropertyWithContext(that,context){var _iterator175=_createForOfIteratorHelper(that.descendOnce()),_step175;try{for(_iterator175.s();!(_step175=_iterator175.n()).done;){var another=_step175.value;this.visitWithContext(another,context);}}catch(err){_iterator175.e(err);}finally{_iterator175.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitRangeWithContext",value:function visitRangeWithContext(that,context){var _iterator176=_createForOfIteratorHelper(that.descendOnce()),_step176;try{for(_iterator176.s();!(_step176=_iterator176.n()).done;){var another=_step176.value;this.visitWithContext(another,context);}}catch(err){_iterator176.e(err);}finally{_iterator176.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitReferenceElementWithContext",value:function visitReferenceElementWithContext(that,context){var _iterator177=_createForOfIteratorHelper(that.descendOnce()),_step177;try{for(_iterator177.s();!(_step177=_iterator177.n()).done;){var another=_step177.value;this.visitWithContext(another,context);}}catch(err){_iterator177.e(err);}finally{_iterator177.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitBlobWithContext",value:function visitBlobWithContext(that,context){var _iterator178=_createForOfIteratorHelper(that.descendOnce()),_step178;try{for(_iterator178.s();!(_step178=_iterator178.n()).done;){var another=_step178.value;this.visitWithContext(another,context);}}catch(err){_iterator178.e(err);}finally{_iterator178.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitFileWithContext",value:function visitFileWithContext(that,context){var _iterator179=_createForOfIteratorHelper(that.descendOnce()),_step179;try{for(_iterator179.s();!(_step179=_iterator179.n()).done;){var another=_step179.value;this.visitWithContext(another,context);}}catch(err){_iterator179.e(err);}finally{_iterator179.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitAnnotatedRelationshipElementWithContext",value:function visitAnnotatedRelationshipElementWithContext(that,context){var _iterator180=_createForOfIteratorHelper(that.descendOnce()),_step180;try{for(_iterator180.s();!(_step180=_iterator180.n()).done;){var another=_step180.value;this.visitWithContext(another,context);}}catch(err){_iterator180.e(err);}finally{_iterator180.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitEntityWithContext",value:function visitEntityWithContext(that,context){var _iterator181=_createForOfIteratorHelper(that.descendOnce()),_step181;try{for(_iterator181.s();!(_step181=_iterator181.n()).done;){var another=_step181.value;this.visitWithContext(another,context);}}catch(err){_iterator181.e(err);}finally{_iterator181.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitEventPayloadWithContext",value:function visitEventPayloadWithContext(that,context){var _iterator182=_createForOfIteratorHelper(that.descendOnce()),_step182;try{for(_iterator182.s();!(_step182=_iterator182.n()).done;){var another=_step182.value;this.visitWithContext(another,context);}}catch(err){_iterator182.e(err);}finally{_iterator182.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitBasicEventElementWithContext",value:function visitBasicEventElementWithContext(that,context){var _iterator183=_createForOfIteratorHelper(that.descendOnce()),_step183;try{for(_iterator183.s();!(_step183=_iterator183.n()).done;){var another=_step183.value;this.visitWithContext(another,context);}}catch(err){_iterator183.e(err);}finally{_iterator183.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitOperationWithContext",value:function visitOperationWithContext(that,context){var _iterator184=_createForOfIteratorHelper(that.descendOnce()),_step184;try{for(_iterator184.s();!(_step184=_iterator184.n()).done;){var another=_step184.value;this.visitWithContext(another,context);}}catch(err){_iterator184.e(err);}finally{_iterator184.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitOperationVariableWithContext",value:function visitOperationVariableWithContext(that,context){var _iterator185=_createForOfIteratorHelper(that.descendOnce()),_step185;try{for(_iterator185.s();!(_step185=_iterator185.n()).done;){var another=_step185.value;this.visitWithContext(another,context);}}catch(err){_iterator185.e(err);}finally{_iterator185.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitCapabilityWithContext",value:function visitCapabilityWithContext(that,context){var _iterator186=_createForOfIteratorHelper(that.descendOnce()),_step186;try{for(_iterator186.s();!(_step186=_iterator186.n()).done;){var another=_step186.value;this.visitWithContext(another,context);}}catch(err){_iterator186.e(err);}finally{_iterator186.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitConceptDescriptionWithContext",value:function visitConceptDescriptionWithContext(that,context){var _iterator187=_createForOfIteratorHelper(that.descendOnce()),_step187;try{for(_iterator187.s();!(_step187=_iterator187.n()).done;){var another=_step187.value;this.visitWithContext(another,context);}}catch(err){_iterator187.e(err);}finally{_iterator187.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitReferenceWithContext",value:function visitReferenceWithContext(that,context){var _iterator188=_createForOfIteratorHelper(that.descendOnce()),_step188;try{for(_iterator188.s();!(_step188=_iterator188.n()).done;){var another=_step188.value;this.visitWithContext(another,context);}}catch(err){_iterator188.e(err);}finally{_iterator188.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitKeyWithContext",value:function visitKeyWithContext(that,context){var _iterator189=_createForOfIteratorHelper(that.descendOnce()),_step189;try{for(_iterator189.s();!(_step189=_iterator189.n()).done;){var another=_step189.value;this.visitWithContext(another,context);}}catch(err){_iterator189.e(err);}finally{_iterator189.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitLangStringNameTypeWithContext",value:function visitLangStringNameTypeWithContext(that,context){var _iterator190=_createForOfIteratorHelper(that.descendOnce()),_step190;try{for(_iterator190.s();!(_step190=_iterator190.n()).done;){var another=_step190.value;this.visitWithContext(another,context);}}catch(err){_iterator190.e(err);}finally{_iterator190.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitLangStringTextTypeWithContext",value:function visitLangStringTextTypeWithContext(that,context){var _iterator191=_createForOfIteratorHelper(that.descendOnce()),_step191;try{for(_iterator191.s();!(_step191=_iterator191.n()).done;){var another=_step191.value;this.visitWithContext(another,context);}}catch(err){_iterator191.e(err);}finally{_iterator191.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitEnvironmentWithContext",value:function visitEnvironmentWithContext(that,context){var _iterator192=_createForOfIteratorHelper(that.descendOnce()),_step192;try{for(_iterator192.s();!(_step192=_iterator192.n()).done;){var another=_step192.value;this.visitWithContext(another,context);}}catch(err){_iterator192.e(err);}finally{_iterator192.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitEmbeddedDataSpecificationWithContext",value:function visitEmbeddedDataSpecificationWithContext(that,context){var _iterator193=_createForOfIteratorHelper(that.descendOnce()),_step193;try{for(_iterator193.s();!(_step193=_iterator193.n()).done;){var another=_step193.value;this.visitWithContext(another,context);}}catch(err){_iterator193.e(err);}finally{_iterator193.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitLevelTypeWithContext",value:function visitLevelTypeWithContext(that,context){var _iterator194=_createForOfIteratorHelper(that.descendOnce()),_step194;try{for(_iterator194.s();!(_step194=_iterator194.n()).done;){var another=_step194.value;this.visitWithContext(another,context);}}catch(err){_iterator194.e(err);}finally{_iterator194.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitValueReferencePairWithContext",value:function visitValueReferencePairWithContext(that,context){var _iterator195=_createForOfIteratorHelper(that.descendOnce()),_step195;try{for(_iterator195.s();!(_step195=_iterator195.n()).done;){var another=_step195.value;this.visitWithContext(another,context);}}catch(err){_iterator195.e(err);}finally{_iterator195.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitValueListWithContext",value:function visitValueListWithContext(that,context){var _iterator196=_createForOfIteratorHelper(that.descendOnce()),_step196;try{for(_iterator196.s();!(_step196=_iterator196.n()).done;){var another=_step196.value;this.visitWithContext(another,context);}}catch(err){_iterator196.e(err);}finally{_iterator196.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitLangStringPreferredNameTypeIec61360WithContext",value:function visitLangStringPreferredNameTypeIec61360WithContext(that,context){var _iterator197=_createForOfIteratorHelper(that.descendOnce()),_step197;try{for(_iterator197.s();!(_step197=_iterator197.n()).done;){var another=_step197.value;this.visitWithContext(another,context);}}catch(err){_iterator197.e(err);}finally{_iterator197.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitLangStringShortNameTypeIec61360WithContext",value:function visitLangStringShortNameTypeIec61360WithContext(that,context){var _iterator198=_createForOfIteratorHelper(that.descendOnce()),_step198;try{for(_iterator198.s();!(_step198=_iterator198.n()).done;){var another=_step198.value;this.visitWithContext(another,context);}}catch(err){_iterator198.e(err);}finally{_iterator198.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitLangStringDefinitionTypeIec61360WithContext",value:function visitLangStringDefinitionTypeIec61360WithContext(that,context){var _iterator199=_createForOfIteratorHelper(that.descendOnce()),_step199;try{for(_iterator199.s();!(_step199=_iterator199.n()).done;){var another=_step199.value;this.visitWithContext(another,context);}}catch(err){_iterator199.e(err);}finally{_iterator199.f();}}/**
   * Visit `that` in `context`.
   *
   * @param that - instance to be visited
   * @param context - of the visitation
   */},{key:"visitDataSpecificationIec61360WithContext",value:function visitDataSpecificationIec61360WithContext(that,context){var _iterator200=_createForOfIteratorHelper(that.descendOnce()),_step200;try{for(_iterator200.s();!(_step200=_iterator200.n()).done;){var another=_step200.value;this.visitWithContext(another,context);}}catch(err){_iterator200.e(err);}finally{_iterator200.f();}}}]);return PassThroughVisitorWithContext;}(AbstractVisitorWithContext);/**
 * Transform the instance of the model.
 *
 * @typeParam T - type of the transformation result
 */var AbstractTransformer=/*#__PURE__*/function(){function AbstractTransformer(){_classCallCheck(this,AbstractTransformer);}_createClass(AbstractTransformer,[{key:"transform",value:/**
   * Double-dispatch on `that`.
   */function transform(that){return that.transform(this);}/**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */}]);return AbstractTransformer;}();/**
 * Transform the instances of the model in context.
 *
 * @typeParam ContextT - type of the transformation context
 * @typeParam T - type of the transformation result
 */var AbstractTransformerWithContext=/*#__PURE__*/function(){function AbstractTransformerWithContext(){_classCallCheck(this,AbstractTransformerWithContext);}_createClass(AbstractTransformerWithContext,[{key:"transformWithContext",value:/**
   * Double-dispatch on `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the transformation
   * @returns transformed `that`
   */function transformWithContext(that,context){return that.transformWithContext(this,context);}/**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the transformation
   * @returns transformed `that`
   */}]);return AbstractTransformerWithContext;}();/**
 * Transform the instances of the model.
 *
 * @remarks
 * If you do not override the transformation methods, they simply
 * return {@link defaultResult}.
 *
 * @typeParam T - type of the transformation result
 */var TransformerWithDefault=/*#__PURE__*/function(_AbstractTransformer){_inherits(TransformerWithDefault,_AbstractTransformer);var _super41=_createSuper(TransformerWithDefault);/**
   * Default value which is returned if no override of the transformation
   */ /**
   * Initialize with the given `default` value.
   *
   * @param defaultResult - returned if no override of the transformation
   */function TransformerWithDefault(defaultResult){var _this39;_classCallCheck(this,TransformerWithDefault);_this39=_super41.call(this);_this39.defaultResult=defaultResult;return _this39;}/**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */_createClass(TransformerWithDefault,[{key:"transformExtension",value:function transformExtension(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformProperty",value:function transformProperty(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRange",value:function transformRange(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceElement",value:function transformReferenceElement(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBlob",value:function transformBlob(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformFile",value:function transformFile(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntity",value:function transformEntity(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperation",value:function transformOperation(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that`.
   *
   * @param that - instance to be transformed
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return TransformerWithDefault;}(AbstractTransformer);/**
 * Transform the instances of the model in context.
 *
 * @remarks
 * If you do not override the transformation methods, they simply
 * return {@link defaultResult}.
 *
 * @typeParam ContextT - type of the visitation context
 * @typeParam T - type of the transformation result
 */var TransformerWithDefaultAndContext=/*#__PURE__*/function(_AbstractTransformerW){_inherits(TransformerWithDefaultAndContext,_AbstractTransformerW);var _super42=_createSuper(TransformerWithDefaultAndContext);/**
   * Default value which is returned if no override of the transformation
   */ /**
   * Initialize with the given `default` value.
   *
   * @param defaultResult - returned if no override of the transformation
   */function TransformerWithDefaultAndContext(defaultResult){var _this40;_classCallCheck(this,TransformerWithDefaultAndContext);_this40=_super42.call(this);_this40.defaultResult=defaultResult;return _this40;}/**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */_createClass(TransformerWithDefaultAndContext,[{key:"transformExtensionWithContext",value:function transformExtensionWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformationWithContext",value:function transformAdministrativeInformationWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifierWithContext",value:function transformQualifierWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShellWithContext",value:function transformAssetAdministrationShellWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformationWithContext",value:function transformAssetInformationWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResourceWithContext",value:function transformResourceWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetIdWithContext",value:function transformSpecificAssetIdWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelWithContext",value:function transformSubmodelWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElementWithContext",value:function transformRelationshipElementWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementListWithContext",value:function transformSubmodelElementListWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollectionWithContext",value:function transformSubmodelElementCollectionWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformPropertyWithContext",value:function transformPropertyWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformMultiLanguagePropertyWithContext",value:function transformMultiLanguagePropertyWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRangeWithContext",value:function transformRangeWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceElementWithContext",value:function transformReferenceElementWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBlobWithContext",value:function transformBlobWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformFileWithContext",value:function transformFileWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElementWithContext",value:function transformAnnotatedRelationshipElementWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntityWithContext",value:function transformEntityWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayloadWithContext",value:function transformEventPayloadWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElementWithContext",value:function transformBasicEventElementWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationWithContext",value:function transformOperationWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariableWithContext",value:function transformOperationVariableWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapabilityWithContext",value:function transformCapabilityWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescriptionWithContext",value:function transformConceptDescriptionWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceWithContext",value:function transformReferenceWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKeyWithContext",value:function transformKeyWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameTypeWithContext",value:function transformLangStringNameTypeWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextTypeWithContext",value:function transformLangStringTextTypeWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironmentWithContext",value:function transformEnvironmentWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecificationWithContext",value:function transformEmbeddedDataSpecificationWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelTypeWithContext",value:function transformLevelTypeWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePairWithContext",value:function transformValueReferencePairWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueListWithContext",value:function transformValueListWithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360WithContext",value:function transformLangStringPreferredNameTypeIec61360WithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360WithContext",value:function transformLangStringShortNameTypeIec61360WithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360WithContext",value:function transformLangStringDefinitionTypeIec61360WithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */ /**
   * Transform `that` in `context`.
   *
   * @param that - instance to be transformed
   * @param context - of the visitation
   * @returns transformed `that`
   */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360WithContext",value:function transformDataSpecificationIec61360WithContext(that,context){return this.defaultResult;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return TransformerWithDefaultAndContext;}(AbstractTransformerWithContext);/**
 * Try to cast an instance of the model to {@link IHasSemantics}.
 */var AsHasSemanticsTransformer=/*#__PURE__*/function(_AbstractTransformer2){_inherits(AsHasSemanticsTransformer,_AbstractTransformer2);var _super43=_createSuper(AsHasSemanticsTransformer);function AsHasSemanticsTransformer(){_classCallCheck(this,AsHasSemanticsTransformer);return _super43.apply(this,arguments);}_createClass(AsHasSemanticsTransformer,[{key:"transformExtension",value:function transformExtension(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return that;}},{key:"transformSubmodel",value:function transformSubmodel(that){return that;}},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return that;}},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return that;}},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return that;}},{key:"transformProperty",value:function transformProperty(that){return that;}},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return that;}},{key:"transformRange",value:function transformRange(that){return that;}},{key:"transformReferenceElement",value:function transformReferenceElement(that){return that;}},{key:"transformBlob",value:function transformBlob(that){return that;}},{key:"transformFile",value:function transformFile(that){return that;}},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return that;}},{key:"transformEntity",value:function transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return that;}},{key:"transformOperation",value:function transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsHasSemanticsTransformer;}(AbstractTransformer);var AS_HAS_SEMANTICS_TRANSFORMER=new AsHasSemanticsTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IHasSemantics}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asHasSemantics(that){return AS_HAS_SEMANTICS_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isHasSemantics(that){return asHasSemantics(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link Extension}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asExtension(that){return that instanceof Extension?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isExtension(that){return that instanceof Extension;}/**
 * Try to cast an instance of the model to {@link IHasExtensions}.
 */var AsHasExtensionsTransformer=/*#__PURE__*/function(_AbstractTransformer3){_inherits(AsHasExtensionsTransformer,_AbstractTransformer3);var _super44=_createSuper(AsHasExtensionsTransformer);function AsHasExtensionsTransformer(){_classCallCheck(this,AsHasExtensionsTransformer);return _super44.apply(this,arguments);}_createClass(AsHasExtensionsTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return that;}},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return that;}},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return that;}},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return that;}},{key:"transformProperty",value:function transformProperty(that){return that;}},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return that;}},{key:"transformRange",value:function transformRange(that){return that;}},{key:"transformReferenceElement",value:function transformReferenceElement(that){return that;}},{key:"transformBlob",value:function transformBlob(that){return that;}},{key:"transformFile",value:function transformFile(that){return that;}},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return that;}},{key:"transformEntity",value:function transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return that;}},{key:"transformOperation",value:function transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return that;}},{key:"transformConceptDescription",value:function transformConceptDescription(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsHasExtensionsTransformer;}(AbstractTransformer);var AS_HAS_EXTENSIONS_TRANSFORMER=new AsHasExtensionsTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IHasExtensions}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asHasExtensions(that){return AS_HAS_EXTENSIONS_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isHasExtensions(that){return asHasExtensions(that)!==null;}/**
 * Try to cast an instance of the model to {@link IReferable}.
 */var AsReferableTransformer=/*#__PURE__*/function(_AbstractTransformer4){_inherits(AsReferableTransformer,_AbstractTransformer4);var _super45=_createSuper(AsReferableTransformer);function AsReferableTransformer(){_classCallCheck(this,AsReferableTransformer);return _super45.apply(this,arguments);}_createClass(AsReferableTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return that;}},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return that;}},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return that;}},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return that;}},{key:"transformProperty",value:function transformProperty(that){return that;}},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return that;}},{key:"transformRange",value:function transformRange(that){return that;}},{key:"transformReferenceElement",value:function transformReferenceElement(that){return that;}},{key:"transformBlob",value:function transformBlob(that){return that;}},{key:"transformFile",value:function transformFile(that){return that;}},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return that;}},{key:"transformEntity",value:function transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return that;}},{key:"transformOperation",value:function transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return that;}},{key:"transformConceptDescription",value:function transformConceptDescription(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsReferableTransformer;}(AbstractTransformer);var AS_REFERABLE_TRANSFORMER=new AsReferableTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IReferable}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asReferable(that){return AS_REFERABLE_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isReferable(that){return asReferable(that)!==null;}/**
 * Try to cast an instance of the model to {@link IIdentifiable}.
 */var AsIdentifiableTransformer=/*#__PURE__*/function(_AbstractTransformer5){_inherits(AsIdentifiableTransformer,_AbstractTransformer5);var _super46=_createSuper(AsIdentifiableTransformer);function AsIdentifiableTransformer(){_classCallCheck(this,AsIdentifiableTransformer);return _super46.apply(this,arguments);}_createClass(AsIdentifiableTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformProperty",value:function transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRange",value:function transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceElement",value:function transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBlob",value:function transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformFile",value:function transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntity",value:function transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperation",value:function transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsIdentifiableTransformer;}(AbstractTransformer);var AS_IDENTIFIABLE_TRANSFORMER=new AsIdentifiableTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IIdentifiable}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asIdentifiable(that){return AS_IDENTIFIABLE_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isIdentifiable(that){return asIdentifiable(that)!==null;}/**
 * Try to cast an instance of the model to {@link IHasKind}.
 */var AsHasKindTransformer=/*#__PURE__*/function(_AbstractTransformer6){_inherits(AsHasKindTransformer,_AbstractTransformer6);var _super47=_createSuper(AsHasKindTransformer);function AsHasKindTransformer(){_classCallCheck(this,AsHasKindTransformer);return _super47.apply(this,arguments);}_createClass(AsHasKindTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformProperty",value:function transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRange",value:function transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceElement",value:function transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBlob",value:function transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformFile",value:function transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntity",value:function transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperation",value:function transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsHasKindTransformer;}(AbstractTransformer);var AS_HAS_KIND_TRANSFORMER=new AsHasKindTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IHasKind}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asHasKind(that){return AS_HAS_KIND_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isHasKind(that){return asHasKind(that)!==null;}/**
 * Try to cast an instance of the model to {@link IHasDataSpecification}.
 */var AsHasDataSpecificationTransformer=/*#__PURE__*/function(_AbstractTransformer7){_inherits(AsHasDataSpecificationTransformer,_AbstractTransformer7);var _super48=_createSuper(AsHasDataSpecificationTransformer);function AsHasDataSpecificationTransformer(){_classCallCheck(this,AsHasDataSpecificationTransformer);return _super48.apply(this,arguments);}_createClass(AsHasDataSpecificationTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return that;}},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return that;}},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return that;}},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return that;}},{key:"transformProperty",value:function transformProperty(that){return that;}},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return that;}},{key:"transformRange",value:function transformRange(that){return that;}},{key:"transformReferenceElement",value:function transformReferenceElement(that){return that;}},{key:"transformBlob",value:function transformBlob(that){return that;}},{key:"transformFile",value:function transformFile(that){return that;}},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return that;}},{key:"transformEntity",value:function transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return that;}},{key:"transformOperation",value:function transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return that;}},{key:"transformConceptDescription",value:function transformConceptDescription(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsHasDataSpecificationTransformer;}(AbstractTransformer);var AS_HAS_DATA_SPECIFICATION_TRANSFORMER=new AsHasDataSpecificationTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IHasDataSpecification}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asHasDataSpecification(that){return AS_HAS_DATA_SPECIFICATION_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isHasDataSpecification(that){return asHasDataSpecification(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link AdministrativeInformation}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asAdministrativeInformation(that){return that instanceof AdministrativeInformation?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isAdministrativeInformation(that){return that instanceof AdministrativeInformation;}/**
 * Try to cast an instance of the model to {@link IQualifiable}.
 */var AsQualifiableTransformer=/*#__PURE__*/function(_AbstractTransformer8){_inherits(AsQualifiableTransformer,_AbstractTransformer8);var _super49=_createSuper(AsQualifiableTransformer);function AsQualifiableTransformer(){_classCallCheck(this,AsQualifiableTransformer);return _super49.apply(this,arguments);}_createClass(AsQualifiableTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return that;}},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return that;}},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return that;}},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return that;}},{key:"transformProperty",value:function transformProperty(that){return that;}},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return that;}},{key:"transformRange",value:function transformRange(that){return that;}},{key:"transformReferenceElement",value:function transformReferenceElement(that){return that;}},{key:"transformBlob",value:function transformBlob(that){return that;}},{key:"transformFile",value:function transformFile(that){return that;}},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return that;}},{key:"transformEntity",value:function transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return that;}},{key:"transformOperation",value:function transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsQualifiableTransformer;}(AbstractTransformer);var AS_QUALIFIABLE_TRANSFORMER=new AsQualifiableTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IQualifiable}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asQualifiable(that){return AS_QUALIFIABLE_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isQualifiable(that){return asQualifiable(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link Qualifier}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asQualifier(that){return that instanceof Qualifier?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isQualifier(that){return that instanceof Qualifier;}/**
 * Try to cast `that` instance to
 * the class {@link AssetAdministrationShell}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asAssetAdministrationShell(that){return that instanceof AssetAdministrationShell?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isAssetAdministrationShell(that){return that instanceof AssetAdministrationShell;}/**
 * Try to cast `that` instance to
 * the class {@link AssetInformation}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asAssetInformation(that){return that instanceof AssetInformation?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isAssetInformation(that){return that instanceof AssetInformation;}/**
 * Try to cast `that` instance to
 * the class {@link Resource}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asResource(that){return that instanceof Resource?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isResource(that){return that instanceof Resource;}/**
 * Try to cast `that` instance to
 * the class {@link SpecificAssetId}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asSpecificAssetId(that){return that instanceof SpecificAssetId?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isSpecificAssetId(that){return that instanceof SpecificAssetId;}/**
 * Try to cast `that` instance to
 * the class {@link Submodel}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asSubmodel(that){return that instanceof Submodel?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isSubmodel(that){return that instanceof Submodel;}/**
 * Try to cast an instance of the model to {@link ISubmodelElement}.
 */var AsSubmodelElementTransformer=/*#__PURE__*/function(_AbstractTransformer9){_inherits(AsSubmodelElementTransformer,_AbstractTransformer9);var _super50=_createSuper(AsSubmodelElementTransformer);function AsSubmodelElementTransformer(){_classCallCheck(this,AsSubmodelElementTransformer);return _super50.apply(this,arguments);}_createClass(AsSubmodelElementTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return that;}},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return that;}},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return that;}},{key:"transformProperty",value:function transformProperty(that){return that;}},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return that;}},{key:"transformRange",value:function transformRange(that){return that;}},{key:"transformReferenceElement",value:function transformReferenceElement(that){return that;}},{key:"transformBlob",value:function transformBlob(that){return that;}},{key:"transformFile",value:function transformFile(that){return that;}},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return that;}},{key:"transformEntity",value:function transformEntity(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return that;}},{key:"transformOperation",value:function transformOperation(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsSubmodelElementTransformer;}(AbstractTransformer);var AS_SUBMODEL_ELEMENT_TRANSFORMER=new AsSubmodelElementTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link ISubmodelElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asSubmodelElement(that){return AS_SUBMODEL_ELEMENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isSubmodelElement(that){return asSubmodelElement(that)!==null;}/**
 * Try to cast an instance of the model to {@link IRelationshipElement}.
 */var AsRelationshipElementTransformer=/*#__PURE__*/function(_AbstractTransformer10){_inherits(AsRelationshipElementTransformer,_AbstractTransformer10);var _super51=_createSuper(AsRelationshipElementTransformer);function AsRelationshipElementTransformer(){_classCallCheck(this,AsRelationshipElementTransformer);return _super51.apply(this,arguments);}_createClass(AsRelationshipElementTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformProperty",value:function transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRange",value:function transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceElement",value:function transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBlob",value:function transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformFile",value:function transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntity",value:function transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperation",value:function transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsRelationshipElementTransformer;}(AbstractTransformer);var AS_RELATIONSHIP_ELEMENT_TRANSFORMER=new AsRelationshipElementTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IRelationshipElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asRelationshipElement(that){return AS_RELATIONSHIP_ELEMENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isRelationshipElement(that){return asRelationshipElement(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link SubmodelElementList}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asSubmodelElementList(that){return that instanceof SubmodelElementList?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isSubmodelElementList(that){return that instanceof SubmodelElementList;}/**
 * Try to cast `that` instance to
 * the class {@link SubmodelElementCollection}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asSubmodelElementCollection(that){return that instanceof SubmodelElementCollection?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isSubmodelElementCollection(that){return that instanceof SubmodelElementCollection;}/**
 * Try to cast an instance of the model to {@link IDataElement}.
 */var AsDataElementTransformer=/*#__PURE__*/function(_AbstractTransformer11){_inherits(AsDataElementTransformer,_AbstractTransformer11);var _super52=_createSuper(AsDataElementTransformer);function AsDataElementTransformer(){_classCallCheck(this,AsDataElementTransformer);return _super52.apply(this,arguments);}_createClass(AsDataElementTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformProperty",value:function transformProperty(that){return that;}},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return that;}},{key:"transformRange",value:function transformRange(that){return that;}},{key:"transformReferenceElement",value:function transformReferenceElement(that){return that;}},{key:"transformBlob",value:function transformBlob(that){return that;}},{key:"transformFile",value:function transformFile(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntity",value:function transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperation",value:function transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsDataElementTransformer;}(AbstractTransformer);var AS_DATA_ELEMENT_TRANSFORMER=new AsDataElementTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IDataElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asDataElement(that){return AS_DATA_ELEMENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isDataElement(that){return asDataElement(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link Property}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asProperty(that){return that instanceof Property?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isProperty(that){return that instanceof Property;}/**
 * Try to cast `that` instance to
 * the class {@link MultiLanguageProperty}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asMultiLanguageProperty(that){return that instanceof MultiLanguageProperty?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isMultiLanguageProperty(that){return that instanceof MultiLanguageProperty;}/**
 * Try to cast `that` instance to
 * the class {@link Range}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asRange(that){return that instanceof Range?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isRange(that){return that instanceof Range;}/**
 * Try to cast `that` instance to
 * the class {@link ReferenceElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asReferenceElement(that){return that instanceof ReferenceElement?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isReferenceElement(that){return that instanceof ReferenceElement;}/**
 * Try to cast `that` instance to
 * the class {@link Blob}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asBlob(that){return that instanceof Blob?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isBlob(that){return that instanceof Blob;}/**
 * Try to cast `that` instance to
 * the class {@link File}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asFile(that){return that instanceof File?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isFile(that){return that instanceof File;}/**
 * Try to cast `that` instance to
 * the class {@link AnnotatedRelationshipElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asAnnotatedRelationshipElement(that){return that instanceof AnnotatedRelationshipElement?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isAnnotatedRelationshipElement(that){return that instanceof AnnotatedRelationshipElement;}/**
 * Try to cast `that` instance to
 * the class {@link Entity}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asEntity(that){return that instanceof Entity?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isEntity(that){return that instanceof Entity;}/**
 * Try to cast `that` instance to
 * the class {@link EventPayload}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asEventPayload(that){return that instanceof EventPayload?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isEventPayload(that){return that instanceof EventPayload;}/**
 * Try to cast an instance of the model to {@link IEventElement}.
 */var AsEventElementTransformer=/*#__PURE__*/function(_AbstractTransformer12){_inherits(AsEventElementTransformer,_AbstractTransformer12);var _super53=_createSuper(AsEventElementTransformer);function AsEventElementTransformer(){_classCallCheck(this,AsEventElementTransformer);return _super53.apply(this,arguments);}_createClass(AsEventElementTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformProperty",value:function transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRange",value:function transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceElement",value:function transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBlob",value:function transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformFile",value:function transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntity",value:function transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperation",value:function transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsEventElementTransformer;}(AbstractTransformer);var AS_EVENT_ELEMENT_TRANSFORMER=new AsEventElementTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IEventElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asEventElement(that){return AS_EVENT_ELEMENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isEventElement(that){return asEventElement(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link BasicEventElement}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asBasicEventElement(that){return that instanceof BasicEventElement?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isBasicEventElement(that){return that instanceof BasicEventElement;}/**
 * Try to cast `that` instance to
 * the class {@link Operation}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asOperation(that){return that instanceof Operation?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isOperation(that){return that instanceof Operation;}/**
 * Try to cast `that` instance to
 * the class {@link OperationVariable}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asOperationVariable(that){return that instanceof OperationVariable?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isOperationVariable(that){return that instanceof OperationVariable;}/**
 * Try to cast `that` instance to
 * the class {@link Capability}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asCapability(that){return that instanceof Capability?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isCapability(that){return that instanceof Capability;}/**
 * Try to cast `that` instance to
 * the class {@link ConceptDescription}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asConceptDescription(that){return that instanceof ConceptDescription?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isConceptDescription(that){return that instanceof ConceptDescription;}/**
 * Try to cast `that` instance to
 * the class {@link Reference}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asReference(that){return that instanceof Reference?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isReference(that){return that instanceof Reference;}/**
 * Try to cast `that` instance to
 * the class {@link Key}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asKey(that){return that instanceof Key?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isKey(that){return that instanceof Key;}/**
 * Try to cast an instance of the model to {@link IAbstractLangString}.
 */var AsAbstractLangStringTransformer=/*#__PURE__*/function(_AbstractTransformer13){_inherits(AsAbstractLangStringTransformer,_AbstractTransformer13);var _super54=_createSuper(AsAbstractLangStringTransformer);function AsAbstractLangStringTransformer(){_classCallCheck(this,AsAbstractLangStringTransformer);return _super54.apply(this,arguments);}_createClass(AsAbstractLangStringTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformProperty",value:function transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRange",value:function transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceElement",value:function transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBlob",value:function transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformFile",value:function transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntity",value:function transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperation",value:function transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return that;}},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return that;}},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return that;}},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return that;}/* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return AsAbstractLangStringTransformer;}(AbstractTransformer);var AS_ABSTRACT_LANG_STRING_TRANSFORMER=new AsAbstractLangStringTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IAbstractLangString}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asAbstractLangString(that){return AS_ABSTRACT_LANG_STRING_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isAbstractLangString(that){return asAbstractLangString(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringNameType}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asLangStringNameType(that){return that instanceof LangStringNameType?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isLangStringNameType(that){return that instanceof LangStringNameType;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringTextType}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asLangStringTextType(that){return that instanceof LangStringTextType?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isLangStringTextType(that){return that instanceof LangStringTextType;}/**
 * Try to cast `that` instance to
 * the class {@link Environment}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asEnvironment(that){return that instanceof Environment?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isEnvironment(that){return that instanceof Environment;}/**
 * Try to cast an instance of the model to {@link IDataSpecificationContent}.
 */var AsDataSpecificationContentTransformer=/*#__PURE__*/function(_AbstractTransformer14){_inherits(AsDataSpecificationContentTransformer,_AbstractTransformer14);var _super55=_createSuper(AsDataSpecificationContentTransformer);function AsDataSpecificationContentTransformer(){_classCallCheck(this,AsDataSpecificationContentTransformer);return _super55.apply(this,arguments);}_createClass(AsDataSpecificationContentTransformer,[{key:"transformExtension",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtension(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformation",value:function transformAdministrativeInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifier",value:function transformQualifier(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShell",value:function transformAssetAdministrationShell(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformation",value:function transformAssetInformation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResource",value:function transformResource(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetId",value:function transformSpecificAssetId(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodel",value:function transformSubmodel(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElement",value:function transformRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementList",value:function transformSubmodelElementList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollection",value:function transformSubmodelElementCollection(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformProperty",value:function transformProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformMultiLanguageProperty",value:function transformMultiLanguageProperty(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRange",value:function transformRange(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceElement",value:function transformReferenceElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBlob",value:function transformBlob(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformFile",value:function transformFile(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElement",value:function transformAnnotatedRelationshipElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntity",value:function transformEntity(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayload",value:function transformEventPayload(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElement",value:function transformBasicEventElement(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperation",value:function transformOperation(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariable",value:function transformOperationVariable(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapability",value:function transformCapability(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescription",value:function transformConceptDescription(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReference",value:function transformReference(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKey",value:function transformKey(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameType",value:function transformLangStringNameType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextType",value:function transformLangStringTextType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironment",value:function transformEnvironment(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecification",value:function transformEmbeddedDataSpecification(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelType",value:function transformLevelType(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePair",value:function transformValueReferencePair(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueList",value:function transformValueList(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360",value:function transformLangStringPreferredNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360",value:function transformLangStringShortNameTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360",value:function transformLangStringDefinitionTypeIec61360(that){return null;}/* eslint-enable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360",value:function transformDataSpecificationIec61360(that){return that;}}]);return AsDataSpecificationContentTransformer;}(AbstractTransformer);var AS_DATA_SPECIFICATION_CONTENT_TRANSFORMER=new AsDataSpecificationContentTransformer();/**
 * Try to cast `that` instance to
 * the interface {@link IDataSpecificationContent}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asDataSpecificationContent(that){return AS_DATA_SPECIFICATION_CONTENT_TRANSFORMER.transform(that);}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isDataSpecificationContent(that){return asDataSpecificationContent(that)!==null;}/**
 * Try to cast `that` instance to
 * the class {@link EmbeddedDataSpecification}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asEmbeddedDataSpecification(that){return that instanceof EmbeddedDataSpecification?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isEmbeddedDataSpecification(that){return that instanceof EmbeddedDataSpecification;}/**
 * Try to cast `that` instance to
 * the class {@link LevelType}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asLevelType(that){return that instanceof LevelType?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isLevelType(that){return that instanceof LevelType;}/**
 * Try to cast `that` instance to
 * the class {@link ValueReferencePair}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asValueReferencePair(that){return that instanceof ValueReferencePair?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isValueReferencePair(that){return that instanceof ValueReferencePair;}/**
 * Try to cast `that` instance to
 * the class {@link ValueList}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asValueList(that){return that instanceof ValueList?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isValueList(that){return that instanceof ValueList;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringPreferredNameTypeIec61360}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asLangStringPreferredNameTypeIec61360(that){return that instanceof LangStringPreferredNameTypeIec61360?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isLangStringPreferredNameTypeIec61360(that){return that instanceof LangStringPreferredNameTypeIec61360;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringShortNameTypeIec61360}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asLangStringShortNameTypeIec61360(that){return that instanceof LangStringShortNameTypeIec61360?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isLangStringShortNameTypeIec61360(that){return that instanceof LangStringShortNameTypeIec61360;}/**
 * Try to cast `that` instance to
 * the class {@link LangStringDefinitionTypeIec61360}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asLangStringDefinitionTypeIec61360(that){return that instanceof LangStringDefinitionTypeIec61360?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isLangStringDefinitionTypeIec61360(that){return that instanceof LangStringDefinitionTypeIec61360;}/**
 * Try to cast `that` instance to
 * the class {@link DataSpecificationIec61360}.
 *
 * @param that - instance to be casted
 * @returns - casted `that` if cast successful, or `null`
 */function asDataSpecificationIec61360(that){return that instanceof DataSpecificationIec61360?that:null;}/**
 * Check the type of `that` instance.
 *
 * @param that - instance to be type-checked
 * @returns `true` if the type check is successful
 */function isDataSpecificationIec61360(that){return that instanceof DataSpecificationIec61360;}var TypeMatcher=/*#__PURE__*/function(_AbstractTransformerW2){_inherits(TypeMatcher,_AbstractTransformerW2);var _super56=_createSuper(TypeMatcher);function TypeMatcher(){_classCallCheck(this,TypeMatcher);return _super56.apply(this,arguments);}_createClass(TypeMatcher,[{key:"transformExtensionWithContext",value:/* eslint-disable @typescript-eslint/no-unused-vars */function transformExtensionWithContext(that,other){return isExtension(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAdministrativeInformationWithContext",value:function transformAdministrativeInformationWithContext(that,other){return isAdministrativeInformation(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformQualifierWithContext",value:function transformQualifierWithContext(that,other){return isQualifier(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetAdministrationShellWithContext",value:function transformAssetAdministrationShellWithContext(that,other){return isAssetAdministrationShell(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAssetInformationWithContext",value:function transformAssetInformationWithContext(that,other){return isAssetInformation(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformResourceWithContext",value:function transformResourceWithContext(that,other){return isResource(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSpecificAssetIdWithContext",value:function transformSpecificAssetIdWithContext(that,other){return isSpecificAssetId(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelWithContext",value:function transformSubmodelWithContext(that,other){return isSubmodel(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRelationshipElementWithContext",value:function transformRelationshipElementWithContext(that,other){return isRelationshipElement(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementListWithContext",value:function transformSubmodelElementListWithContext(that,other){return isSubmodelElementList(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformSubmodelElementCollectionWithContext",value:function transformSubmodelElementCollectionWithContext(that,other){return isSubmodelElementCollection(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformPropertyWithContext",value:function transformPropertyWithContext(that,other){return isProperty(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformMultiLanguagePropertyWithContext",value:function transformMultiLanguagePropertyWithContext(that,other){return isMultiLanguageProperty(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformRangeWithContext",value:function transformRangeWithContext(that,other){return isRange(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceElementWithContext",value:function transformReferenceElementWithContext(that,other){return isReferenceElement(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBlobWithContext",value:function transformBlobWithContext(that,other){return isBlob(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformFileWithContext",value:function transformFileWithContext(that,other){return isFile(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformAnnotatedRelationshipElementWithContext",value:function transformAnnotatedRelationshipElementWithContext(that,other){return isAnnotatedRelationshipElement(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEntityWithContext",value:function transformEntityWithContext(that,other){return isEntity(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEventPayloadWithContext",value:function transformEventPayloadWithContext(that,other){return isEventPayload(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformBasicEventElementWithContext",value:function transformBasicEventElementWithContext(that,other){return isBasicEventElement(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationWithContext",value:function transformOperationWithContext(that,other){return isOperation(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformOperationVariableWithContext",value:function transformOperationVariableWithContext(that,other){return isOperationVariable(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformCapabilityWithContext",value:function transformCapabilityWithContext(that,other){return isCapability(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformConceptDescriptionWithContext",value:function transformConceptDescriptionWithContext(that,other){return isConceptDescription(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformReferenceWithContext",value:function transformReferenceWithContext(that,other){return isReference(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformKeyWithContext",value:function transformKeyWithContext(that,other){return isKey(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringNameTypeWithContext",value:function transformLangStringNameTypeWithContext(that,other){return isLangStringNameType(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringTextTypeWithContext",value:function transformLangStringTextTypeWithContext(that,other){return isLangStringTextType(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEnvironmentWithContext",value:function transformEnvironmentWithContext(that,other){return isEnvironment(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformEmbeddedDataSpecificationWithContext",value:function transformEmbeddedDataSpecificationWithContext(that,other){return isEmbeddedDataSpecification(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLevelTypeWithContext",value:function transformLevelTypeWithContext(that,other){return isLevelType(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueReferencePairWithContext",value:function transformValueReferencePairWithContext(that,other){return isValueReferencePair(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformValueListWithContext",value:function transformValueListWithContext(that,other){return isValueList(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringPreferredNameTypeIec61360WithContext",value:function transformLangStringPreferredNameTypeIec61360WithContext(that,other){return isLangStringPreferredNameTypeIec61360(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringShortNameTypeIec61360WithContext",value:function transformLangStringShortNameTypeIec61360WithContext(that,other){return isLangStringShortNameTypeIec61360(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformLangStringDefinitionTypeIec61360WithContext",value:function transformLangStringDefinitionTypeIec61360WithContext(that,other){return isLangStringDefinitionTypeIec61360(other);}/* eslint-enable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-unused-vars */},{key:"transformDataSpecificationIec61360WithContext",value:function transformDataSpecificationIec61360WithContext(that,other){return isDataSpecificationIec61360(other);}/* eslint-enable @typescript-eslint/no-unused-vars */}]);return TypeMatcher;}(AbstractTransformerWithContext);var TYPE_MATCHER=new TypeMatcher();/**
 * Check whether the type of `that` matches the type of `other` instance.
 *
 * @remarks
 * We check with `is*` function. Hence, if the class of `other` is a subclass of
 * the class of `that`, we confirm the match.
 *
 * @param that - standard instance
 * @param other - instance whose type is compared against `that`
 */function typesMatch(that,other){return TYPE_MATCHER.transformWithContext(that,other);}// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

var types = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AasSubmodelElements: AasSubmodelElements,
  AbstractTransformer: AbstractTransformer,
  AbstractTransformerWithContext: AbstractTransformerWithContext,
  AbstractVisitor: AbstractVisitor,
  AbstractVisitorWithContext: AbstractVisitorWithContext,
  AdministrativeInformation: AdministrativeInformation,
  AnnotatedRelationshipElement: AnnotatedRelationshipElement,
  AssetAdministrationShell: AssetAdministrationShell,
  AssetInformation: AssetInformation,
  AssetKind: AssetKind,
  BasicEventElement: BasicEventElement,
  Blob: Blob,
  Capability: Capability,
  Class: Class,
  ConceptDescription: ConceptDescription,
  DataSpecificationIec61360: DataSpecificationIec61360,
  DataTypeDefXsd: DataTypeDefXsd,
  DataTypeIec61360: DataTypeIec61360,
  Direction: Direction,
  EmbeddedDataSpecification: EmbeddedDataSpecification,
  Entity: Entity,
  EntityType: EntityType,
  Environment: Environment,
  EventPayload: EventPayload,
  Extension: Extension,
  File: File,
  Key: Key,
  KeyTypes: KeyTypes,
  LangStringDefinitionTypeIec61360: LangStringDefinitionTypeIec61360,
  LangStringNameType: LangStringNameType,
  LangStringPreferredNameTypeIec61360: LangStringPreferredNameTypeIec61360,
  LangStringShortNameTypeIec61360: LangStringShortNameTypeIec61360,
  LangStringTextType: LangStringTextType,
  LevelType: LevelType,
  ModelType: ModelType,
  ModellingKind: ModellingKind,
  MultiLanguageProperty: MultiLanguageProperty,
  Operation: Operation,
  OperationVariable: OperationVariable,
  PassThroughVisitor: PassThroughVisitor,
  PassThroughVisitorWithContext: PassThroughVisitorWithContext,
  Property: Property,
  Qualifier: Qualifier,
  QualifierKind: QualifierKind,
  Range: Range,
  Reference: Reference,
  ReferenceElement: ReferenceElement,
  ReferenceTypes: ReferenceTypes,
  RelationshipElement: RelationshipElement,
  Resource: Resource,
  SpecificAssetId: SpecificAssetId,
  StateOfEvent: StateOfEvent,
  Submodel: Submodel,
  SubmodelElementCollection: SubmodelElementCollection,
  SubmodelElementList: SubmodelElementList,
  TransformerWithDefault: TransformerWithDefault,
  TransformerWithDefaultAndContext: TransformerWithDefaultAndContext,
  ValueList: ValueList,
  ValueReferencePair: ValueReferencePair,
  asAbstractLangString: asAbstractLangString,
  asAdministrativeInformation: asAdministrativeInformation,
  asAnnotatedRelationshipElement: asAnnotatedRelationshipElement,
  asAssetAdministrationShell: asAssetAdministrationShell,
  asAssetInformation: asAssetInformation,
  asBasicEventElement: asBasicEventElement,
  asBlob: asBlob,
  asCapability: asCapability,
  asConceptDescription: asConceptDescription,
  asDataElement: asDataElement,
  asDataSpecificationContent: asDataSpecificationContent,
  asDataSpecificationIec61360: asDataSpecificationIec61360,
  asEmbeddedDataSpecification: asEmbeddedDataSpecification,
  asEntity: asEntity,
  asEnvironment: asEnvironment,
  asEventElement: asEventElement,
  asEventPayload: asEventPayload,
  asExtension: asExtension,
  asFile: asFile,
  asHasDataSpecification: asHasDataSpecification,
  asHasExtensions: asHasExtensions,
  asHasKind: asHasKind,
  asHasSemantics: asHasSemantics,
  asIdentifiable: asIdentifiable,
  asKey: asKey,
  asLangStringDefinitionTypeIec61360: asLangStringDefinitionTypeIec61360,
  asLangStringNameType: asLangStringNameType,
  asLangStringPreferredNameTypeIec61360: asLangStringPreferredNameTypeIec61360,
  asLangStringShortNameTypeIec61360: asLangStringShortNameTypeIec61360,
  asLangStringTextType: asLangStringTextType,
  asLevelType: asLevelType,
  asMultiLanguageProperty: asMultiLanguageProperty,
  asOperation: asOperation,
  asOperationVariable: asOperationVariable,
  asProperty: asProperty,
  asQualifiable: asQualifiable,
  asQualifier: asQualifier,
  asRange: asRange,
  asReferable: asReferable,
  asReference: asReference,
  asReferenceElement: asReferenceElement,
  asRelationshipElement: asRelationshipElement,
  asResource: asResource,
  asSpecificAssetId: asSpecificAssetId,
  asSubmodel: asSubmodel,
  asSubmodelElement: asSubmodelElement,
  asSubmodelElementCollection: asSubmodelElementCollection,
  asSubmodelElementList: asSubmodelElementList,
  asValueList: asValueList,
  asValueReferencePair: asValueReferencePair,
  isAbstractLangString: isAbstractLangString,
  isAdministrativeInformation: isAdministrativeInformation,
  isAnnotatedRelationshipElement: isAnnotatedRelationshipElement,
  isAssetAdministrationShell: isAssetAdministrationShell,
  isAssetInformation: isAssetInformation,
  isBasicEventElement: isBasicEventElement,
  isBlob: isBlob,
  isCapability: isCapability,
  isConceptDescription: isConceptDescription,
  isDataElement: isDataElement,
  isDataSpecificationContent: isDataSpecificationContent,
  isDataSpecificationIec61360: isDataSpecificationIec61360,
  isEmbeddedDataSpecification: isEmbeddedDataSpecification,
  isEntity: isEntity,
  isEnvironment: isEnvironment,
  isEventElement: isEventElement,
  isEventPayload: isEventPayload,
  isExtension: isExtension,
  isFile: isFile,
  isHasDataSpecification: isHasDataSpecification,
  isHasExtensions: isHasExtensions,
  isHasKind: isHasKind,
  isHasSemantics: isHasSemantics,
  isIdentifiable: isIdentifiable,
  isKey: isKey,
  isLangStringDefinitionTypeIec61360: isLangStringDefinitionTypeIec61360,
  isLangStringNameType: isLangStringNameType,
  isLangStringPreferredNameTypeIec61360: isLangStringPreferredNameTypeIec61360,
  isLangStringShortNameTypeIec61360: isLangStringShortNameTypeIec61360,
  isLangStringTextType: isLangStringTextType,
  isLevelType: isLevelType,
  isMultiLanguageProperty: isMultiLanguageProperty,
  isOperation: isOperation,
  isOperationVariable: isOperationVariable,
  isProperty: isProperty,
  isQualifiable: isQualifiable,
  isQualifier: isQualifier,
  isRange: isRange,
  isReferable: isReferable,
  isReference: isReference,
  isReferenceElement: isReferenceElement,
  isRelationshipElement: isRelationshipElement,
  isResource: isResource,
  isSpecificAssetId: isSpecificAssetId,
  isSubmodel: isSubmodel,
  isSubmodelElement: isSubmodelElement,
  isSubmodelElementCollection: isSubmodelElementCollection,
  isSubmodelElementList: isSubmodelElementList,
  isValueList: isValueList,
  isValueReferencePair: isValueReferencePair,
  overAasSubmodelElements: overAasSubmodelElements,
  overAssetKind: overAssetKind,
  overDataTypeDefXsd: overDataTypeDefXsd,
  overDataTypeIec61360: overDataTypeIec61360,
  overDirection: overDirection,
  overEntityType: overEntityType,
  overKeyTypes: overKeyTypes,
  overModelType: overModelType,
  overModellingKind: overModellingKind,
  overQualifierKind: overQualifierKind,
  overReferenceTypes: overReferenceTypes,
  overStateOfEvent: overStateOfEvent,
  typesMatch: typesMatch
});

/**
 * Provide constant values of the meta-model.
 */

/**
 * Categories for {@link types!IDataElement} as defined in Constraint AASd-090
 */
var VALID_CATEGORIES_FOR_DATA_ELEMENT = new Set(["CONSTANT", "PARAMETER", "VARIABLE"]);

/**
 * Enumeration of all identifiable elements within an asset administration shell.
 */
var GENERIC_FRAGMENT_KEYS = new Set([KeyTypes.FragmentReference]);

/**
 * Enumeration of different key value types within a key.
 */
var GENERIC_GLOBALLY_IDENTIFIABLES = new Set([KeyTypes.GlobalReference]);

/**
 * Enumeration of different key value types within a key.
 */
var AAS_IDENTIFIABLES = new Set([KeyTypes.AssetAdministrationShell, KeyTypes.ConceptDescription, KeyTypes.Identifiable, KeyTypes.Submodel]);

/**
 * Enumeration of all submodel elements within an asset administration shell.
 */
var AAS_SUBMODEL_ELEMENTS_AS_KEYS = new Set([KeyTypes.AnnotatedRelationshipElement, KeyTypes.BasicEventElement, KeyTypes.Blob, KeyTypes.Capability, KeyTypes.DataElement, KeyTypes.Entity, KeyTypes.EventElement, KeyTypes.File, KeyTypes.MultiLanguageProperty, KeyTypes.Operation, KeyTypes.Property, KeyTypes.Range, KeyTypes.ReferenceElement, KeyTypes.RelationshipElement, KeyTypes.SubmodelElement, KeyTypes.SubmodelElementCollection, KeyTypes.SubmodelElementList]);

/**
 * Enumeration of different fragment key value types within a key.
 */
var AAS_REFERABLE_NON_IDENTIFIABLES = new Set([KeyTypes.AnnotatedRelationshipElement, KeyTypes.BasicEventElement, KeyTypes.Blob, KeyTypes.Capability, KeyTypes.DataElement, KeyTypes.Entity, KeyTypes.EventElement, KeyTypes.File, KeyTypes.MultiLanguageProperty, KeyTypes.Operation, KeyTypes.Property, KeyTypes.Range, KeyTypes.ReferenceElement, KeyTypes.RelationshipElement, KeyTypes.SubmodelElement, KeyTypes.SubmodelElementCollection, KeyTypes.SubmodelElementList]);

/**
 * Enumeration of referables. We need this to check that model references refer to a Referable. For example, the observed attribute of the Basic Event Element object must be a model reference to a Referable.
 */
var AAS_REFERABLES = new Set([KeyTypes.AssetAdministrationShell, KeyTypes.ConceptDescription, KeyTypes.Identifiable, KeyTypes.Submodel, KeyTypes.AnnotatedRelationshipElement, KeyTypes.BasicEventElement, KeyTypes.Blob, KeyTypes.Capability, KeyTypes.DataElement, KeyTypes.Entity, KeyTypes.EventElement, KeyTypes.File, KeyTypes.MultiLanguageProperty, KeyTypes.Operation, KeyTypes.Property, KeyTypes.Range, KeyTypes.ReferenceElement, KeyTypes.Referable, KeyTypes.RelationshipElement, KeyTypes.SubmodelElement, KeyTypes.SubmodelElementCollection, KeyTypes.SubmodelElementList]);

/**
 * Enumeration of all referable elements within an asset administration shell
 */
var GLOBALLY_IDENTIFIABLES = new Set([KeyTypes.GlobalReference, KeyTypes.AssetAdministrationShell, KeyTypes.ConceptDescription, KeyTypes.Identifiable, KeyTypes.Submodel]);

/**
 * Enumeration of different key value types within a key.
 */
var FRAGMENT_KEYS = new Set([KeyTypes.AnnotatedRelationshipElement, KeyTypes.BasicEventElement, KeyTypes.Blob, KeyTypes.Capability, KeyTypes.DataElement, KeyTypes.Entity, KeyTypes.EventElement, KeyTypes.File, KeyTypes.FragmentReference, KeyTypes.MultiLanguageProperty, KeyTypes.Operation, KeyTypes.Property, KeyTypes.Range, KeyTypes.ReferenceElement, KeyTypes.RelationshipElement, KeyTypes.SubmodelElement, KeyTypes.SubmodelElementCollection, KeyTypes.SubmodelElementList]);

/**
 * IEC 61360 data types for concept descriptions categorized with PROPERTY or VALUE.
 */
var DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE = new Set([DataTypeIec61360.Date, DataTypeIec61360.String, DataTypeIec61360.StringTranslatable, DataTypeIec61360.IntegerMeasure, DataTypeIec61360.IntegerCount, DataTypeIec61360.IntegerCurrency, DataTypeIec61360.RealMeasure, DataTypeIec61360.RealCount, DataTypeIec61360.RealCurrency, DataTypeIec61360.Boolean, DataTypeIec61360.Rational, DataTypeIec61360.RationalMeasure, DataTypeIec61360.Time, DataTypeIec61360.Timestamp]);

/**
 * IEC 61360 data types for concept descriptions categorized with REFERENCE.
 */
var DATA_TYPE_IEC_61360_FOR_REFERENCE = new Set([DataTypeIec61360.String, DataTypeIec61360.Iri, DataTypeIec61360.Irdi]);

/**
 * IEC 61360 data types for concept descriptions categorized with DOCUMENT.
 */
var DATA_TYPE_IEC_61360_FOR_DOCUMENT = new Set([DataTypeIec61360.File, DataTypeIec61360.Blob, DataTypeIec61360.Html]);

/**
 * These data types imply that the unit is defined in the data specification.
 */
var IEC_61360_DATA_TYPES_WITH_UNIT = new Set([DataTypeIec61360.IntegerMeasure, DataTypeIec61360.RealMeasure, DataTypeIec61360.RationalMeasure, DataTypeIec61360.IntegerCurrency, DataTypeIec61360.RealCurrency]);

/* eslint-enable @typescript-eslint/no-unused-vars */

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

var constants = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AAS_IDENTIFIABLES: AAS_IDENTIFIABLES,
  AAS_REFERABLES: AAS_REFERABLES,
  AAS_REFERABLE_NON_IDENTIFIABLES: AAS_REFERABLE_NON_IDENTIFIABLES,
  AAS_SUBMODEL_ELEMENTS_AS_KEYS: AAS_SUBMODEL_ELEMENTS_AS_KEYS,
  DATA_TYPE_IEC_61360_FOR_DOCUMENT: DATA_TYPE_IEC_61360_FOR_DOCUMENT,
  DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE: DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE,
  DATA_TYPE_IEC_61360_FOR_REFERENCE: DATA_TYPE_IEC_61360_FOR_REFERENCE,
  FRAGMENT_KEYS: FRAGMENT_KEYS,
  GENERIC_FRAGMENT_KEYS: GENERIC_FRAGMENT_KEYS,
  GENERIC_GLOBALLY_IDENTIFIABLES: GENERIC_GLOBALLY_IDENTIFIABLES,
  GLOBALLY_IDENTIFIABLES: GLOBALLY_IDENTIFIABLES,
  IEC_61360_DATA_TYPES_WITH_UNIT: IEC_61360_DATA_TYPES_WITH_UNIT,
  VALID_CATEGORIES_FOR_DATA_ELEMENT: VALID_CATEGORIES_FOR_DATA_ELEMENT
});

/**
 * De/serialize enumerations from and to string representations.
 */
var MODEL_TYPE_FROM_STRING = new Map([["Extension", ModelType.Extension], ["AdministrativeInformation", ModelType.AdministrativeInformation], ["Qualifier", ModelType.Qualifier], ["AssetAdministrationShell", ModelType.AssetAdministrationShell], ["AssetInformation", ModelType.AssetInformation], ["Resource", ModelType.Resource], ["SpecificAssetId", ModelType.SpecificAssetId], ["Submodel", ModelType.Submodel], ["RelationshipElement", ModelType.RelationshipElement], ["SubmodelElementList", ModelType.SubmodelElementList], ["SubmodelElementCollection", ModelType.SubmodelElementCollection], ["Property", ModelType.Property], ["MultiLanguageProperty", ModelType.MultiLanguageProperty], ["Range", ModelType.Range], ["ReferenceElement", ModelType.ReferenceElement], ["Blob", ModelType.Blob], ["File", ModelType.File], ["AnnotatedRelationshipElement", ModelType.AnnotatedRelationshipElement], ["Entity", ModelType.Entity], ["EventPayload", ModelType.EventPayload], ["BasicEventElement", ModelType.BasicEventElement], ["Operation", ModelType.Operation], ["OperationVariable", ModelType.OperationVariable], ["Capability", ModelType.Capability], ["ConceptDescription", ModelType.ConceptDescription], ["Reference", ModelType.Reference], ["Key", ModelType.Key], ["LangStringNameType", ModelType.LangStringNameType], ["LangStringTextType", ModelType.LangStringTextType], ["Environment", ModelType.Environment], ["EmbeddedDataSpecification", ModelType.EmbeddedDataSpecification], ["LevelType", ModelType.LevelType], ["ValueReferencePair", ModelType.ValueReferencePair], ["ValueList", ModelType.ValueList], ["LangStringPreferredNameTypeIec61360", ModelType.LangStringPreferredNameTypeIec61360], ["LangStringShortNameTypeIec61360", ModelType.LangStringShortNameTypeIec61360], ["LangStringDefinitionTypeIec61360", ModelType.LangStringDefinitionTypeIec61360], ["DataSpecificationIec61360", ModelType.DataSpecificationIec61360]]);

/**
 * Parse `text` as a string representation of {@link types!ModelType}.
 *
 * @param text - string representation of {@link types!ModelType}
 * @returns literal of {@link types!ModelType}, if valid, and `null` otherwise
 */
function modelTypeFromString(text) {
  var result = MODEL_TYPE_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var MODEL_TYPE_TO_STRING = new Map([[ModelType.Extension, "Extension"], [ModelType.AdministrativeInformation, "AdministrativeInformation"], [ModelType.Qualifier, "Qualifier"], [ModelType.AssetAdministrationShell, "AssetAdministrationShell"], [ModelType.AssetInformation, "AssetInformation"], [ModelType.Resource, "Resource"], [ModelType.SpecificAssetId, "SpecificAssetId"], [ModelType.Submodel, "Submodel"], [ModelType.RelationshipElement, "RelationshipElement"], [ModelType.SubmodelElementList, "SubmodelElementList"], [ModelType.SubmodelElementCollection, "SubmodelElementCollection"], [ModelType.Property, "Property"], [ModelType.MultiLanguageProperty, "MultiLanguageProperty"], [ModelType.Range, "Range"], [ModelType.ReferenceElement, "ReferenceElement"], [ModelType.Blob, "Blob"], [ModelType.File, "File"], [ModelType.AnnotatedRelationshipElement, "AnnotatedRelationshipElement"], [ModelType.Entity, "Entity"], [ModelType.EventPayload, "EventPayload"], [ModelType.BasicEventElement, "BasicEventElement"], [ModelType.Operation, "Operation"], [ModelType.OperationVariable, "OperationVariable"], [ModelType.Capability, "Capability"], [ModelType.ConceptDescription, "ConceptDescription"], [ModelType.Reference, "Reference"], [ModelType.Key, "Key"], [ModelType.LangStringNameType, "LangStringNameType"], [ModelType.LangStringTextType, "LangStringTextType"], [ModelType.Environment, "Environment"], [ModelType.EmbeddedDataSpecification, "EmbeddedDataSpecification"], [ModelType.LevelType, "LevelType"], [ModelType.ValueReferencePair, "ValueReferencePair"], [ModelType.ValueList, "ValueList"], [ModelType.LangStringPreferredNameTypeIec61360, "LangStringPreferredNameTypeIec61360"], [ModelType.LangStringShortNameTypeIec61360, "LangStringShortNameTypeIec61360"], [ModelType.LangStringDefinitionTypeIec61360, "LangStringDefinitionTypeIec61360"], [ModelType.DataSpecificationIec61360, "DataSpecificationIec61360"]]);

/**
 * Translate {@link types!ModelType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModelType},
 * if `value` valid, and `null` otherwise
 */
function modelTypeToString(value) {
  var result = MODEL_TYPE_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!ModelType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModelType}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustModelTypeToString(value) {
  var result = MODEL_TYPE_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of ModelType: ".concat(value));
  }
  return result;
}
var MODELLING_KIND_FROM_STRING = new Map([["Template", ModellingKind.Template], ["Instance", ModellingKind.Instance]]);

/**
 * Parse `text` as a string representation of {@link types!ModellingKind}.
 *
 * @param text - string representation of {@link types!ModellingKind}
 * @returns literal of {@link types!ModellingKind}, if valid, and `null` otherwise
 */
function modellingKindFromString(text) {
  var result = MODELLING_KIND_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var MODELLING_KIND_TO_STRING = new Map([[ModellingKind.Template, "Template"], [ModellingKind.Instance, "Instance"]]);

/**
 * Translate {@link types!ModellingKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModellingKind}, if `value` valid, and `null` otherwise
 */
function modellingKindToString(value) {
  var result = MODELLING_KIND_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!ModellingKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModellingKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustModellingKindToString(value) {
  var result = MODELLING_KIND_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of ModellingKind: ".concat(value));
  }
  return result;
}
var QUALIFIER_KIND_FROM_STRING = new Map([["ValueQualifier", QualifierKind.ValueQualifier], ["ConceptQualifier", QualifierKind.ConceptQualifier], ["TemplateQualifier", QualifierKind.TemplateQualifier]]);

/**
 * Parse `text` as a string representation of {@link types!QualifierKind}.
 *
 * @param text - string representation of {@link types!QualifierKind}
 * @returns literal of {@link types!QualifierKind}, if valid, and `null` otherwise
 */
function qualifierKindFromString(text) {
  var result = QUALIFIER_KIND_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var QUALIFIER_KIND_TO_STRING = new Map([[QualifierKind.ValueQualifier, "ValueQualifier"], [QualifierKind.ConceptQualifier, "ConceptQualifier"], [QualifierKind.TemplateQualifier, "TemplateQualifier"]]);

/**
 * Translate {@link types!QualifierKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!QualifierKind}, if `value` valid, and `null` otherwise
 */
function qualifierKindToString(value) {
  var result = QUALIFIER_KIND_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!QualifierKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!QualifierKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustQualifierKindToString(value) {
  var result = QUALIFIER_KIND_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of QualifierKind: ".concat(value));
  }
  return result;
}
var ASSET_KIND_FROM_STRING = new Map([["Type", AssetKind.Type], ["Instance", AssetKind.Instance], ["NotApplicable", AssetKind.NotApplicable]]);

/**
 * Parse `text` as a string representation of {@link types!AssetKind}.
 *
 * @param text - string representation of {@link types!AssetKind}
 * @returns literal of {@link types!AssetKind}, if valid, and `null` otherwise
 */
function assetKindFromString(text) {
  var result = ASSET_KIND_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var ASSET_KIND_TO_STRING = new Map([[AssetKind.Type, "Type"], [AssetKind.Instance, "Instance"], [AssetKind.NotApplicable, "NotApplicable"]]);

/**
 * Translate {@link types!AssetKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AssetKind}, if `value` valid, and `null` otherwise
 */
function assetKindToString(value) {
  var result = ASSET_KIND_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!AssetKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AssetKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustAssetKindToString(value) {
  var result = ASSET_KIND_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of AssetKind: ".concat(value));
  }
  return result;
}
var AAS_SUBMODEL_ELEMENTS_FROM_STRING = new Map([["AnnotatedRelationshipElement", AasSubmodelElements.AnnotatedRelationshipElement], ["BasicEventElement", AasSubmodelElements.BasicEventElement], ["Blob", AasSubmodelElements.Blob], ["Capability", AasSubmodelElements.Capability], ["DataElement", AasSubmodelElements.DataElement], ["Entity", AasSubmodelElements.Entity], ["EventElement", AasSubmodelElements.EventElement], ["File", AasSubmodelElements.File], ["MultiLanguageProperty", AasSubmodelElements.MultiLanguageProperty], ["Operation", AasSubmodelElements.Operation], ["Property", AasSubmodelElements.Property], ["Range", AasSubmodelElements.Range], ["ReferenceElement", AasSubmodelElements.ReferenceElement], ["RelationshipElement", AasSubmodelElements.RelationshipElement], ["SubmodelElement", AasSubmodelElements.SubmodelElement], ["SubmodelElementList", AasSubmodelElements.SubmodelElementList], ["SubmodelElementCollection", AasSubmodelElements.SubmodelElementCollection]]);

/**
 * Parse `text` as a string representation of {@link types!AasSubmodelElements}.
 *
 * @param text - string representation of {@link types!AasSubmodelElements}
 * @returns literal of {@link types!AasSubmodelElements}, if valid, and `null` otherwise
 */
function aasSubmodelElementsFromString(text) {
  var result = AAS_SUBMODEL_ELEMENTS_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var AAS_SUBMODEL_ELEMENTS_TO_STRING = new Map([[AasSubmodelElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement"], [AasSubmodelElements.BasicEventElement, "BasicEventElement"], [AasSubmodelElements.Blob, "Blob"], [AasSubmodelElements.Capability, "Capability"], [AasSubmodelElements.DataElement, "DataElement"], [AasSubmodelElements.Entity, "Entity"], [AasSubmodelElements.EventElement, "EventElement"], [AasSubmodelElements.File, "File"], [AasSubmodelElements.MultiLanguageProperty, "MultiLanguageProperty"], [AasSubmodelElements.Operation, "Operation"], [AasSubmodelElements.Property, "Property"], [AasSubmodelElements.Range, "Range"], [AasSubmodelElements.ReferenceElement, "ReferenceElement"], [AasSubmodelElements.RelationshipElement, "RelationshipElement"], [AasSubmodelElements.SubmodelElement, "SubmodelElement"], [AasSubmodelElements.SubmodelElementList, "SubmodelElementList"], [AasSubmodelElements.SubmodelElementCollection, "SubmodelElementCollection"]]);

/**
 * Translate {@link types!AasSubmodelElements} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AasSubmodelElements}, if `value` valid, and `null` otherwise
 */
function aasSubmodelElementsToString(value) {
  var result = AAS_SUBMODEL_ELEMENTS_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!AasSubmodelElements} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AasSubmodelElements}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustAasSubmodelElementsToString(value) {
  var result = AAS_SUBMODEL_ELEMENTS_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of AasSubmodelElements: ".concat(value));
  }
  return result;
}
var ENTITY_TYPE_FROM_STRING = new Map([["CoManagedEntity", EntityType.CoManagedEntity], ["SelfManagedEntity", EntityType.SelfManagedEntity]]);

/**
 * Parse `text` as a string representation of {@link types!EntityType}.
 *
 * @param text - string representation of {@link types!EntityType}
 * @returns literal of {@link types!EntityType}, if valid, and `null` otherwise
 */
function entityTypeFromString(text) {
  var result = ENTITY_TYPE_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var ENTITY_TYPE_TO_STRING = new Map([[EntityType.CoManagedEntity, "CoManagedEntity"], [EntityType.SelfManagedEntity, "SelfManagedEntity"]]);

/**
 * Translate {@link types!EntityType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!EntityType}, if `value` valid, and `null` otherwise
 */
function entityTypeToString(value) {
  var result = ENTITY_TYPE_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!EntityType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!EntityType}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustEntityTypeToString(value) {
  var result = ENTITY_TYPE_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of EntityType: ".concat(value));
  }
  return result;
}
var DIRECTION_FROM_STRING = new Map([["input", Direction.Input], ["output", Direction.Output]]);

/**
 * Parse `text` as a string representation of {@link types!Direction}.
 *
 * @param text - string representation of {@link types!Direction}
 * @returns literal of {@link types!Direction}, if valid, and `null` otherwise
 */
function directionFromString(text) {
  var result = DIRECTION_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var DIRECTION_TO_STRING = new Map([[Direction.Input, "input"], [Direction.Output, "output"]]);

/**
 * Translate {@link types!Direction} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!Direction}, if `value` valid, and `null` otherwise
 */
function directionToString(value) {
  var result = DIRECTION_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!Direction} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!Direction}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustDirectionToString(value) {
  var result = DIRECTION_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of Direction: ".concat(value));
  }
  return result;
}
var STATE_OF_EVENT_FROM_STRING = new Map([["on", StateOfEvent.On], ["off", StateOfEvent.Off]]);

/**
 * Parse `text` as a string representation of {@link types!StateOfEvent}.
 *
 * @param text - string representation of {@link types!StateOfEvent}
 * @returns literal of {@link types!StateOfEvent}, if valid, and `null` otherwise
 */
function stateOfEventFromString(text) {
  var result = STATE_OF_EVENT_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var STATE_OF_EVENT_TO_STRING = new Map([[StateOfEvent.On, "on"], [StateOfEvent.Off, "off"]]);

/**
 * Translate {@link types!StateOfEvent} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!StateOfEvent}, if `value` valid, and `null` otherwise
 */
function stateOfEventToString(value) {
  var result = STATE_OF_EVENT_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!StateOfEvent} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!StateOfEvent}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustStateOfEventToString(value) {
  var result = STATE_OF_EVENT_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of StateOfEvent: ".concat(value));
  }
  return result;
}
var REFERENCE_TYPES_FROM_STRING = new Map([["ExternalReference", ReferenceTypes.ExternalReference], ["ModelReference", ReferenceTypes.ModelReference]]);

/**
 * Parse `text` as a string representation of {@link types!ReferenceTypes}.
 *
 * @param text - string representation of {@link types!ReferenceTypes}
 * @returns literal of {@link types!ReferenceTypes}, if valid, and `null` otherwise
 */
function referenceTypesFromString(text) {
  var result = REFERENCE_TYPES_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var REFERENCE_TYPES_TO_STRING = new Map([[ReferenceTypes.ExternalReference, "ExternalReference"], [ReferenceTypes.ModelReference, "ModelReference"]]);

/**
 * Translate {@link types!ReferenceTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ReferenceTypes}, if `value` valid, and `null` otherwise
 */
function referenceTypesToString(value) {
  var result = REFERENCE_TYPES_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!ReferenceTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ReferenceTypes}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustReferenceTypesToString(value) {
  var result = REFERENCE_TYPES_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of ReferenceTypes: ".concat(value));
  }
  return result;
}
var KEY_TYPES_FROM_STRING = new Map([["AnnotatedRelationshipElement", KeyTypes.AnnotatedRelationshipElement], ["AssetAdministrationShell", KeyTypes.AssetAdministrationShell], ["BasicEventElement", KeyTypes.BasicEventElement], ["Blob", KeyTypes.Blob], ["Capability", KeyTypes.Capability], ["ConceptDescription", KeyTypes.ConceptDescription], ["DataElement", KeyTypes.DataElement], ["Entity", KeyTypes.Entity], ["EventElement", KeyTypes.EventElement], ["File", KeyTypes.File], ["FragmentReference", KeyTypes.FragmentReference], ["GlobalReference", KeyTypes.GlobalReference], ["Identifiable", KeyTypes.Identifiable], ["MultiLanguageProperty", KeyTypes.MultiLanguageProperty], ["Operation", KeyTypes.Operation], ["Property", KeyTypes.Property], ["Range", KeyTypes.Range], ["Referable", KeyTypes.Referable], ["ReferenceElement", KeyTypes.ReferenceElement], ["RelationshipElement", KeyTypes.RelationshipElement], ["Submodel", KeyTypes.Submodel], ["SubmodelElement", KeyTypes.SubmodelElement], ["SubmodelElementCollection", KeyTypes.SubmodelElementCollection], ["SubmodelElementList", KeyTypes.SubmodelElementList]]);

/**
 * Parse `text` as a string representation of {@link types!KeyTypes}.
 *
 * @param text - string representation of {@link types!KeyTypes}
 * @returns literal of {@link types!KeyTypes}, if valid, and `null` otherwise
 */
function keyTypesFromString(text) {
  var result = KEY_TYPES_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var KEY_TYPES_TO_STRING = new Map([[KeyTypes.AnnotatedRelationshipElement, "AnnotatedRelationshipElement"], [KeyTypes.AssetAdministrationShell, "AssetAdministrationShell"], [KeyTypes.BasicEventElement, "BasicEventElement"], [KeyTypes.Blob, "Blob"], [KeyTypes.Capability, "Capability"], [KeyTypes.ConceptDescription, "ConceptDescription"], [KeyTypes.DataElement, "DataElement"], [KeyTypes.Entity, "Entity"], [KeyTypes.EventElement, "EventElement"], [KeyTypes.File, "File"], [KeyTypes.FragmentReference, "FragmentReference"], [KeyTypes.GlobalReference, "GlobalReference"], [KeyTypes.Identifiable, "Identifiable"], [KeyTypes.MultiLanguageProperty, "MultiLanguageProperty"], [KeyTypes.Operation, "Operation"], [KeyTypes.Property, "Property"], [KeyTypes.Range, "Range"], [KeyTypes.Referable, "Referable"], [KeyTypes.ReferenceElement, "ReferenceElement"], [KeyTypes.RelationshipElement, "RelationshipElement"], [KeyTypes.Submodel, "Submodel"], [KeyTypes.SubmodelElement, "SubmodelElement"], [KeyTypes.SubmodelElementCollection, "SubmodelElementCollection"], [KeyTypes.SubmodelElementList, "SubmodelElementList"]]);

/**
 * Translate {@link types!KeyTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!KeyTypes}, if `value` valid, and `null` otherwise
 */
function keyTypesToString(value) {
  var result = KEY_TYPES_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!KeyTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!KeyTypes}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustKeyTypesToString(value) {
  var result = KEY_TYPES_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of KeyTypes: ".concat(value));
  }
  return result;
}
var DATA_TYPE_DEF_XSD_FROM_STRING = new Map([["xs:anyURI", DataTypeDefXsd.AnyUri], ["xs:base64Binary", DataTypeDefXsd.Base64Binary], ["xs:boolean", DataTypeDefXsd.Boolean], ["xs:byte", DataTypeDefXsd.Byte], ["xs:date", DataTypeDefXsd.Date], ["xs:dateTime", DataTypeDefXsd.DateTime], ["xs:decimal", DataTypeDefXsd.Decimal], ["xs:double", DataTypeDefXsd.Double], ["xs:duration", DataTypeDefXsd.Duration], ["xs:float", DataTypeDefXsd.Float], ["xs:gDay", DataTypeDefXsd.GDay], ["xs:gMonth", DataTypeDefXsd.GMonth], ["xs:gMonthDay", DataTypeDefXsd.GMonthDay], ["xs:gYear", DataTypeDefXsd.GYear], ["xs:gYearMonth", DataTypeDefXsd.GYearMonth], ["xs:hexBinary", DataTypeDefXsd.HexBinary], ["xs:int", DataTypeDefXsd.Int], ["xs:integer", DataTypeDefXsd.Integer], ["xs:long", DataTypeDefXsd.Long], ["xs:negativeInteger", DataTypeDefXsd.NegativeInteger], ["xs:nonNegativeInteger", DataTypeDefXsd.NonNegativeInteger], ["xs:nonPositiveInteger", DataTypeDefXsd.NonPositiveInteger], ["xs:positiveInteger", DataTypeDefXsd.PositiveInteger], ["xs:short", DataTypeDefXsd.Short], ["xs:string", DataTypeDefXsd.String], ["xs:time", DataTypeDefXsd.Time], ["xs:unsignedByte", DataTypeDefXsd.UnsignedByte], ["xs:unsignedInt", DataTypeDefXsd.UnsignedInt], ["xs:unsignedLong", DataTypeDefXsd.UnsignedLong], ["xs:unsignedShort", DataTypeDefXsd.UnsignedShort]]);

/**
 * Parse `text` as a string representation of {@link types!DataTypeDefXsd}.
 *
 * @param text - string representation of {@link types!DataTypeDefXsd}
 * @returns literal of {@link types!DataTypeDefXsd}, if valid, and `null` otherwise
 */
function dataTypeDefXsdFromString(text) {
  var result = DATA_TYPE_DEF_XSD_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var DATA_TYPE_DEF_XSD_TO_STRING = new Map([[DataTypeDefXsd.AnyUri, "xs:anyURI"], [DataTypeDefXsd.Base64Binary, "xs:base64Binary"], [DataTypeDefXsd.Boolean, "xs:boolean"], [DataTypeDefXsd.Byte, "xs:byte"], [DataTypeDefXsd.Date, "xs:date"], [DataTypeDefXsd.DateTime, "xs:dateTime"], [DataTypeDefXsd.Decimal, "xs:decimal"], [DataTypeDefXsd.Double, "xs:double"], [DataTypeDefXsd.Duration, "xs:duration"], [DataTypeDefXsd.Float, "xs:float"], [DataTypeDefXsd.GDay, "xs:gDay"], [DataTypeDefXsd.GMonth, "xs:gMonth"], [DataTypeDefXsd.GMonthDay, "xs:gMonthDay"], [DataTypeDefXsd.GYear, "xs:gYear"], [DataTypeDefXsd.GYearMonth, "xs:gYearMonth"], [DataTypeDefXsd.HexBinary, "xs:hexBinary"], [DataTypeDefXsd.Int, "xs:int"], [DataTypeDefXsd.Integer, "xs:integer"], [DataTypeDefXsd.Long, "xs:long"], [DataTypeDefXsd.NegativeInteger, "xs:negativeInteger"], [DataTypeDefXsd.NonNegativeInteger, "xs:nonNegativeInteger"], [DataTypeDefXsd.NonPositiveInteger, "xs:nonPositiveInteger"], [DataTypeDefXsd.PositiveInteger, "xs:positiveInteger"], [DataTypeDefXsd.Short, "xs:short"], [DataTypeDefXsd.String, "xs:string"], [DataTypeDefXsd.Time, "xs:time"], [DataTypeDefXsd.UnsignedByte, "xs:unsignedByte"], [DataTypeDefXsd.UnsignedInt, "xs:unsignedInt"], [DataTypeDefXsd.UnsignedLong, "xs:unsignedLong"], [DataTypeDefXsd.UnsignedShort, "xs:unsignedShort"]]);

/**
 * Translate {@link types!DataTypeDefXsd} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeDefXsd}, if `value` valid, and `null` otherwise
 */
function dataTypeDefXsdToString(value) {
  var result = DATA_TYPE_DEF_XSD_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!DataTypeDefXsd} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeDefXsd}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustDataTypeDefXsdToString(value) {
  var result = DATA_TYPE_DEF_XSD_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of DataTypeDefXsd: ".concat(value));
  }
  return result;
}
var DATA_TYPE_IEC_61360_FROM_STRING = new Map([["DATE", DataTypeIec61360.Date], ["STRING", DataTypeIec61360.String], ["STRING_TRANSLATABLE", DataTypeIec61360.StringTranslatable], ["INTEGER_MEASURE", DataTypeIec61360.IntegerMeasure], ["INTEGER_COUNT", DataTypeIec61360.IntegerCount], ["INTEGER_CURRENCY", DataTypeIec61360.IntegerCurrency], ["REAL_MEASURE", DataTypeIec61360.RealMeasure], ["REAL_COUNT", DataTypeIec61360.RealCount], ["REAL_CURRENCY", DataTypeIec61360.RealCurrency], ["BOOLEAN", DataTypeIec61360.Boolean], ["IRI", DataTypeIec61360.Iri], ["IRDI", DataTypeIec61360.Irdi], ["RATIONAL", DataTypeIec61360.Rational], ["RATIONAL_MEASURE", DataTypeIec61360.RationalMeasure], ["TIME", DataTypeIec61360.Time], ["TIMESTAMP", DataTypeIec61360.Timestamp], ["FILE", DataTypeIec61360.File], ["HTML", DataTypeIec61360.Html], ["BLOB", DataTypeIec61360.Blob]]);

/**
 * Parse `text` as a string representation of {@link types!DataTypeIec61360}.
 *
 * @param text - string representation of {@link types!DataTypeIec61360}
 * @returns literal of {@link types!DataTypeIec61360}, if valid, and `null` otherwise
 */
function dataTypeIec61360FromString(text) {
  var result = DATA_TYPE_IEC_61360_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}
var DATA_TYPE_IEC_61360_TO_STRING = new Map([[DataTypeIec61360.Date, "DATE"], [DataTypeIec61360.String, "STRING"], [DataTypeIec61360.StringTranslatable, "STRING_TRANSLATABLE"], [DataTypeIec61360.IntegerMeasure, "INTEGER_MEASURE"], [DataTypeIec61360.IntegerCount, "INTEGER_COUNT"], [DataTypeIec61360.IntegerCurrency, "INTEGER_CURRENCY"], [DataTypeIec61360.RealMeasure, "REAL_MEASURE"], [DataTypeIec61360.RealCount, "REAL_COUNT"], [DataTypeIec61360.RealCurrency, "REAL_CURRENCY"], [DataTypeIec61360.Boolean, "BOOLEAN"], [DataTypeIec61360.Iri, "IRI"], [DataTypeIec61360.Irdi, "IRDI"], [DataTypeIec61360.Rational, "RATIONAL"], [DataTypeIec61360.RationalMeasure, "RATIONAL_MEASURE"], [DataTypeIec61360.Time, "TIME"], [DataTypeIec61360.Timestamp, "TIMESTAMP"], [DataTypeIec61360.File, "FILE"], [DataTypeIec61360.Html, "HTML"], [DataTypeIec61360.Blob, "BLOB"]]);

/**
 * Translate {@link types!DataTypeIec61360} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeIec61360}, if `value` valid, and `null` otherwise
 */
function dataTypeIec61360ToString(value) {
  var result = DATA_TYPE_IEC_61360_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!DataTypeIec61360} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeIec61360}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
function mustDataTypeIec61360ToString(value) {
  var result = DATA_TYPE_IEC_61360_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error("Invalid literal of DataTypeIec61360: ".concat(value));
  }
  return result;
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

var stringification = /*#__PURE__*/Object.freeze({
  __proto__: null,
  aasSubmodelElementsFromString: aasSubmodelElementsFromString,
  aasSubmodelElementsToString: aasSubmodelElementsToString,
  assetKindFromString: assetKindFromString,
  assetKindToString: assetKindToString,
  dataTypeDefXsdFromString: dataTypeDefXsdFromString,
  dataTypeDefXsdToString: dataTypeDefXsdToString,
  dataTypeIec61360FromString: dataTypeIec61360FromString,
  dataTypeIec61360ToString: dataTypeIec61360ToString,
  directionFromString: directionFromString,
  directionToString: directionToString,
  entityTypeFromString: entityTypeFromString,
  entityTypeToString: entityTypeToString,
  keyTypesFromString: keyTypesFromString,
  keyTypesToString: keyTypesToString,
  modelTypeFromString: modelTypeFromString,
  modelTypeToString: modelTypeToString,
  modellingKindFromString: modellingKindFromString,
  modellingKindToString: modellingKindToString,
  mustAasSubmodelElementsToString: mustAasSubmodelElementsToString,
  mustAssetKindToString: mustAssetKindToString,
  mustDataTypeDefXsdToString: mustDataTypeDefXsdToString,
  mustDataTypeIec61360ToString: mustDataTypeIec61360ToString,
  mustDirectionToString: mustDirectionToString,
  mustEntityTypeToString: mustEntityTypeToString,
  mustKeyTypesToString: mustKeyTypesToString,
  mustModelTypeToString: mustModelTypeToString,
  mustModellingKindToString: mustModellingKindToString,
  mustQualifierKindToString: mustQualifierKindToString,
  mustReferenceTypesToString: mustReferenceTypesToString,
  mustStateOfEventToString: mustStateOfEventToString,
  qualifierKindFromString: qualifierKindFromString,
  qualifierKindToString: qualifierKindToString,
  referenceTypesFromString: referenceTypesFromString,
  referenceTypesToString: referenceTypesToString,
  stateOfEventFromString: stateOfEventFromString,
  stateOfEventToString: stateOfEventToString
});

/**
 * Represent a property on a path to the erroneous value.
 */
var PropertySegment$1 = /*#__PURE__*/_createClass(
/**
 * Instance that contains the property
 */

/**
 * Name of the property
 */

function PropertySegment(instance, name) {
  _classCallCheck(this, PropertySegment);
  this.instance = instance;
  this.name = name;
});

/**
 * Represent an index access on a path to the erroneous value.
 */
var IndexSegment$1 = /*#__PURE__*/_createClass(
/**
 * Container that contains the item
 */

/**
 * Index of the item
 */

function IndexSegment(container, index) {
  _classCallCheck(this, IndexSegment);
  if (!Number.isInteger(index)) {
    throw new Error("Expected an integer for the index, but got: ".concat(index));
  }
  this.container = container;
  this.index = index;
});
/**
 * Represent the relative path to the erroneous value.
 */
var Path$1 = /*#__PURE__*/function () {
  function Path() {
    _classCallCheck(this, Path);
    _defineProperty(this, "_segments", new Array());
  }
  _createClass(Path, [{
    key: "segments",
    value:
    /**
     * Get the segments of the path.
     */
    function segments() {
      return this._segments;
    }

    /**
     * Insert the `segment` in front of the {@link segments}.
     *
     * @param segment - segment to be prepended to {@link segments}
     */
  }, {
    key: "prepend",
    value: function prepend(segment) {
      this._segments.unshift(segment);
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this._segments.length === 0) {
        return "";
      }
      var parts = new Array();
      var segment = this._segments[0];
      if (segment instanceof PropertySegment$1) {
        parts.push(segment.name);
      } else if (segment instanceof IndexSegment$1) {
        parts.push("[".concat(segment.index, "]"));
      } else {
        throw new Error("Unexpected segment: ".concat(segment));
      }
      for (var i = 1; i < this._segments.length; i++) {
        segment = this._segments[i];
        if (segment instanceof PropertySegment$1) {
          parts.push(".".concat(segment.name));
        } else if (segment instanceof IndexSegment$1) {
          parts.push("[".concat(segment.index, "]"));
        } else {
          throw new Error("Unexpected segment: ".concat(segment));
        }
      }
      return parts.join("");
    }
  }]);
  return Path;
}();

// region De-serialization

/**
 * Signal that the JSON de-serialization could not be performed.
 */
var DeserializationError = /*#__PURE__*/_createClass(
/**
 * Human-readable explanation of the error
 */

/**
 * Relative path to the erroneous value
 */

function DeserializationError(message) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  _classCallCheck(this, DeserializationError);
  this.message = message;
  this.path = path !== null && path !== void 0 ? path : new Path$1();
});

/**
 * Create an error as {@link common.Either}.
 *
 * @param message - human-readable explanation of the error
 * @returns An {@link common.Either } with the error set
 * @typeParam T - type of the value if there had been no error
 */
function newDeserializationError(message) {
  return new Either(null, new DeserializationError(message));
}

/**
 * Parse `jsonable` as a boolean.
 *
 * @param jsonable - to be parsed
 * @returns parsed boolean value, or an error
 */
function booleanFromJsonable(jsonable) {
  // `typeof` seems to be optimized these days, so we use it instead of
  // literal comparison, see:
  // https://stackoverflow.com/questions/61786250/is-typeof-faster-than-literal-comparison

  if (jsonable === null) {
    return newDeserializationError("Expected a boolean, but got null");
  }
  if (typeof jsonable !== "boolean") {
    return newDeserializationError("Expected a boolean, but got ".concat(_typeof(jsonable)));
  }
  return new Either(jsonable, null);
}

/**
 * Parse `jsonable` as a string.
 *
 * @param jsonable - to be parsed
 * @returns parsed string value, or an error
 */
function stringFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a string, but got null");
  }
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  return new Either(jsonable, null);
}

/**
 * Parse `jsonable` as a byte array.
 *
 * @param jsonable - to be parsed
 * @returns parsed byte array, or an error
 */
function bytesFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a base64-encoded string, but got null");
  }
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a base64-encoded string, but got: ".concat(_typeof(jsonable)));
  }
  var either = base64Decode(jsonable);
  if (either.error !== null) {
    return newDeserializationError(either.error);
  }
  return new Either(either.mustValue(), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasSemantics}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function hasSemanticsFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = HAS_SEMANTICS_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IHasSemantics: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Extension}.
 */
var SetterForExtension = /*#__PURE__*/function () {
  function SetterForExtension() {
    _classCallCheck(this, SetterForExtension);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "name", null);
    _defineProperty(this, "valueType", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "refersTo", null);
  }
  _createClass(SetterForExtension, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator = _createForOfIteratorHelper(iterable),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var jsonableItem = _step.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link name}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setNameFromJsonable",
    value: function setNameFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.name = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeFromJsonable",
    value: function setValueTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link refersTo}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setRefersToFromJsonable",
    value: function setRefersToFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator2 = _createForOfIteratorHelper(iterable),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var jsonableItem = _step2.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      this.refersTo = items;
      return null;
    }
  }]);
  return SetterForExtension;
}();
/**
 * Parse an instance of {@link types!Extension} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Extension},
 * or an error if any
 */
function extensionFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForExtension();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_EXTENSION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.name === null) {
    return newDeserializationError("The required property 'name' is missing");
  }
  return new Either(new Extension(setter.name, setter.semanticId, setter.supplementalSemanticIds, setter.valueType, setter.value, setter.refersTo), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasExtensions}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function hasExtensionsFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = HAS_EXTENSIONS_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IHasExtensions: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IReferable}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function referableFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = REFERABLE_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IReferable: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IIdentifiable}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function identifiableFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = IDENTIFIABLE_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IIdentifiable: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!ModellingKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function modellingKindFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = modellingKindFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of ModellingKind: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function hasKindFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = HAS_KIND_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IHasKind: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IHasDataSpecification}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function hasDataSpecificationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = HAS_DATA_SPECIFICATION_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IHasDataSpecification: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!AdministrativeInformation}.
 */
var SetterForAdministrativeInformation = /*#__PURE__*/function () {
  function SetterForAdministrativeInformation() {
    _classCallCheck(this, SetterForAdministrativeInformation);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "version", null);
    _defineProperty(this, "revision", null);
    _defineProperty(this, "creator", null);
    _defineProperty(this, "templateId", null);
  }
  _createClass(SetterForAdministrativeInformation, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator3 = _createForOfIteratorHelper(iterable),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var jsonableItem = _step3.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link version}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setVersionFromJsonable",
    value: function setVersionFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.version = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link revision}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setRevisionFromJsonable",
    value: function setRevisionFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.revision = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link creator}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCreatorFromJsonable",
    value: function setCreatorFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.creator = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link templateId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTemplateIdFromJsonable",
    value: function setTemplateIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.templateId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForAdministrativeInformation;
}();
/**
 * Parse an instance of {@link types!AdministrativeInformation} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AdministrativeInformation},
 * or an error if any
 */
function administrativeInformationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForAdministrativeInformation();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ADMINISTRATIVE_INFORMATION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  return new Either(new AdministrativeInformation(setter.embeddedDataSpecifications, setter.version, setter.revision, setter.creator, setter.templateId), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IQualifiable}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function qualifiableFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = QUALIFIABLE_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IQualifiable: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!QualifierKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function qualifierKindFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = qualifierKindFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of QualifierKind: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Qualifier}.
 */
var SetterForQualifier = /*#__PURE__*/function () {
  function SetterForQualifier() {
    _classCallCheck(this, SetterForQualifier);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "kind", null);
    _defineProperty(this, "type", null);
    _defineProperty(this, "valueType", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "valueId", null);
  }
  _createClass(SetterForQualifier, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator4 = _createForOfIteratorHelper(iterable),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var jsonableItem = _step4.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link kind}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setKindFromJsonable",
    value: function setKindFromJsonable(jsonable) {
      var parsedOrError = qualifierKindFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.kind = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link type}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypeFromJsonable",
    value: function setTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.type = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeFromJsonable",
    value: function setValueTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueIdFromJsonable",
    value: function setValueIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForQualifier;
}();
/**
 * Parse an instance of {@link types!Qualifier} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Qualifier},
 * or an error if any
 */
function qualifierFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForQualifier();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_QUALIFIER.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.type === null) {
    return newDeserializationError("The required property 'type' is missing");
  }
  if (setter.valueType === null) {
    return newDeserializationError("The required property 'valueType' is missing");
  }
  return new Either(new Qualifier(setter.type, setter.valueType, setter.semanticId, setter.supplementalSemanticIds, setter.kind, setter.value, setter.valueId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!AssetAdministrationShell}.
 */
var SetterForAssetAdministrationShell = /*#__PURE__*/function () {
  function SetterForAssetAdministrationShell() {
    _classCallCheck(this, SetterForAssetAdministrationShell);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "administration", null);
    _defineProperty(this, "id", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "derivedFrom", null);
    _defineProperty(this, "assetInformation", null);
    _defineProperty(this, "submodels", null);
  }
  _createClass(SetterForAssetAdministrationShell, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator5 = _createForOfIteratorHelper(iterable),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var jsonableItem = _step5.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator6 = _createForOfIteratorHelper(iterable),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var jsonableItem = _step6.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator7 = _createForOfIteratorHelper(iterable),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var jsonableItem = _step7.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link administration}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAdministrationFromJsonable",
    value: function setAdministrationFromJsonable(jsonable) {
      var parsedOrError = administrativeInformationFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.administration = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link id}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdFromJsonable",
    value: function setIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.id = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator8 = _createForOfIteratorHelper(iterable),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var jsonableItem = _step8.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link derivedFrom}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDerivedFromFromJsonable",
    value: function setDerivedFromFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.derivedFrom = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link assetInformation}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAssetInformationFromJsonable",
    value: function setAssetInformationFromJsonable(jsonable) {
      var parsedOrError = assetInformationFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.assetInformation = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link submodels}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSubmodelsFromJsonable",
    value: function setSubmodelsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator9 = _createForOfIteratorHelper(iterable),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var jsonableItem = _step9.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      this.submodels = items;
      return null;
    }
  }]);
  return SetterForAssetAdministrationShell;
}();
/**
 * Parse an instance of {@link types!AssetAdministrationShell} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AssetAdministrationShell},
 * or an error if any
 */
function assetAdministrationShellFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForAssetAdministrationShell();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ASSET_ADMINISTRATION_SHELL.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.id === null) {
    return newDeserializationError("The required property 'id' is missing");
  }
  if (setter.assetInformation === null) {
    return newDeserializationError("The required property 'assetInformation' is missing");
  }
  return new Either(new AssetAdministrationShell(setter.id, setter.assetInformation, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.administration, setter.embeddedDataSpecifications, setter.derivedFrom, setter.submodels), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!AssetInformation}.
 */
var SetterForAssetInformation = /*#__PURE__*/function () {
  function SetterForAssetInformation() {
    _classCallCheck(this, SetterForAssetInformation);
    _defineProperty(this, "assetKind", null);
    _defineProperty(this, "globalAssetId", null);
    _defineProperty(this, "specificAssetIds", null);
    _defineProperty(this, "assetType", null);
    _defineProperty(this, "defaultThumbnail", null);
  }
  _createClass(SetterForAssetInformation, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link assetKind}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAssetKindFromJsonable",
    value: function setAssetKindFromJsonable(jsonable) {
      var parsedOrError = assetKindFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.assetKind = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link globalAssetId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setGlobalAssetIdFromJsonable",
    value: function setGlobalAssetIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.globalAssetId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link specificAssetIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSpecificAssetIdsFromJsonable",
    value: function setSpecificAssetIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator10 = _createForOfIteratorHelper(iterable),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var jsonableItem = _step10.value;
          var itemOrError = specificAssetIdFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      this.specificAssetIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link assetType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAssetTypeFromJsonable",
    value: function setAssetTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.assetType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link defaultThumbnail}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDefaultThumbnailFromJsonable",
    value: function setDefaultThumbnailFromJsonable(jsonable) {
      var parsedOrError = resourceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.defaultThumbnail = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForAssetInformation;
}();
/**
 * Parse an instance of {@link types!AssetInformation} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AssetInformation},
 * or an error if any
 */
function assetInformationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForAssetInformation();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ASSET_INFORMATION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.assetKind === null) {
    return newDeserializationError("The required property 'assetKind' is missing");
  }
  return new Either(new AssetInformation(setter.assetKind, setter.globalAssetId, setter.specificAssetIds, setter.assetType, setter.defaultThumbnail), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Resource}.
 */
var SetterForResource = /*#__PURE__*/function () {
  function SetterForResource() {
    _classCallCheck(this, SetterForResource);
    _defineProperty(this, "path", null);
    _defineProperty(this, "contentType", null);
  }
  _createClass(SetterForResource, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link path}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setPathFromJsonable",
    value: function setPathFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.path = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link contentType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setContentTypeFromJsonable",
    value: function setContentTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.contentType = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForResource;
}();
/**
 * Parse an instance of {@link types!Resource} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Resource},
 * or an error if any
 */
function resourceFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForResource();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_RESOURCE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.path === null) {
    return newDeserializationError("The required property 'path' is missing");
  }
  return new Either(new Resource(setter.path, setter.contentType), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!AssetKind}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function assetKindFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = assetKindFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of AssetKind: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!SpecificAssetId}.
 */
var SetterForSpecificAssetId = /*#__PURE__*/function () {
  function SetterForSpecificAssetId() {
    _classCallCheck(this, SetterForSpecificAssetId);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "name", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "externalSubjectId", null);
  }
  _createClass(SetterForSpecificAssetId, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator11 = _createForOfIteratorHelper(iterable),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var jsonableItem = _step11.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link name}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setNameFromJsonable",
    value: function setNameFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.name = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link externalSubjectId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExternalSubjectIdFromJsonable",
    value: function setExternalSubjectIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.externalSubjectId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForSpecificAssetId;
}();
/**
 * Parse an instance of {@link types!SpecificAssetId} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!SpecificAssetId},
 * or an error if any
 */
function specificAssetIdFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForSpecificAssetId();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_SPECIFIC_ASSET_ID.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.name === null) {
    return newDeserializationError("The required property 'name' is missing");
  }
  if (setter.value === null) {
    return newDeserializationError("The required property 'value' is missing");
  }
  return new Either(new SpecificAssetId(setter.name, setter.value, setter.semanticId, setter.supplementalSemanticIds, setter.externalSubjectId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Submodel}.
 */
var SetterForSubmodel = /*#__PURE__*/function () {
  function SetterForSubmodel() {
    _classCallCheck(this, SetterForSubmodel);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "administration", null);
    _defineProperty(this, "id", null);
    _defineProperty(this, "kind", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "submodelElements", null);
  }
  _createClass(SetterForSubmodel, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator12 = _createForOfIteratorHelper(iterable),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var jsonableItem = _step12.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator13 = _createForOfIteratorHelper(iterable),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var jsonableItem = _step13.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator14 = _createForOfIteratorHelper(iterable),
        _step14;
      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var jsonableItem = _step14.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link administration}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAdministrationFromJsonable",
    value: function setAdministrationFromJsonable(jsonable) {
      var parsedOrError = administrativeInformationFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.administration = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link id}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdFromJsonable",
    value: function setIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.id = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link kind}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setKindFromJsonable",
    value: function setKindFromJsonable(jsonable) {
      var parsedOrError = modellingKindFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.kind = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator15 = _createForOfIteratorHelper(iterable),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var jsonableItem = _step15.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator16 = _createForOfIteratorHelper(iterable),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var jsonableItem = _step16.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator17 = _createForOfIteratorHelper(iterable),
        _step17;
      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var jsonableItem = _step17.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link submodelElements}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSubmodelElementsFromJsonable",
    value: function setSubmodelElementsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator18 = _createForOfIteratorHelper(iterable),
        _step18;
      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var jsonableItem = _step18.value;
          var itemOrError = submodelElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
      this.submodelElements = items;
      return null;
    }
  }]);
  return SetterForSubmodel;
}();
/**
 * Parse an instance of {@link types!Submodel} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Submodel},
 * or an error if any
 */
function submodelFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForSubmodel();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_SUBMODEL.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.id === null) {
    return newDeserializationError("The required property 'id' is missing");
  }
  return new Either(new Submodel(setter.id, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.administration, setter.kind, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.submodelElements), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!ISubmodelElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function submodelElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = SUBMODEL_ELEMENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for ISubmodelElement: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IRelationshipElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function relationshipElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = RELATIONSHIP_ELEMENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IRelationshipElement: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!RelationshipElement}.
 */
var SetterForRelationshipElement = /*#__PURE__*/function () {
  function SetterForRelationshipElement() {
    _classCallCheck(this, SetterForRelationshipElement);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "first", null);
    _defineProperty(this, "second", null);
  }
  _createClass(SetterForRelationshipElement, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator19 = _createForOfIteratorHelper(iterable),
        _step19;
      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var jsonableItem = _step19.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator20 = _createForOfIteratorHelper(iterable),
        _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var jsonableItem = _step20.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator21 = _createForOfIteratorHelper(iterable),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var jsonableItem = _step21.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator22 = _createForOfIteratorHelper(iterable),
        _step22;
      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var jsonableItem = _step22.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator23 = _createForOfIteratorHelper(iterable),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var jsonableItem = _step23.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator24 = _createForOfIteratorHelper(iterable),
        _step24;
      try {
        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
          var jsonableItem = _step24.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator24.e(err);
      } finally {
        _iterator24.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link first}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setFirstFromJsonable",
    value: function setFirstFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.first = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link second}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSecondFromJsonable",
    value: function setSecondFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.second = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForRelationshipElement;
}();
/**
 * Parse an instance of {@link types!RelationshipElement} from the JSON-able
 * structure `jsonable`.
 *
 * This function performs no dispatch! It is used to parse the properties
 * as-are, and already assumes the exact model type. Usually, this function
 * is called from within a dispatching function, and you never call it
 * directly. If you want to de-serialize an instance of
 * {@link types!RelationshipElement}, call
 * {@link relationshipElementFromJsonable}.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!RelationshipElement},
 * or an error if any
 */
function relationshipElementFromJsonableWithoutDispatch(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForRelationshipElement();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_RELATIONSHIP_ELEMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.first === null) {
    return newDeserializationError("The required property 'first' is missing");
  }
  if (setter.second === null) {
    return newDeserializationError("The required property 'second' is missing");
  }
  return new Either(new RelationshipElement(setter.first, setter.second, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!AasSubmodelElements}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function aasSubmodelElementsFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = aasSubmodelElementsFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of AasSubmodelElements: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!SubmodelElementList}.
 */
var SetterForSubmodelElementList = /*#__PURE__*/function () {
  function SetterForSubmodelElementList() {
    _classCallCheck(this, SetterForSubmodelElementList);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "orderRelevant", null);
    _defineProperty(this, "semanticIdListElement", null);
    _defineProperty(this, "typeValueListElement", null);
    _defineProperty(this, "valueTypeListElement", null);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForSubmodelElementList, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator25 = _createForOfIteratorHelper(iterable),
        _step25;
      try {
        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
          var jsonableItem = _step25.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator25.e(err);
      } finally {
        _iterator25.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator26 = _createForOfIteratorHelper(iterable),
        _step26;
      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var jsonableItem = _step26.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator27 = _createForOfIteratorHelper(iterable),
        _step27;
      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var jsonableItem = _step27.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator28 = _createForOfIteratorHelper(iterable),
        _step28;
      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
          var jsonableItem = _step28.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator29 = _createForOfIteratorHelper(iterable),
        _step29;
      try {
        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
          var jsonableItem = _step29.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator29.e(err);
      } finally {
        _iterator29.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator30 = _createForOfIteratorHelper(iterable),
        _step30;
      try {
        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
          var jsonableItem = _step30.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator30.e(err);
      } finally {
        _iterator30.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link orderRelevant}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setOrderRelevantFromJsonable",
    value: function setOrderRelevantFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.orderRelevant = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link semanticIdListElement}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdListElementFromJsonable",
    value: function setSemanticIdListElementFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticIdListElement = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link typeValueListElement}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypeValueListElementFromJsonable",
    value: function setTypeValueListElementFromJsonable(jsonable) {
      var parsedOrError = aasSubmodelElementsFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.typeValueListElement = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueTypeListElement}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeListElementFromJsonable",
    value: function setValueTypeListElementFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueTypeListElement = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator31 = _createForOfIteratorHelper(iterable),
        _step31;
      try {
        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
          var jsonableItem = _step31.value;
          var itemOrError = submodelElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator31.e(err);
      } finally {
        _iterator31.f();
      }
      this.value = items;
      return null;
    }
  }]);
  return SetterForSubmodelElementList;
}();
/**
 * Parse an instance of {@link types!SubmodelElementList} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!SubmodelElementList},
 * or an error if any
 */
function submodelElementListFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForSubmodelElementList();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_SUBMODEL_ELEMENT_LIST.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.typeValueListElement === null) {
    return newDeserializationError("The required property 'typeValueListElement' is missing");
  }
  return new Either(new SubmodelElementList(setter.typeValueListElement, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.orderRelevant, setter.semanticIdListElement, setter.valueTypeListElement, setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!SubmodelElementCollection}.
 */
var SetterForSubmodelElementCollection = /*#__PURE__*/function () {
  function SetterForSubmodelElementCollection() {
    _classCallCheck(this, SetterForSubmodelElementCollection);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForSubmodelElementCollection, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator32 = _createForOfIteratorHelper(iterable),
        _step32;
      try {
        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
          var jsonableItem = _step32.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator32.e(err);
      } finally {
        _iterator32.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator33 = _createForOfIteratorHelper(iterable),
        _step33;
      try {
        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
          var jsonableItem = _step33.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator33.e(err);
      } finally {
        _iterator33.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator34 = _createForOfIteratorHelper(iterable),
        _step34;
      try {
        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
          var jsonableItem = _step34.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator34.e(err);
      } finally {
        _iterator34.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator35 = _createForOfIteratorHelper(iterable),
        _step35;
      try {
        for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
          var jsonableItem = _step35.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator35.e(err);
      } finally {
        _iterator35.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator36 = _createForOfIteratorHelper(iterable),
        _step36;
      try {
        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
          var jsonableItem = _step36.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator36.e(err);
      } finally {
        _iterator36.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator37 = _createForOfIteratorHelper(iterable),
        _step37;
      try {
        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
          var jsonableItem = _step37.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator37.e(err);
      } finally {
        _iterator37.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator38 = _createForOfIteratorHelper(iterable),
        _step38;
      try {
        for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
          var jsonableItem = _step38.value;
          var itemOrError = submodelElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator38.e(err);
      } finally {
        _iterator38.f();
      }
      this.value = items;
      return null;
    }
  }]);
  return SetterForSubmodelElementCollection;
}();
/**
 * Parse an instance of {@link types!SubmodelElementCollection} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!SubmodelElementCollection},
 * or an error if any
 */
function submodelElementCollectionFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForSubmodelElementCollection();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_SUBMODEL_ELEMENT_COLLECTION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  return new Either(new SubmodelElementCollection(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IDataElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function dataElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = DATA_ELEMENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IDataElement: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Property}.
 */
var SetterForProperty = /*#__PURE__*/function () {
  function SetterForProperty() {
    _classCallCheck(this, SetterForProperty);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "valueType", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "valueId", null);
  }
  _createClass(SetterForProperty, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator39 = _createForOfIteratorHelper(iterable),
        _step39;
      try {
        for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
          var jsonableItem = _step39.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator39.e(err);
      } finally {
        _iterator39.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator40 = _createForOfIteratorHelper(iterable),
        _step40;
      try {
        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
          var jsonableItem = _step40.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator40.e(err);
      } finally {
        _iterator40.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator41 = _createForOfIteratorHelper(iterable),
        _step41;
      try {
        for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
          var jsonableItem = _step41.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator41.e(err);
      } finally {
        _iterator41.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator42 = _createForOfIteratorHelper(iterable),
        _step42;
      try {
        for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
          var jsonableItem = _step42.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator42.e(err);
      } finally {
        _iterator42.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator43 = _createForOfIteratorHelper(iterable),
        _step43;
      try {
        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
          var jsonableItem = _step43.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator43.e(err);
      } finally {
        _iterator43.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator44 = _createForOfIteratorHelper(iterable),
        _step44;
      try {
        for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
          var jsonableItem = _step44.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator44.e(err);
      } finally {
        _iterator44.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeFromJsonable",
    value: function setValueTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueIdFromJsonable",
    value: function setValueIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForProperty;
}();
/**
 * Parse an instance of {@link types!Property} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Property},
 * or an error if any
 */
function propertyFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForProperty();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_PROPERTY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.valueType === null) {
    return newDeserializationError("The required property 'valueType' is missing");
  }
  return new Either(new Property(setter.valueType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value, setter.valueId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!MultiLanguageProperty}.
 */
var SetterForMultiLanguageProperty = /*#__PURE__*/function () {
  function SetterForMultiLanguageProperty() {
    _classCallCheck(this, SetterForMultiLanguageProperty);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "valueId", null);
  }
  _createClass(SetterForMultiLanguageProperty, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator45 = _createForOfIteratorHelper(iterable),
        _step45;
      try {
        for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
          var jsonableItem = _step45.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator45.e(err);
      } finally {
        _iterator45.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator46 = _createForOfIteratorHelper(iterable),
        _step46;
      try {
        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
          var jsonableItem = _step46.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator46.e(err);
      } finally {
        _iterator46.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator47 = _createForOfIteratorHelper(iterable),
        _step47;
      try {
        for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
          var jsonableItem = _step47.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator47.e(err);
      } finally {
        _iterator47.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator48 = _createForOfIteratorHelper(iterable),
        _step48;
      try {
        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
          var jsonableItem = _step48.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator48.e(err);
      } finally {
        _iterator48.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator49 = _createForOfIteratorHelper(iterable),
        _step49;
      try {
        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
          var jsonableItem = _step49.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator49.e(err);
      } finally {
        _iterator49.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator50 = _createForOfIteratorHelper(iterable),
        _step50;
      try {
        for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
          var jsonableItem = _step50.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator50.e(err);
      } finally {
        _iterator50.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator51 = _createForOfIteratorHelper(iterable),
        _step51;
      try {
        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
          var jsonableItem = _step51.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator51.e(err);
      } finally {
        _iterator51.f();
      }
      this.value = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueIdFromJsonable",
    value: function setValueIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForMultiLanguageProperty;
}();
/**
 * Parse an instance of {@link types!MultiLanguageProperty} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!MultiLanguageProperty},
 * or an error if any
 */
function multiLanguagePropertyFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForMultiLanguageProperty();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_MULTI_LANGUAGE_PROPERTY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  return new Either(new MultiLanguageProperty(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value, setter.valueId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Range}.
 */
var SetterForRange = /*#__PURE__*/function () {
  function SetterForRange() {
    _classCallCheck(this, SetterForRange);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "valueType", null);
    _defineProperty(this, "min", null);
    _defineProperty(this, "max", null);
  }
  _createClass(SetterForRange, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator52 = _createForOfIteratorHelper(iterable),
        _step52;
      try {
        for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
          var jsonableItem = _step52.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator52.e(err);
      } finally {
        _iterator52.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator53 = _createForOfIteratorHelper(iterable),
        _step53;
      try {
        for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
          var jsonableItem = _step53.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator53.e(err);
      } finally {
        _iterator53.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator54 = _createForOfIteratorHelper(iterable),
        _step54;
      try {
        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
          var jsonableItem = _step54.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator54.e(err);
      } finally {
        _iterator54.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator55 = _createForOfIteratorHelper(iterable),
        _step55;
      try {
        for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
          var jsonableItem = _step55.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator55.e(err);
      } finally {
        _iterator55.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator56 = _createForOfIteratorHelper(iterable),
        _step56;
      try {
        for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
          var jsonableItem = _step56.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator56.e(err);
      } finally {
        _iterator56.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator57 = _createForOfIteratorHelper(iterable),
        _step57;
      try {
        for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
          var jsonableItem = _step57.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator57.e(err);
      } finally {
        _iterator57.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueTypeFromJsonable",
    value: function setValueTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeDefXsdFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link min}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMinFromJsonable",
    value: function setMinFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.min = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link max}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMaxFromJsonable",
    value: function setMaxFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.max = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForRange;
}();
/**
 * Parse an instance of {@link types!Range} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Range},
 * or an error if any
 */
function rangeFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForRange();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_RANGE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.valueType === null) {
    return newDeserializationError("The required property 'valueType' is missing");
  }
  return new Either(new Range(setter.valueType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.min, setter.max), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!ReferenceElement}.
 */
var SetterForReferenceElement = /*#__PURE__*/function () {
  function SetterForReferenceElement() {
    _classCallCheck(this, SetterForReferenceElement);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForReferenceElement, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator58 = _createForOfIteratorHelper(iterable),
        _step58;
      try {
        for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
          var jsonableItem = _step58.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator58.e(err);
      } finally {
        _iterator58.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator59 = _createForOfIteratorHelper(iterable),
        _step59;
      try {
        for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
          var jsonableItem = _step59.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator59.e(err);
      } finally {
        _iterator59.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator60 = _createForOfIteratorHelper(iterable),
        _step60;
      try {
        for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
          var jsonableItem = _step60.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator60.e(err);
      } finally {
        _iterator60.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator61 = _createForOfIteratorHelper(iterable),
        _step61;
      try {
        for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
          var jsonableItem = _step61.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator61.e(err);
      } finally {
        _iterator61.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator62 = _createForOfIteratorHelper(iterable),
        _step62;
      try {
        for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
          var jsonableItem = _step62.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator62.e(err);
      } finally {
        _iterator62.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator63 = _createForOfIteratorHelper(iterable),
        _step63;
      try {
        for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
          var jsonableItem = _step63.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator63.e(err);
      } finally {
        _iterator63.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForReferenceElement;
}();
/**
 * Parse an instance of {@link types!ReferenceElement} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ReferenceElement},
 * or an error if any
 */
function referenceElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForReferenceElement();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_REFERENCE_ELEMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  return new Either(new ReferenceElement(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Blob}.
 */
var SetterForBlob = /*#__PURE__*/function () {
  function SetterForBlob() {
    _classCallCheck(this, SetterForBlob);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "contentType", null);
  }
  _createClass(SetterForBlob, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator64 = _createForOfIteratorHelper(iterable),
        _step64;
      try {
        for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
          var jsonableItem = _step64.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator64.e(err);
      } finally {
        _iterator64.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator65 = _createForOfIteratorHelper(iterable),
        _step65;
      try {
        for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
          var jsonableItem = _step65.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator65.e(err);
      } finally {
        _iterator65.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator66 = _createForOfIteratorHelper(iterable),
        _step66;
      try {
        for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
          var jsonableItem = _step66.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator66.e(err);
      } finally {
        _iterator66.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator67 = _createForOfIteratorHelper(iterable),
        _step67;
      try {
        for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
          var jsonableItem = _step67.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator67.e(err);
      } finally {
        _iterator67.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator68 = _createForOfIteratorHelper(iterable),
        _step68;
      try {
        for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
          var jsonableItem = _step68.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator68.e(err);
      } finally {
        _iterator68.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator69 = _createForOfIteratorHelper(iterable),
        _step69;
      try {
        for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
          var jsonableItem = _step69.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator69.e(err);
      } finally {
        _iterator69.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = bytesFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link contentType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setContentTypeFromJsonable",
    value: function setContentTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.contentType = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForBlob;
}();
/**
 * Parse an instance of {@link types!Blob} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Blob},
 * or an error if any
 */
function blobFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForBlob();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_BLOB.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.contentType === null) {
    return newDeserializationError("The required property 'contentType' is missing");
  }
  return new Either(new Blob(setter.contentType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!File}.
 */
var SetterForFile = /*#__PURE__*/function () {
  function SetterForFile() {
    _classCallCheck(this, SetterForFile);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "contentType", null);
  }
  _createClass(SetterForFile, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator70 = _createForOfIteratorHelper(iterable),
        _step70;
      try {
        for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
          var jsonableItem = _step70.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator70.e(err);
      } finally {
        _iterator70.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator71 = _createForOfIteratorHelper(iterable),
        _step71;
      try {
        for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
          var jsonableItem = _step71.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator71.e(err);
      } finally {
        _iterator71.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator72 = _createForOfIteratorHelper(iterable),
        _step72;
      try {
        for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
          var jsonableItem = _step72.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator72.e(err);
      } finally {
        _iterator72.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator73 = _createForOfIteratorHelper(iterable),
        _step73;
      try {
        for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
          var jsonableItem = _step73.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator73.e(err);
      } finally {
        _iterator73.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator74 = _createForOfIteratorHelper(iterable),
        _step74;
      try {
        for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
          var jsonableItem = _step74.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator74.e(err);
      } finally {
        _iterator74.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator75 = _createForOfIteratorHelper(iterable),
        _step75;
      try {
        for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
          var jsonableItem = _step75.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator75.e(err);
      } finally {
        _iterator75.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link contentType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setContentTypeFromJsonable",
    value: function setContentTypeFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.contentType = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForFile;
}();
/**
 * Parse an instance of {@link types!File} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!File},
 * or an error if any
 */
function fileFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForFile();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_FILE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.contentType === null) {
    return newDeserializationError("The required property 'contentType' is missing");
  }
  return new Either(new File(setter.contentType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!AnnotatedRelationshipElement}.
 */
var SetterForAnnotatedRelationshipElement = /*#__PURE__*/function () {
  function SetterForAnnotatedRelationshipElement() {
    _classCallCheck(this, SetterForAnnotatedRelationshipElement);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "first", null);
    _defineProperty(this, "second", null);
    _defineProperty(this, "annotations", null);
  }
  _createClass(SetterForAnnotatedRelationshipElement, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator76 = _createForOfIteratorHelper(iterable),
        _step76;
      try {
        for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
          var jsonableItem = _step76.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator76.e(err);
      } finally {
        _iterator76.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator77 = _createForOfIteratorHelper(iterable),
        _step77;
      try {
        for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
          var jsonableItem = _step77.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator77.e(err);
      } finally {
        _iterator77.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator78 = _createForOfIteratorHelper(iterable),
        _step78;
      try {
        for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
          var jsonableItem = _step78.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator78.e(err);
      } finally {
        _iterator78.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator79 = _createForOfIteratorHelper(iterable),
        _step79;
      try {
        for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
          var jsonableItem = _step79.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator79.e(err);
      } finally {
        _iterator79.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator80 = _createForOfIteratorHelper(iterable),
        _step80;
      try {
        for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
          var jsonableItem = _step80.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator80.e(err);
      } finally {
        _iterator80.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator81 = _createForOfIteratorHelper(iterable),
        _step81;
      try {
        for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
          var jsonableItem = _step81.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator81.e(err);
      } finally {
        _iterator81.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link first}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setFirstFromJsonable",
    value: function setFirstFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.first = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link second}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSecondFromJsonable",
    value: function setSecondFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.second = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link annotations}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAnnotationsFromJsonable",
    value: function setAnnotationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator82 = _createForOfIteratorHelper(iterable),
        _step82;
      try {
        for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
          var jsonableItem = _step82.value;
          var itemOrError = dataElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator82.e(err);
      } finally {
        _iterator82.f();
      }
      this.annotations = items;
      return null;
    }
  }]);
  return SetterForAnnotatedRelationshipElement;
}();
/**
 * Parse an instance of {@link types!AnnotatedRelationshipElement} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!AnnotatedRelationshipElement},
 * or an error if any
 */
function annotatedRelationshipElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForAnnotatedRelationshipElement();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ANNOTATED_RELATIONSHIP_ELEMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.first === null) {
    return newDeserializationError("The required property 'first' is missing");
  }
  if (setter.second === null) {
    return newDeserializationError("The required property 'second' is missing");
  }
  return new Either(new AnnotatedRelationshipElement(setter.first, setter.second, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.annotations), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Entity}.
 */
var SetterForEntity = /*#__PURE__*/function () {
  function SetterForEntity() {
    _classCallCheck(this, SetterForEntity);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "statements", null);
    _defineProperty(this, "entityType", null);
    _defineProperty(this, "globalAssetId", null);
    _defineProperty(this, "specificAssetIds", null);
  }
  _createClass(SetterForEntity, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator83 = _createForOfIteratorHelper(iterable),
        _step83;
      try {
        for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
          var jsonableItem = _step83.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator83.e(err);
      } finally {
        _iterator83.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator84 = _createForOfIteratorHelper(iterable),
        _step84;
      try {
        for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
          var jsonableItem = _step84.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator84.e(err);
      } finally {
        _iterator84.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator85 = _createForOfIteratorHelper(iterable),
        _step85;
      try {
        for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
          var jsonableItem = _step85.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator85.e(err);
      } finally {
        _iterator85.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator86 = _createForOfIteratorHelper(iterable),
        _step86;
      try {
        for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
          var jsonableItem = _step86.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator86.e(err);
      } finally {
        _iterator86.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator87 = _createForOfIteratorHelper(iterable),
        _step87;
      try {
        for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
          var jsonableItem = _step87.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator87.e(err);
      } finally {
        _iterator87.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator88 = _createForOfIteratorHelper(iterable),
        _step88;
      try {
        for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
          var jsonableItem = _step88.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator88.e(err);
      } finally {
        _iterator88.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link statements}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setStatementsFromJsonable",
    value: function setStatementsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator89 = _createForOfIteratorHelper(iterable),
        _step89;
      try {
        for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
          var jsonableItem = _step89.value;
          var itemOrError = submodelElementFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator89.e(err);
      } finally {
        _iterator89.f();
      }
      this.statements = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link entityType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEntityTypeFromJsonable",
    value: function setEntityTypeFromJsonable(jsonable) {
      var parsedOrError = entityTypeFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.entityType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link globalAssetId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setGlobalAssetIdFromJsonable",
    value: function setGlobalAssetIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.globalAssetId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link specificAssetIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSpecificAssetIdsFromJsonable",
    value: function setSpecificAssetIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator90 = _createForOfIteratorHelper(iterable),
        _step90;
      try {
        for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
          var jsonableItem = _step90.value;
          var itemOrError = specificAssetIdFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator90.e(err);
      } finally {
        _iterator90.f();
      }
      this.specificAssetIds = items;
      return null;
    }
  }]);
  return SetterForEntity;
}();
/**
 * Parse an instance of {@link types!Entity} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Entity},
 * or an error if any
 */
function entityFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForEntity();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ENTITY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.entityType === null) {
    return newDeserializationError("The required property 'entityType' is missing");
  }
  return new Either(new Entity(setter.entityType, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.statements, setter.globalAssetId, setter.specificAssetIds), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!EntityType}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function entityTypeFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = entityTypeFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of EntityType: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!Direction}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function directionFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = directionFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of Direction: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!StateOfEvent}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function stateOfEventFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = stateOfEventFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of StateOfEvent: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!EventPayload}.
 */
var SetterForEventPayload = /*#__PURE__*/function () {
  function SetterForEventPayload() {
    _classCallCheck(this, SetterForEventPayload);
    _defineProperty(this, "source", null);
    _defineProperty(this, "sourceSemanticId", null);
    _defineProperty(this, "observableReference", null);
    _defineProperty(this, "observableSemanticId", null);
    _defineProperty(this, "topic", null);
    _defineProperty(this, "subjectId", null);
    _defineProperty(this, "timeStamp", null);
    _defineProperty(this, "payload", null);
  }
  _createClass(SetterForEventPayload, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link source}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSourceFromJsonable",
    value: function setSourceFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.source = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link sourceSemanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSourceSemanticIdFromJsonable",
    value: function setSourceSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.sourceSemanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link observableReference}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setObservableReferenceFromJsonable",
    value: function setObservableReferenceFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.observableReference = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link observableSemanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setObservableSemanticIdFromJsonable",
    value: function setObservableSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.observableSemanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link topic}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTopicFromJsonable",
    value: function setTopicFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.topic = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link subjectId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSubjectIdFromJsonable",
    value: function setSubjectIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.subjectId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link timeStamp}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTimeStampFromJsonable",
    value: function setTimeStampFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.timeStamp = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link payload}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setPayloadFromJsonable",
    value: function setPayloadFromJsonable(jsonable) {
      var parsedOrError = bytesFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.payload = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForEventPayload;
}();
/**
 * Parse an instance of {@link types!EventPayload} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!EventPayload},
 * or an error if any
 */
function eventPayloadFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForEventPayload();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_EVENT_PAYLOAD.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.source === null) {
    return newDeserializationError("The required property 'source' is missing");
  }
  if (setter.observableReference === null) {
    return newDeserializationError("The required property 'observableReference' is missing");
  }
  if (setter.timeStamp === null) {
    return newDeserializationError("The required property 'timeStamp' is missing");
  }
  return new Either(new EventPayload(setter.source, setter.observableReference, setter.timeStamp, setter.sourceSemanticId, setter.observableSemanticId, setter.topic, setter.subjectId, setter.payload), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IEventElement}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function eventElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = EVENT_ELEMENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IEventElement: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!BasicEventElement}.
 */
var SetterForBasicEventElement = /*#__PURE__*/function () {
  function SetterForBasicEventElement() {
    _classCallCheck(this, SetterForBasicEventElement);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "observed", null);
    _defineProperty(this, "direction", null);
    _defineProperty(this, "state", null);
    _defineProperty(this, "messageTopic", null);
    _defineProperty(this, "messageBroker", null);
    _defineProperty(this, "lastUpdate", null);
    _defineProperty(this, "minInterval", null);
    _defineProperty(this, "maxInterval", null);
  }
  _createClass(SetterForBasicEventElement, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator91 = _createForOfIteratorHelper(iterable),
        _step91;
      try {
        for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
          var jsonableItem = _step91.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator91.e(err);
      } finally {
        _iterator91.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator92 = _createForOfIteratorHelper(iterable),
        _step92;
      try {
        for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
          var jsonableItem = _step92.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator92.e(err);
      } finally {
        _iterator92.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator93 = _createForOfIteratorHelper(iterable),
        _step93;
      try {
        for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
          var jsonableItem = _step93.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator93.e(err);
      } finally {
        _iterator93.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator94 = _createForOfIteratorHelper(iterable),
        _step94;
      try {
        for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
          var jsonableItem = _step94.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator94.e(err);
      } finally {
        _iterator94.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator95 = _createForOfIteratorHelper(iterable),
        _step95;
      try {
        for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
          var jsonableItem = _step95.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator95.e(err);
      } finally {
        _iterator95.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator96 = _createForOfIteratorHelper(iterable),
        _step96;
      try {
        for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
          var jsonableItem = _step96.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator96.e(err);
      } finally {
        _iterator96.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link observed}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setObservedFromJsonable",
    value: function setObservedFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.observed = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link direction}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDirectionFromJsonable",
    value: function setDirectionFromJsonable(jsonable) {
      var parsedOrError = directionFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.direction = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link state}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setStateFromJsonable",
    value: function setStateFromJsonable(jsonable) {
      var parsedOrError = stateOfEventFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.state = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link messageTopic}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMessageTopicFromJsonable",
    value: function setMessageTopicFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.messageTopic = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link messageBroker}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMessageBrokerFromJsonable",
    value: function setMessageBrokerFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.messageBroker = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link lastUpdate}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLastUpdateFromJsonable",
    value: function setLastUpdateFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.lastUpdate = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link minInterval}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMinIntervalFromJsonable",
    value: function setMinIntervalFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.minInterval = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link maxInterval}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMaxIntervalFromJsonable",
    value: function setMaxIntervalFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.maxInterval = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForBasicEventElement;
}();
/**
 * Parse an instance of {@link types!BasicEventElement} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!BasicEventElement},
 * or an error if any
 */
function basicEventElementFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForBasicEventElement();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_BASIC_EVENT_ELEMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.observed === null) {
    return newDeserializationError("The required property 'observed' is missing");
  }
  if (setter.direction === null) {
    return newDeserializationError("The required property 'direction' is missing");
  }
  if (setter.state === null) {
    return newDeserializationError("The required property 'state' is missing");
  }
  return new Either(new BasicEventElement(setter.observed, setter.direction, setter.state, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.messageTopic, setter.messageBroker, setter.lastUpdate, setter.minInterval, setter.maxInterval), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Operation}.
 */
var SetterForOperation = /*#__PURE__*/function () {
  function SetterForOperation() {
    _classCallCheck(this, SetterForOperation);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "inputVariables", null);
    _defineProperty(this, "outputVariables", null);
    _defineProperty(this, "inoutputVariables", null);
  }
  _createClass(SetterForOperation, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator97 = _createForOfIteratorHelper(iterable),
        _step97;
      try {
        for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
          var jsonableItem = _step97.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator97.e(err);
      } finally {
        _iterator97.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator98 = _createForOfIteratorHelper(iterable),
        _step98;
      try {
        for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
          var jsonableItem = _step98.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator98.e(err);
      } finally {
        _iterator98.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator99 = _createForOfIteratorHelper(iterable),
        _step99;
      try {
        for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
          var jsonableItem = _step99.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator99.e(err);
      } finally {
        _iterator99.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator100 = _createForOfIteratorHelper(iterable),
        _step100;
      try {
        for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
          var jsonableItem = _step100.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator100.e(err);
      } finally {
        _iterator100.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator101 = _createForOfIteratorHelper(iterable),
        _step101;
      try {
        for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
          var jsonableItem = _step101.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator101.e(err);
      } finally {
        _iterator101.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator102 = _createForOfIteratorHelper(iterable),
        _step102;
      try {
        for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {
          var jsonableItem = _step102.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator102.e(err);
      } finally {
        _iterator102.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link inputVariables}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setInputVariablesFromJsonable",
    value: function setInputVariablesFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator103 = _createForOfIteratorHelper(iterable),
        _step103;
      try {
        for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {
          var jsonableItem = _step103.value;
          var itemOrError = operationVariableFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator103.e(err);
      } finally {
        _iterator103.f();
      }
      this.inputVariables = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link outputVariables}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setOutputVariablesFromJsonable",
    value: function setOutputVariablesFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator104 = _createForOfIteratorHelper(iterable),
        _step104;
      try {
        for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {
          var jsonableItem = _step104.value;
          var itemOrError = operationVariableFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator104.e(err);
      } finally {
        _iterator104.f();
      }
      this.outputVariables = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link inoutputVariables}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setInoutputVariablesFromJsonable",
    value: function setInoutputVariablesFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator105 = _createForOfIteratorHelper(iterable),
        _step105;
      try {
        for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {
          var jsonableItem = _step105.value;
          var itemOrError = operationVariableFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator105.e(err);
      } finally {
        _iterator105.f();
      }
      this.inoutputVariables = items;
      return null;
    }
  }]);
  return SetterForOperation;
}();
/**
 * Parse an instance of {@link types!Operation} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Operation},
 * or an error if any
 */
function operationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForOperation();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_OPERATION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  return new Either(new Operation(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications, setter.inputVariables, setter.outputVariables, setter.inoutputVariables), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!OperationVariable}.
 */
var SetterForOperationVariable = /*#__PURE__*/function () {
  function SetterForOperationVariable() {
    _classCallCheck(this, SetterForOperationVariable);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForOperationVariable, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = submodelElementFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForOperationVariable;
}();
/**
 * Parse an instance of {@link types!OperationVariable} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!OperationVariable},
 * or an error if any
 */
function operationVariableFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForOperationVariable();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_OPERATION_VARIABLE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.value === null) {
    return newDeserializationError("The required property 'value' is missing");
  }
  return new Either(new OperationVariable(setter.value), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Capability}.
 */
var SetterForCapability = /*#__PURE__*/function () {
  function SetterForCapability() {
    _classCallCheck(this, SetterForCapability);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "semanticId", null);
    _defineProperty(this, "supplementalSemanticIds", null);
    _defineProperty(this, "qualifiers", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
  }
  _createClass(SetterForCapability, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator106 = _createForOfIteratorHelper(iterable),
        _step106;
      try {
        for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {
          var jsonableItem = _step106.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator106.e(err);
      } finally {
        _iterator106.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator107 = _createForOfIteratorHelper(iterable),
        _step107;
      try {
        for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {
          var jsonableItem = _step107.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator107.e(err);
      } finally {
        _iterator107.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator108 = _createForOfIteratorHelper(iterable),
        _step108;
      try {
        for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {
          var jsonableItem = _step108.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator108.e(err);
      } finally {
        _iterator108.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link semanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSemanticIdFromJsonable",
    value: function setSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.semanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link supplementalSemanticIds}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSupplementalSemanticIdsFromJsonable",
    value: function setSupplementalSemanticIdsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator109 = _createForOfIteratorHelper(iterable),
        _step109;
      try {
        for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {
          var jsonableItem = _step109.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator109.e(err);
      } finally {
        _iterator109.f();
      }
      this.supplementalSemanticIds = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link qualifiers}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setQualifiersFromJsonable",
    value: function setQualifiersFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator110 = _createForOfIteratorHelper(iterable),
        _step110;
      try {
        for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {
          var jsonableItem = _step110.value;
          var itemOrError = qualifierFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator110.e(err);
      } finally {
        _iterator110.f();
      }
      this.qualifiers = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator111 = _createForOfIteratorHelper(iterable),
        _step111;
      try {
        for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {
          var jsonableItem = _step111.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator111.e(err);
      } finally {
        _iterator111.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }
  }]);
  return SetterForCapability;
}();
/**
 * Parse an instance of {@link types!Capability} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Capability},
 * or an error if any
 */
function capabilityFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForCapability();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_CAPABILITY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  return new Either(new Capability(setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.semanticId, setter.supplementalSemanticIds, setter.qualifiers, setter.embeddedDataSpecifications), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!ConceptDescription}.
 */
var SetterForConceptDescription = /*#__PURE__*/function () {
  function SetterForConceptDescription() {
    _classCallCheck(this, SetterForConceptDescription);
    _defineProperty(this, "extensions", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "idShort", null);
    _defineProperty(this, "displayName", null);
    _defineProperty(this, "description", null);
    _defineProperty(this, "administration", null);
    _defineProperty(this, "id", null);
    _defineProperty(this, "embeddedDataSpecifications", null);
    _defineProperty(this, "isCaseOf", null);
  }
  _createClass(SetterForConceptDescription, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link extensions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setExtensionsFromJsonable",
    value: function setExtensionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator112 = _createForOfIteratorHelper(iterable),
        _step112;
      try {
        for (_iterator112.s(); !(_step112 = _iterator112.n()).done;) {
          var jsonableItem = _step112.value;
          var itemOrError = extensionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator112.e(err);
      } finally {
        _iterator112.f();
      }
      this.extensions = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link category}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setCategoryFromJsonable",
    value: function setCategoryFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.category = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link idShort}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdShortFromJsonable",
    value: function setIdShortFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.idShort = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link displayName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDisplayNameFromJsonable",
    value: function setDisplayNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator113 = _createForOfIteratorHelper(iterable),
        _step113;
      try {
        for (_iterator113.s(); !(_step113 = _iterator113.n()).done;) {
          var jsonableItem = _step113.value;
          var itemOrError = langStringNameTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator113.e(err);
      } finally {
        _iterator113.f();
      }
      this.displayName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link description}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDescriptionFromJsonable",
    value: function setDescriptionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator114 = _createForOfIteratorHelper(iterable),
        _step114;
      try {
        for (_iterator114.s(); !(_step114 = _iterator114.n()).done;) {
          var jsonableItem = _step114.value;
          var itemOrError = langStringTextTypeFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator114.e(err);
      } finally {
        _iterator114.f();
      }
      this.description = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link administration}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAdministrationFromJsonable",
    value: function setAdministrationFromJsonable(jsonable) {
      var parsedOrError = administrativeInformationFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.administration = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link id}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIdFromJsonable",
    value: function setIdFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.id = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link embeddedDataSpecifications}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setEmbeddedDataSpecificationsFromJsonable",
    value: function setEmbeddedDataSpecificationsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator115 = _createForOfIteratorHelper(iterable),
        _step115;
      try {
        for (_iterator115.s(); !(_step115 = _iterator115.n()).done;) {
          var jsonableItem = _step115.value;
          var itemOrError = embeddedDataSpecificationFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator115.e(err);
      } finally {
        _iterator115.f();
      }
      this.embeddedDataSpecifications = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link isCaseOf}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setIsCaseOfFromJsonable",
    value: function setIsCaseOfFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator116 = _createForOfIteratorHelper(iterable),
        _step116;
      try {
        for (_iterator116.s(); !(_step116 = _iterator116.n()).done;) {
          var jsonableItem = _step116.value;
          var itemOrError = referenceFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator116.e(err);
      } finally {
        _iterator116.f();
      }
      this.isCaseOf = items;
      return null;
    }
  }]);
  return SetterForConceptDescription;
}();
/**
 * Parse an instance of {@link types!ConceptDescription} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ConceptDescription},
 * or an error if any
 */
function conceptDescriptionFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForConceptDescription();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_CONCEPT_DESCRIPTION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.id === null) {
    return newDeserializationError("The required property 'id' is missing");
  }
  return new Either(new ConceptDescription(setter.id, setter.extensions, setter.category, setter.idShort, setter.displayName, setter.description, setter.administration, setter.embeddedDataSpecifications, setter.isCaseOf), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!ReferenceTypes}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function referenceTypesFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = referenceTypesFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of ReferenceTypes: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Reference}.
 */
var SetterForReference = /*#__PURE__*/function () {
  function SetterForReference() {
    _classCallCheck(this, SetterForReference);
    _defineProperty(this, "type", null);
    _defineProperty(this, "referredSemanticId", null);
    _defineProperty(this, "keys", null);
  }
  _createClass(SetterForReference, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link type}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypeFromJsonable",
    value: function setTypeFromJsonable(jsonable) {
      var parsedOrError = referenceTypesFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.type = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link referredSemanticId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setReferredSemanticIdFromJsonable",
    value: function setReferredSemanticIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.referredSemanticId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link keys}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setKeysFromJsonable",
    value: function setKeysFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator117 = _createForOfIteratorHelper(iterable),
        _step117;
      try {
        for (_iterator117.s(); !(_step117 = _iterator117.n()).done;) {
          var jsonableItem = _step117.value;
          var itemOrError = keyFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator117.e(err);
      } finally {
        _iterator117.f();
      }
      this.keys = items;
      return null;
    }
  }]);
  return SetterForReference;
}();
/**
 * Parse an instance of {@link types!Reference} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Reference},
 * or an error if any
 */
function referenceFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForReference();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_REFERENCE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.type === null) {
    return newDeserializationError("The required property 'type' is missing");
  }
  if (setter.keys === null) {
    return newDeserializationError("The required property 'keys' is missing");
  }
  return new Either(new Reference(setter.type, setter.keys, setter.referredSemanticId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Key}.
 */
var SetterForKey = /*#__PURE__*/function () {
  function SetterForKey() {
    _classCallCheck(this, SetterForKey);
    _defineProperty(this, "type", null);
    _defineProperty(this, "value", null);
  }
  _createClass(SetterForKey, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link type}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypeFromJsonable",
    value: function setTypeFromJsonable(jsonable) {
      var parsedOrError = keyTypesFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.type = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForKey;
}();
/**
 * Parse an instance of {@link types!Key} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Key},
 * or an error if any
 */
function keyFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForKey();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_KEY.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.type === null) {
    return newDeserializationError("The required property 'type' is missing");
  }
  if (setter.value === null) {
    return newDeserializationError("The required property 'value' is missing");
  }
  return new Either(new Key(setter.type, setter.value), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!KeyTypes}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function keyTypesFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = keyTypesFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of KeyTypes: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!DataTypeDefXsd}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function dataTypeDefXsdFromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = dataTypeDefXsdFromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of DataTypeDefXsd: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IAbstractLangString}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function abstractLangStringFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = ABSTRACT_LANG_STRING_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IAbstractLangString: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringNameType}.
 */
var SetterForLangStringNameType = /*#__PURE__*/function () {
  function SetterForLangStringNameType() {
    _classCallCheck(this, SetterForLangStringNameType);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringNameType, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringNameType;
}();
/**
 * Parse an instance of {@link types!LangStringNameType} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringNameType},
 * or an error if any
 */
function langStringNameTypeFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringNameType();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_NAME_TYPE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new Either(new LangStringNameType(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringTextType}.
 */
var SetterForLangStringTextType = /*#__PURE__*/function () {
  function SetterForLangStringTextType() {
    _classCallCheck(this, SetterForLangStringTextType);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringTextType, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringTextType;
}();
/**
 * Parse an instance of {@link types!LangStringTextType} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringTextType},
 * or an error if any
 */
function langStringTextTypeFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringTextType();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_TEXT_TYPE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new Either(new LangStringTextType(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!Environment}.
 */
var SetterForEnvironment = /*#__PURE__*/function () {
  function SetterForEnvironment() {
    _classCallCheck(this, SetterForEnvironment);
    _defineProperty(this, "assetAdministrationShells", null);
    _defineProperty(this, "submodels", null);
    _defineProperty(this, "conceptDescriptions", null);
  }
  _createClass(SetterForEnvironment, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link assetAdministrationShells}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setAssetAdministrationShellsFromJsonable",
    value: function setAssetAdministrationShellsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator118 = _createForOfIteratorHelper(iterable),
        _step118;
      try {
        for (_iterator118.s(); !(_step118 = _iterator118.n()).done;) {
          var jsonableItem = _step118.value;
          var itemOrError = assetAdministrationShellFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator118.e(err);
      } finally {
        _iterator118.f();
      }
      this.assetAdministrationShells = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link submodels}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSubmodelsFromJsonable",
    value: function setSubmodelsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator119 = _createForOfIteratorHelper(iterable),
        _step119;
      try {
        for (_iterator119.s(); !(_step119 = _iterator119.n()).done;) {
          var jsonableItem = _step119.value;
          var itemOrError = submodelFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator119.e(err);
      } finally {
        _iterator119.f();
      }
      this.submodels = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link conceptDescriptions}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setConceptDescriptionsFromJsonable",
    value: function setConceptDescriptionsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator120 = _createForOfIteratorHelper(iterable),
        _step120;
      try {
        for (_iterator120.s(); !(_step120 = _iterator120.n()).done;) {
          var jsonableItem = _step120.value;
          var itemOrError = conceptDescriptionFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator120.e(err);
      } finally {
        _iterator120.f();
      }
      this.conceptDescriptions = items;
      return null;
    }
  }]);
  return SetterForEnvironment;
}();
/**
 * Parse an instance of {@link types!Environment} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!Environment},
 * or an error if any
 */
function environmentFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForEnvironment();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_ENVIRONMENT.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  return new Either(new Environment(setter.assetAdministrationShells, setter.submodels, setter.conceptDescriptions), null);
}

/**
 * Parse `jsonable` as an instance
 * of {@link types!IDataSpecificationContent}.
 *
 * @param jsonable - to be parsed
 * @returns parsed instance, or error if `jsonable` is invalid
 */
function dataSpecificationContentFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var modelType = jsonable["modelType"];
  if (modelType === undefined) {
    return newDeserializationError("Expected the property modelType, but got none");
  }
  if (typeof modelType !== "string") {
    return newDeserializationError("Expected the property modelType to be a string, but got: ".concat(_typeof(modelType)));
  }
  var dispatch = DATA_SPECIFICATION_CONTENT_FROM_JSONABLE_DISPATCH.get(modelType);
  if (dispatch === undefined) {
    return newDeserializationError("Unexpected model type for IDataSpecificationContent: ".concat(modelType));
  }
  return dispatch(jsonable);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!EmbeddedDataSpecification}.
 */
var SetterForEmbeddedDataSpecification = /*#__PURE__*/function () {
  function SetterForEmbeddedDataSpecification() {
    _classCallCheck(this, SetterForEmbeddedDataSpecification);
    _defineProperty(this, "dataSpecification", null);
    _defineProperty(this, "dataSpecificationContent", null);
  }
  _createClass(SetterForEmbeddedDataSpecification, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link dataSpecification}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDataSpecificationFromJsonable",
    value: function setDataSpecificationFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.dataSpecification = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link dataSpecificationContent}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDataSpecificationContentFromJsonable",
    value: function setDataSpecificationContentFromJsonable(jsonable) {
      var parsedOrError = dataSpecificationContentFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.dataSpecificationContent = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForEmbeddedDataSpecification;
}();
/**
 * Parse an instance of {@link types!EmbeddedDataSpecification} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!EmbeddedDataSpecification},
 * or an error if any
 */
function embeddedDataSpecificationFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForEmbeddedDataSpecification();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_EMBEDDED_DATA_SPECIFICATION.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.dataSpecification === null) {
    return newDeserializationError("The required property 'dataSpecification' is missing");
  }
  if (setter.dataSpecificationContent === null) {
    return newDeserializationError("The required property 'dataSpecificationContent' is missing");
  }
  return new Either(new EmbeddedDataSpecification(setter.dataSpecification, setter.dataSpecificationContent), null);
}

/**
 * Parse `jsonable` structure as a literal
 * of {@link types!DataTypeIec61360}.
 *
 * @param jsonable - to be parsed
 * @returns parsed literal, or an error if `jsonable` invalid
 */
function dataTypeIec61360FromJsonable(jsonable) {
  if (typeof jsonable !== "string") {
    return newDeserializationError("Expected a string, but got: ".concat(_typeof(jsonable)));
  }
  var literal = dataTypeIec61360FromString(jsonable);
  if (literal === null) {
    return newDeserializationError("Not a valid string representation of " + "a literal of DataTypeIec61360: ".concat(jsonable));
  }
  return new Either(literal, null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LevelType}.
 */
var SetterForLevelType = /*#__PURE__*/function () {
  function SetterForLevelType() {
    _classCallCheck(this, SetterForLevelType);
    _defineProperty(this, "min", null);
    _defineProperty(this, "nom", null);
    _defineProperty(this, "typ", null);
    _defineProperty(this, "max", null);
  }
  _createClass(SetterForLevelType, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link min}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMinFromJsonable",
    value: function setMinFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.min = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link nom}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setNomFromJsonable",
    value: function setNomFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.nom = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link typ}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTypFromJsonable",
    value: function setTypFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.typ = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link max}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setMaxFromJsonable",
    value: function setMaxFromJsonable(jsonable) {
      var parsedOrError = booleanFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.max = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLevelType;
}();
/**
 * Parse an instance of {@link types!LevelType} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LevelType},
 * or an error if any
 */
function levelTypeFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLevelType();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LEVEL_TYPE.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.min === null) {
    return newDeserializationError("The required property 'min' is missing");
  }
  if (setter.nom === null) {
    return newDeserializationError("The required property 'nom' is missing");
  }
  if (setter.typ === null) {
    return newDeserializationError("The required property 'typ' is missing");
  }
  if (setter.max === null) {
    return newDeserializationError("The required property 'max' is missing");
  }
  return new Either(new LevelType(setter.min, setter.nom, setter.typ, setter.max), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!ValueReferencePair}.
 */
var SetterForValueReferencePair = /*#__PURE__*/function () {
  function SetterForValueReferencePair() {
    _classCallCheck(this, SetterForValueReferencePair);
    _defineProperty(this, "value", null);
    _defineProperty(this, "valueId", null);
  }
  _createClass(SetterForValueReferencePair, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueIdFromJsonable",
    value: function setValueIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueId = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForValueReferencePair;
}();
/**
 * Parse an instance of {@link types!ValueReferencePair} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ValueReferencePair},
 * or an error if any
 */
function valueReferencePairFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForValueReferencePair();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_VALUE_REFERENCE_PAIR.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.value === null) {
    return newDeserializationError("The required property 'value' is missing");
  }
  if (setter.valueId === null) {
    return newDeserializationError("The required property 'valueId' is missing");
  }
  return new Either(new ValueReferencePair(setter.value, setter.valueId), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!ValueList}.
 */
var SetterForValueList = /*#__PURE__*/function () {
  function SetterForValueList() {
    _classCallCheck(this, SetterForValueList);
    _defineProperty(this, "valueReferencePairs", null);
  }
  _createClass(SetterForValueList, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueReferencePairs}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueReferencePairsFromJsonable",
    value: function setValueReferencePairsFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator121 = _createForOfIteratorHelper(iterable),
        _step121;
      try {
        for (_iterator121.s(); !(_step121 = _iterator121.n()).done;) {
          var jsonableItem = _step121.value;
          var itemOrError = valueReferencePairFromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator121.e(err);
      } finally {
        _iterator121.f();
      }
      this.valueReferencePairs = items;
      return null;
    }
  }]);
  return SetterForValueList;
}();
/**
 * Parse an instance of {@link types!ValueList} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!ValueList},
 * or an error if any
 */
function valueListFromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForValueList();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_VALUE_LIST.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.valueReferencePairs === null) {
    return newDeserializationError("The required property 'valueReferencePairs' is missing");
  }
  return new Either(new ValueList(setter.valueReferencePairs), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringPreferredNameTypeIec61360}.
 */
var SetterForLangStringPreferredNameTypeIec61360 = /*#__PURE__*/function () {
  function SetterForLangStringPreferredNameTypeIec61360() {
    _classCallCheck(this, SetterForLangStringPreferredNameTypeIec61360);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringPreferredNameTypeIec61360, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringPreferredNameTypeIec61360;
}();
/**
 * Parse an instance of {@link types!LangStringPreferredNameTypeIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringPreferredNameTypeIec61360},
 * or an error if any
 */
function langStringPreferredNameTypeIec61360FromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringPreferredNameTypeIec61360();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_PREFERRED_NAME_TYPE_IEC_61360.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new Either(new LangStringPreferredNameTypeIec61360(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringShortNameTypeIec61360}.
 */
var SetterForLangStringShortNameTypeIec61360 = /*#__PURE__*/function () {
  function SetterForLangStringShortNameTypeIec61360() {
    _classCallCheck(this, SetterForLangStringShortNameTypeIec61360);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringShortNameTypeIec61360, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringShortNameTypeIec61360;
}();
/**
 * Parse an instance of {@link types!LangStringShortNameTypeIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringShortNameTypeIec61360},
 * or an error if any
 */
function langStringShortNameTypeIec61360FromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringShortNameTypeIec61360();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_SHORT_NAME_TYPE_IEC_61360.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new Either(new LangStringShortNameTypeIec61360(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!LangStringDefinitionTypeIec61360}.
 */
var SetterForLangStringDefinitionTypeIec61360 = /*#__PURE__*/function () {
  function SetterForLangStringDefinitionTypeIec61360() {
    _classCallCheck(this, SetterForLangStringDefinitionTypeIec61360);
    _defineProperty(this, "language", null);
    _defineProperty(this, "text", null);
  }
  _createClass(SetterForLangStringDefinitionTypeIec61360, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link language}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLanguageFromJsonable",
    value: function setLanguageFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.language = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link text}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setTextFromJsonable",
    value: function setTextFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.text = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForLangStringDefinitionTypeIec61360;
}();
/**
 * Parse an instance of {@link types!LangStringDefinitionTypeIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!LangStringDefinitionTypeIec61360},
 * or an error if any
 */
function langStringDefinitionTypeIec61360FromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForLangStringDefinitionTypeIec61360();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_LANG_STRING_DEFINITION_TYPE_IEC_61360.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.language === null) {
    return newDeserializationError("The required property 'language' is missing");
  }
  if (setter.text === null) {
    return newDeserializationError("The required property 'text' is missing");
  }
  return new Either(new LangStringDefinitionTypeIec61360(setter.language, setter.text), null);
}

/**
 * Provide de-serialize & set methods for properties
 * of {@link types!DataSpecificationIec61360}.
 */
var SetterForDataSpecificationIec61360 = /*#__PURE__*/function () {
  function SetterForDataSpecificationIec61360() {
    _classCallCheck(this, SetterForDataSpecificationIec61360);
    _defineProperty(this, "preferredName", null);
    _defineProperty(this, "shortName", null);
    _defineProperty(this, "unit", null);
    _defineProperty(this, "unitId", null);
    _defineProperty(this, "sourceOfDefinition", null);
    _defineProperty(this, "symbol", null);
    _defineProperty(this, "dataType", null);
    _defineProperty(this, "definition", null);
    _defineProperty(this, "valueFormat", null);
    _defineProperty(this, "valueList", null);
    _defineProperty(this, "value", null);
    _defineProperty(this, "levelType", null);
  }
  _createClass(SetterForDataSpecificationIec61360, [{
    key: "ignore",
    value:
    /**
     * Ignore `jsonable` and do not set anything.
     *
     * @param jsonable - to be ignored instead of set
     * @returns error, if any
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ignore(jsonable) {
      // Intentionally empty.
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link preferredName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setPreferredNameFromJsonable",
    value: function setPreferredNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator122 = _createForOfIteratorHelper(iterable),
        _step122;
      try {
        for (_iterator122.s(); !(_step122 = _iterator122.n()).done;) {
          var jsonableItem = _step122.value;
          var itemOrError = langStringPreferredNameTypeIec61360FromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator122.e(err);
      } finally {
        _iterator122.f();
      }
      this.preferredName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link shortName}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setShortNameFromJsonable",
    value: function setShortNameFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator123 = _createForOfIteratorHelper(iterable),
        _step123;
      try {
        for (_iterator123.s(); !(_step123 = _iterator123.n()).done;) {
          var jsonableItem = _step123.value;
          var itemOrError = langStringShortNameTypeIec61360FromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator123.e(err);
      } finally {
        _iterator123.f();
      }
      this.shortName = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link unit}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setUnitFromJsonable",
    value: function setUnitFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.unit = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link unitId}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setUnitIdFromJsonable",
    value: function setUnitIdFromJsonable(jsonable) {
      var parsedOrError = referenceFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.unitId = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link sourceOfDefinition}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSourceOfDefinitionFromJsonable",
    value: function setSourceOfDefinitionFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.sourceOfDefinition = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link symbol}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setSymbolFromJsonable",
    value: function setSymbolFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.symbol = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link dataType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDataTypeFromJsonable",
    value: function setDataTypeFromJsonable(jsonable) {
      var parsedOrError = dataTypeIec61360FromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.dataType = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link definition}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setDefinitionFromJsonable",
    value: function setDefinitionFromJsonable(jsonable) {
      if (jsonable === null) {
        return new DeserializationError("Expected an iterable, but got null");
      }
      if (_typeof(jsonable) !== "object") {
        return new DeserializationError("Expected an iterable, but got: ".concat(_typeof(jsonable)));
      }
      if (typeof jsonable[Symbol.iterator] !== "function") {
        return new DeserializationError("Expected an iterable with iterator function, " + "but got iterator of type: ".concat(_typeof(jsonable[Symbol.iterator])));
      }
      var iterable = jsonable;
      var items = new Array();
      var i = 0;
      var _iterator124 = _createForOfIteratorHelper(iterable),
        _step124;
      try {
        for (_iterator124.s(); !(_step124 = _iterator124.n()).done;) {
          var jsonableItem = _step124.value;
          var itemOrError = langStringDefinitionTypeIec61360FromJsonable(jsonableItem);
          if (itemOrError.error !== null) {
            itemOrError.error.path.prepend(new IndexSegment$1(iterable, i));
            return itemOrError.error;
          }
          items.push(itemOrError.mustValue());
          i++;
        }
      } catch (err) {
        _iterator124.e(err);
      } finally {
        _iterator124.f();
      }
      this.definition = items;
      return null;
    }

    /**
     * Parse `jsonable` as the value of {@link valueFormat}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFormatFromJsonable",
    value: function setValueFormatFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueFormat = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link valueList}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueListFromJsonable",
    value: function setValueListFromJsonable(jsonable) {
      var parsedOrError = valueListFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.valueList = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link value}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setValueFromJsonable",
    value: function setValueFromJsonable(jsonable) {
      var parsedOrError = stringFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.value = parsedOrError.mustValue();
        return null;
      }
    }

    /**
     * Parse `jsonable` as the value of {@link levelType}.
     *
     * @param jsonable - to be parsed
     * @returns error, if any
     */
  }, {
    key: "setLevelTypeFromJsonable",
    value: function setLevelTypeFromJsonable(jsonable) {
      var parsedOrError = levelTypeFromJsonable(jsonable);
      if (parsedOrError.error !== null) {
        return parsedOrError.error;
      } else {
        this.levelType = parsedOrError.mustValue();
        return null;
      }
    }
  }]);
  return SetterForDataSpecificationIec61360;
}();
/**
 * Parse an instance of {@link types!DataSpecificationIec61360} from the JSON-able
 * structure `jsonable`.
 *
 * @param jsonable - structure to be parsed
 * @returns parsed instance of {@link types!DataSpecificationIec61360},
 * or an error if any
 */
function dataSpecificationIec61360FromJsonable(jsonable) {
  if (jsonable === null) {
    return newDeserializationError("Expected a JSON object, but got null");
  }
  if (Array.isArray(jsonable)) {
    return newDeserializationError("Expected a JSON object, but got a JSON array");
  }
  if (_typeof(jsonable) !== "object") {
    return newDeserializationError("Expected a JSON object, but got: ".concat(_typeof(jsonable)));
  }
  var setter = new SetterForDataSpecificationIec61360();
  for (var key in jsonable) {
    var jsonableValue = jsonable[key];
    var setterMethod = SETTER_MAP_FOR_DATA_SPECIFICATION_IEC_61360.get(key);

    // NOTE (mristin, 2022-11-30):
    // Since we conflate here a JavaScript object with a JSON object, we ignore
    // properties which we do not know how to de-serialize and assume they are
    // related to the *JavaScript* properties of the object or `Object` prototype.
    if (setterMethod === undefined) {
      continue;
    }
    var error = setterMethod.call(setter, jsonableValue);
    if (error !== null) {
      error.path.prepend(new PropertySegment$1(jsonable, key));
      return new Either(null, error);
    }
  }
  if (setter.preferredName === null) {
    return newDeserializationError("The required property 'preferredName' is missing");
  }
  return new Either(new DataSpecificationIec61360(setter.preferredName, setter.shortName, setter.unit, setter.unitId, setter.sourceOfDefinition, setter.symbol, setter.dataType, setter.definition, setter.valueFormat, setter.valueList, setter.value, setter.levelType), null);
}
var HAS_SEMANTICS_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["Entity", entityFromJsonable], ["Extension", extensionFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Qualifier", qualifierFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["SpecificAssetId", specificAssetIdFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var SETTER_MAP_FOR_EXTENSION = new Map([["semanticId", SetterForExtension.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForExtension.prototype.setSupplementalSemanticIdsFromJsonable], ["name", SetterForExtension.prototype.setNameFromJsonable], ["valueType", SetterForExtension.prototype.setValueTypeFromJsonable], ["value", SetterForExtension.prototype.setValueFromJsonable], ["refersTo", SetterForExtension.prototype.setRefersToFromJsonable], ["modelType", SetterForExtension.prototype.ignore]]);
var HAS_EXTENSIONS_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["AssetAdministrationShell", assetAdministrationShellFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["ConceptDescription", conceptDescriptionFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var REFERABLE_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["AssetAdministrationShell", assetAdministrationShellFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["ConceptDescription", conceptDescriptionFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var IDENTIFIABLE_FROM_JSONABLE_DISPATCH = new Map([["AssetAdministrationShell", assetAdministrationShellFromJsonable], ["ConceptDescription", conceptDescriptionFromJsonable], ["Submodel", submodelFromJsonable]]);
var HAS_KIND_FROM_JSONABLE_DISPATCH = new Map([["Submodel", submodelFromJsonable]]);
var HAS_DATA_SPECIFICATION_FROM_JSONABLE_DISPATCH = new Map([["AdministrativeInformation", administrativeInformationFromJsonable], ["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["AssetAdministrationShell", assetAdministrationShellFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["ConceptDescription", conceptDescriptionFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var SETTER_MAP_FOR_ADMINISTRATIVE_INFORMATION = new Map([["embeddedDataSpecifications", SetterForAdministrativeInformation.prototype.setEmbeddedDataSpecificationsFromJsonable], ["version", SetterForAdministrativeInformation.prototype.setVersionFromJsonable], ["revision", SetterForAdministrativeInformation.prototype.setRevisionFromJsonable], ["creator", SetterForAdministrativeInformation.prototype.setCreatorFromJsonable], ["templateId", SetterForAdministrativeInformation.prototype.setTemplateIdFromJsonable], ["modelType", SetterForAdministrativeInformation.prototype.ignore]]);
var QUALIFIABLE_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["Submodel", submodelFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var SETTER_MAP_FOR_QUALIFIER = new Map([["semanticId", SetterForQualifier.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForQualifier.prototype.setSupplementalSemanticIdsFromJsonable], ["kind", SetterForQualifier.prototype.setKindFromJsonable], ["type", SetterForQualifier.prototype.setTypeFromJsonable], ["valueType", SetterForQualifier.prototype.setValueTypeFromJsonable], ["value", SetterForQualifier.prototype.setValueFromJsonable], ["valueId", SetterForQualifier.prototype.setValueIdFromJsonable], ["modelType", SetterForQualifier.prototype.ignore]]);
var SETTER_MAP_FOR_ASSET_ADMINISTRATION_SHELL = new Map([["extensions", SetterForAssetAdministrationShell.prototype.setExtensionsFromJsonable], ["category", SetterForAssetAdministrationShell.prototype.setCategoryFromJsonable], ["idShort", SetterForAssetAdministrationShell.prototype.setIdShortFromJsonable], ["displayName", SetterForAssetAdministrationShell.prototype.setDisplayNameFromJsonable], ["description", SetterForAssetAdministrationShell.prototype.setDescriptionFromJsonable], ["administration", SetterForAssetAdministrationShell.prototype.setAdministrationFromJsonable], ["id", SetterForAssetAdministrationShell.prototype.setIdFromJsonable], ["embeddedDataSpecifications", SetterForAssetAdministrationShell.prototype.setEmbeddedDataSpecificationsFromJsonable], ["derivedFrom", SetterForAssetAdministrationShell.prototype.setDerivedFromFromJsonable], ["assetInformation", SetterForAssetAdministrationShell.prototype.setAssetInformationFromJsonable], ["submodels", SetterForAssetAdministrationShell.prototype.setSubmodelsFromJsonable], ["modelType", SetterForAssetAdministrationShell.prototype.ignore]]);
var SETTER_MAP_FOR_ASSET_INFORMATION = new Map([["assetKind", SetterForAssetInformation.prototype.setAssetKindFromJsonable], ["globalAssetId", SetterForAssetInformation.prototype.setGlobalAssetIdFromJsonable], ["specificAssetIds", SetterForAssetInformation.prototype.setSpecificAssetIdsFromJsonable], ["assetType", SetterForAssetInformation.prototype.setAssetTypeFromJsonable], ["defaultThumbnail", SetterForAssetInformation.prototype.setDefaultThumbnailFromJsonable], ["modelType", SetterForAssetInformation.prototype.ignore]]);
var SETTER_MAP_FOR_RESOURCE = new Map([["path", SetterForResource.prototype.setPathFromJsonable], ["contentType", SetterForResource.prototype.setContentTypeFromJsonable], ["modelType", SetterForResource.prototype.ignore]]);
var SETTER_MAP_FOR_SPECIFIC_ASSET_ID = new Map([["semanticId", SetterForSpecificAssetId.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForSpecificAssetId.prototype.setSupplementalSemanticIdsFromJsonable], ["name", SetterForSpecificAssetId.prototype.setNameFromJsonable], ["value", SetterForSpecificAssetId.prototype.setValueFromJsonable], ["externalSubjectId", SetterForSpecificAssetId.prototype.setExternalSubjectIdFromJsonable], ["modelType", SetterForSpecificAssetId.prototype.ignore]]);
var SETTER_MAP_FOR_SUBMODEL = new Map([["extensions", SetterForSubmodel.prototype.setExtensionsFromJsonable], ["category", SetterForSubmodel.prototype.setCategoryFromJsonable], ["idShort", SetterForSubmodel.prototype.setIdShortFromJsonable], ["displayName", SetterForSubmodel.prototype.setDisplayNameFromJsonable], ["description", SetterForSubmodel.prototype.setDescriptionFromJsonable], ["administration", SetterForSubmodel.prototype.setAdministrationFromJsonable], ["id", SetterForSubmodel.prototype.setIdFromJsonable], ["kind", SetterForSubmodel.prototype.setKindFromJsonable], ["semanticId", SetterForSubmodel.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForSubmodel.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForSubmodel.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForSubmodel.prototype.setEmbeddedDataSpecificationsFromJsonable], ["submodelElements", SetterForSubmodel.prototype.setSubmodelElementsFromJsonable], ["modelType", SetterForSubmodel.prototype.ignore]]);
var SUBMODEL_ELEMENT_FROM_JSONABLE_DISPATCH = new Map([["RelationshipElement", relationshipElementFromJsonableWithoutDispatch], ["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["BasicEventElement", basicEventElementFromJsonable], ["Blob", blobFromJsonable], ["Capability", capabilityFromJsonable], ["Entity", entityFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Operation", operationFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable], ["SubmodelElementCollection", submodelElementCollectionFromJsonable], ["SubmodelElementList", submodelElementListFromJsonable]]);
var RELATIONSHIP_ELEMENT_FROM_JSONABLE_DISPATCH = new Map([["AnnotatedRelationshipElement", annotatedRelationshipElementFromJsonable], ["RelationshipElement", relationshipElementFromJsonableWithoutDispatch]]);
var SETTER_MAP_FOR_RELATIONSHIP_ELEMENT = new Map([["extensions", SetterForRelationshipElement.prototype.setExtensionsFromJsonable], ["category", SetterForRelationshipElement.prototype.setCategoryFromJsonable], ["idShort", SetterForRelationshipElement.prototype.setIdShortFromJsonable], ["displayName", SetterForRelationshipElement.prototype.setDisplayNameFromJsonable], ["description", SetterForRelationshipElement.prototype.setDescriptionFromJsonable], ["semanticId", SetterForRelationshipElement.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForRelationshipElement.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForRelationshipElement.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForRelationshipElement.prototype.setEmbeddedDataSpecificationsFromJsonable], ["first", SetterForRelationshipElement.prototype.setFirstFromJsonable], ["second", SetterForRelationshipElement.prototype.setSecondFromJsonable], ["modelType", SetterForRelationshipElement.prototype.ignore]]);
var SETTER_MAP_FOR_SUBMODEL_ELEMENT_LIST = new Map([["extensions", SetterForSubmodelElementList.prototype.setExtensionsFromJsonable], ["category", SetterForSubmodelElementList.prototype.setCategoryFromJsonable], ["idShort", SetterForSubmodelElementList.prototype.setIdShortFromJsonable], ["displayName", SetterForSubmodelElementList.prototype.setDisplayNameFromJsonable], ["description", SetterForSubmodelElementList.prototype.setDescriptionFromJsonable], ["semanticId", SetterForSubmodelElementList.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForSubmodelElementList.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForSubmodelElementList.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForSubmodelElementList.prototype.setEmbeddedDataSpecificationsFromJsonable], ["orderRelevant", SetterForSubmodelElementList.prototype.setOrderRelevantFromJsonable], ["semanticIdListElement", SetterForSubmodelElementList.prototype.setSemanticIdListElementFromJsonable], ["typeValueListElement", SetterForSubmodelElementList.prototype.setTypeValueListElementFromJsonable], ["valueTypeListElement", SetterForSubmodelElementList.prototype.setValueTypeListElementFromJsonable], ["value", SetterForSubmodelElementList.prototype.setValueFromJsonable], ["modelType", SetterForSubmodelElementList.prototype.ignore]]);
var SETTER_MAP_FOR_SUBMODEL_ELEMENT_COLLECTION = new Map([["extensions", SetterForSubmodelElementCollection.prototype.setExtensionsFromJsonable], ["category", SetterForSubmodelElementCollection.prototype.setCategoryFromJsonable], ["idShort", SetterForSubmodelElementCollection.prototype.setIdShortFromJsonable], ["displayName", SetterForSubmodelElementCollection.prototype.setDisplayNameFromJsonable], ["description", SetterForSubmodelElementCollection.prototype.setDescriptionFromJsonable], ["semanticId", SetterForSubmodelElementCollection.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForSubmodelElementCollection.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForSubmodelElementCollection.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForSubmodelElementCollection.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForSubmodelElementCollection.prototype.setValueFromJsonable], ["modelType", SetterForSubmodelElementCollection.prototype.ignore]]);
var DATA_ELEMENT_FROM_JSONABLE_DISPATCH = new Map([["Blob", blobFromJsonable], ["File", fileFromJsonable], ["MultiLanguageProperty", multiLanguagePropertyFromJsonable], ["Property", propertyFromJsonable], ["Range", rangeFromJsonable], ["ReferenceElement", referenceElementFromJsonable]]);
var SETTER_MAP_FOR_PROPERTY = new Map([["extensions", SetterForProperty.prototype.setExtensionsFromJsonable], ["category", SetterForProperty.prototype.setCategoryFromJsonable], ["idShort", SetterForProperty.prototype.setIdShortFromJsonable], ["displayName", SetterForProperty.prototype.setDisplayNameFromJsonable], ["description", SetterForProperty.prototype.setDescriptionFromJsonable], ["semanticId", SetterForProperty.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForProperty.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForProperty.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForProperty.prototype.setEmbeddedDataSpecificationsFromJsonable], ["valueType", SetterForProperty.prototype.setValueTypeFromJsonable], ["value", SetterForProperty.prototype.setValueFromJsonable], ["valueId", SetterForProperty.prototype.setValueIdFromJsonable], ["modelType", SetterForProperty.prototype.ignore]]);
var SETTER_MAP_FOR_MULTI_LANGUAGE_PROPERTY = new Map([["extensions", SetterForMultiLanguageProperty.prototype.setExtensionsFromJsonable], ["category", SetterForMultiLanguageProperty.prototype.setCategoryFromJsonable], ["idShort", SetterForMultiLanguageProperty.prototype.setIdShortFromJsonable], ["displayName", SetterForMultiLanguageProperty.prototype.setDisplayNameFromJsonable], ["description", SetterForMultiLanguageProperty.prototype.setDescriptionFromJsonable], ["semanticId", SetterForMultiLanguageProperty.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForMultiLanguageProperty.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForMultiLanguageProperty.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForMultiLanguageProperty.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForMultiLanguageProperty.prototype.setValueFromJsonable], ["valueId", SetterForMultiLanguageProperty.prototype.setValueIdFromJsonable], ["modelType", SetterForMultiLanguageProperty.prototype.ignore]]);
var SETTER_MAP_FOR_RANGE = new Map([["extensions", SetterForRange.prototype.setExtensionsFromJsonable], ["category", SetterForRange.prototype.setCategoryFromJsonable], ["idShort", SetterForRange.prototype.setIdShortFromJsonable], ["displayName", SetterForRange.prototype.setDisplayNameFromJsonable], ["description", SetterForRange.prototype.setDescriptionFromJsonable], ["semanticId", SetterForRange.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForRange.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForRange.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForRange.prototype.setEmbeddedDataSpecificationsFromJsonable], ["valueType", SetterForRange.prototype.setValueTypeFromJsonable], ["min", SetterForRange.prototype.setMinFromJsonable], ["max", SetterForRange.prototype.setMaxFromJsonable], ["modelType", SetterForRange.prototype.ignore]]);
var SETTER_MAP_FOR_REFERENCE_ELEMENT = new Map([["extensions", SetterForReferenceElement.prototype.setExtensionsFromJsonable], ["category", SetterForReferenceElement.prototype.setCategoryFromJsonable], ["idShort", SetterForReferenceElement.prototype.setIdShortFromJsonable], ["displayName", SetterForReferenceElement.prototype.setDisplayNameFromJsonable], ["description", SetterForReferenceElement.prototype.setDescriptionFromJsonable], ["semanticId", SetterForReferenceElement.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForReferenceElement.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForReferenceElement.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForReferenceElement.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForReferenceElement.prototype.setValueFromJsonable], ["modelType", SetterForReferenceElement.prototype.ignore]]);
var SETTER_MAP_FOR_BLOB = new Map([["extensions", SetterForBlob.prototype.setExtensionsFromJsonable], ["category", SetterForBlob.prototype.setCategoryFromJsonable], ["idShort", SetterForBlob.prototype.setIdShortFromJsonable], ["displayName", SetterForBlob.prototype.setDisplayNameFromJsonable], ["description", SetterForBlob.prototype.setDescriptionFromJsonable], ["semanticId", SetterForBlob.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForBlob.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForBlob.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForBlob.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForBlob.prototype.setValueFromJsonable], ["contentType", SetterForBlob.prototype.setContentTypeFromJsonable], ["modelType", SetterForBlob.prototype.ignore]]);
var SETTER_MAP_FOR_FILE = new Map([["extensions", SetterForFile.prototype.setExtensionsFromJsonable], ["category", SetterForFile.prototype.setCategoryFromJsonable], ["idShort", SetterForFile.prototype.setIdShortFromJsonable], ["displayName", SetterForFile.prototype.setDisplayNameFromJsonable], ["description", SetterForFile.prototype.setDescriptionFromJsonable], ["semanticId", SetterForFile.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForFile.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForFile.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForFile.prototype.setEmbeddedDataSpecificationsFromJsonable], ["value", SetterForFile.prototype.setValueFromJsonable], ["contentType", SetterForFile.prototype.setContentTypeFromJsonable], ["modelType", SetterForFile.prototype.ignore]]);
var SETTER_MAP_FOR_ANNOTATED_RELATIONSHIP_ELEMENT = new Map([["extensions", SetterForAnnotatedRelationshipElement.prototype.setExtensionsFromJsonable], ["category", SetterForAnnotatedRelationshipElement.prototype.setCategoryFromJsonable], ["idShort", SetterForAnnotatedRelationshipElement.prototype.setIdShortFromJsonable], ["displayName", SetterForAnnotatedRelationshipElement.prototype.setDisplayNameFromJsonable], ["description", SetterForAnnotatedRelationshipElement.prototype.setDescriptionFromJsonable], ["semanticId", SetterForAnnotatedRelationshipElement.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForAnnotatedRelationshipElement.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForAnnotatedRelationshipElement.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForAnnotatedRelationshipElement.prototype.setEmbeddedDataSpecificationsFromJsonable], ["first", SetterForAnnotatedRelationshipElement.prototype.setFirstFromJsonable], ["second", SetterForAnnotatedRelationshipElement.prototype.setSecondFromJsonable], ["annotations", SetterForAnnotatedRelationshipElement.prototype.setAnnotationsFromJsonable], ["modelType", SetterForAnnotatedRelationshipElement.prototype.ignore]]);
var SETTER_MAP_FOR_ENTITY = new Map([["extensions", SetterForEntity.prototype.setExtensionsFromJsonable], ["category", SetterForEntity.prototype.setCategoryFromJsonable], ["idShort", SetterForEntity.prototype.setIdShortFromJsonable], ["displayName", SetterForEntity.prototype.setDisplayNameFromJsonable], ["description", SetterForEntity.prototype.setDescriptionFromJsonable], ["semanticId", SetterForEntity.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForEntity.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForEntity.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForEntity.prototype.setEmbeddedDataSpecificationsFromJsonable], ["statements", SetterForEntity.prototype.setStatementsFromJsonable], ["entityType", SetterForEntity.prototype.setEntityTypeFromJsonable], ["globalAssetId", SetterForEntity.prototype.setGlobalAssetIdFromJsonable], ["specificAssetIds", SetterForEntity.prototype.setSpecificAssetIdsFromJsonable], ["modelType", SetterForEntity.prototype.ignore]]);
var SETTER_MAP_FOR_EVENT_PAYLOAD = new Map([["source", SetterForEventPayload.prototype.setSourceFromJsonable], ["sourceSemanticId", SetterForEventPayload.prototype.setSourceSemanticIdFromJsonable], ["observableReference", SetterForEventPayload.prototype.setObservableReferenceFromJsonable], ["observableSemanticId", SetterForEventPayload.prototype.setObservableSemanticIdFromJsonable], ["topic", SetterForEventPayload.prototype.setTopicFromJsonable], ["subjectId", SetterForEventPayload.prototype.setSubjectIdFromJsonable], ["timeStamp", SetterForEventPayload.prototype.setTimeStampFromJsonable], ["payload", SetterForEventPayload.prototype.setPayloadFromJsonable], ["modelType", SetterForEventPayload.prototype.ignore]]);
var EVENT_ELEMENT_FROM_JSONABLE_DISPATCH = new Map([["BasicEventElement", basicEventElementFromJsonable]]);
var SETTER_MAP_FOR_BASIC_EVENT_ELEMENT = new Map([["extensions", SetterForBasicEventElement.prototype.setExtensionsFromJsonable], ["category", SetterForBasicEventElement.prototype.setCategoryFromJsonable], ["idShort", SetterForBasicEventElement.prototype.setIdShortFromJsonable], ["displayName", SetterForBasicEventElement.prototype.setDisplayNameFromJsonable], ["description", SetterForBasicEventElement.prototype.setDescriptionFromJsonable], ["semanticId", SetterForBasicEventElement.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForBasicEventElement.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForBasicEventElement.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForBasicEventElement.prototype.setEmbeddedDataSpecificationsFromJsonable], ["observed", SetterForBasicEventElement.prototype.setObservedFromJsonable], ["direction", SetterForBasicEventElement.prototype.setDirectionFromJsonable], ["state", SetterForBasicEventElement.prototype.setStateFromJsonable], ["messageTopic", SetterForBasicEventElement.prototype.setMessageTopicFromJsonable], ["messageBroker", SetterForBasicEventElement.prototype.setMessageBrokerFromJsonable], ["lastUpdate", SetterForBasicEventElement.prototype.setLastUpdateFromJsonable], ["minInterval", SetterForBasicEventElement.prototype.setMinIntervalFromJsonable], ["maxInterval", SetterForBasicEventElement.prototype.setMaxIntervalFromJsonable], ["modelType", SetterForBasicEventElement.prototype.ignore]]);
var SETTER_MAP_FOR_OPERATION = new Map([["extensions", SetterForOperation.prototype.setExtensionsFromJsonable], ["category", SetterForOperation.prototype.setCategoryFromJsonable], ["idShort", SetterForOperation.prototype.setIdShortFromJsonable], ["displayName", SetterForOperation.prototype.setDisplayNameFromJsonable], ["description", SetterForOperation.prototype.setDescriptionFromJsonable], ["semanticId", SetterForOperation.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForOperation.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForOperation.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForOperation.prototype.setEmbeddedDataSpecificationsFromJsonable], ["inputVariables", SetterForOperation.prototype.setInputVariablesFromJsonable], ["outputVariables", SetterForOperation.prototype.setOutputVariablesFromJsonable], ["inoutputVariables", SetterForOperation.prototype.setInoutputVariablesFromJsonable], ["modelType", SetterForOperation.prototype.ignore]]);
var SETTER_MAP_FOR_OPERATION_VARIABLE = new Map([["value", SetterForOperationVariable.prototype.setValueFromJsonable], ["modelType", SetterForOperationVariable.prototype.ignore]]);
var SETTER_MAP_FOR_CAPABILITY = new Map([["extensions", SetterForCapability.prototype.setExtensionsFromJsonable], ["category", SetterForCapability.prototype.setCategoryFromJsonable], ["idShort", SetterForCapability.prototype.setIdShortFromJsonable], ["displayName", SetterForCapability.prototype.setDisplayNameFromJsonable], ["description", SetterForCapability.prototype.setDescriptionFromJsonable], ["semanticId", SetterForCapability.prototype.setSemanticIdFromJsonable], ["supplementalSemanticIds", SetterForCapability.prototype.setSupplementalSemanticIdsFromJsonable], ["qualifiers", SetterForCapability.prototype.setQualifiersFromJsonable], ["embeddedDataSpecifications", SetterForCapability.prototype.setEmbeddedDataSpecificationsFromJsonable], ["modelType", SetterForCapability.prototype.ignore]]);
var SETTER_MAP_FOR_CONCEPT_DESCRIPTION = new Map([["extensions", SetterForConceptDescription.prototype.setExtensionsFromJsonable], ["category", SetterForConceptDescription.prototype.setCategoryFromJsonable], ["idShort", SetterForConceptDescription.prototype.setIdShortFromJsonable], ["displayName", SetterForConceptDescription.prototype.setDisplayNameFromJsonable], ["description", SetterForConceptDescription.prototype.setDescriptionFromJsonable], ["administration", SetterForConceptDescription.prototype.setAdministrationFromJsonable], ["id", SetterForConceptDescription.prototype.setIdFromJsonable], ["embeddedDataSpecifications", SetterForConceptDescription.prototype.setEmbeddedDataSpecificationsFromJsonable], ["isCaseOf", SetterForConceptDescription.prototype.setIsCaseOfFromJsonable], ["modelType", SetterForConceptDescription.prototype.ignore]]);
var SETTER_MAP_FOR_REFERENCE = new Map([["type", SetterForReference.prototype.setTypeFromJsonable], ["referredSemanticId", SetterForReference.prototype.setReferredSemanticIdFromJsonable], ["keys", SetterForReference.prototype.setKeysFromJsonable], ["modelType", SetterForReference.prototype.ignore]]);
var SETTER_MAP_FOR_KEY = new Map([["type", SetterForKey.prototype.setTypeFromJsonable], ["value", SetterForKey.prototype.setValueFromJsonable], ["modelType", SetterForKey.prototype.ignore]]);
var ABSTRACT_LANG_STRING_FROM_JSONABLE_DISPATCH = new Map([["LangStringDefinitionTypeIec61360", langStringDefinitionTypeIec61360FromJsonable], ["LangStringNameType", langStringNameTypeFromJsonable], ["LangStringPreferredNameTypeIec61360", langStringPreferredNameTypeIec61360FromJsonable], ["LangStringShortNameTypeIec61360", langStringShortNameTypeIec61360FromJsonable], ["LangStringTextType", langStringTextTypeFromJsonable]]);
var SETTER_MAP_FOR_LANG_STRING_NAME_TYPE = new Map([["language", SetterForLangStringNameType.prototype.setLanguageFromJsonable], ["text", SetterForLangStringNameType.prototype.setTextFromJsonable], ["modelType", SetterForLangStringNameType.prototype.ignore]]);
var SETTER_MAP_FOR_LANG_STRING_TEXT_TYPE = new Map([["language", SetterForLangStringTextType.prototype.setLanguageFromJsonable], ["text", SetterForLangStringTextType.prototype.setTextFromJsonable], ["modelType", SetterForLangStringTextType.prototype.ignore]]);
var SETTER_MAP_FOR_ENVIRONMENT = new Map([["assetAdministrationShells", SetterForEnvironment.prototype.setAssetAdministrationShellsFromJsonable], ["submodels", SetterForEnvironment.prototype.setSubmodelsFromJsonable], ["conceptDescriptions", SetterForEnvironment.prototype.setConceptDescriptionsFromJsonable], ["modelType", SetterForEnvironment.prototype.ignore]]);
var DATA_SPECIFICATION_CONTENT_FROM_JSONABLE_DISPATCH = new Map([["DataSpecificationIec61360", dataSpecificationIec61360FromJsonable]]);
var SETTER_MAP_FOR_EMBEDDED_DATA_SPECIFICATION = new Map([["dataSpecification", SetterForEmbeddedDataSpecification.prototype.setDataSpecificationFromJsonable], ["dataSpecificationContent", SetterForEmbeddedDataSpecification.prototype.setDataSpecificationContentFromJsonable], ["modelType", SetterForEmbeddedDataSpecification.prototype.ignore]]);
var SETTER_MAP_FOR_LEVEL_TYPE = new Map([["min", SetterForLevelType.prototype.setMinFromJsonable], ["nom", SetterForLevelType.prototype.setNomFromJsonable], ["typ", SetterForLevelType.prototype.setTypFromJsonable], ["max", SetterForLevelType.prototype.setMaxFromJsonable], ["modelType", SetterForLevelType.prototype.ignore]]);
var SETTER_MAP_FOR_VALUE_REFERENCE_PAIR = new Map([["value", SetterForValueReferencePair.prototype.setValueFromJsonable], ["valueId", SetterForValueReferencePair.prototype.setValueIdFromJsonable], ["modelType", SetterForValueReferencePair.prototype.ignore]]);
var SETTER_MAP_FOR_VALUE_LIST = new Map([["valueReferencePairs", SetterForValueList.prototype.setValueReferencePairsFromJsonable], ["modelType", SetterForValueList.prototype.ignore]]);
var SETTER_MAP_FOR_LANG_STRING_PREFERRED_NAME_TYPE_IEC_61360 = new Map([["language", SetterForLangStringPreferredNameTypeIec61360.prototype.setLanguageFromJsonable], ["text", SetterForLangStringPreferredNameTypeIec61360.prototype.setTextFromJsonable], ["modelType", SetterForLangStringPreferredNameTypeIec61360.prototype.ignore]]);
var SETTER_MAP_FOR_LANG_STRING_SHORT_NAME_TYPE_IEC_61360 = new Map([["language", SetterForLangStringShortNameTypeIec61360.prototype.setLanguageFromJsonable], ["text", SetterForLangStringShortNameTypeIec61360.prototype.setTextFromJsonable], ["modelType", SetterForLangStringShortNameTypeIec61360.prototype.ignore]]);
var SETTER_MAP_FOR_LANG_STRING_DEFINITION_TYPE_IEC_61360 = new Map([["language", SetterForLangStringDefinitionTypeIec61360.prototype.setLanguageFromJsonable], ["text", SetterForLangStringDefinitionTypeIec61360.prototype.setTextFromJsonable], ["modelType", SetterForLangStringDefinitionTypeIec61360.prototype.ignore]]);
var SETTER_MAP_FOR_DATA_SPECIFICATION_IEC_61360 = new Map([["preferredName", SetterForDataSpecificationIec61360.prototype.setPreferredNameFromJsonable], ["shortName", SetterForDataSpecificationIec61360.prototype.setShortNameFromJsonable], ["unit", SetterForDataSpecificationIec61360.prototype.setUnitFromJsonable], ["unitId", SetterForDataSpecificationIec61360.prototype.setUnitIdFromJsonable], ["sourceOfDefinition", SetterForDataSpecificationIec61360.prototype.setSourceOfDefinitionFromJsonable], ["symbol", SetterForDataSpecificationIec61360.prototype.setSymbolFromJsonable], ["dataType", SetterForDataSpecificationIec61360.prototype.setDataTypeFromJsonable], ["definition", SetterForDataSpecificationIec61360.prototype.setDefinitionFromJsonable], ["valueFormat", SetterForDataSpecificationIec61360.prototype.setValueFormatFromJsonable], ["valueList", SetterForDataSpecificationIec61360.prototype.setValueListFromJsonable], ["value", SetterForDataSpecificationIec61360.prototype.setValueFromJsonable], ["levelType", SetterForDataSpecificationIec61360.prototype.setLevelTypeFromJsonable], ["modelType", SetterForDataSpecificationIec61360.prototype.ignore]]);

// endregion

// region Serialization

/**
 * Transform the instance to its JSON-able representation.
 */
var Serializer = /*#__PURE__*/function (_AasTypes$AbstractTra) {
  _inherits(Serializer, _AasTypes$AbstractTra);
  var _super = _createSuper(Serializer);
  function Serializer() {
    _classCallCheck(this, Serializer);
    return _super.apply(this, arguments);
  }
  _createClass(Serializer, [{
    key: "transformExtension",
    value:
    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
    function transformExtension(that) {
      var jsonable = {};
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator125 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step125;
        try {
          for (_iterator125.s(); !(_step125 = _iterator125.n()).done;) {
            var item = _step125.value;
            supplementalSemanticIdsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator125.e(err);
        } finally {
          _iterator125.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      jsonable["name"] = that.name;
      if (that.valueType !== null) {
        jsonable["valueType"] = mustDataTypeDefXsdToString(that.valueType);
      }
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      if (that.refersTo !== null) {
        var refersToArray = new Array();
        var _iterator126 = _createForOfIteratorHelper(that.refersTo),
          _step126;
        try {
          for (_iterator126.s(); !(_step126 = _iterator126.n()).done;) {
            var _item = _step126.value;
            refersToArray.push(this.transform(_item));
          }
        } catch (err) {
          _iterator126.e(err);
        } finally {
          _iterator126.f();
        }
        jsonable["refersTo"] = refersToArray;
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformAdministrativeInformation",
    value: function transformAdministrativeInformation(that) {
      var jsonable = {};
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator127 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step127;
        try {
          for (_iterator127.s(); !(_step127 = _iterator127.n()).done;) {
            var item = _step127.value;
            embeddedDataSpecificationsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator127.e(err);
        } finally {
          _iterator127.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.version !== null) {
        jsonable["version"] = that.version;
      }
      if (that.revision !== null) {
        jsonable["revision"] = that.revision;
      }
      if (that.creator !== null) {
        jsonable["creator"] = this.transform(that.creator);
      }
      if (that.templateId !== null) {
        jsonable["templateId"] = that.templateId;
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformQualifier",
    value: function transformQualifier(that) {
      var jsonable = {};
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator128 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step128;
        try {
          for (_iterator128.s(); !(_step128 = _iterator128.n()).done;) {
            var item = _step128.value;
            supplementalSemanticIdsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator128.e(err);
        } finally {
          _iterator128.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.kind !== null) {
        jsonable["kind"] = mustQualifierKindToString(that.kind);
      }
      jsonable["type"] = that.type;
      jsonable["valueType"] = mustDataTypeDefXsdToString(that.valueType);
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      if (that.valueId !== null) {
        jsonable["valueId"] = this.transform(that.valueId);
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformAssetAdministrationShell",
    value: function transformAssetAdministrationShell(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator129 = _createForOfIteratorHelper(that.extensions),
          _step129;
        try {
          for (_iterator129.s(); !(_step129 = _iterator129.n()).done;) {
            var item = _step129.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator129.e(err);
        } finally {
          _iterator129.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator130 = _createForOfIteratorHelper(that.displayName),
          _step130;
        try {
          for (_iterator130.s(); !(_step130 = _iterator130.n()).done;) {
            var _item2 = _step130.value;
            displayNameArray.push(this.transform(_item2));
          }
        } catch (err) {
          _iterator130.e(err);
        } finally {
          _iterator130.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator131 = _createForOfIteratorHelper(that.description),
          _step131;
        try {
          for (_iterator131.s(); !(_step131 = _iterator131.n()).done;) {
            var _item3 = _step131.value;
            descriptionArray.push(this.transform(_item3));
          }
        } catch (err) {
          _iterator131.e(err);
        } finally {
          _iterator131.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.administration !== null) {
        jsonable["administration"] = this.transform(that.administration);
      }
      jsonable["id"] = that.id;
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator132 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step132;
        try {
          for (_iterator132.s(); !(_step132 = _iterator132.n()).done;) {
            var _item4 = _step132.value;
            embeddedDataSpecificationsArray.push(this.transform(_item4));
          }
        } catch (err) {
          _iterator132.e(err);
        } finally {
          _iterator132.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.derivedFrom !== null) {
        jsonable["derivedFrom"] = this.transform(that.derivedFrom);
      }
      jsonable["assetInformation"] = this.transform(that.assetInformation);
      if (that.submodels !== null) {
        var submodelsArray = new Array();
        var _iterator133 = _createForOfIteratorHelper(that.submodels),
          _step133;
        try {
          for (_iterator133.s(); !(_step133 = _iterator133.n()).done;) {
            var _item5 = _step133.value;
            submodelsArray.push(this.transform(_item5));
          }
        } catch (err) {
          _iterator133.e(err);
        } finally {
          _iterator133.f();
        }
        jsonable["submodels"] = submodelsArray;
      }
      jsonable["modelType"] = "AssetAdministrationShell";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformAssetInformation",
    value: function transformAssetInformation(that) {
      var jsonable = {};
      jsonable["assetKind"] = mustAssetKindToString(that.assetKind);
      if (that.globalAssetId !== null) {
        jsonable["globalAssetId"] = that.globalAssetId;
      }
      if (that.specificAssetIds !== null) {
        var specificAssetIdsArray = new Array();
        var _iterator134 = _createForOfIteratorHelper(that.specificAssetIds),
          _step134;
        try {
          for (_iterator134.s(); !(_step134 = _iterator134.n()).done;) {
            var item = _step134.value;
            specificAssetIdsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator134.e(err);
        } finally {
          _iterator134.f();
        }
        jsonable["specificAssetIds"] = specificAssetIdsArray;
      }
      if (that.assetType !== null) {
        jsonable["assetType"] = that.assetType;
      }
      if (that.defaultThumbnail !== null) {
        jsonable["defaultThumbnail"] = this.transform(that.defaultThumbnail);
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformResource",
    value: function transformResource(that) {
      var jsonable = {};
      jsonable["path"] = that.path;
      if (that.contentType !== null) {
        jsonable["contentType"] = that.contentType;
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformSpecificAssetId",
    value: function transformSpecificAssetId(that) {
      var jsonable = {};
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator135 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step135;
        try {
          for (_iterator135.s(); !(_step135 = _iterator135.n()).done;) {
            var item = _step135.value;
            supplementalSemanticIdsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator135.e(err);
        } finally {
          _iterator135.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      jsonable["name"] = that.name;
      jsonable["value"] = that.value;
      if (that.externalSubjectId !== null) {
        jsonable["externalSubjectId"] = this.transform(that.externalSubjectId);
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformSubmodel",
    value: function transformSubmodel(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator136 = _createForOfIteratorHelper(that.extensions),
          _step136;
        try {
          for (_iterator136.s(); !(_step136 = _iterator136.n()).done;) {
            var item = _step136.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator136.e(err);
        } finally {
          _iterator136.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator137 = _createForOfIteratorHelper(that.displayName),
          _step137;
        try {
          for (_iterator137.s(); !(_step137 = _iterator137.n()).done;) {
            var _item6 = _step137.value;
            displayNameArray.push(this.transform(_item6));
          }
        } catch (err) {
          _iterator137.e(err);
        } finally {
          _iterator137.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator138 = _createForOfIteratorHelper(that.description),
          _step138;
        try {
          for (_iterator138.s(); !(_step138 = _iterator138.n()).done;) {
            var _item7 = _step138.value;
            descriptionArray.push(this.transform(_item7));
          }
        } catch (err) {
          _iterator138.e(err);
        } finally {
          _iterator138.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.administration !== null) {
        jsonable["administration"] = this.transform(that.administration);
      }
      jsonable["id"] = that.id;
      if (that.kind !== null) {
        jsonable["kind"] = mustModellingKindToString(that.kind);
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator139 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step139;
        try {
          for (_iterator139.s(); !(_step139 = _iterator139.n()).done;) {
            var _item8 = _step139.value;
            supplementalSemanticIdsArray.push(this.transform(_item8));
          }
        } catch (err) {
          _iterator139.e(err);
        } finally {
          _iterator139.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator140 = _createForOfIteratorHelper(that.qualifiers),
          _step140;
        try {
          for (_iterator140.s(); !(_step140 = _iterator140.n()).done;) {
            var _item9 = _step140.value;
            qualifiersArray.push(this.transform(_item9));
          }
        } catch (err) {
          _iterator140.e(err);
        } finally {
          _iterator140.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator141 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step141;
        try {
          for (_iterator141.s(); !(_step141 = _iterator141.n()).done;) {
            var _item10 = _step141.value;
            embeddedDataSpecificationsArray.push(this.transform(_item10));
          }
        } catch (err) {
          _iterator141.e(err);
        } finally {
          _iterator141.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.submodelElements !== null) {
        var submodelElementsArray = new Array();
        var _iterator142 = _createForOfIteratorHelper(that.submodelElements),
          _step142;
        try {
          for (_iterator142.s(); !(_step142 = _iterator142.n()).done;) {
            var _item11 = _step142.value;
            submodelElementsArray.push(this.transform(_item11));
          }
        } catch (err) {
          _iterator142.e(err);
        } finally {
          _iterator142.f();
        }
        jsonable["submodelElements"] = submodelElementsArray;
      }
      jsonable["modelType"] = "Submodel";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformRelationshipElement",
    value: function transformRelationshipElement(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator143 = _createForOfIteratorHelper(that.extensions),
          _step143;
        try {
          for (_iterator143.s(); !(_step143 = _iterator143.n()).done;) {
            var item = _step143.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator143.e(err);
        } finally {
          _iterator143.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator144 = _createForOfIteratorHelper(that.displayName),
          _step144;
        try {
          for (_iterator144.s(); !(_step144 = _iterator144.n()).done;) {
            var _item12 = _step144.value;
            displayNameArray.push(this.transform(_item12));
          }
        } catch (err) {
          _iterator144.e(err);
        } finally {
          _iterator144.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator145 = _createForOfIteratorHelper(that.description),
          _step145;
        try {
          for (_iterator145.s(); !(_step145 = _iterator145.n()).done;) {
            var _item13 = _step145.value;
            descriptionArray.push(this.transform(_item13));
          }
        } catch (err) {
          _iterator145.e(err);
        } finally {
          _iterator145.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator146 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step146;
        try {
          for (_iterator146.s(); !(_step146 = _iterator146.n()).done;) {
            var _item14 = _step146.value;
            supplementalSemanticIdsArray.push(this.transform(_item14));
          }
        } catch (err) {
          _iterator146.e(err);
        } finally {
          _iterator146.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator147 = _createForOfIteratorHelper(that.qualifiers),
          _step147;
        try {
          for (_iterator147.s(); !(_step147 = _iterator147.n()).done;) {
            var _item15 = _step147.value;
            qualifiersArray.push(this.transform(_item15));
          }
        } catch (err) {
          _iterator147.e(err);
        } finally {
          _iterator147.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator148 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step148;
        try {
          for (_iterator148.s(); !(_step148 = _iterator148.n()).done;) {
            var _item16 = _step148.value;
            embeddedDataSpecificationsArray.push(this.transform(_item16));
          }
        } catch (err) {
          _iterator148.e(err);
        } finally {
          _iterator148.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["first"] = this.transform(that.first);
      jsonable["second"] = this.transform(that.second);
      jsonable["modelType"] = "RelationshipElement";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformSubmodelElementList",
    value: function transformSubmodelElementList(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator149 = _createForOfIteratorHelper(that.extensions),
          _step149;
        try {
          for (_iterator149.s(); !(_step149 = _iterator149.n()).done;) {
            var item = _step149.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator149.e(err);
        } finally {
          _iterator149.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator150 = _createForOfIteratorHelper(that.displayName),
          _step150;
        try {
          for (_iterator150.s(); !(_step150 = _iterator150.n()).done;) {
            var _item17 = _step150.value;
            displayNameArray.push(this.transform(_item17));
          }
        } catch (err) {
          _iterator150.e(err);
        } finally {
          _iterator150.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator151 = _createForOfIteratorHelper(that.description),
          _step151;
        try {
          for (_iterator151.s(); !(_step151 = _iterator151.n()).done;) {
            var _item18 = _step151.value;
            descriptionArray.push(this.transform(_item18));
          }
        } catch (err) {
          _iterator151.e(err);
        } finally {
          _iterator151.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator152 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step152;
        try {
          for (_iterator152.s(); !(_step152 = _iterator152.n()).done;) {
            var _item19 = _step152.value;
            supplementalSemanticIdsArray.push(this.transform(_item19));
          }
        } catch (err) {
          _iterator152.e(err);
        } finally {
          _iterator152.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator153 = _createForOfIteratorHelper(that.qualifiers),
          _step153;
        try {
          for (_iterator153.s(); !(_step153 = _iterator153.n()).done;) {
            var _item20 = _step153.value;
            qualifiersArray.push(this.transform(_item20));
          }
        } catch (err) {
          _iterator153.e(err);
        } finally {
          _iterator153.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator154 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step154;
        try {
          for (_iterator154.s(); !(_step154 = _iterator154.n()).done;) {
            var _item21 = _step154.value;
            embeddedDataSpecificationsArray.push(this.transform(_item21));
          }
        } catch (err) {
          _iterator154.e(err);
        } finally {
          _iterator154.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.orderRelevant !== null) {
        jsonable["orderRelevant"] = that.orderRelevant;
      }
      if (that.semanticIdListElement !== null) {
        jsonable["semanticIdListElement"] = this.transform(that.semanticIdListElement);
      }
      jsonable["typeValueListElement"] = mustAasSubmodelElementsToString(that.typeValueListElement);
      if (that.valueTypeListElement !== null) {
        jsonable["valueTypeListElement"] = mustDataTypeDefXsdToString(that.valueTypeListElement);
      }
      if (that.value !== null) {
        var valueArray = new Array();
        var _iterator155 = _createForOfIteratorHelper(that.value),
          _step155;
        try {
          for (_iterator155.s(); !(_step155 = _iterator155.n()).done;) {
            var _item22 = _step155.value;
            valueArray.push(this.transform(_item22));
          }
        } catch (err) {
          _iterator155.e(err);
        } finally {
          _iterator155.f();
        }
        jsonable["value"] = valueArray;
      }
      jsonable["modelType"] = "SubmodelElementList";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformSubmodelElementCollection",
    value: function transformSubmodelElementCollection(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator156 = _createForOfIteratorHelper(that.extensions),
          _step156;
        try {
          for (_iterator156.s(); !(_step156 = _iterator156.n()).done;) {
            var item = _step156.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator156.e(err);
        } finally {
          _iterator156.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator157 = _createForOfIteratorHelper(that.displayName),
          _step157;
        try {
          for (_iterator157.s(); !(_step157 = _iterator157.n()).done;) {
            var _item23 = _step157.value;
            displayNameArray.push(this.transform(_item23));
          }
        } catch (err) {
          _iterator157.e(err);
        } finally {
          _iterator157.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator158 = _createForOfIteratorHelper(that.description),
          _step158;
        try {
          for (_iterator158.s(); !(_step158 = _iterator158.n()).done;) {
            var _item24 = _step158.value;
            descriptionArray.push(this.transform(_item24));
          }
        } catch (err) {
          _iterator158.e(err);
        } finally {
          _iterator158.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator159 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step159;
        try {
          for (_iterator159.s(); !(_step159 = _iterator159.n()).done;) {
            var _item25 = _step159.value;
            supplementalSemanticIdsArray.push(this.transform(_item25));
          }
        } catch (err) {
          _iterator159.e(err);
        } finally {
          _iterator159.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator160 = _createForOfIteratorHelper(that.qualifiers),
          _step160;
        try {
          for (_iterator160.s(); !(_step160 = _iterator160.n()).done;) {
            var _item26 = _step160.value;
            qualifiersArray.push(this.transform(_item26));
          }
        } catch (err) {
          _iterator160.e(err);
        } finally {
          _iterator160.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator161 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step161;
        try {
          for (_iterator161.s(); !(_step161 = _iterator161.n()).done;) {
            var _item27 = _step161.value;
            embeddedDataSpecificationsArray.push(this.transform(_item27));
          }
        } catch (err) {
          _iterator161.e(err);
        } finally {
          _iterator161.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        var valueArray = new Array();
        var _iterator162 = _createForOfIteratorHelper(that.value),
          _step162;
        try {
          for (_iterator162.s(); !(_step162 = _iterator162.n()).done;) {
            var _item28 = _step162.value;
            valueArray.push(this.transform(_item28));
          }
        } catch (err) {
          _iterator162.e(err);
        } finally {
          _iterator162.f();
        }
        jsonable["value"] = valueArray;
      }
      jsonable["modelType"] = "SubmodelElementCollection";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformProperty",
    value: function transformProperty(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator163 = _createForOfIteratorHelper(that.extensions),
          _step163;
        try {
          for (_iterator163.s(); !(_step163 = _iterator163.n()).done;) {
            var item = _step163.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator163.e(err);
        } finally {
          _iterator163.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator164 = _createForOfIteratorHelper(that.displayName),
          _step164;
        try {
          for (_iterator164.s(); !(_step164 = _iterator164.n()).done;) {
            var _item29 = _step164.value;
            displayNameArray.push(this.transform(_item29));
          }
        } catch (err) {
          _iterator164.e(err);
        } finally {
          _iterator164.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator165 = _createForOfIteratorHelper(that.description),
          _step165;
        try {
          for (_iterator165.s(); !(_step165 = _iterator165.n()).done;) {
            var _item30 = _step165.value;
            descriptionArray.push(this.transform(_item30));
          }
        } catch (err) {
          _iterator165.e(err);
        } finally {
          _iterator165.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator166 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step166;
        try {
          for (_iterator166.s(); !(_step166 = _iterator166.n()).done;) {
            var _item31 = _step166.value;
            supplementalSemanticIdsArray.push(this.transform(_item31));
          }
        } catch (err) {
          _iterator166.e(err);
        } finally {
          _iterator166.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator167 = _createForOfIteratorHelper(that.qualifiers),
          _step167;
        try {
          for (_iterator167.s(); !(_step167 = _iterator167.n()).done;) {
            var _item32 = _step167.value;
            qualifiersArray.push(this.transform(_item32));
          }
        } catch (err) {
          _iterator167.e(err);
        } finally {
          _iterator167.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator168 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step168;
        try {
          for (_iterator168.s(); !(_step168 = _iterator168.n()).done;) {
            var _item33 = _step168.value;
            embeddedDataSpecificationsArray.push(this.transform(_item33));
          }
        } catch (err) {
          _iterator168.e(err);
        } finally {
          _iterator168.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["valueType"] = mustDataTypeDefXsdToString(that.valueType);
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      if (that.valueId !== null) {
        jsonable["valueId"] = this.transform(that.valueId);
      }
      jsonable["modelType"] = "Property";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformMultiLanguageProperty",
    value: function transformMultiLanguageProperty(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator169 = _createForOfIteratorHelper(that.extensions),
          _step169;
        try {
          for (_iterator169.s(); !(_step169 = _iterator169.n()).done;) {
            var item = _step169.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator169.e(err);
        } finally {
          _iterator169.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator170 = _createForOfIteratorHelper(that.displayName),
          _step170;
        try {
          for (_iterator170.s(); !(_step170 = _iterator170.n()).done;) {
            var _item34 = _step170.value;
            displayNameArray.push(this.transform(_item34));
          }
        } catch (err) {
          _iterator170.e(err);
        } finally {
          _iterator170.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator171 = _createForOfIteratorHelper(that.description),
          _step171;
        try {
          for (_iterator171.s(); !(_step171 = _iterator171.n()).done;) {
            var _item35 = _step171.value;
            descriptionArray.push(this.transform(_item35));
          }
        } catch (err) {
          _iterator171.e(err);
        } finally {
          _iterator171.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator172 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step172;
        try {
          for (_iterator172.s(); !(_step172 = _iterator172.n()).done;) {
            var _item36 = _step172.value;
            supplementalSemanticIdsArray.push(this.transform(_item36));
          }
        } catch (err) {
          _iterator172.e(err);
        } finally {
          _iterator172.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator173 = _createForOfIteratorHelper(that.qualifiers),
          _step173;
        try {
          for (_iterator173.s(); !(_step173 = _iterator173.n()).done;) {
            var _item37 = _step173.value;
            qualifiersArray.push(this.transform(_item37));
          }
        } catch (err) {
          _iterator173.e(err);
        } finally {
          _iterator173.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator174 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step174;
        try {
          for (_iterator174.s(); !(_step174 = _iterator174.n()).done;) {
            var _item38 = _step174.value;
            embeddedDataSpecificationsArray.push(this.transform(_item38));
          }
        } catch (err) {
          _iterator174.e(err);
        } finally {
          _iterator174.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        var valueArray = new Array();
        var _iterator175 = _createForOfIteratorHelper(that.value),
          _step175;
        try {
          for (_iterator175.s(); !(_step175 = _iterator175.n()).done;) {
            var _item39 = _step175.value;
            valueArray.push(this.transform(_item39));
          }
        } catch (err) {
          _iterator175.e(err);
        } finally {
          _iterator175.f();
        }
        jsonable["value"] = valueArray;
      }
      if (that.valueId !== null) {
        jsonable["valueId"] = this.transform(that.valueId);
      }
      jsonable["modelType"] = "MultiLanguageProperty";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformRange",
    value: function transformRange(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator176 = _createForOfIteratorHelper(that.extensions),
          _step176;
        try {
          for (_iterator176.s(); !(_step176 = _iterator176.n()).done;) {
            var item = _step176.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator176.e(err);
        } finally {
          _iterator176.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator177 = _createForOfIteratorHelper(that.displayName),
          _step177;
        try {
          for (_iterator177.s(); !(_step177 = _iterator177.n()).done;) {
            var _item40 = _step177.value;
            displayNameArray.push(this.transform(_item40));
          }
        } catch (err) {
          _iterator177.e(err);
        } finally {
          _iterator177.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator178 = _createForOfIteratorHelper(that.description),
          _step178;
        try {
          for (_iterator178.s(); !(_step178 = _iterator178.n()).done;) {
            var _item41 = _step178.value;
            descriptionArray.push(this.transform(_item41));
          }
        } catch (err) {
          _iterator178.e(err);
        } finally {
          _iterator178.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator179 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step179;
        try {
          for (_iterator179.s(); !(_step179 = _iterator179.n()).done;) {
            var _item42 = _step179.value;
            supplementalSemanticIdsArray.push(this.transform(_item42));
          }
        } catch (err) {
          _iterator179.e(err);
        } finally {
          _iterator179.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator180 = _createForOfIteratorHelper(that.qualifiers),
          _step180;
        try {
          for (_iterator180.s(); !(_step180 = _iterator180.n()).done;) {
            var _item43 = _step180.value;
            qualifiersArray.push(this.transform(_item43));
          }
        } catch (err) {
          _iterator180.e(err);
        } finally {
          _iterator180.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator181 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step181;
        try {
          for (_iterator181.s(); !(_step181 = _iterator181.n()).done;) {
            var _item44 = _step181.value;
            embeddedDataSpecificationsArray.push(this.transform(_item44));
          }
        } catch (err) {
          _iterator181.e(err);
        } finally {
          _iterator181.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["valueType"] = mustDataTypeDefXsdToString(that.valueType);
      if (that.min !== null) {
        jsonable["min"] = that.min;
      }
      if (that.max !== null) {
        jsonable["max"] = that.max;
      }
      jsonable["modelType"] = "Range";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformReferenceElement",
    value: function transformReferenceElement(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator182 = _createForOfIteratorHelper(that.extensions),
          _step182;
        try {
          for (_iterator182.s(); !(_step182 = _iterator182.n()).done;) {
            var item = _step182.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator182.e(err);
        } finally {
          _iterator182.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator183 = _createForOfIteratorHelper(that.displayName),
          _step183;
        try {
          for (_iterator183.s(); !(_step183 = _iterator183.n()).done;) {
            var _item45 = _step183.value;
            displayNameArray.push(this.transform(_item45));
          }
        } catch (err) {
          _iterator183.e(err);
        } finally {
          _iterator183.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator184 = _createForOfIteratorHelper(that.description),
          _step184;
        try {
          for (_iterator184.s(); !(_step184 = _iterator184.n()).done;) {
            var _item46 = _step184.value;
            descriptionArray.push(this.transform(_item46));
          }
        } catch (err) {
          _iterator184.e(err);
        } finally {
          _iterator184.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator185 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step185;
        try {
          for (_iterator185.s(); !(_step185 = _iterator185.n()).done;) {
            var _item47 = _step185.value;
            supplementalSemanticIdsArray.push(this.transform(_item47));
          }
        } catch (err) {
          _iterator185.e(err);
        } finally {
          _iterator185.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator186 = _createForOfIteratorHelper(that.qualifiers),
          _step186;
        try {
          for (_iterator186.s(); !(_step186 = _iterator186.n()).done;) {
            var _item48 = _step186.value;
            qualifiersArray.push(this.transform(_item48));
          }
        } catch (err) {
          _iterator186.e(err);
        } finally {
          _iterator186.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator187 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step187;
        try {
          for (_iterator187.s(); !(_step187 = _iterator187.n()).done;) {
            var _item49 = _step187.value;
            embeddedDataSpecificationsArray.push(this.transform(_item49));
          }
        } catch (err) {
          _iterator187.e(err);
        } finally {
          _iterator187.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        jsonable["value"] = this.transform(that.value);
      }
      jsonable["modelType"] = "ReferenceElement";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformBlob",
    value: function transformBlob(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator188 = _createForOfIteratorHelper(that.extensions),
          _step188;
        try {
          for (_iterator188.s(); !(_step188 = _iterator188.n()).done;) {
            var item = _step188.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator188.e(err);
        } finally {
          _iterator188.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator189 = _createForOfIteratorHelper(that.displayName),
          _step189;
        try {
          for (_iterator189.s(); !(_step189 = _iterator189.n()).done;) {
            var _item50 = _step189.value;
            displayNameArray.push(this.transform(_item50));
          }
        } catch (err) {
          _iterator189.e(err);
        } finally {
          _iterator189.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator190 = _createForOfIteratorHelper(that.description),
          _step190;
        try {
          for (_iterator190.s(); !(_step190 = _iterator190.n()).done;) {
            var _item51 = _step190.value;
            descriptionArray.push(this.transform(_item51));
          }
        } catch (err) {
          _iterator190.e(err);
        } finally {
          _iterator190.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator191 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step191;
        try {
          for (_iterator191.s(); !(_step191 = _iterator191.n()).done;) {
            var _item52 = _step191.value;
            supplementalSemanticIdsArray.push(this.transform(_item52));
          }
        } catch (err) {
          _iterator191.e(err);
        } finally {
          _iterator191.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator192 = _createForOfIteratorHelper(that.qualifiers),
          _step192;
        try {
          for (_iterator192.s(); !(_step192 = _iterator192.n()).done;) {
            var _item53 = _step192.value;
            qualifiersArray.push(this.transform(_item53));
          }
        } catch (err) {
          _iterator192.e(err);
        } finally {
          _iterator192.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator193 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step193;
        try {
          for (_iterator193.s(); !(_step193 = _iterator193.n()).done;) {
            var _item54 = _step193.value;
            embeddedDataSpecificationsArray.push(this.transform(_item54));
          }
        } catch (err) {
          _iterator193.e(err);
        } finally {
          _iterator193.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        jsonable["value"] = base64Encode(that.value);
      }
      jsonable["contentType"] = that.contentType;
      jsonable["modelType"] = "Blob";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformFile",
    value: function transformFile(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator194 = _createForOfIteratorHelper(that.extensions),
          _step194;
        try {
          for (_iterator194.s(); !(_step194 = _iterator194.n()).done;) {
            var item = _step194.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator194.e(err);
        } finally {
          _iterator194.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator195 = _createForOfIteratorHelper(that.displayName),
          _step195;
        try {
          for (_iterator195.s(); !(_step195 = _iterator195.n()).done;) {
            var _item55 = _step195.value;
            displayNameArray.push(this.transform(_item55));
          }
        } catch (err) {
          _iterator195.e(err);
        } finally {
          _iterator195.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator196 = _createForOfIteratorHelper(that.description),
          _step196;
        try {
          for (_iterator196.s(); !(_step196 = _iterator196.n()).done;) {
            var _item56 = _step196.value;
            descriptionArray.push(this.transform(_item56));
          }
        } catch (err) {
          _iterator196.e(err);
        } finally {
          _iterator196.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator197 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step197;
        try {
          for (_iterator197.s(); !(_step197 = _iterator197.n()).done;) {
            var _item57 = _step197.value;
            supplementalSemanticIdsArray.push(this.transform(_item57));
          }
        } catch (err) {
          _iterator197.e(err);
        } finally {
          _iterator197.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator198 = _createForOfIteratorHelper(that.qualifiers),
          _step198;
        try {
          for (_iterator198.s(); !(_step198 = _iterator198.n()).done;) {
            var _item58 = _step198.value;
            qualifiersArray.push(this.transform(_item58));
          }
        } catch (err) {
          _iterator198.e(err);
        } finally {
          _iterator198.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator199 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step199;
        try {
          for (_iterator199.s(); !(_step199 = _iterator199.n()).done;) {
            var _item59 = _step199.value;
            embeddedDataSpecificationsArray.push(this.transform(_item59));
          }
        } catch (err) {
          _iterator199.e(err);
        } finally {
          _iterator199.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      jsonable["contentType"] = that.contentType;
      jsonable["modelType"] = "File";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformAnnotatedRelationshipElement",
    value: function transformAnnotatedRelationshipElement(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator200 = _createForOfIteratorHelper(that.extensions),
          _step200;
        try {
          for (_iterator200.s(); !(_step200 = _iterator200.n()).done;) {
            var item = _step200.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator200.e(err);
        } finally {
          _iterator200.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator201 = _createForOfIteratorHelper(that.displayName),
          _step201;
        try {
          for (_iterator201.s(); !(_step201 = _iterator201.n()).done;) {
            var _item60 = _step201.value;
            displayNameArray.push(this.transform(_item60));
          }
        } catch (err) {
          _iterator201.e(err);
        } finally {
          _iterator201.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator202 = _createForOfIteratorHelper(that.description),
          _step202;
        try {
          for (_iterator202.s(); !(_step202 = _iterator202.n()).done;) {
            var _item61 = _step202.value;
            descriptionArray.push(this.transform(_item61));
          }
        } catch (err) {
          _iterator202.e(err);
        } finally {
          _iterator202.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator203 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step203;
        try {
          for (_iterator203.s(); !(_step203 = _iterator203.n()).done;) {
            var _item62 = _step203.value;
            supplementalSemanticIdsArray.push(this.transform(_item62));
          }
        } catch (err) {
          _iterator203.e(err);
        } finally {
          _iterator203.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator204 = _createForOfIteratorHelper(that.qualifiers),
          _step204;
        try {
          for (_iterator204.s(); !(_step204 = _iterator204.n()).done;) {
            var _item63 = _step204.value;
            qualifiersArray.push(this.transform(_item63));
          }
        } catch (err) {
          _iterator204.e(err);
        } finally {
          _iterator204.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator205 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step205;
        try {
          for (_iterator205.s(); !(_step205 = _iterator205.n()).done;) {
            var _item64 = _step205.value;
            embeddedDataSpecificationsArray.push(this.transform(_item64));
          }
        } catch (err) {
          _iterator205.e(err);
        } finally {
          _iterator205.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["first"] = this.transform(that.first);
      jsonable["second"] = this.transform(that.second);
      if (that.annotations !== null) {
        var annotationsArray = new Array();
        var _iterator206 = _createForOfIteratorHelper(that.annotations),
          _step206;
        try {
          for (_iterator206.s(); !(_step206 = _iterator206.n()).done;) {
            var _item65 = _step206.value;
            annotationsArray.push(this.transform(_item65));
          }
        } catch (err) {
          _iterator206.e(err);
        } finally {
          _iterator206.f();
        }
        jsonable["annotations"] = annotationsArray;
      }
      jsonable["modelType"] = "AnnotatedRelationshipElement";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformEntity",
    value: function transformEntity(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator207 = _createForOfIteratorHelper(that.extensions),
          _step207;
        try {
          for (_iterator207.s(); !(_step207 = _iterator207.n()).done;) {
            var item = _step207.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator207.e(err);
        } finally {
          _iterator207.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator208 = _createForOfIteratorHelper(that.displayName),
          _step208;
        try {
          for (_iterator208.s(); !(_step208 = _iterator208.n()).done;) {
            var _item66 = _step208.value;
            displayNameArray.push(this.transform(_item66));
          }
        } catch (err) {
          _iterator208.e(err);
        } finally {
          _iterator208.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator209 = _createForOfIteratorHelper(that.description),
          _step209;
        try {
          for (_iterator209.s(); !(_step209 = _iterator209.n()).done;) {
            var _item67 = _step209.value;
            descriptionArray.push(this.transform(_item67));
          }
        } catch (err) {
          _iterator209.e(err);
        } finally {
          _iterator209.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator210 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step210;
        try {
          for (_iterator210.s(); !(_step210 = _iterator210.n()).done;) {
            var _item68 = _step210.value;
            supplementalSemanticIdsArray.push(this.transform(_item68));
          }
        } catch (err) {
          _iterator210.e(err);
        } finally {
          _iterator210.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator211 = _createForOfIteratorHelper(that.qualifiers),
          _step211;
        try {
          for (_iterator211.s(); !(_step211 = _iterator211.n()).done;) {
            var _item69 = _step211.value;
            qualifiersArray.push(this.transform(_item69));
          }
        } catch (err) {
          _iterator211.e(err);
        } finally {
          _iterator211.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator212 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step212;
        try {
          for (_iterator212.s(); !(_step212 = _iterator212.n()).done;) {
            var _item70 = _step212.value;
            embeddedDataSpecificationsArray.push(this.transform(_item70));
          }
        } catch (err) {
          _iterator212.e(err);
        } finally {
          _iterator212.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.statements !== null) {
        var statementsArray = new Array();
        var _iterator213 = _createForOfIteratorHelper(that.statements),
          _step213;
        try {
          for (_iterator213.s(); !(_step213 = _iterator213.n()).done;) {
            var _item71 = _step213.value;
            statementsArray.push(this.transform(_item71));
          }
        } catch (err) {
          _iterator213.e(err);
        } finally {
          _iterator213.f();
        }
        jsonable["statements"] = statementsArray;
      }
      jsonable["entityType"] = mustEntityTypeToString(that.entityType);
      if (that.globalAssetId !== null) {
        jsonable["globalAssetId"] = that.globalAssetId;
      }
      if (that.specificAssetIds !== null) {
        var specificAssetIdsArray = new Array();
        var _iterator214 = _createForOfIteratorHelper(that.specificAssetIds),
          _step214;
        try {
          for (_iterator214.s(); !(_step214 = _iterator214.n()).done;) {
            var _item72 = _step214.value;
            specificAssetIdsArray.push(this.transform(_item72));
          }
        } catch (err) {
          _iterator214.e(err);
        } finally {
          _iterator214.f();
        }
        jsonable["specificAssetIds"] = specificAssetIdsArray;
      }
      jsonable["modelType"] = "Entity";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformEventPayload",
    value: function transformEventPayload(that) {
      var jsonable = {};
      jsonable["source"] = this.transform(that.source);
      if (that.sourceSemanticId !== null) {
        jsonable["sourceSemanticId"] = this.transform(that.sourceSemanticId);
      }
      jsonable["observableReference"] = this.transform(that.observableReference);
      if (that.observableSemanticId !== null) {
        jsonable["observableSemanticId"] = this.transform(that.observableSemanticId);
      }
      if (that.topic !== null) {
        jsonable["topic"] = that.topic;
      }
      if (that.subjectId !== null) {
        jsonable["subjectId"] = this.transform(that.subjectId);
      }
      jsonable["timeStamp"] = that.timeStamp;
      if (that.payload !== null) {
        jsonable["payload"] = base64Encode(that.payload);
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformBasicEventElement",
    value: function transformBasicEventElement(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator215 = _createForOfIteratorHelper(that.extensions),
          _step215;
        try {
          for (_iterator215.s(); !(_step215 = _iterator215.n()).done;) {
            var item = _step215.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator215.e(err);
        } finally {
          _iterator215.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator216 = _createForOfIteratorHelper(that.displayName),
          _step216;
        try {
          for (_iterator216.s(); !(_step216 = _iterator216.n()).done;) {
            var _item73 = _step216.value;
            displayNameArray.push(this.transform(_item73));
          }
        } catch (err) {
          _iterator216.e(err);
        } finally {
          _iterator216.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator217 = _createForOfIteratorHelper(that.description),
          _step217;
        try {
          for (_iterator217.s(); !(_step217 = _iterator217.n()).done;) {
            var _item74 = _step217.value;
            descriptionArray.push(this.transform(_item74));
          }
        } catch (err) {
          _iterator217.e(err);
        } finally {
          _iterator217.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator218 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step218;
        try {
          for (_iterator218.s(); !(_step218 = _iterator218.n()).done;) {
            var _item75 = _step218.value;
            supplementalSemanticIdsArray.push(this.transform(_item75));
          }
        } catch (err) {
          _iterator218.e(err);
        } finally {
          _iterator218.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator219 = _createForOfIteratorHelper(that.qualifiers),
          _step219;
        try {
          for (_iterator219.s(); !(_step219 = _iterator219.n()).done;) {
            var _item76 = _step219.value;
            qualifiersArray.push(this.transform(_item76));
          }
        } catch (err) {
          _iterator219.e(err);
        } finally {
          _iterator219.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator220 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step220;
        try {
          for (_iterator220.s(); !(_step220 = _iterator220.n()).done;) {
            var _item77 = _step220.value;
            embeddedDataSpecificationsArray.push(this.transform(_item77));
          }
        } catch (err) {
          _iterator220.e(err);
        } finally {
          _iterator220.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["observed"] = this.transform(that.observed);
      jsonable["direction"] = mustDirectionToString(that.direction);
      jsonable["state"] = mustStateOfEventToString(that.state);
      if (that.messageTopic !== null) {
        jsonable["messageTopic"] = that.messageTopic;
      }
      if (that.messageBroker !== null) {
        jsonable["messageBroker"] = this.transform(that.messageBroker);
      }
      if (that.lastUpdate !== null) {
        jsonable["lastUpdate"] = that.lastUpdate;
      }
      if (that.minInterval !== null) {
        jsonable["minInterval"] = that.minInterval;
      }
      if (that.maxInterval !== null) {
        jsonable["maxInterval"] = that.maxInterval;
      }
      jsonable["modelType"] = "BasicEventElement";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformOperation",
    value: function transformOperation(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator221 = _createForOfIteratorHelper(that.extensions),
          _step221;
        try {
          for (_iterator221.s(); !(_step221 = _iterator221.n()).done;) {
            var item = _step221.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator221.e(err);
        } finally {
          _iterator221.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator222 = _createForOfIteratorHelper(that.displayName),
          _step222;
        try {
          for (_iterator222.s(); !(_step222 = _iterator222.n()).done;) {
            var _item78 = _step222.value;
            displayNameArray.push(this.transform(_item78));
          }
        } catch (err) {
          _iterator222.e(err);
        } finally {
          _iterator222.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator223 = _createForOfIteratorHelper(that.description),
          _step223;
        try {
          for (_iterator223.s(); !(_step223 = _iterator223.n()).done;) {
            var _item79 = _step223.value;
            descriptionArray.push(this.transform(_item79));
          }
        } catch (err) {
          _iterator223.e(err);
        } finally {
          _iterator223.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator224 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step224;
        try {
          for (_iterator224.s(); !(_step224 = _iterator224.n()).done;) {
            var _item80 = _step224.value;
            supplementalSemanticIdsArray.push(this.transform(_item80));
          }
        } catch (err) {
          _iterator224.e(err);
        } finally {
          _iterator224.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator225 = _createForOfIteratorHelper(that.qualifiers),
          _step225;
        try {
          for (_iterator225.s(); !(_step225 = _iterator225.n()).done;) {
            var _item81 = _step225.value;
            qualifiersArray.push(this.transform(_item81));
          }
        } catch (err) {
          _iterator225.e(err);
        } finally {
          _iterator225.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator226 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step226;
        try {
          for (_iterator226.s(); !(_step226 = _iterator226.n()).done;) {
            var _item82 = _step226.value;
            embeddedDataSpecificationsArray.push(this.transform(_item82));
          }
        } catch (err) {
          _iterator226.e(err);
        } finally {
          _iterator226.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.inputVariables !== null) {
        var inputVariablesArray = new Array();
        var _iterator227 = _createForOfIteratorHelper(that.inputVariables),
          _step227;
        try {
          for (_iterator227.s(); !(_step227 = _iterator227.n()).done;) {
            var _item83 = _step227.value;
            inputVariablesArray.push(this.transform(_item83));
          }
        } catch (err) {
          _iterator227.e(err);
        } finally {
          _iterator227.f();
        }
        jsonable["inputVariables"] = inputVariablesArray;
      }
      if (that.outputVariables !== null) {
        var outputVariablesArray = new Array();
        var _iterator228 = _createForOfIteratorHelper(that.outputVariables),
          _step228;
        try {
          for (_iterator228.s(); !(_step228 = _iterator228.n()).done;) {
            var _item84 = _step228.value;
            outputVariablesArray.push(this.transform(_item84));
          }
        } catch (err) {
          _iterator228.e(err);
        } finally {
          _iterator228.f();
        }
        jsonable["outputVariables"] = outputVariablesArray;
      }
      if (that.inoutputVariables !== null) {
        var inoutputVariablesArray = new Array();
        var _iterator229 = _createForOfIteratorHelper(that.inoutputVariables),
          _step229;
        try {
          for (_iterator229.s(); !(_step229 = _iterator229.n()).done;) {
            var _item85 = _step229.value;
            inoutputVariablesArray.push(this.transform(_item85));
          }
        } catch (err) {
          _iterator229.e(err);
        } finally {
          _iterator229.f();
        }
        jsonable["inoutputVariables"] = inoutputVariablesArray;
      }
      jsonable["modelType"] = "Operation";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformOperationVariable",
    value: function transformOperationVariable(that) {
      var jsonable = {};
      jsonable["value"] = this.transform(that.value);
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformCapability",
    value: function transformCapability(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator230 = _createForOfIteratorHelper(that.extensions),
          _step230;
        try {
          for (_iterator230.s(); !(_step230 = _iterator230.n()).done;) {
            var item = _step230.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator230.e(err);
        } finally {
          _iterator230.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator231 = _createForOfIteratorHelper(that.displayName),
          _step231;
        try {
          for (_iterator231.s(); !(_step231 = _iterator231.n()).done;) {
            var _item86 = _step231.value;
            displayNameArray.push(this.transform(_item86));
          }
        } catch (err) {
          _iterator231.e(err);
        } finally {
          _iterator231.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator232 = _createForOfIteratorHelper(that.description),
          _step232;
        try {
          for (_iterator232.s(); !(_step232 = _iterator232.n()).done;) {
            var _item87 = _step232.value;
            descriptionArray.push(this.transform(_item87));
          }
        } catch (err) {
          _iterator232.e(err);
        } finally {
          _iterator232.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.semanticId !== null) {
        jsonable["semanticId"] = this.transform(that.semanticId);
      }
      if (that.supplementalSemanticIds !== null) {
        var supplementalSemanticIdsArray = new Array();
        var _iterator233 = _createForOfIteratorHelper(that.supplementalSemanticIds),
          _step233;
        try {
          for (_iterator233.s(); !(_step233 = _iterator233.n()).done;) {
            var _item88 = _step233.value;
            supplementalSemanticIdsArray.push(this.transform(_item88));
          }
        } catch (err) {
          _iterator233.e(err);
        } finally {
          _iterator233.f();
        }
        jsonable["supplementalSemanticIds"] = supplementalSemanticIdsArray;
      }
      if (that.qualifiers !== null) {
        var qualifiersArray = new Array();
        var _iterator234 = _createForOfIteratorHelper(that.qualifiers),
          _step234;
        try {
          for (_iterator234.s(); !(_step234 = _iterator234.n()).done;) {
            var _item89 = _step234.value;
            qualifiersArray.push(this.transform(_item89));
          }
        } catch (err) {
          _iterator234.e(err);
        } finally {
          _iterator234.f();
        }
        jsonable["qualifiers"] = qualifiersArray;
      }
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator235 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step235;
        try {
          for (_iterator235.s(); !(_step235 = _iterator235.n()).done;) {
            var _item90 = _step235.value;
            embeddedDataSpecificationsArray.push(this.transform(_item90));
          }
        } catch (err) {
          _iterator235.e(err);
        } finally {
          _iterator235.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      jsonable["modelType"] = "Capability";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformConceptDescription",
    value: function transformConceptDescription(that) {
      var jsonable = {};
      if (that.extensions !== null) {
        var extensionsArray = new Array();
        var _iterator236 = _createForOfIteratorHelper(that.extensions),
          _step236;
        try {
          for (_iterator236.s(); !(_step236 = _iterator236.n()).done;) {
            var item = _step236.value;
            extensionsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator236.e(err);
        } finally {
          _iterator236.f();
        }
        jsonable["extensions"] = extensionsArray;
      }
      if (that.category !== null) {
        jsonable["category"] = that.category;
      }
      if (that.idShort !== null) {
        jsonable["idShort"] = that.idShort;
      }
      if (that.displayName !== null) {
        var displayNameArray = new Array();
        var _iterator237 = _createForOfIteratorHelper(that.displayName),
          _step237;
        try {
          for (_iterator237.s(); !(_step237 = _iterator237.n()).done;) {
            var _item91 = _step237.value;
            displayNameArray.push(this.transform(_item91));
          }
        } catch (err) {
          _iterator237.e(err);
        } finally {
          _iterator237.f();
        }
        jsonable["displayName"] = displayNameArray;
      }
      if (that.description !== null) {
        var descriptionArray = new Array();
        var _iterator238 = _createForOfIteratorHelper(that.description),
          _step238;
        try {
          for (_iterator238.s(); !(_step238 = _iterator238.n()).done;) {
            var _item92 = _step238.value;
            descriptionArray.push(this.transform(_item92));
          }
        } catch (err) {
          _iterator238.e(err);
        } finally {
          _iterator238.f();
        }
        jsonable["description"] = descriptionArray;
      }
      if (that.administration !== null) {
        jsonable["administration"] = this.transform(that.administration);
      }
      jsonable["id"] = that.id;
      if (that.embeddedDataSpecifications !== null) {
        var embeddedDataSpecificationsArray = new Array();
        var _iterator239 = _createForOfIteratorHelper(that.embeddedDataSpecifications),
          _step239;
        try {
          for (_iterator239.s(); !(_step239 = _iterator239.n()).done;) {
            var _item93 = _step239.value;
            embeddedDataSpecificationsArray.push(this.transform(_item93));
          }
        } catch (err) {
          _iterator239.e(err);
        } finally {
          _iterator239.f();
        }
        jsonable["embeddedDataSpecifications"] = embeddedDataSpecificationsArray;
      }
      if (that.isCaseOf !== null) {
        var isCaseOfArray = new Array();
        var _iterator240 = _createForOfIteratorHelper(that.isCaseOf),
          _step240;
        try {
          for (_iterator240.s(); !(_step240 = _iterator240.n()).done;) {
            var _item94 = _step240.value;
            isCaseOfArray.push(this.transform(_item94));
          }
        } catch (err) {
          _iterator240.e(err);
        } finally {
          _iterator240.f();
        }
        jsonable["isCaseOf"] = isCaseOfArray;
      }
      jsonable["modelType"] = "ConceptDescription";
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformReference",
    value: function transformReference(that) {
      var jsonable = {};
      jsonable["type"] = mustReferenceTypesToString(that.type);
      if (that.referredSemanticId !== null) {
        jsonable["referredSemanticId"] = this.transform(that.referredSemanticId);
      }
      var keysArray = new Array();
      var _iterator241 = _createForOfIteratorHelper(that.keys),
        _step241;
      try {
        for (_iterator241.s(); !(_step241 = _iterator241.n()).done;) {
          var item = _step241.value;
          keysArray.push(this.transform(item));
        }
      } catch (err) {
        _iterator241.e(err);
      } finally {
        _iterator241.f();
      }
      jsonable["keys"] = keysArray;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformKey",
    value: function transformKey(that) {
      var jsonable = {};
      jsonable["type"] = mustKeyTypesToString(that.type);
      jsonable["value"] = that.value;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringNameType",
    value: function transformLangStringNameType(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringTextType",
    value: function transformLangStringTextType(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformEnvironment",
    value: function transformEnvironment(that) {
      var jsonable = {};
      if (that.assetAdministrationShells !== null) {
        var assetAdministrationShellsArray = new Array();
        var _iterator242 = _createForOfIteratorHelper(that.assetAdministrationShells),
          _step242;
        try {
          for (_iterator242.s(); !(_step242 = _iterator242.n()).done;) {
            var item = _step242.value;
            assetAdministrationShellsArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator242.e(err);
        } finally {
          _iterator242.f();
        }
        jsonable["assetAdministrationShells"] = assetAdministrationShellsArray;
      }
      if (that.submodels !== null) {
        var submodelsArray = new Array();
        var _iterator243 = _createForOfIteratorHelper(that.submodels),
          _step243;
        try {
          for (_iterator243.s(); !(_step243 = _iterator243.n()).done;) {
            var _item95 = _step243.value;
            submodelsArray.push(this.transform(_item95));
          }
        } catch (err) {
          _iterator243.e(err);
        } finally {
          _iterator243.f();
        }
        jsonable["submodels"] = submodelsArray;
      }
      if (that.conceptDescriptions !== null) {
        var conceptDescriptionsArray = new Array();
        var _iterator244 = _createForOfIteratorHelper(that.conceptDescriptions),
          _step244;
        try {
          for (_iterator244.s(); !(_step244 = _iterator244.n()).done;) {
            var _item96 = _step244.value;
            conceptDescriptionsArray.push(this.transform(_item96));
          }
        } catch (err) {
          _iterator244.e(err);
        } finally {
          _iterator244.f();
        }
        jsonable["conceptDescriptions"] = conceptDescriptionsArray;
      }
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformEmbeddedDataSpecification",
    value: function transformEmbeddedDataSpecification(that) {
      var jsonable = {};
      jsonable["dataSpecification"] = this.transform(that.dataSpecification);
      jsonable["dataSpecificationContent"] = this.transform(that.dataSpecificationContent);
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLevelType",
    value: function transformLevelType(that) {
      var jsonable = {};
      jsonable["min"] = that.min;
      jsonable["nom"] = that.nom;
      jsonable["typ"] = that.typ;
      jsonable["max"] = that.max;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformValueReferencePair",
    value: function transformValueReferencePair(that) {
      var jsonable = {};
      jsonable["value"] = that.value;
      jsonable["valueId"] = this.transform(that.valueId);
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformValueList",
    value: function transformValueList(that) {
      var jsonable = {};
      var valueReferencePairsArray = new Array();
      var _iterator245 = _createForOfIteratorHelper(that.valueReferencePairs),
        _step245;
      try {
        for (_iterator245.s(); !(_step245 = _iterator245.n()).done;) {
          var item = _step245.value;
          valueReferencePairsArray.push(this.transform(item));
        }
      } catch (err) {
        _iterator245.e(err);
      } finally {
        _iterator245.f();
      }
      jsonable["valueReferencePairs"] = valueReferencePairsArray;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringPreferredNameTypeIec61360",
    value: function transformLangStringPreferredNameTypeIec61360(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringShortNameTypeIec61360",
    value: function transformLangStringShortNameTypeIec61360(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformLangStringDefinitionTypeIec61360",
    value: function transformLangStringDefinitionTypeIec61360(that) {
      var jsonable = {};
      jsonable["language"] = that.language;
      jsonable["text"] = that.text;
      return jsonable;
    }

    /**
     * Serialize `that` to a JSON-able representation.
     *
     * @param that - instance to be serialization
     * @returns JSON-able representation
     */
  }, {
    key: "transformDataSpecificationIec61360",
    value: function transformDataSpecificationIec61360(that) {
      var jsonable = {};
      var preferredNameArray = new Array();
      var _iterator246 = _createForOfIteratorHelper(that.preferredName),
        _step246;
      try {
        for (_iterator246.s(); !(_step246 = _iterator246.n()).done;) {
          var _item98 = _step246.value;
          preferredNameArray.push(this.transform(_item98));
        }
      } catch (err) {
        _iterator246.e(err);
      } finally {
        _iterator246.f();
      }
      jsonable["preferredName"] = preferredNameArray;
      if (that.shortName !== null) {
        var shortNameArray = new Array();
        var _iterator247 = _createForOfIteratorHelper(that.shortName),
          _step247;
        try {
          for (_iterator247.s(); !(_step247 = _iterator247.n()).done;) {
            var item = _step247.value;
            shortNameArray.push(this.transform(item));
          }
        } catch (err) {
          _iterator247.e(err);
        } finally {
          _iterator247.f();
        }
        jsonable["shortName"] = shortNameArray;
      }
      if (that.unit !== null) {
        jsonable["unit"] = that.unit;
      }
      if (that.unitId !== null) {
        jsonable["unitId"] = this.transform(that.unitId);
      }
      if (that.sourceOfDefinition !== null) {
        jsonable["sourceOfDefinition"] = that.sourceOfDefinition;
      }
      if (that.symbol !== null) {
        jsonable["symbol"] = that.symbol;
      }
      if (that.dataType !== null) {
        jsonable["dataType"] = mustDataTypeIec61360ToString(that.dataType);
      }
      if (that.definition !== null) {
        var definitionArray = new Array();
        var _iterator248 = _createForOfIteratorHelper(that.definition),
          _step248;
        try {
          for (_iterator248.s(); !(_step248 = _iterator248.n()).done;) {
            var _item97 = _step248.value;
            definitionArray.push(this.transform(_item97));
          }
        } catch (err) {
          _iterator248.e(err);
        } finally {
          _iterator248.f();
        }
        jsonable["definition"] = definitionArray;
      }
      if (that.valueFormat !== null) {
        jsonable["valueFormat"] = that.valueFormat;
      }
      if (that.valueList !== null) {
        jsonable["valueList"] = this.transform(that.valueList);
      }
      if (that.value !== null) {
        jsonable["value"] = that.value;
      }
      if (that.levelType !== null) {
        jsonable["levelType"] = this.transform(that.levelType);
      }
      jsonable["modelType"] = "DataSpecificationIec61360";
      return jsonable;
    }
  }]);
  return Serializer;
}(AbstractTransformer);
var SERIALIZER = new Serializer();

/**
 * Convert `that` to a JSON-able structure.
 *
 * @param that - AAS data to be recursively converted to a JSON-able structure
 * @returns
 * JSON-able structure which can be further processed with, say,
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify|JSON.stringify})
 */
function toJsonable(that) {
  return SERIALIZER.transform(that);
}

// endregion

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

var jsonization = /*#__PURE__*/Object.freeze({
  __proto__: null,
  DeserializationError: DeserializationError,
  IndexSegment: IndexSegment$1,
  Path: Path$1,
  PropertySegment: PropertySegment$1,
  aasSubmodelElementsFromJsonable: aasSubmodelElementsFromJsonable,
  abstractLangStringFromJsonable: abstractLangStringFromJsonable,
  administrativeInformationFromJsonable: administrativeInformationFromJsonable,
  annotatedRelationshipElementFromJsonable: annotatedRelationshipElementFromJsonable,
  assetAdministrationShellFromJsonable: assetAdministrationShellFromJsonable,
  assetInformationFromJsonable: assetInformationFromJsonable,
  assetKindFromJsonable: assetKindFromJsonable,
  basicEventElementFromJsonable: basicEventElementFromJsonable,
  blobFromJsonable: blobFromJsonable,
  capabilityFromJsonable: capabilityFromJsonable,
  conceptDescriptionFromJsonable: conceptDescriptionFromJsonable,
  dataElementFromJsonable: dataElementFromJsonable,
  dataSpecificationContentFromJsonable: dataSpecificationContentFromJsonable,
  dataSpecificationIec61360FromJsonable: dataSpecificationIec61360FromJsonable,
  dataTypeDefXsdFromJsonable: dataTypeDefXsdFromJsonable,
  dataTypeIec61360FromJsonable: dataTypeIec61360FromJsonable,
  directionFromJsonable: directionFromJsonable,
  embeddedDataSpecificationFromJsonable: embeddedDataSpecificationFromJsonable,
  entityFromJsonable: entityFromJsonable,
  entityTypeFromJsonable: entityTypeFromJsonable,
  environmentFromJsonable: environmentFromJsonable,
  eventElementFromJsonable: eventElementFromJsonable,
  eventPayloadFromJsonable: eventPayloadFromJsonable,
  extensionFromJsonable: extensionFromJsonable,
  fileFromJsonable: fileFromJsonable,
  hasDataSpecificationFromJsonable: hasDataSpecificationFromJsonable,
  hasExtensionsFromJsonable: hasExtensionsFromJsonable,
  hasKindFromJsonable: hasKindFromJsonable,
  hasSemanticsFromJsonable: hasSemanticsFromJsonable,
  identifiableFromJsonable: identifiableFromJsonable,
  keyFromJsonable: keyFromJsonable,
  keyTypesFromJsonable: keyTypesFromJsonable,
  langStringDefinitionTypeIec61360FromJsonable: langStringDefinitionTypeIec61360FromJsonable,
  langStringNameTypeFromJsonable: langStringNameTypeFromJsonable,
  langStringPreferredNameTypeIec61360FromJsonable: langStringPreferredNameTypeIec61360FromJsonable,
  langStringShortNameTypeIec61360FromJsonable: langStringShortNameTypeIec61360FromJsonable,
  langStringTextTypeFromJsonable: langStringTextTypeFromJsonable,
  levelTypeFromJsonable: levelTypeFromJsonable,
  modellingKindFromJsonable: modellingKindFromJsonable,
  multiLanguagePropertyFromJsonable: multiLanguagePropertyFromJsonable,
  operationFromJsonable: operationFromJsonable,
  operationVariableFromJsonable: operationVariableFromJsonable,
  propertyFromJsonable: propertyFromJsonable,
  qualifiableFromJsonable: qualifiableFromJsonable,
  qualifierFromJsonable: qualifierFromJsonable,
  qualifierKindFromJsonable: qualifierKindFromJsonable,
  rangeFromJsonable: rangeFromJsonable,
  referableFromJsonable: referableFromJsonable,
  referenceElementFromJsonable: referenceElementFromJsonable,
  referenceFromJsonable: referenceFromJsonable,
  referenceTypesFromJsonable: referenceTypesFromJsonable,
  relationshipElementFromJsonable: relationshipElementFromJsonable,
  resourceFromJsonable: resourceFromJsonable,
  specificAssetIdFromJsonable: specificAssetIdFromJsonable,
  stateOfEventFromJsonable: stateOfEventFromJsonable,
  submodelElementCollectionFromJsonable: submodelElementCollectionFromJsonable,
  submodelElementFromJsonable: submodelElementFromJsonable,
  submodelElementListFromJsonable: submodelElementListFromJsonable,
  submodelFromJsonable: submodelFromJsonable,
  toJsonable: toJsonable,
  valueListFromJsonable: valueListFromJsonable,
  valueReferencePairFromJsonable: valueReferencePairFromJsonable
});

var _marked = /*#__PURE__*/_regeneratorRuntime().mark(verifyNonEmptyXmlSerializableString),
  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(verifyDateTimeUtc),
  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(verifyDuration),
  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(verifyBlobType),
  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(verifyIdentifier),
  _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(verifyValueTypeIec61360),
  _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(verifyNameType),
  _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(verifyVersionType),
  _marked9 = /*#__PURE__*/_regeneratorRuntime().mark(verifyRevisionType),
  _marked10 = /*#__PURE__*/_regeneratorRuntime().mark(verifyLabelType),
  _marked11 = /*#__PURE__*/_regeneratorRuntime().mark(verifyMessageTopicType),
  _marked12 = /*#__PURE__*/_regeneratorRuntime().mark(verifyBcp47LanguageTag),
  _marked13 = /*#__PURE__*/_regeneratorRuntime().mark(verifyContentType),
  _marked14 = /*#__PURE__*/_regeneratorRuntime().mark(verifyPathType),
  _marked15 = /*#__PURE__*/_regeneratorRuntime().mark(verifyQualifierType),
  _marked16 = /*#__PURE__*/_regeneratorRuntime().mark(verifyValueDataType),
  _marked17 = /*#__PURE__*/_regeneratorRuntime().mark(verifyIdShortType);

// The generated code might contain deliberately double negations. For example,
// when the constraint is formulated as a NAND and we check that the constraint
// is not fulfilled. Therefore, we disable this linting rule.
/* eslint no-extra-boolean-cast: 0 */

/**
 * Represent a property access on a path to an erroneous value.
 */
var PropertySegment = /*#__PURE__*/function () {
  /**
   * Instance containing the property
   */

  /**
   * Name of the property
   */

  function PropertySegment(instance, name) {
    _classCallCheck(this, PropertySegment);
    this.instance = instance;
    this.name = name;
  }
  _createClass(PropertySegment, [{
    key: "toString",
    value: function toString() {
      return ".".concat(this.name);
    }
  }]);
  return PropertySegment;
}();

/**
 * Represent an index access on a path to an erroneous value.
 */
var IndexSegment = /*#__PURE__*/function () {
  /**
   * Sequence containing the item at {@link index}
   */

  /**
   * Index of the item in the {@link sequence}
   */

  function IndexSegment(sequence, index) {
    _classCallCheck(this, IndexSegment);
    this.sequence = sequence;
    this.index = index;
  }
  _createClass(IndexSegment, [{
    key: "toString",
    value: function toString() {
      return "[".concat(this.index, "]");
    }
  }]);
  return IndexSegment;
}();
/**
 * Represent the relative path to the erroneous value.
 */
var Path = /*#__PURE__*/function () {
  function Path() {
    _classCallCheck(this, Path);
    _defineProperty(this, "segments", []);
  }
  _createClass(Path, [{
    key: "prepend",
    value: function prepend(segment) {
      this.segments.unshift(segment);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.segments.join("");
    }
  }]);
  return Path;
}();

/**
 * Represent a verification error in the data.
 */
var VerificationError = /*#__PURE__*/_createClass(
// NOTE (mristin, 2022-11-12):
// The name `VerificationError` is redundant since it lives in `verification` module,
// and it would have made more sense to call it simply `Error`. Unfortunately in this case,
// `Error` is a reserved name by JavaScript.

/**
 * Human-readable description of the error
 */

/**
 * Path to the erroneous value
 */

/**
 * Initialize with the given `message` and `path`.
 *
 * @remarks
 * If no `path` is specified, initialize with an empty path.
 */
function VerificationError(message) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  _classCallCheck(this, VerificationError);
  _defineProperty(this, "path", new Path());
  this.message = message;
  this.path = path !== null ? path : new Path();
});
function constructMatchesIdShort() {
  var pattern = "^[a-zA-Z][a-zA-Z0-9_]*$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_ID_SHORT = constructMatchesIdShort();

/**
 * Check that `text` is a valid short ID.
 */
function matchesIdShort(text) {
  return REGEXP_MATCHES_ID_SHORT.test(text);
}
function constructMatchesVersionType() {
  var pattern = "^(0|[1-9][0-9]*)$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_VERSION_TYPE = constructMatchesVersionType();

/**
 * Check that `text` is a valid version string.
 */
function matchesVersionType(text) {
  return REGEXP_MATCHES_VERSION_TYPE.test(text);
}
function constructMatchesRevisionType() {
  var pattern = "^(0|[1-9][0-9]*)$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_REVISION_TYPE = constructMatchesRevisionType();

/**
 * Check that `text` is a valid revision string.
 */
function matchesRevisionType(text) {
  return REGEXP_MATCHES_REVISION_TYPE.test(text);
}
function constructMatchesXsDateTimeUtc() {
  var digit = "[0-9]";
  var yearFrag = "-?(([1-9]".concat(digit).concat(digit).concat(digit, "+)|(0").concat(digit).concat(digit).concat(digit, "))");
  var monthFrag = "((0[1-9])|(1[0-2]))";
  var dayFrag = "((0[1-9])|([12]".concat(digit, ")|(3[01]))");
  var hourFrag = "(([01]".concat(digit, ")|(2[0-3]))");
  var minuteFrag = "[0-5]".concat(digit);
  var secondFrag = "([0-5]".concat(digit, ")(\\.").concat(digit, "+)?");
  var endOfDayFrag = "24:00:00(\\.0+)?";
  var timezoneFrag = "(Z|\\+00:00|-00:00)";
  var dateTimeLexicalRep = "".concat(yearFrag, "-").concat(monthFrag, "-").concat(dayFrag, "T((").concat(hourFrag, ":").concat(minuteFrag, ":").concat(secondFrag, ")|").concat(endOfDayFrag, ")").concat(timezoneFrag);
  var pattern = "^".concat(dateTimeLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DATE_TIME_UTC = constructMatchesXsDateTimeUtc();

/**
 * Check that `text` conforms to the pattern of an `xs:dateTime`.
 *
 * @remarks
 *
 * The time zone must be fixed to UTC. We verify only that the `text` matches
 * a pre-defined pattern. We *do not* verify that the day of month is
 * correct nor do we check for leap seconds.
 *
 * See: https://www.w3.org/TR/xmlschema-2/#dateTime
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDateTimeUtc(text) {
  return REGEXP_MATCHES_XS_DATE_TIME_UTC.test(text);
}

/**
 * Check that `value` is a valid `xs:dateTime` with
 * the time zone set to UTC.
 *
 * @param value - to be checked
 * @returns `true` if `value` is a valid `xs:dateTime` with the UTC time zone
 */
function isXsDateTimeUtc(value) {
  if (!matchesXsDateTimeUtc(value)) {
    return false;
  }
  var date = value.split("T", 1)[0];
  return isXsDate(date);
}
function constructMatchesMimeType() {
  var tchar = "[!#$%&'*+\\-.^_`|~0-9a-zA-Z]";
  var token = "(".concat(tchar, ")+");
  var type = "".concat(token);
  var subtype = "".concat(token);
  var ows = "[ \\t]*";
  var obsText = "[\\u{80}-\\u{ff}]";
  var qdText = "([\\t !#-\\[\\]-~]|".concat(obsText, ")");
  var quotedPair = "\\\\([\\t !-~]|".concat(obsText, ")");
  var quotedString = "\"(".concat(qdText, "|").concat(quotedPair, ")*\"");
  var parameter = "".concat(token, "=(").concat(token, "|").concat(quotedString, ")");
  var mediaType = "^".concat(type, "/").concat(subtype, "(").concat(ows, ";").concat(ows).concat(parameter, ")*$");
  return new RegExp(mediaType, "u");
}
var REGEXP_MATCHES_MIME_TYPE = constructMatchesMimeType();

/**
 * Check that `text` conforms to the pattern of MIME type.
 *
 * @remarks
 *
 * The definition has been taken from:
 * https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.1,
 * https://www.rfc-editor.org/rfc/rfc7230#section-3.2.3 and
 * https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6.
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesMimeType(text) {
  return REGEXP_MATCHES_MIME_TYPE.test(text);
}
function constructMatchesRfc8089Path() {
  var h16 = "[0-9A-Fa-f]{1,4}";
  var decOctet = "([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])";
  var ipv4address = "".concat(decOctet, "\\.").concat(decOctet, "\\.").concat(decOctet, "\\.").concat(decOctet);
  var ls32 = "(".concat(h16, ":").concat(h16, "|").concat(ipv4address, ")");
  var ipv6address = "((".concat(h16, ":){6}").concat(ls32, "|::(").concat(h16, ":){5}").concat(ls32, "|(").concat(h16, ")?::(").concat(h16, ":){4}").concat(ls32, "|((").concat(h16, ":)?").concat(h16, ")?::(").concat(h16, ":){3}").concat(ls32, "|((").concat(h16, ":){2}").concat(h16, ")?::(").concat(h16, ":){2}").concat(ls32, "|((").concat(h16, ":){3}").concat(h16, ")?::").concat(h16, ":").concat(ls32, "|((").concat(h16, ":){4}").concat(h16, ")?::").concat(ls32, "|((").concat(h16, ":){5}").concat(h16, ")?::").concat(h16, "|((").concat(h16, ":){6}").concat(h16, ")?::)");
  var unreserved = "[a-zA-Z0-9\\-._~]";
  var subDelims = "[!$&'()*+,;=]";
  var ipvfuture = "[vV][0-9A-Fa-f]+\\.(".concat(unreserved, "|").concat(subDelims, "|:)+");
  var ipLiteral = "\\[(".concat(ipv6address, "|").concat(ipvfuture, ")\\]");
  var pctEncoded = "%[0-9A-Fa-f][0-9A-Fa-f]";
  var regName = "(".concat(unreserved, "|").concat(pctEncoded, "|").concat(subDelims, ")*");
  var host = "(".concat(ipLiteral, "|").concat(ipv4address, "|").concat(regName, ")");
  var fileAuth = "(localhost|".concat(host, ")");
  var pchar = "(".concat(unreserved, "|").concat(pctEncoded, "|").concat(subDelims, "|[:@])");
  var segmentNz = "(".concat(pchar, ")+");
  var segment = "(".concat(pchar, ")*");
  var pathAbsolute = "/(".concat(segmentNz, "(/").concat(segment, ")*)?");
  var authPath = "(".concat(fileAuth, ")?").concat(pathAbsolute);
  var localPath = "".concat(pathAbsolute);
  var fileHierPart = "(//".concat(authPath, "|").concat(localPath, ")");
  var fileScheme = "file";
  var fileUri = "".concat(fileScheme, ":").concat(fileHierPart);
  var pattern = "^".concat(fileUri, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_RFC_8089_PATH = constructMatchesRfc8089Path();

/**
 * Check that `text` is a path conforming to the pattern of RFC 8089.
 *
 * @remarks
 *
 * The definition has been taken from:
 * https://datatracker.ietf.org/doc/html/rfc8089
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesRfc8089Path(text) {
  return REGEXP_MATCHES_RFC_8089_PATH.test(text);
}
function constructMatchesBcp47() {
  var alphanum = "[a-zA-Z0-9]";
  var singleton = "[0-9A-WY-Za-wy-z]";
  var extension = "".concat(singleton, "(-(").concat(alphanum, "){2,8})+");
  var extlang = "[a-zA-Z]{3}(-[a-zA-Z]{3}){2}";
  var irregular = "(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)";
  var regular = "(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)";
  var grandfathered = "(".concat(irregular, "|").concat(regular, ")");
  var language = "([a-zA-Z]{2,3}(-".concat(extlang, ")?|[a-zA-Z]{4}|[a-zA-Z]{5,8})");
  var script = "[a-zA-Z]{4}";
  var region = "([a-zA-Z]{2}|[0-9]{3})";
  var variant = "((".concat(alphanum, "){5,8}|[0-9](").concat(alphanum, "){3})");
  var privateuse = "[xX](-(".concat(alphanum, "){1,8})+");
  var langtag = "".concat(language, "(-").concat(script, ")?(-").concat(region, ")?(-").concat(variant, ")*(-").concat(extension, ")*(-").concat(privateuse, ")?");
  var languageTag = "(".concat(langtag, "|").concat(privateuse, "|").concat(grandfathered, ")");
  var pattern = "^".concat(languageTag, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_BCP_47 = constructMatchesBcp47();

/**
 * Check that `text` is a valid BCP 47 language tag.
 *
 * @remarks
 *
 * See: https://en.wikipedia.org/wiki/IETF_language_tag
 */
function matchesBcp47(text) {
  return REGEXP_MATCHES_BCP_47.test(text);
}

/**
 * Check that `langStrings` are specified each for a unique
 * language.
 *
 * @param langStrings - to be verified
 * @returns `true` if the check passes
 */
function langStringsHaveUniqueLanguages(langStrings) {
  var languageSet = new Set();
  var _iterator = _createForOfIteratorHelper(langStrings),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var langString = _step.value;
      if (languageSet.has(langString.language)) {
        return false;
      }
      languageSet.add(langString.language);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return true;
}

/**
 * Check that there are no duplication {@link types.Qualifier.type}'s
 * in the `qualifiers`.
 *
 * @param qualifiers - to be verified
 * @returns `true` if the check passes
 */
function qualifierTypesAreUnique(qualifiers) {
  var typeSet = new Set();
  var _iterator2 = _createForOfIteratorHelper(qualifiers),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var qualifier = _step2.value;
      if (typeSet.has(qualifier.type)) {
        return false;
      }
      typeSet.add(qualifier.type);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return true;
}
function constructMatchesXmlSerializableString() {
  var pattern = "^[\\u{9}\\u{a}\\u{d}\\u{20}-\\u{d7ff}\\u{e000}-\\u{fffd}\\u{10000}-\\u{10ffff}]*$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XML_SERIALIZABLE_STRING = constructMatchesXmlSerializableString();

/**
 * Check that `text` conforms to the pattern of the Constraint AASd-130.
 *
 * @remarks
 *
 * Ensures that encoding is possible and interoperability between different
 * serializations is possible.
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXmlSerializableString(text) {
  return REGEXP_MATCHES_XML_SERIALIZABLE_STRING.test(text);
}
function constructMatchesXsAnyUri() {
  var scheme = "[a-zA-Z][a-zA-Z0-9+\\-.]*";
  var ucschar = "[\\u{a0}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{ffef}\\u{10000}-\\u{1fffd}\\u{20000}-\\u{2fffd}\\u{30000}-\\u{3fffd}\\u{40000}-\\u{4fffd}\\u{50000}-\\u{5fffd}\\u{60000}-\\u{6fffd}\\u{70000}-\\u{7fffd}\\u{80000}-\\u{8fffd}\\u{90000}-\\u{9fffd}\\u{a0000}-\\u{afffd}\\u{b0000}-\\u{bfffd}\\u{c0000}-\\u{cfffd}\\u{d0000}-\\u{dfffd}\\u{e1000}-\\u{efffd}]";
  var iunreserved = "([a-zA-Z0-9\\-._~]|".concat(ucschar, ")");
  var pctEncoded = "%[0-9A-Fa-f][0-9A-Fa-f]";
  var subDelims = "[!$&'()*+,;=]";
  var iuserinfo = "(".concat(iunreserved, "|").concat(pctEncoded, "|").concat(subDelims, "|:)*");
  var h16 = "[0-9A-Fa-f]{1,4}";
  var decOctet = "([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])";
  var ipv4address = "".concat(decOctet, "\\.").concat(decOctet, "\\.").concat(decOctet, "\\.").concat(decOctet);
  var ls32 = "(".concat(h16, ":").concat(h16, "|").concat(ipv4address, ")");
  var ipv6address = "((".concat(h16, ":){6}").concat(ls32, "|::(").concat(h16, ":){5}").concat(ls32, "|(").concat(h16, ")?::(").concat(h16, ":){4}").concat(ls32, "|((").concat(h16, ":)?").concat(h16, ")?::(").concat(h16, ":){3}").concat(ls32, "|((").concat(h16, ":){2}").concat(h16, ")?::(").concat(h16, ":){2}").concat(ls32, "|((").concat(h16, ":){3}").concat(h16, ")?::").concat(h16, ":").concat(ls32, "|((").concat(h16, ":){4}").concat(h16, ")?::").concat(ls32, "|((").concat(h16, ":){5}").concat(h16, ")?::").concat(h16, "|((").concat(h16, ":){6}").concat(h16, ")?::)");
  var unreserved = "[a-zA-Z0-9\\-._~]";
  var ipvfuture = "[vV][0-9A-Fa-f]+\\.(".concat(unreserved, "|").concat(subDelims, "|:)+");
  var ipLiteral = "\\[(".concat(ipv6address, "|").concat(ipvfuture, ")\\]");
  var iregName = "(".concat(iunreserved, "|").concat(pctEncoded, "|").concat(subDelims, ")*");
  var ihost = "(".concat(ipLiteral, "|").concat(ipv4address, "|").concat(iregName, ")");
  var port = "[0-9]*";
  var iauthority = "(".concat(iuserinfo, "@)?").concat(ihost, "(:").concat(port, ")?");
  var ipchar = "(".concat(iunreserved, "|").concat(pctEncoded, "|").concat(subDelims, "|[:@])");
  var isegment = "(".concat(ipchar, ")*");
  var ipathAbempty = "(/".concat(isegment, ")*");
  var isegmentNz = "(".concat(ipchar, ")+");
  var ipathAbsolute = "/(".concat(isegmentNz, "(/").concat(isegment, ")*)?");
  var ipathRootless = "".concat(isegmentNz, "(/").concat(isegment, ")*");
  var ipathEmpty = "(".concat(ipchar, "){0}");
  var ihierPart = "(//".concat(iauthority).concat(ipathAbempty, "|").concat(ipathAbsolute, "|").concat(ipathRootless, "|").concat(ipathEmpty, ")");
  var iprivate = "[\\u{e000}-\\u{f8ff}\\u{f0000}-\\u{ffffd}\\u{100000}-\\u{10fffd}]";
  var iquery = "(".concat(ipchar, "|").concat(iprivate, "|[/?])*");
  var ifragment = "(".concat(ipchar, "|[/?])*");
  var isegmentNzNc = "(".concat(iunreserved, "|").concat(pctEncoded, "|").concat(subDelims, "|@)+");
  var ipathNoscheme = "".concat(isegmentNzNc, "(/").concat(isegment, ")*");
  var irelativePart = "(//".concat(iauthority).concat(ipathAbempty, "|").concat(ipathAbsolute, "|").concat(ipathNoscheme, "|").concat(ipathEmpty, ")");
  var irelativeRef = "".concat(irelativePart, "(\\?").concat(iquery, ")?(#").concat(ifragment, ")?");
  var iri = "".concat(scheme, ":").concat(ihierPart, "(\\?").concat(iquery, ")?(#").concat(ifragment, ")?");
  var iriReference = "(".concat(iri, "|").concat(irelativeRef, ")");
  var pattern = "^".concat(iriReference, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_ANY_URI = constructMatchesXsAnyUri();

/**
 * Check that `text` conforms to the pattern of an `xs:anyURI`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#anyURI and
 * https://datatracker.ietf.org/doc/html/rfc3987
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsAnyUri(text) {
  return REGEXP_MATCHES_XS_ANY_URI.test(text);
}
function constructMatchesXsBase64Binary() {
  var b04Char = "[AQgw]";
  var b04 = "".concat(b04Char, "\\u{20}?");
  var b16Char = "[AEIMQUYcgkosw048]";
  var b16 = "".concat(b16Char, "\\u{20}?");
  var b64Char = "[A-Za-z0-9+/]";
  var b64 = "".concat(b64Char, "\\u{20}?");
  var b64quad = "(".concat(b64).concat(b64).concat(b64).concat(b64, ")");
  var b64FinalQuad = "(".concat(b64).concat(b64).concat(b64).concat(b64Char, ")");
  var padded8 = "".concat(b64).concat(b04, "= ?=");
  var padded16 = "".concat(b64).concat(b64).concat(b16, "=");
  var b64final = "(".concat(b64FinalQuad, "|").concat(padded16, "|").concat(padded8, ")");
  var base64Binary = "(".concat(b64quad, "*").concat(b64final, ")?");
  var pattern = "^".concat(base64Binary, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_BASE_64_BINARY = constructMatchesXsBase64Binary();

/**
 * Check that `text` conforms to the pattern of an `xs:base64Binary`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#base64Binary
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsBase64Binary(text) {
  return REGEXP_MATCHES_XS_BASE_64_BINARY.test(text);
}
function constructMatchesXsBoolean() {
  var pattern = "^(true|false|1|0)$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_BOOLEAN = constructMatchesXsBoolean();

/**
 * Check that `text` conforms to the pattern of an `xs:boolean`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#boolean
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsBoolean(text) {
  return REGEXP_MATCHES_XS_BOOLEAN.test(text);
}
function constructMatchesXsDate() {
  var digit = "[0-9]";
  var yearFrag = "-?(([1-9]".concat(digit).concat(digit).concat(digit, "+)|(0").concat(digit).concat(digit).concat(digit, "))");
  var monthFrag = "((0[1-9])|(1[0-2]))";
  var dayFrag = "((0[1-9])|([12]".concat(digit, ")|(3[01]))");
  var minuteFrag = "[0-5]".concat(digit);
  var timezoneFrag = "(Z|(\\+|-)(0".concat(digit, "|1[0-3]):").concat(minuteFrag, "|14:00)");
  var dateLexicalRep = "".concat(yearFrag, "-").concat(monthFrag, "-").concat(dayFrag).concat(timezoneFrag, "?");
  var pattern = "^".concat(dateLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DATE = constructMatchesXsDate();

/**
 * Check that `text` conforms to the pattern of an `xs:date`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#date
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDate(text) {
  return REGEXP_MATCHES_XS_DATE.test(text);
}
function constructMatchesXsDateTime() {
  var digit = "[0-9]";
  var yearFrag = "-?(([1-9]".concat(digit).concat(digit).concat(digit, "+)|(0").concat(digit).concat(digit).concat(digit, "))");
  var monthFrag = "((0[1-9])|(1[0-2]))";
  var dayFrag = "((0[1-9])|([12]".concat(digit, ")|(3[01]))");
  var hourFrag = "(([01]".concat(digit, ")|(2[0-3]))");
  var minuteFrag = "[0-5]".concat(digit);
  var secondFrag = "([0-5]".concat(digit, ")(\\.").concat(digit, "+)?");
  var endOfDayFrag = "24:00:00(\\.0+)?";
  var timezoneFrag = "(Z|(\\+|-)(0".concat(digit, "|1[0-3]):").concat(minuteFrag, "|14:00)");
  var dateTimeLexicalRep = "".concat(yearFrag, "-").concat(monthFrag, "-").concat(dayFrag, "T((").concat(hourFrag, ":").concat(minuteFrag, ":").concat(secondFrag, ")|").concat(endOfDayFrag, ")").concat(timezoneFrag, "?");
  var pattern = "^".concat(dateTimeLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DATE_TIME = constructMatchesXsDateTime();

/**
 * Check that `text` conforms to the pattern of an `xs:dateTime`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#dateTime
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDateTime(text) {
  return REGEXP_MATCHES_XS_DATE_TIME.test(text);
}

/**
 * Check that `value` is a valid `xs:dateTime`.
 *
 * @remarks
 * Year 1 BCE is the last leap BCE year.
 * See https://www.w3.org/TR/xmlschema-2/#dateTime.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:dateTime`
 */
function isXsDateTime(value) {
  // NOTE (mristin, 2022-11-23):
  // We can not use date functions from the standard library as it does not
  // handle years BCE (*e.g.*, `-0003-01-02`).

  if (!matchesXsDateTime(value)) {
    return false;
  }
  var date = value.split("T", 1)[0];
  return isXsDate(date);
}
function constructMatchesXsDecimal() {
  var digit = "[0-9]";
  var unsignedNoDecimalPtNumeral = "".concat(digit, "+");
  var noDecimalPtNumeral = "(\\+|-)?".concat(unsignedNoDecimalPtNumeral);
  var fracFrag = "".concat(digit, "+");
  var unsignedDecimalPtNumeral = "(".concat(unsignedNoDecimalPtNumeral, "\\.").concat(fracFrag, "|\\.").concat(fracFrag, ")");
  var decimalPtNumeral = "(\\+|-)?".concat(unsignedDecimalPtNumeral);
  var decimalLexicalRep = "(".concat(decimalPtNumeral, "|").concat(noDecimalPtNumeral, ")");
  var pattern = "^".concat(decimalLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DECIMAL = constructMatchesXsDecimal();

/**
 * Check that `text` conforms to the pattern of an `xs:decimal`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#decimal
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDecimal(text) {
  return REGEXP_MATCHES_XS_DECIMAL.test(text);
}
function constructMatchesXsDouble() {
  var doubleRep = "((\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|-?INF|NaN)";
  var pattern = "^".concat(doubleRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DOUBLE = constructMatchesXsDouble();

/**
 * Check that `text` conforms to the pattern of an `xs:double`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#double
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDouble(text) {
  return REGEXP_MATCHES_XS_DOUBLE.test(text);
}
function constructMatchesXsDuration() {
  var durationRep = "-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))";
  var pattern = "^".concat(durationRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_DURATION = constructMatchesXsDuration();

/**
 * Check that `text` conforms to the pattern of an `xs:duration`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#duration
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsDuration(text) {
  return REGEXP_MATCHES_XS_DURATION.test(text);
}
function constructMatchesXsFloat() {
  var floatRep = "((\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|-?INF|NaN)";
  var pattern = "^".concat(floatRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_FLOAT = constructMatchesXsFloat();

/**
 * Check that `text` conforms to the pattern of an `xs:float`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#float
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsFloat(text) {
  return REGEXP_MATCHES_XS_FLOAT.test(text);
}
function constructMatchesXsGDay() {
  var gDayLexicalRep = "---(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gDayLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_DAY = constructMatchesXsGDay();

/**
 * Check that `text` conforms to the pattern of an `xs:gDay`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gDay
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGDay(text) {
  return REGEXP_MATCHES_XS_G_DAY.test(text);
}
function constructMatchesXsGMonth() {
  var gMonthLexicalRep = "--(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gMonthLexicalRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_MONTH = constructMatchesXsGMonth();

/**
 * Check that `text` conforms to the pattern of an `xs:gMonth`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gMonth
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGMonth(text) {
  return REGEXP_MATCHES_XS_G_MONTH.test(text);
}
function constructMatchesXsGMonthDay() {
  var gMonthDayRep = "--(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gMonthDayRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_MONTH_DAY = constructMatchesXsGMonthDay();

/**
 * Check that `text` conforms to the pattern of an `xs:gMonthDay`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gMonthDay
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGMonthDay(text) {
  return REGEXP_MATCHES_XS_G_MONTH_DAY.test(text);
}
function constructMatchesXsGYear() {
  var gYearRep = "-?([1-9][0-9]{3,}|0[0-9]{3})(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gYearRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_YEAR = constructMatchesXsGYear();

/**
 * Check that `text` conforms to the pattern of an `xs:gYear`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gYear
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGYear(text) {
  return REGEXP_MATCHES_XS_G_YEAR.test(text);
}
function constructMatchesXsGYearMonth() {
  var gYearMonthRep = "-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(gYearMonthRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_G_YEAR_MONTH = constructMatchesXsGYearMonth();

/**
 * Check that `text` conforms to the pattern of an `xs:gYearMonth`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#gYearMonth
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsGYearMonth(text) {
  return REGEXP_MATCHES_XS_G_YEAR_MONTH.test(text);
}
function constructMatchesXsHexBinary() {
  var hexBinary = "([0-9a-fA-F]{2})*";
  var pattern = "^".concat(hexBinary, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_HEX_BINARY = constructMatchesXsHexBinary();

/**
 * Check that `text` conforms to the pattern of an `xs:hexBinary`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#hexBinary
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsHexBinary(text) {
  return REGEXP_MATCHES_XS_HEX_BINARY.test(text);
}
function constructMatchesXsTime() {
  var timeRep = "(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
  var pattern = "^".concat(timeRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_TIME = constructMatchesXsTime();

/**
 * Check that `text` conforms to the pattern of an `xs:time`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#time
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsTime(text) {
  return REGEXP_MATCHES_XS_TIME.test(text);
}
function constructMatchesXsInteger() {
  var integerRep = "[-+]?[0-9]+";
  var pattern = "^".concat(integerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_INTEGER = constructMatchesXsInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:integer`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#integer
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsInteger(text) {
  return REGEXP_MATCHES_XS_INTEGER.test(text);
}
function constructMatchesXsLong() {
  var longRep = "[-+]?0*[0-9]{1,20}";
  var pattern = "^".concat(longRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_LONG = constructMatchesXsLong();

/**
 * Check that `text` conforms to the pattern of an `xs:long`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#long
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsLong(text) {
  return REGEXP_MATCHES_XS_LONG.test(text);
}
function constructMatchesXsInt() {
  var intRep = "[-+]?0*[0-9]{1,10}";
  var pattern = "^".concat(intRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_INT = constructMatchesXsInt();

/**
 * Check that `text` conforms to the pattern of an `xs:int`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#int
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsInt(text) {
  return REGEXP_MATCHES_XS_INT.test(text);
}
function constructMatchesXsShort() {
  var shortRep = "[-+]?0*[0-9]{1,5}";
  var pattern = "^".concat(shortRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_SHORT = constructMatchesXsShort();

/**
 * Check that `text` conforms to the pattern of an `xs:short`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#short
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsShort(text) {
  return REGEXP_MATCHES_XS_SHORT.test(text);
}
function constructMatchesXsByte() {
  var byteRep = "[-+]?0*[0-9]{1,3}";
  var pattern = "^".concat(byteRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_BYTE = constructMatchesXsByte();

/**
 * Check that `text` conforms to the pattern of an `xs:byte`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#byte
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsByte(text) {
  return REGEXP_MATCHES_XS_BYTE.test(text);
}
function constructMatchesXsNonNegativeInteger() {
  var nonNegativeIntegerRep = "(-0|\\+?[0-9]+)";
  var pattern = "^".concat(nonNegativeIntegerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_NON_NEGATIVE_INTEGER = constructMatchesXsNonNegativeInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:nonNegativeInteger`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#nonNegativeInteger
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsNonNegativeInteger(text) {
  return REGEXP_MATCHES_XS_NON_NEGATIVE_INTEGER.test(text);
}
function constructMatchesXsPositiveInteger() {
  var positiveIntegerRep = "\\+?0*[1-9][0-9]*";
  var pattern = "^".concat(positiveIntegerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_POSITIVE_INTEGER = constructMatchesXsPositiveInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:positiveInteger`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#positiveInteger
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsPositiveInteger(text) {
  return REGEXP_MATCHES_XS_POSITIVE_INTEGER.test(text);
}
function constructMatchesXsUnsignedLong() {
  var unsignedLongRep = "(-0|\\+?0*[0-9]{1,20})";
  var pattern = "^".concat(unsignedLongRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_UNSIGNED_LONG = constructMatchesXsUnsignedLong();

/**
 * Check that `text` conforms to the pattern of an `xs:unsignedLong`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#unsignedLong
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsUnsignedLong(text) {
  return REGEXP_MATCHES_XS_UNSIGNED_LONG.test(text);
}
function constructMatchesXsUnsignedInt() {
  var unsignedIntRep = "(-0|\\+?0*[0-9]{1,10})";
  var pattern = "^".concat(unsignedIntRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_UNSIGNED_INT = constructMatchesXsUnsignedInt();

/**
 * Check that `text` conforms to the pattern of an `xs:unsignedInt`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#unsignedInt
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsUnsignedInt(text) {
  return REGEXP_MATCHES_XS_UNSIGNED_INT.test(text);
}
function constructMatchesXsUnsignedShort() {
  var unsignedShortRep = "(-0|\\+?0*[0-9]{1,5})";
  var pattern = "^".concat(unsignedShortRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_UNSIGNED_SHORT = constructMatchesXsUnsignedShort();

/**
 * Check that `text` conforms to the pattern of an `xs:unsignedShort`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#unsignedShort
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsUnsignedShort(text) {
  return REGEXP_MATCHES_XS_UNSIGNED_SHORT.test(text);
}
function constructMatchesXsUnsignedByte() {
  var unsignedByteRep = "(-0|\\+?0*[0-9]{1,3})";
  var pattern = "^".concat(unsignedByteRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_UNSIGNED_BYTE = constructMatchesXsUnsignedByte();

/**
 * Check that `text` conforms to the pattern of an `xs:unsignedByte`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#unsignedByte
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsUnsignedByte(text) {
  return REGEXP_MATCHES_XS_UNSIGNED_BYTE.test(text);
}
function constructMatchesXsNonPositiveInteger() {
  var nonPositiveIntegerRep = "(\\+0|0|-[0-9]+)";
  var pattern = "^".concat(nonPositiveIntegerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_NON_POSITIVE_INTEGER = constructMatchesXsNonPositiveInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:nonPositiveInteger`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#nonPositiveInteger
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsNonPositiveInteger(text) {
  return REGEXP_MATCHES_XS_NON_POSITIVE_INTEGER.test(text);
}
function constructMatchesXsNegativeInteger() {
  var negativeIntegerRep = "(-0*[1-9][0-9]*)";
  var pattern = "^".concat(negativeIntegerRep, "$");
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_NEGATIVE_INTEGER = constructMatchesXsNegativeInteger();

/**
 * Check that `text` conforms to the pattern of an `xs:negativeInteger`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#negativeInteger
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsNegativeInteger(text) {
  return REGEXP_MATCHES_XS_NEGATIVE_INTEGER.test(text);
}
function constructMatchesXsString() {
  var pattern = "^[\\u{9}\\u{a}\\u{d}\\u{20}-\\u{d7ff}\\u{e000}-\\u{fffd}\\u{10000}-\\u{10ffff}]*$";
  return new RegExp(pattern, "u");
}
var REGEXP_MATCHES_XS_STRING = constructMatchesXsString();

/**
 * Check that `text` conforms to the pattern of an `xs:string`.
 *
 * @remarks
 *
 * See: https://www.w3.org/TR/xmlschema-2/#string
 *
 * @param text - Text to be checked
 *
 * @returns True if the `text` conforms to the pattern
 */
function matchesXsString(text) {
  return REGEXP_MATCHES_XS_STRING.test(text);
}

/**
 * Check if `year` is a leap year.
 *
 * @remarks
 * Year 1 BCE is the last leap BCE year.
 * See https://www.w3.org/TR/xmlschema-2/#dateTime.
 *
 * @param year - to be checked
 * @returns `true` if `year` is a leap year.
 */
function isLeapYear(year) {
  // We consider the years B.C. to be one-off.
  //
  // See the note at: https://www.w3.org/TR/xmlschema-2///dateTime:
  // "'-0001' is the lexical representation of the year 1 Before Common Era
  // (1 BCE, sometimes written "1 BC")."
  //
  // Hence, -1 year in XML is 1 BCE, which is 0 year in astronomical years.
  if (year < 0) {
    year = -year - 1;
  }

  // See: https://en.wikipedia.org/wiki/Leap_year#Algorithm
  if (year % 4 > 0) {
    return false;
  }
  if (year % 100 > 0) {
    return true;
  }
  if (year % 400 > 0) {
    return false;
  }
  return true;
}
var DAYS_IN_MONTH = new Map([[1, 31],
// Please use isLeapYear if you need to check
// whether a concrete February has 28 or 29 days.
[2, 29], [3, 31], [4, 30], [5, 31], [6, 30], [7, 31], [8, 31], [9, 30], [10, 31], [11, 30], [12, 31]]);
var DATE_PREFIX_RE = new RegExp("^(-?[0-9]+)-([0-9]{2})-([0-9]{2})");

/**
 * Check that `value` is a valid `xs:date`.
 *
 * @remarks
 * Year 1 BCE is the last leap BCE year.
 * See https://www.w3.org/TR/xmlschema-2/#dateTime.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:date`
 */
function isXsDate(value) {
  // NOTE (mristin, 2022-11-23):
  // We can not use date functions from the standard library as it does not
  // handle years BCE (*e.g.*, `-0003-01-02`).

  if (!matchesXsDate(value)) {
    return false;
  }

  // NOTE (mristin, 2022-11-23):
  // We need to match the prefix as zone offsets are allowed in the dates. Optimally,
  // we would re-use the pattern matching from `matchesXsDate`, but this
  // would make the code generation and constraint inference for schemas much more
  // difficult. Hence, we sacrifice the efficiency a bit for the clearer code & code
  // generation.

  var match = DATE_PREFIX_RE.exec(value);
  var year = parseInt(match[1], 10);
  var month = parseInt(match[2], 10);
  var day = parseInt(match[3], 10);

  // We do not accept year zero,
  // see the note at: https://www.w3.org/TR/xmlschema-2/#dateTime
  if (year === 0) {
    return false;
  }
  if (day <= 0) {
    return false;
  }
  if (month <= 0 || month >= 13) {
    return false;
  }
  var maxDays = month === 2 ? isLeapYear(year) ? 29 : 28 : DAYS_IN_MONTH.get(month);
  if (day > maxDays) {
    return false;
  }
  return true;
}

/**
 * Check that `value` is a valid `xs:double`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:double`
 */
function isXsDouble(value) {
  // NOTE (mristin, 2022-11-23):
  // We need to check explicitly for the regular expression since
  // `parseFloat` expects `Infinity`  instead of `INF`.
  if (!matchesXsDouble(value)) {
    return false;
  }
  if (value !== "INF" && value !== "-INF" && value !== "NaN") {
    // NOTE (mristin, 2022-11-23):
    // Check that the value is not too big to be represented as a double-precision
    // floating point number.
    //
    // For example, `parseFloat("1e400")` gives `Infinity`.
    var converted = parseFloat(value);
    if (!isFinite(converted)) {
      return false;
    }
  }
  return true;
}

/**
 * Check that `value` is a valid `xs:float`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:float`
 */
function isXsFloat(value) {
  // NOTE (mristin, 2022-11-23):
  // We need to check explicitly for the regular expression since
  // `parseFloat` expects `Infinity`  instead of `INF`.
  if (!matchesXsFloat(value)) {
    return false;
  }
  if (value !== "INF" && value !== "-INF" && value !== "NaN") {
    // NOTE (mristin, 2022-11-23):
    // Check that the value is not too big to be represented as a double-precision
    // floating point number.
    //
    // For example, `parseFloat("1e400")` gives `Infinity`.
    var converted = parseFloat(value);
    if (!isFinite(converted)) {
      return false;
    }

    // NOTE (mristin, 2022-11-23):
    // TypeScript represents numbers as 64-bit floating point numbers. While there
    // is no easy way to deal with the precision, as precision is silently
    // gutted during the parsing, we can still check if the number is too large
    // to fit in a 32-bit float.
    var rounded = Math.fround(converted);
    if (!isFinite(rounded)) {
      return false;
    }
  }
  return true;
}

/**
 * Check that `value` is a valid `xs:gMonthDay`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:gMonthDay`
 */
function isXsGMonthDay(value) {
  if (!matchesXsGMonthDay(value)) {
    return false;
  }
  var month = parseInt(value.substring(2, 4), 10);
  var day = parseInt(value.substring(5, 7), 10);
  var maxDays = DAYS_IN_MONTH.get(month);
  return day <= maxDays;
}
var LONG_RE = new RegExp("^([-+])?0*([0-9]{1,20})$");
var SMALLEST_LONG_WITHOUT_SIGN_AS_STRING = "9223372036854775808";
var LARGEST_LONG_AS_STRING = "9223372036854775807";

/**
 * Check that `value` is a valid `xs:long`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:long`
 */
function isXsLong(value) {
  // NOTE (mristin, 2022-11-23):
  // We need to operate on the value as string since TypeScript represents numbers as
  // 64-bit floating-point numbers which can not capture 64-bit integers.

  var match = value.match(LONG_RE);
  if (!match) {
    return false;
  }
  var numberPart = match[2];
  var limit = match[1] === "-" ? SMALLEST_LONG_WITHOUT_SIGN_AS_STRING : LARGEST_LONG_AS_STRING;
  if (numberPart.length < limit.length) {
    return true;
  }
  if (numberPart.length > limit.length) {
    return false;
  }
  for (var i = numberPart.length - 1; i >= 0; i--) {
    var thisDigit = numberPart.charCodeAt(i);
    var limitDigit = limit.charCodeAt(i);
    if (thisDigit > limitDigit) {
      return false;
    } else if (thisDigit < limitDigit) {
      return true;
    } else ;
  }

  // The number is exactly the limit.
  return true;
}

/**
 * Check that `value` is a valid `xs:int`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:int`
 */
function isXsInt(value) {
  if (!matchesXsInt(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return -2147483648 <= converted && converted <= 2147483647;
}

/**
 * Check that `value` is a valid `xs:short`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:short`
 */
function isXsShort(value) {
  if (!matchesXsShort(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return -32768 <= converted && converted <= 32767;
}

/**
 * Check that `value` is a valid `xs:byte`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:byte`
 */
function isXsByte(value) {
  if (!matchesXsByte(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return -128 <= converted && converted <= 127;
}
var UNSIGNED_LONG_RE = new RegExp("^(-0|\\+?0*([0-9]{1,20}))$");
var LARGEST_UNSIGNED_LONG_AS_STRING = "18446744073709551615";

/**
 * Check that `value` is a valid `xs:unsignedLong`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:unsignedLong`
 */
function isXsUnsignedLong(value) {
  // NOTE (mristin, 2022-11-23):
  // We need to operate on the value as string since TypeScript represents numbers as
  // 64-bit floating-point numbers which can not capture 64-bit integers.

  var match = value.match(UNSIGNED_LONG_RE);
  if (!match) {
    return false;
  }
  var numberPart = match[2];
  if (numberPart.length < LARGEST_UNSIGNED_LONG_AS_STRING.length) {
    return true;
  }
  if (numberPart.length > LARGEST_UNSIGNED_LONG_AS_STRING.length) {
    return false;
  }
  for (var i = numberPart.length - 1; i >= 0; i--) {
    var thisDigit = numberPart.charCodeAt(i);
    var limitDigit = LARGEST_UNSIGNED_LONG_AS_STRING.charCodeAt(i);
    if (thisDigit > limitDigit) {
      return false;
    } else if (thisDigit < limitDigit) {
      return true;
    } else ;
  }

  // The number is exactly the limit.
  return true;
}

/**
 * Check that `value` is a valid `xs:unsignedInt`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:unsignedInt`
 */
function isXsUnsignedInt(value) {
  if (!matchesXsUnsignedInt(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return 0 <= converted && converted <= 4294967295;
}

/**
 * Check that `value` is a valid `xs:unsignedShort`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:unsignedShort`
 */
function isXsUnsignedShort(value) {
  if (!matchesXsUnsignedShort(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return 0 <= converted && converted <= 65535;
}

/**
 * Check that `value` is a valid `xs:unsignedByte`.
 *
 * @param value - to be be checked
 * @returns `true` if `value` is a valid `xs:unsignedByte`
 */
function isXsUnsignedByte(value) {
  if (!matchesXsUnsignedByte(value)) {
    return false;
  }
  var converted = parseInt(value, 10);
  return 0 <= converted && converted <= 255;
}
var DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY = new Map([[DataTypeDefXsd.AnyUri, matchesXsAnyUri], [DataTypeDefXsd.Base64Binary, matchesXsBase64Binary], [DataTypeDefXsd.Boolean, matchesXsBoolean], [DataTypeDefXsd.Byte, isXsByte], [DataTypeDefXsd.Date, isXsDate], [DataTypeDefXsd.DateTime, isXsDateTime], [DataTypeDefXsd.Decimal, matchesXsDecimal], [DataTypeDefXsd.Double, isXsDouble], [DataTypeDefXsd.Duration, matchesXsDuration], [DataTypeDefXsd.Float, isXsFloat], [DataTypeDefXsd.GDay, matchesXsGDay], [DataTypeDefXsd.GMonth, matchesXsGMonth], [DataTypeDefXsd.GMonthDay, isXsGMonthDay], [DataTypeDefXsd.GYear, matchesXsGYear], [DataTypeDefXsd.GYearMonth, matchesXsGYearMonth], [DataTypeDefXsd.HexBinary, matchesXsHexBinary], [DataTypeDefXsd.Int, isXsInt], [DataTypeDefXsd.Integer, matchesXsInteger], [DataTypeDefXsd.Long, isXsLong], [DataTypeDefXsd.NegativeInteger, matchesXsNegativeInteger], [DataTypeDefXsd.NonNegativeInteger, matchesXsNonNegativeInteger], [DataTypeDefXsd.NonPositiveInteger, matchesXsNonPositiveInteger], [DataTypeDefXsd.PositiveInteger, matchesXsPositiveInteger], [DataTypeDefXsd.Short, isXsShort], [DataTypeDefXsd.String, matchesXsString], [DataTypeDefXsd.Time, matchesXsTime], [DataTypeDefXsd.UnsignedByte, isXsUnsignedByte], [DataTypeDefXsd.UnsignedInt, isXsUnsignedInt], [DataTypeDefXsd.UnsignedLong, isXsUnsignedLong], [DataTypeDefXsd.UnsignedShort, isXsUnsignedShort]]);
function assertAllDataTypeDefXsdCovered() {
  var _iterator3 = _createForOfIteratorHelper(overDataTypeDefXsd()),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var literal = _step3.value;
      if (!DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY.has(literal)) {
        throw new Error("The enumeration key ".concat(literal, " of AasTypes.DataTypeDefXsd ") + "is not covered in DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY");
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}
assertAllDataTypeDefXsdCovered();

/**
 * Check that `value` is consistent with the given `valueType`.
 *
 * @param value - expected to be consistent with `valueType`
 * @param valueType - expected XSD type of `value`
 * @returns `true` if `value` consistent with `valueType`
 */
function valueConsistentWithXsdType(value, valueType) {
  var verifier = DATA_TYPE_DEF_XSD_TO_VALUE_CONSISTENCY.get(valueType);
  if (verifier === undefined) {
    throw new Error("The value type is invalid. Expected a literal of DataTypeDefXsd, " + "but got: ".concat(valueType));
  }
  return verifier(value);
}

/**
 * Check that the target of the model reference matches the `expectedType`.
 */
function isModelReferenceTo(reference, expectedType) {
  return reference.type == ReferenceTypes.ModelReference && reference.keys.length != 0 && at(reference.keys, -1).type == expectedType;
}

/**
 * Check that the target of the reference matches a {@link constants!AAS_REFERABLES}.
 */
function isModelReferenceToReferable(reference) {
  return reference.type == ReferenceTypes.ModelReference && reference.keys.length != 0 && AAS_REFERABLES.has(at(reference.keys, -1).type);
}

/**
 * Check that all {@link types.IReferable.idShort}'s are unique
 * among `referables`.
 *
 * @param referables - to be verified
 * @returns `true` if the check passes
 */
function idShortsAreUnique(referables) {
  var idShortSet = new Set();
  var _iterator4 = _createForOfIteratorHelper(referables),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var referable = _step4.value;
      if (idShortSet.has(referable.idShort)) {
        return false;
      }
      idShortSet.add(referable.idShort);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  return true;
}

/**
 * Check that all {@link types.IReferable.idShort}'s are unique
 * among values of `inputVariables`, `outputVariables`
 * and `inoutputVariables`.
 *
 * @param inputVariables - to be verified
 * @param outputVariables - to be verified
 * @param inoutputVariables - to be verified
 * @returns `true` if the check passes
 */
function idShortsOfVariablesAreUnique(inputVariables, outputVariables, inoutputVariables) {
  var idShortSet = new Set();
  if (inputVariables !== null) {
    var _iterator5 = _createForOfIteratorHelper(inputVariables),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var variable = _step5.value;
        if (variable.value.idShort !== null) {
          if (idShortSet.has(variable.value.idShort)) {
            return false;
          }
          idShortSet.add(variable.value.idShort);
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }
  if (outputVariables !== null) {
    var _iterator6 = _createForOfIteratorHelper(outputVariables),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var _variable = _step6.value;
        if (_variable.value.idShort !== null) {
          if (idShortSet.has(_variable.value.idShort)) {
            return false;
          }
          idShortSet.add(_variable.value.idShort);
        }
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
  }
  if (inoutputVariables !== null) {
    var _iterator7 = _createForOfIteratorHelper(inoutputVariables),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var _variable2 = _step7.value;
        if (_variable2.value.idShort !== null) {
          if (idShortSet.has(_variable2.value.idShort)) {
            return false;
          }
          idShortSet.add(_variable2.value.idShort);
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
  }
  return true;
}

/**
 * Check that all {@link types.Extension.name} are unique
 * among `extensions`.
 *
 * @param extensions - to be verified
 * @returns `true` if the check passes
 */
function extensionNamesAreUnique(extensions) {
  var nameSet = new Set();
  var _iterator8 = _createForOfIteratorHelper(extensions),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var extension = _step8.value;
      if (nameSet.has(extension.name)) {
        return false;
      }
      nameSet.add(extension.name);
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  return true;
}

/**
 * Check that all `elements` have the identical
 * {@link types.ISubmodelElement.semanticId}.
 *
 * @param elements - to be checked
 * @returns `true` if all the semantic IDs are identical
 */
function submodelElementsHaveIdenticalSemanticIds(elements) {
  var thatSemanticId = null;
  var _iterator9 = _createForOfIteratorHelper(elements),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var element = _step9.value;
      if (element.semanticId === null) {
        continue;
      }
      if (thatSemanticId === null) {
        thatSemanticId = element.semanticId;
        continue;
      }
      var thisSemanticId = element.semanticId;
      if (thisSemanticId.keys.length != thatSemanticId.keys.length) {
        return false;
      }
      for (var i = 0; i < thatSemanticId.keys.length; i++) {
        if (thisSemanticId.keys[i].value !== thatSemanticId.keys[i].value) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return true;
}
var AAS_SUBMODEL_ELEMENTS_TO_IS = new Map([[AasSubmodelElements.AnnotatedRelationshipElement, isAnnotatedRelationshipElement], [AasSubmodelElements.BasicEventElement, isBasicEventElement], [AasSubmodelElements.Blob, isBlob], [AasSubmodelElements.Capability, isCapability], [AasSubmodelElements.DataElement, isDataElement], [AasSubmodelElements.Entity, isEntity], [AasSubmodelElements.EventElement, isEventElement], [AasSubmodelElements.File, isFile], [AasSubmodelElements.MultiLanguageProperty, isMultiLanguageProperty], [AasSubmodelElements.Operation, isOperation], [AasSubmodelElements.Property, isProperty], [AasSubmodelElements.Range, isRange], [AasSubmodelElements.ReferenceElement, isReferenceElement], [AasSubmodelElements.RelationshipElement, isRelationshipElement], [AasSubmodelElements.SubmodelElement, isSubmodelElement], [AasSubmodelElements.SubmodelElementList, isSubmodelElementList], [AasSubmodelElements.SubmodelElementCollection, isSubmodelElementCollection]]);
function assertAllTypesCoveredInAasSubmodelElementsToIs() {
  var _iterator10 = _createForOfIteratorHelper(overAasSubmodelElements()),
    _step10;
  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var literal = _step10.value;
      if (!AAS_SUBMODEL_ELEMENTS_TO_IS.has(literal)) {
        throw new Error("The enumeration literal ".concat(literal, " of AasTypes.AasSubmodelElements ") + "is not covered in AAS_SUBMODEL_ELEMENTS_TO_IS");
      }
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }
}
assertAllTypesCoveredInAasSubmodelElementsToIs();

/**
 * Check that `element` is an instance of class corresponding to
 * `expectedType`.
 *
 * @param element - to be checked for type
 * @param expectedType - in the check
 * @returns `true` if `element` corresponds to `expectedType`
 */
function submodelElementIsOfType(element, expectedType) {
  var isFunc = AAS_SUBMODEL_ELEMENTS_TO_IS.get(expectedType);
  return isFunc(element);
}

/**
 * Check that `elements` which are {@link types.Property} or {@link types.Range}
 * have the given `valueType`.
 *
 * @param elements - to be verified
 * @returns `true` if the check passes
 */
function propertiesOrRangesHaveValueType(elements, valueType) {
  var _iterator11 = _createForOfIteratorHelper(elements),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var element = _step11.value;
      if (isProperty(element) || isRange(element)) {
        if (element.valueType !== valueType) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
  return true;
}

/**
 * Check that the two references, `that` and `other`,
 * are equal by comparing their {@link types.Reference.keys}
 * by {@link types.Key.value}'s.
 *
 * @param that - reference to be compared
 * @param other - to be compared against
 * @returns `true` if the key values are are equal
 */
function referenceKeyValuesEqual(that, other) {
  if (that.keys.length != other.keys.length) {
    return false;
  }
  for (var i = 0; i < that.keys.length; i++) {
    if (that.keys[i].value !== other.keys[i].value) {
      return false;
    }
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.dataType}
 * is defined appropriately for all data specifications whose content is given
 * as IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(embeddedDataSpecifications) {
  var _iterator12 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step12;
  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var embeddedDataSpecification = _step12.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (isDataSpecificationIec61360(content)) {
        if (content.dataType === null || !DATA_TYPE_IEC_61360_FOR_PROPERTY_OR_VALUE.has(content.dataType)) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.dataType}
 * is defined appropriately for all data specifications whose content is given as
 * IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sForReferenceHaveAppropriateDataType(embeddedDataSpecifications) {
  var _iterator13 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step13;
  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var embeddedDataSpecification = _step13.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (isDataSpecificationIec61360(content)) {
        if (content.dataType === null || !DATA_TYPE_IEC_61360_FOR_REFERENCE.has(content.dataType)) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.dataType}
 * is defined appropriately for all data specifications whose content is given as
 * IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sForDocumentHaveAppropriateDataType(embeddedDataSpecifications) {
  var _iterator14 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step14;
  try {
    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      var embeddedDataSpecification = _step14.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (isDataSpecificationIec61360(content)) {
        if (content.dataType === null || !DATA_TYPE_IEC_61360_FOR_DOCUMENT.has(content.dataType)) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.dataType}
 * is defined for all data specifications whose content is given as
 * IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sHaveDataType(embeddedDataSpecifications) {
  var _iterator15 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step15;
  try {
    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
      var embeddedDataSpecification = _step15.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (isDataSpecificationIec61360(content)) {
        if (content.dataType === null) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator15.e(err);
  } finally {
    _iterator15.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.value}
 * is defined for all data specifications whose content is given as
 * IEC 61360.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sHaveValue(embeddedDataSpecifications) {
  var _iterator16 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step16;
  try {
    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
      var embeddedDataSpecification = _step16.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (isDataSpecificationIec61360(content)) {
        if (content.value === null) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator16.e(err);
  } finally {
    _iterator16.f();
  }
  return true;
}

/**
 * Check that {@link types.DataSpecificationIec61360.definition}
 * is defined for all data specifications whose content is given as
 * IEC 61360 at least in English.
 *
 * @param embeddedDataSpecifications - to be verified
 * @returns `true` if the check passes
 */
function dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(embeddedDataSpecifications) {
  var _iterator17 = _createForOfIteratorHelper(embeddedDataSpecifications),
    _step17;
  try {
    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
      var embeddedDataSpecification = _step17.value;
      var content = embeddedDataSpecification.dataSpecificationContent;
      if (isDataSpecificationIec61360(content)) {
        if (content.definition === null) {
          return false;
        }
        var noDefinitionInEnglish = true;
        var _iterator18 = _createForOfIteratorHelper(content.definition),
          _step18;
        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var langString = _step18.value;
            if (isBcp47ForEnglish(langString.language)) {
              noDefinitionInEnglish = false;
              break;
            }
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
        if (noDefinitionInEnglish === true) {
          return false;
        }
      }
    }
  } catch (err) {
    _iterator17.e(err);
  } finally {
    _iterator17.f();
  }
  return true;
}
function constructIsBcp47ForEnglish() {
  var pattern = "^(en|EN)(-.*)?$";
  return new RegExp(pattern, "u");
}
var REGEXP_IS_BCP_47_FOR_ENGLISH = constructIsBcp47ForEnglish();

/**
 * Check that the `text` corresponds to a BCP47 code for english.
 */
function isBcp47ForEnglish(text) {
  return REGEXP_IS_BCP_47_FOR_ENGLISH.test(text);
}

/**
 * Verify an instance of the model recursively or non-recursively (depending on the context).
 */
var Verifier = /*#__PURE__*/function (_AasTypes$AbstractTra) {
  _inherits(Verifier, _AasTypes$AbstractTra);
  var _super = _createSuper(Verifier);
  function Verifier() {
    _classCallCheck(this, Verifier);
    return _super.apply(this, arguments);
  }
  _createClass(Verifier, [{
    key: "transformExtensionWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformExtensionWithContext(that, context) {
      var _iterator19, _step19, _error4, _iterator20, _step20, error, _iterator21, _step21, _error, supplementalSemanticIdsIndex, _iterator22, _step22, item, _iterator23, _step23, _error2, refersToIndex, _iterator24, _step24, _item, _iterator25, _step25, _error3;
      return _regeneratorRuntime().wrap(function transformExtensionWithContext$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context.next = 3;
              break;
            }
            _context.next = 3;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 3:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context.next = 6;
              break;
            }
            _context.next = 6;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 6:
            if (!(that.refersTo !== null) || that.refersTo.length >= 1) {
              _context.next = 9;
              break;
            }
            _context.next = 9;
            return new VerificationError("Refers-to must be either not set or have at least one item.");
          case 9:
            if (!(that.value !== null) || valueConsistentWithXsdType(that.value, that.valueTypeOrDefault())) {
              _context.next = 12;
              break;
            }
            _context.next = 12;
            return new VerificationError("The value must match the value type.");
          case 12:
            _iterator19 = _createForOfIteratorHelper(verifyNameType(that.name));
            _context.prev = 13;
            _iterator19.s();
          case 15:
            if ((_step19 = _iterator19.n()).done) {
              _context.next = 22;
              break;
            }
            _error4 = _step19.value;
            _error4.path.prepend(new PropertySegment(that, "name"));
            _context.next = 20;
            return _error4;
          case 20:
            _context.next = 15;
            break;
          case 22:
            _context.next = 27;
            break;
          case 24:
            _context.prev = 24;
            _context.t0 = _context["catch"](13);
            _iterator19.e(_context.t0);
          case 27:
            _context.prev = 27;
            _iterator19.f();
            return _context.finish(27);
          case 30:
            if (!(that.value !== null)) {
              _context.next = 49;
              break;
            }
            _iterator20 = _createForOfIteratorHelper(verifyValueDataType(that.value));
            _context.prev = 32;
            _iterator20.s();
          case 34:
            if ((_step20 = _iterator20.n()).done) {
              _context.next = 41;
              break;
            }
            error = _step20.value;
            error.path.prepend(new PropertySegment(that, "value"));
            _context.next = 39;
            return error;
          case 39:
            _context.next = 34;
            break;
          case 41:
            _context.next = 46;
            break;
          case 43:
            _context.prev = 43;
            _context.t1 = _context["catch"](32);
            _iterator20.e(_context.t1);
          case 46:
            _context.prev = 46;
            _iterator20.f();
            return _context.finish(46);
          case 49:
            if (!(context === true)) {
              _context.next = 143;
              break;
            }
            if (!(that.semanticId !== null)) {
              _context.next = 69;
              break;
            }
            _iterator21 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context.prev = 52;
            _iterator21.s();
          case 54:
            if ((_step21 = _iterator21.n()).done) {
              _context.next = 61;
              break;
            }
            _error = _step21.value;
            _error.path.prepend(new PropertySegment(that, "semanticId"));
            _context.next = 59;
            return _error;
          case 59:
            _context.next = 54;
            break;
          case 61:
            _context.next = 66;
            break;
          case 63:
            _context.prev = 63;
            _context.t2 = _context["catch"](52);
            _iterator21.e(_context.t2);
          case 66:
            _context.prev = 66;
            _iterator21.f();
            return _context.finish(66);
          case 69:
            if (!(that.supplementalSemanticIds !== null)) {
              _context.next = 106;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator22 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context.prev = 72;
            _iterator22.s();
          case 74:
            if ((_step22 = _iterator22.n()).done) {
              _context.next = 98;
              break;
            }
            item = _step22.value;
            _iterator23 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context.prev = 77;
            _iterator23.s();
          case 79:
            if ((_step23 = _iterator23.n()).done) {
              _context.next = 87;
              break;
            }
            _error2 = _step23.value;
            _error2.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error2.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context.next = 85;
            return _error2;
          case 85:
            _context.next = 79;
            break;
          case 87:
            _context.next = 92;
            break;
          case 89:
            _context.prev = 89;
            _context.t3 = _context["catch"](77);
            _iterator23.e(_context.t3);
          case 92:
            _context.prev = 92;
            _iterator23.f();
            return _context.finish(92);
          case 95:
            supplementalSemanticIdsIndex++;
          case 96:
            _context.next = 74;
            break;
          case 98:
            _context.next = 103;
            break;
          case 100:
            _context.prev = 100;
            _context.t4 = _context["catch"](72);
            _iterator22.e(_context.t4);
          case 103:
            _context.prev = 103;
            _iterator22.f();
            return _context.finish(103);
          case 106:
            if (!(that.refersTo !== null)) {
              _context.next = 143;
              break;
            }
            refersToIndex = 0;
            _iterator24 = _createForOfIteratorHelper(that.refersTo);
            _context.prev = 109;
            _iterator24.s();
          case 111:
            if ((_step24 = _iterator24.n()).done) {
              _context.next = 135;
              break;
            }
            _item = _step24.value;
            _iterator25 = _createForOfIteratorHelper(this.transformWithContext(_item, context));
            _context.prev = 114;
            _iterator25.s();
          case 116:
            if ((_step25 = _iterator25.n()).done) {
              _context.next = 124;
              break;
            }
            _error3 = _step25.value;
            _error3.path.prepend(new IndexSegment(that.refersTo, refersToIndex));
            _error3.path.prepend(new PropertySegment(that, "refersTo"));
            _context.next = 122;
            return _error3;
          case 122:
            _context.next = 116;
            break;
          case 124:
            _context.next = 129;
            break;
          case 126:
            _context.prev = 126;
            _context.t5 = _context["catch"](114);
            _iterator25.e(_context.t5);
          case 129:
            _context.prev = 129;
            _iterator25.f();
            return _context.finish(129);
          case 132:
            refersToIndex++;
          case 133:
            _context.next = 111;
            break;
          case 135:
            _context.next = 140;
            break;
          case 137:
            _context.prev = 137;
            _context.t6 = _context["catch"](109);
            _iterator24.e(_context.t6);
          case 140:
            _context.prev = 140;
            _iterator24.f();
            return _context.finish(140);
          case 143:
          case "end":
            return _context.stop();
        }
      }, transformExtensionWithContext, this, [[13, 24, 27, 30], [32, 43, 46, 49], [52, 63, 66, 69], [72, 100, 103, 106], [77, 89, 92, 95], [109, 137, 140, 143], [114, 126, 129, 132]]);
    })
  }, {
    key: "transformAdministrativeInformationWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformAdministrativeInformationWithContext(that, context) {
      var _iterator26, _step26, error, _iterator27, _step27, _error5, _iterator28, _step28, _error6, embeddedDataSpecificationsIndex, _iterator29, _step29, item, _iterator30, _step30, _error7, _iterator31, _step31, _error8;
      return _regeneratorRuntime().wrap(function transformAdministrativeInformationWithContext$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context2.next = 3;
              break;
            }
            _context2.next = 3;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 3:
            if (!(that.revision !== null) || that.version !== null) {
              _context2.next = 6;
              break;
            }
            _context2.next = 6;
            return new VerificationError("Constraint AASd-005: If version is not specified then also " + "revision shall be unspecified. This means, a revision " + "requires a version. If there is no version there is no " + "revision either. Revision is optional.");
          case 6:
            if (!(that.version !== null)) {
              _context2.next = 25;
              break;
            }
            _iterator26 = _createForOfIteratorHelper(verifyVersionType(that.version));
            _context2.prev = 8;
            _iterator26.s();
          case 10:
            if ((_step26 = _iterator26.n()).done) {
              _context2.next = 17;
              break;
            }
            error = _step26.value;
            error.path.prepend(new PropertySegment(that, "version"));
            _context2.next = 15;
            return error;
          case 15:
            _context2.next = 10;
            break;
          case 17:
            _context2.next = 22;
            break;
          case 19:
            _context2.prev = 19;
            _context2.t0 = _context2["catch"](8);
            _iterator26.e(_context2.t0);
          case 22:
            _context2.prev = 22;
            _iterator26.f();
            return _context2.finish(22);
          case 25:
            if (!(that.revision !== null)) {
              _context2.next = 44;
              break;
            }
            _iterator27 = _createForOfIteratorHelper(verifyRevisionType(that.revision));
            _context2.prev = 27;
            _iterator27.s();
          case 29:
            if ((_step27 = _iterator27.n()).done) {
              _context2.next = 36;
              break;
            }
            _error5 = _step27.value;
            _error5.path.prepend(new PropertySegment(that, "revision"));
            _context2.next = 34;
            return _error5;
          case 34:
            _context2.next = 29;
            break;
          case 36:
            _context2.next = 41;
            break;
          case 38:
            _context2.prev = 38;
            _context2.t1 = _context2["catch"](27);
            _iterator27.e(_context2.t1);
          case 41:
            _context2.prev = 41;
            _iterator27.f();
            return _context2.finish(41);
          case 44:
            if (!(that.templateId !== null)) {
              _context2.next = 63;
              break;
            }
            _iterator28 = _createForOfIteratorHelper(verifyIdentifier(that.templateId));
            _context2.prev = 46;
            _iterator28.s();
          case 48:
            if ((_step28 = _iterator28.n()).done) {
              _context2.next = 55;
              break;
            }
            _error6 = _step28.value;
            _error6.path.prepend(new PropertySegment(that, "templateId"));
            _context2.next = 53;
            return _error6;
          case 53:
            _context2.next = 48;
            break;
          case 55:
            _context2.next = 60;
            break;
          case 57:
            _context2.prev = 57;
            _context2.t2 = _context2["catch"](46);
            _iterator28.e(_context2.t2);
          case 60:
            _context2.prev = 60;
            _iterator28.f();
            return _context2.finish(60);
          case 63:
            if (!(context === true)) {
              _context2.next = 120;
              break;
            }
            if (!(that.embeddedDataSpecifications !== null)) {
              _context2.next = 101;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator29 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context2.prev = 67;
            _iterator29.s();
          case 69:
            if ((_step29 = _iterator29.n()).done) {
              _context2.next = 93;
              break;
            }
            item = _step29.value;
            _iterator30 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context2.prev = 72;
            _iterator30.s();
          case 74:
            if ((_step30 = _iterator30.n()).done) {
              _context2.next = 82;
              break;
            }
            _error7 = _step30.value;
            _error7.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error7.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context2.next = 80;
            return _error7;
          case 80:
            _context2.next = 74;
            break;
          case 82:
            _context2.next = 87;
            break;
          case 84:
            _context2.prev = 84;
            _context2.t3 = _context2["catch"](72);
            _iterator30.e(_context2.t3);
          case 87:
            _context2.prev = 87;
            _iterator30.f();
            return _context2.finish(87);
          case 90:
            embeddedDataSpecificationsIndex++;
          case 91:
            _context2.next = 69;
            break;
          case 93:
            _context2.next = 98;
            break;
          case 95:
            _context2.prev = 95;
            _context2.t4 = _context2["catch"](67);
            _iterator29.e(_context2.t4);
          case 98:
            _context2.prev = 98;
            _iterator29.f();
            return _context2.finish(98);
          case 101:
            if (!(that.creator !== null)) {
              _context2.next = 120;
              break;
            }
            _iterator31 = _createForOfIteratorHelper(this.transformWithContext(that.creator, context));
            _context2.prev = 103;
            _iterator31.s();
          case 105:
            if ((_step31 = _iterator31.n()).done) {
              _context2.next = 112;
              break;
            }
            _error8 = _step31.value;
            _error8.path.prepend(new PropertySegment(that, "creator"));
            _context2.next = 110;
            return _error8;
          case 110:
            _context2.next = 105;
            break;
          case 112:
            _context2.next = 117;
            break;
          case 114:
            _context2.prev = 114;
            _context2.t5 = _context2["catch"](103);
            _iterator31.e(_context2.t5);
          case 117:
            _context2.prev = 117;
            _iterator31.f();
            return _context2.finish(117);
          case 120:
          case "end":
            return _context2.stop();
        }
      }, transformAdministrativeInformationWithContext, this, [[8, 19, 22, 25], [27, 38, 41, 44], [46, 57, 60, 63], [67, 95, 98, 101], [72, 84, 87, 90], [103, 114, 117, 120]]);
    })
  }, {
    key: "transformQualifierWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformQualifierWithContext(that, context) {
      var _iterator32, _step32, _error12, _iterator33, _step33, error, _iterator34, _step34, _error9, supplementalSemanticIdsIndex, _iterator35, _step35, item, _iterator36, _step36, _error10, _iterator37, _step37, _error11;
      return _regeneratorRuntime().wrap(function transformQualifierWithContext$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context3.next = 3;
              break;
            }
            _context3.next = 3;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 3:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context3.next = 6;
              break;
            }
            _context3.next = 6;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 6:
            if (!(that.value !== null) || valueConsistentWithXsdType(that.value, that.valueType)) {
              _context3.next = 9;
              break;
            }
            _context3.next = 9;
            return new VerificationError("Constraint AASd-020: The value shall be consistent to " + "the data type as defined in value type.");
          case 9:
            _iterator32 = _createForOfIteratorHelper(verifyQualifierType(that.type));
            _context3.prev = 10;
            _iterator32.s();
          case 12:
            if ((_step32 = _iterator32.n()).done) {
              _context3.next = 19;
              break;
            }
            _error12 = _step32.value;
            _error12.path.prepend(new PropertySegment(that, "type"));
            _context3.next = 17;
            return _error12;
          case 17:
            _context3.next = 12;
            break;
          case 19:
            _context3.next = 24;
            break;
          case 21:
            _context3.prev = 21;
            _context3.t0 = _context3["catch"](10);
            _iterator32.e(_context3.t0);
          case 24:
            _context3.prev = 24;
            _iterator32.f();
            return _context3.finish(24);
          case 27:
            if (!(that.value !== null)) {
              _context3.next = 46;
              break;
            }
            _iterator33 = _createForOfIteratorHelper(verifyValueDataType(that.value));
            _context3.prev = 29;
            _iterator33.s();
          case 31:
            if ((_step33 = _iterator33.n()).done) {
              _context3.next = 38;
              break;
            }
            error = _step33.value;
            error.path.prepend(new PropertySegment(that, "value"));
            _context3.next = 36;
            return error;
          case 36:
            _context3.next = 31;
            break;
          case 38:
            _context3.next = 43;
            break;
          case 40:
            _context3.prev = 40;
            _context3.t1 = _context3["catch"](29);
            _iterator33.e(_context3.t1);
          case 43:
            _context3.prev = 43;
            _iterator33.f();
            return _context3.finish(43);
          case 46:
            if (!(context === true)) {
              _context3.next = 122;
              break;
            }
            if (!(that.semanticId !== null)) {
              _context3.next = 66;
              break;
            }
            _iterator34 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context3.prev = 49;
            _iterator34.s();
          case 51:
            if ((_step34 = _iterator34.n()).done) {
              _context3.next = 58;
              break;
            }
            _error9 = _step34.value;
            _error9.path.prepend(new PropertySegment(that, "semanticId"));
            _context3.next = 56;
            return _error9;
          case 56:
            _context3.next = 51;
            break;
          case 58:
            _context3.next = 63;
            break;
          case 60:
            _context3.prev = 60;
            _context3.t2 = _context3["catch"](49);
            _iterator34.e(_context3.t2);
          case 63:
            _context3.prev = 63;
            _iterator34.f();
            return _context3.finish(63);
          case 66:
            if (!(that.supplementalSemanticIds !== null)) {
              _context3.next = 103;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator35 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context3.prev = 69;
            _iterator35.s();
          case 71:
            if ((_step35 = _iterator35.n()).done) {
              _context3.next = 95;
              break;
            }
            item = _step35.value;
            _iterator36 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context3.prev = 74;
            _iterator36.s();
          case 76:
            if ((_step36 = _iterator36.n()).done) {
              _context3.next = 84;
              break;
            }
            _error10 = _step36.value;
            _error10.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error10.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context3.next = 82;
            return _error10;
          case 82:
            _context3.next = 76;
            break;
          case 84:
            _context3.next = 89;
            break;
          case 86:
            _context3.prev = 86;
            _context3.t3 = _context3["catch"](74);
            _iterator36.e(_context3.t3);
          case 89:
            _context3.prev = 89;
            _iterator36.f();
            return _context3.finish(89);
          case 92:
            supplementalSemanticIdsIndex++;
          case 93:
            _context3.next = 71;
            break;
          case 95:
            _context3.next = 100;
            break;
          case 97:
            _context3.prev = 97;
            _context3.t4 = _context3["catch"](69);
            _iterator35.e(_context3.t4);
          case 100:
            _context3.prev = 100;
            _iterator35.f();
            return _context3.finish(100);
          case 103:
            if (!(that.valueId !== null)) {
              _context3.next = 122;
              break;
            }
            _iterator37 = _createForOfIteratorHelper(this.transformWithContext(that.valueId, context));
            _context3.prev = 105;
            _iterator37.s();
          case 107:
            if ((_step37 = _iterator37.n()).done) {
              _context3.next = 114;
              break;
            }
            _error11 = _step37.value;
            _error11.path.prepend(new PropertySegment(that, "valueId"));
            _context3.next = 112;
            return _error11;
          case 112:
            _context3.next = 107;
            break;
          case 114:
            _context3.next = 119;
            break;
          case 116:
            _context3.prev = 116;
            _context3.t5 = _context3["catch"](105);
            _iterator37.e(_context3.t5);
          case 119:
            _context3.prev = 119;
            _iterator37.f();
            return _context3.finish(119);
          case 122:
          case "end":
            return _context3.stop();
        }
      }, transformQualifierWithContext, this, [[10, 21, 24, 27], [29, 40, 43, 46], [49, 60, 63, 66], [69, 97, 100, 103], [74, 86, 89, 92], [105, 116, 119, 122]]);
    })
  }, {
    key: "transformAssetAdministrationShellWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformAssetAdministrationShellWithContext(that, context) {
      var _iterator38, _step38, error, _iterator39, _step39, _error13, _iterator40, _step40, _error22, extensionsIndex, _iterator41, _step41, item, _iterator42, _step42, _error14, displayNameIndex, _iterator43, _step43, _item2, _iterator44, _step44, _error15, descriptionIndex, _iterator45, _step45, _item3, _iterator46, _step46, _error16, _iterator47, _step47, _error17, embeddedDataSpecificationsIndex, _iterator48, _step48, _item4, _iterator49, _step49, _error18, _iterator50, _step50, _error19, _iterator51, _step51, _error21, submodelsIndex, _iterator52, _step52, _item5, _iterator53, _step53, _error20;
      return _regeneratorRuntime().wrap(function transformAssetAdministrationShellWithContext$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context4.next = 3;
              break;
            }
            _context4.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context4.next = 6;
              break;
            }
            _context4.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context4.next = 9;
              break;
            }
            _context4.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context4.next = 12;
              break;
            }
            _context4.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context4.next = 15;
              break;
            }
            _context4.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context4.next = 18;
              break;
            }
            _context4.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context4.next = 21;
              break;
            }
            _context4.next = 21;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 21:
            if (!(that.submodels !== null) || that.submodels.length >= 1) {
              _context4.next = 24;
              break;
            }
            _context4.next = 24;
            return new VerificationError("Submodels must be either not set or have at least one item.");
          case 24:
            if (!(that.derivedFrom !== null) || isModelReferenceTo(that.derivedFrom, KeyTypes.AssetAdministrationShell)) {
              _context4.next = 27;
              break;
            }
            _context4.next = 27;
            return new VerificationError("Derived-from must be a model reference to an asset " + "administration shell.");
          case 27:
            if (!(that.submodels !== null) || every(map(that.submodels, function (reference) {
              return isModelReferenceTo(reference, KeyTypes.Submodel);
            }))) {
              _context4.next = 30;
              break;
            }
            _context4.next = 30;
            return new VerificationError("All submodels must be model references to a submodel.");
          case 30:
            if (!(that.category !== null)) {
              _context4.next = 49;
              break;
            }
            _iterator38 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context4.prev = 32;
            _iterator38.s();
          case 34:
            if ((_step38 = _iterator38.n()).done) {
              _context4.next = 41;
              break;
            }
            error = _step38.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context4.next = 39;
            return error;
          case 39:
            _context4.next = 34;
            break;
          case 41:
            _context4.next = 46;
            break;
          case 43:
            _context4.prev = 43;
            _context4.t0 = _context4["catch"](32);
            _iterator38.e(_context4.t0);
          case 46:
            _context4.prev = 46;
            _iterator38.f();
            return _context4.finish(46);
          case 49:
            if (!(that.idShort !== null)) {
              _context4.next = 68;
              break;
            }
            _iterator39 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context4.prev = 51;
            _iterator39.s();
          case 53:
            if ((_step39 = _iterator39.n()).done) {
              _context4.next = 60;
              break;
            }
            _error13 = _step39.value;
            _error13.path.prepend(new PropertySegment(that, "idShort"));
            _context4.next = 58;
            return _error13;
          case 58:
            _context4.next = 53;
            break;
          case 60:
            _context4.next = 65;
            break;
          case 62:
            _context4.prev = 62;
            _context4.t1 = _context4["catch"](51);
            _iterator39.e(_context4.t1);
          case 65:
            _context4.prev = 65;
            _iterator39.f();
            return _context4.finish(65);
          case 68:
            _iterator40 = _createForOfIteratorHelper(verifyIdentifier(that.id));
            _context4.prev = 69;
            _iterator40.s();
          case 71:
            if ((_step40 = _iterator40.n()).done) {
              _context4.next = 78;
              break;
            }
            _error22 = _step40.value;
            _error22.path.prepend(new PropertySegment(that, "id"));
            _context4.next = 76;
            return _error22;
          case 76:
            _context4.next = 71;
            break;
          case 78:
            _context4.next = 83;
            break;
          case 80:
            _context4.prev = 80;
            _context4.t2 = _context4["catch"](69);
            _iterator40.e(_context4.t2);
          case 83:
            _context4.prev = 83;
            _iterator40.f();
            return _context4.finish(83);
          case 86:
            if (!(context === true)) {
              _context4.next = 328;
              break;
            }
            if (!(that.extensions !== null)) {
              _context4.next = 124;
              break;
            }
            extensionsIndex = 0;
            _iterator41 = _createForOfIteratorHelper(that.extensions);
            _context4.prev = 90;
            _iterator41.s();
          case 92:
            if ((_step41 = _iterator41.n()).done) {
              _context4.next = 116;
              break;
            }
            item = _step41.value;
            _iterator42 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context4.prev = 95;
            _iterator42.s();
          case 97:
            if ((_step42 = _iterator42.n()).done) {
              _context4.next = 105;
              break;
            }
            _error14 = _step42.value;
            _error14.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error14.path.prepend(new PropertySegment(that, "extensions"));
            _context4.next = 103;
            return _error14;
          case 103:
            _context4.next = 97;
            break;
          case 105:
            _context4.next = 110;
            break;
          case 107:
            _context4.prev = 107;
            _context4.t3 = _context4["catch"](95);
            _iterator42.e(_context4.t3);
          case 110:
            _context4.prev = 110;
            _iterator42.f();
            return _context4.finish(110);
          case 113:
            extensionsIndex++;
          case 114:
            _context4.next = 92;
            break;
          case 116:
            _context4.next = 121;
            break;
          case 118:
            _context4.prev = 118;
            _context4.t4 = _context4["catch"](90);
            _iterator41.e(_context4.t4);
          case 121:
            _context4.prev = 121;
            _iterator41.f();
            return _context4.finish(121);
          case 124:
            if (!(that.displayName !== null)) {
              _context4.next = 161;
              break;
            }
            displayNameIndex = 0;
            _iterator43 = _createForOfIteratorHelper(that.displayName);
            _context4.prev = 127;
            _iterator43.s();
          case 129:
            if ((_step43 = _iterator43.n()).done) {
              _context4.next = 153;
              break;
            }
            _item2 = _step43.value;
            _iterator44 = _createForOfIteratorHelper(this.transformWithContext(_item2, context));
            _context4.prev = 132;
            _iterator44.s();
          case 134:
            if ((_step44 = _iterator44.n()).done) {
              _context4.next = 142;
              break;
            }
            _error15 = _step44.value;
            _error15.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error15.path.prepend(new PropertySegment(that, "displayName"));
            _context4.next = 140;
            return _error15;
          case 140:
            _context4.next = 134;
            break;
          case 142:
            _context4.next = 147;
            break;
          case 144:
            _context4.prev = 144;
            _context4.t5 = _context4["catch"](132);
            _iterator44.e(_context4.t5);
          case 147:
            _context4.prev = 147;
            _iterator44.f();
            return _context4.finish(147);
          case 150:
            displayNameIndex++;
          case 151:
            _context4.next = 129;
            break;
          case 153:
            _context4.next = 158;
            break;
          case 155:
            _context4.prev = 155;
            _context4.t6 = _context4["catch"](127);
            _iterator43.e(_context4.t6);
          case 158:
            _context4.prev = 158;
            _iterator43.f();
            return _context4.finish(158);
          case 161:
            if (!(that.description !== null)) {
              _context4.next = 198;
              break;
            }
            descriptionIndex = 0;
            _iterator45 = _createForOfIteratorHelper(that.description);
            _context4.prev = 164;
            _iterator45.s();
          case 166:
            if ((_step45 = _iterator45.n()).done) {
              _context4.next = 190;
              break;
            }
            _item3 = _step45.value;
            _iterator46 = _createForOfIteratorHelper(this.transformWithContext(_item3, context));
            _context4.prev = 169;
            _iterator46.s();
          case 171:
            if ((_step46 = _iterator46.n()).done) {
              _context4.next = 179;
              break;
            }
            _error16 = _step46.value;
            _error16.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error16.path.prepend(new PropertySegment(that, "description"));
            _context4.next = 177;
            return _error16;
          case 177:
            _context4.next = 171;
            break;
          case 179:
            _context4.next = 184;
            break;
          case 181:
            _context4.prev = 181;
            _context4.t7 = _context4["catch"](169);
            _iterator46.e(_context4.t7);
          case 184:
            _context4.prev = 184;
            _iterator46.f();
            return _context4.finish(184);
          case 187:
            descriptionIndex++;
          case 188:
            _context4.next = 166;
            break;
          case 190:
            _context4.next = 195;
            break;
          case 192:
            _context4.prev = 192;
            _context4.t8 = _context4["catch"](164);
            _iterator45.e(_context4.t8);
          case 195:
            _context4.prev = 195;
            _iterator45.f();
            return _context4.finish(195);
          case 198:
            if (!(that.administration !== null)) {
              _context4.next = 217;
              break;
            }
            _iterator47 = _createForOfIteratorHelper(this.transformWithContext(that.administration, context));
            _context4.prev = 200;
            _iterator47.s();
          case 202:
            if ((_step47 = _iterator47.n()).done) {
              _context4.next = 209;
              break;
            }
            _error17 = _step47.value;
            _error17.path.prepend(new PropertySegment(that, "administration"));
            _context4.next = 207;
            return _error17;
          case 207:
            _context4.next = 202;
            break;
          case 209:
            _context4.next = 214;
            break;
          case 211:
            _context4.prev = 211;
            _context4.t9 = _context4["catch"](200);
            _iterator47.e(_context4.t9);
          case 214:
            _context4.prev = 214;
            _iterator47.f();
            return _context4.finish(214);
          case 217:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context4.next = 254;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator48 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context4.prev = 220;
            _iterator48.s();
          case 222:
            if ((_step48 = _iterator48.n()).done) {
              _context4.next = 246;
              break;
            }
            _item4 = _step48.value;
            _iterator49 = _createForOfIteratorHelper(this.transformWithContext(_item4, context));
            _context4.prev = 225;
            _iterator49.s();
          case 227:
            if ((_step49 = _iterator49.n()).done) {
              _context4.next = 235;
              break;
            }
            _error18 = _step49.value;
            _error18.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error18.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context4.next = 233;
            return _error18;
          case 233:
            _context4.next = 227;
            break;
          case 235:
            _context4.next = 240;
            break;
          case 237:
            _context4.prev = 237;
            _context4.t10 = _context4["catch"](225);
            _iterator49.e(_context4.t10);
          case 240:
            _context4.prev = 240;
            _iterator49.f();
            return _context4.finish(240);
          case 243:
            embeddedDataSpecificationsIndex++;
          case 244:
            _context4.next = 222;
            break;
          case 246:
            _context4.next = 251;
            break;
          case 248:
            _context4.prev = 248;
            _context4.t11 = _context4["catch"](220);
            _iterator48.e(_context4.t11);
          case 251:
            _context4.prev = 251;
            _iterator48.f();
            return _context4.finish(251);
          case 254:
            if (!(that.derivedFrom !== null)) {
              _context4.next = 273;
              break;
            }
            _iterator50 = _createForOfIteratorHelper(this.transformWithContext(that.derivedFrom, context));
            _context4.prev = 256;
            _iterator50.s();
          case 258:
            if ((_step50 = _iterator50.n()).done) {
              _context4.next = 265;
              break;
            }
            _error19 = _step50.value;
            _error19.path.prepend(new PropertySegment(that, "derivedFrom"));
            _context4.next = 263;
            return _error19;
          case 263:
            _context4.next = 258;
            break;
          case 265:
            _context4.next = 270;
            break;
          case 267:
            _context4.prev = 267;
            _context4.t12 = _context4["catch"](256);
            _iterator50.e(_context4.t12);
          case 270:
            _context4.prev = 270;
            _iterator50.f();
            return _context4.finish(270);
          case 273:
            _iterator51 = _createForOfIteratorHelper(this.transformWithContext(that.assetInformation, context));
            _context4.prev = 274;
            _iterator51.s();
          case 276:
            if ((_step51 = _iterator51.n()).done) {
              _context4.next = 283;
              break;
            }
            _error21 = _step51.value;
            _error21.path.prepend(new PropertySegment(that, "assetInformation"));
            _context4.next = 281;
            return _error21;
          case 281:
            _context4.next = 276;
            break;
          case 283:
            _context4.next = 288;
            break;
          case 285:
            _context4.prev = 285;
            _context4.t13 = _context4["catch"](274);
            _iterator51.e(_context4.t13);
          case 288:
            _context4.prev = 288;
            _iterator51.f();
            return _context4.finish(288);
          case 291:
            if (!(that.submodels !== null)) {
              _context4.next = 328;
              break;
            }
            submodelsIndex = 0;
            _iterator52 = _createForOfIteratorHelper(that.submodels);
            _context4.prev = 294;
            _iterator52.s();
          case 296:
            if ((_step52 = _iterator52.n()).done) {
              _context4.next = 320;
              break;
            }
            _item5 = _step52.value;
            _iterator53 = _createForOfIteratorHelper(this.transformWithContext(_item5, context));
            _context4.prev = 299;
            _iterator53.s();
          case 301:
            if ((_step53 = _iterator53.n()).done) {
              _context4.next = 309;
              break;
            }
            _error20 = _step53.value;
            _error20.path.prepend(new IndexSegment(that.submodels, submodelsIndex));
            _error20.path.prepend(new PropertySegment(that, "submodels"));
            _context4.next = 307;
            return _error20;
          case 307:
            _context4.next = 301;
            break;
          case 309:
            _context4.next = 314;
            break;
          case 311:
            _context4.prev = 311;
            _context4.t14 = _context4["catch"](299);
            _iterator53.e(_context4.t14);
          case 314:
            _context4.prev = 314;
            _iterator53.f();
            return _context4.finish(314);
          case 317:
            submodelsIndex++;
          case 318:
            _context4.next = 296;
            break;
          case 320:
            _context4.next = 325;
            break;
          case 322:
            _context4.prev = 322;
            _context4.t15 = _context4["catch"](294);
            _iterator52.e(_context4.t15);
          case 325:
            _context4.prev = 325;
            _iterator52.f();
            return _context4.finish(325);
          case 328:
          case "end":
            return _context4.stop();
        }
      }, transformAssetAdministrationShellWithContext, this, [[32, 43, 46, 49], [51, 62, 65, 68], [69, 80, 83, 86], [90, 118, 121, 124], [95, 107, 110, 113], [127, 155, 158, 161], [132, 144, 147, 150], [164, 192, 195, 198], [169, 181, 184, 187], [200, 211, 214, 217], [220, 248, 251, 254], [225, 237, 240, 243], [256, 267, 270, 273], [274, 285, 288, 291], [294, 322, 325, 328], [299, 311, 314, 317]]);
    })
  }, {
    key: "transformAssetInformationWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformAssetInformationWithContext(that, context) {
      var _iterator54, _step54, error, _iterator55, _step55, _error23, specificAssetIdsIndex, _iterator56, _step56, item, _iterator57, _step57, _error24, _iterator58, _step58, _error25;
      return _regeneratorRuntime().wrap(function transformAssetInformationWithContext$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            if (!(that.specificAssetIds !== null) || every(map(that.specificAssetIds, function (specificAssetId) {
              return specificAssetId.name != "globalAssetId" || that.globalAssetId !== null && specificAssetId.name == "globalAssetId" && specificAssetId.value == that.globalAssetId;
            }))) {
              _context5.next = 3;
              break;
            }
            _context5.next = 3;
            return new VerificationError("Constraint AASd-116: ``globalAssetId`` is a reserved key. " + "If used as value for the name of specific asset ID then " + "the value of specific asset ID shall be identical to " + "the global asset ID.");
          case 3:
            if ((that.globalAssetId !== null || that.specificAssetIds !== null) && (!(that.specificAssetIds !== null) || that.specificAssetIds.length >= 1)) {
              _context5.next = 6;
              break;
            }
            _context5.next = 6;
            return new VerificationError("Constraint AASd-131: Either the global asset ID shall be " + "defined or at least one specific asset ID.");
          case 6:
            if (!(that.specificAssetIds !== null) || that.specificAssetIds.length >= 1) {
              _context5.next = 9;
              break;
            }
            _context5.next = 9;
            return new VerificationError("Specific asset IDs must be either not set or have at least " + "one item.");
          case 9:
            if (!(that.globalAssetId !== null)) {
              _context5.next = 28;
              break;
            }
            _iterator54 = _createForOfIteratorHelper(verifyIdentifier(that.globalAssetId));
            _context5.prev = 11;
            _iterator54.s();
          case 13:
            if ((_step54 = _iterator54.n()).done) {
              _context5.next = 20;
              break;
            }
            error = _step54.value;
            error.path.prepend(new PropertySegment(that, "globalAssetId"));
            _context5.next = 18;
            return error;
          case 18:
            _context5.next = 13;
            break;
          case 20:
            _context5.next = 25;
            break;
          case 22:
            _context5.prev = 22;
            _context5.t0 = _context5["catch"](11);
            _iterator54.e(_context5.t0);
          case 25:
            _context5.prev = 25;
            _iterator54.f();
            return _context5.finish(25);
          case 28:
            if (!(that.assetType !== null)) {
              _context5.next = 47;
              break;
            }
            _iterator55 = _createForOfIteratorHelper(verifyIdentifier(that.assetType));
            _context5.prev = 30;
            _iterator55.s();
          case 32:
            if ((_step55 = _iterator55.n()).done) {
              _context5.next = 39;
              break;
            }
            _error23 = _step55.value;
            _error23.path.prepend(new PropertySegment(that, "assetType"));
            _context5.next = 37;
            return _error23;
          case 37:
            _context5.next = 32;
            break;
          case 39:
            _context5.next = 44;
            break;
          case 41:
            _context5.prev = 41;
            _context5.t1 = _context5["catch"](30);
            _iterator55.e(_context5.t1);
          case 44:
            _context5.prev = 44;
            _iterator55.f();
            return _context5.finish(44);
          case 47:
            if (!(context === true)) {
              _context5.next = 104;
              break;
            }
            if (!(that.specificAssetIds !== null)) {
              _context5.next = 85;
              break;
            }
            specificAssetIdsIndex = 0;
            _iterator56 = _createForOfIteratorHelper(that.specificAssetIds);
            _context5.prev = 51;
            _iterator56.s();
          case 53:
            if ((_step56 = _iterator56.n()).done) {
              _context5.next = 77;
              break;
            }
            item = _step56.value;
            _iterator57 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context5.prev = 56;
            _iterator57.s();
          case 58:
            if ((_step57 = _iterator57.n()).done) {
              _context5.next = 66;
              break;
            }
            _error24 = _step57.value;
            _error24.path.prepend(new IndexSegment(that.specificAssetIds, specificAssetIdsIndex));
            _error24.path.prepend(new PropertySegment(that, "specificAssetIds"));
            _context5.next = 64;
            return _error24;
          case 64:
            _context5.next = 58;
            break;
          case 66:
            _context5.next = 71;
            break;
          case 68:
            _context5.prev = 68;
            _context5.t2 = _context5["catch"](56);
            _iterator57.e(_context5.t2);
          case 71:
            _context5.prev = 71;
            _iterator57.f();
            return _context5.finish(71);
          case 74:
            specificAssetIdsIndex++;
          case 75:
            _context5.next = 53;
            break;
          case 77:
            _context5.next = 82;
            break;
          case 79:
            _context5.prev = 79;
            _context5.t3 = _context5["catch"](51);
            _iterator56.e(_context5.t3);
          case 82:
            _context5.prev = 82;
            _iterator56.f();
            return _context5.finish(82);
          case 85:
            if (!(that.defaultThumbnail !== null)) {
              _context5.next = 104;
              break;
            }
            _iterator58 = _createForOfIteratorHelper(this.transformWithContext(that.defaultThumbnail, context));
            _context5.prev = 87;
            _iterator58.s();
          case 89:
            if ((_step58 = _iterator58.n()).done) {
              _context5.next = 96;
              break;
            }
            _error25 = _step58.value;
            _error25.path.prepend(new PropertySegment(that, "defaultThumbnail"));
            _context5.next = 94;
            return _error25;
          case 94:
            _context5.next = 89;
            break;
          case 96:
            _context5.next = 101;
            break;
          case 98:
            _context5.prev = 98;
            _context5.t4 = _context5["catch"](87);
            _iterator58.e(_context5.t4);
          case 101:
            _context5.prev = 101;
            _iterator58.f();
            return _context5.finish(101);
          case 104:
          case "end":
            return _context5.stop();
        }
      }, transformAssetInformationWithContext, this, [[11, 22, 25, 28], [30, 41, 44, 47], [51, 79, 82, 85], [56, 68, 71, 74], [87, 98, 101, 104]]);
    })
  }, {
    key: "transformResourceWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformResourceWithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator59, _step59, _error26, _iterator60, _step60, error;
      return _regeneratorRuntime().wrap(function transformResourceWithContext$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _iterator59 = _createForOfIteratorHelper(verifyPathType(that.path));
            _context6.prev = 1;
            _iterator59.s();
          case 3:
            if ((_step59 = _iterator59.n()).done) {
              _context6.next = 10;
              break;
            }
            _error26 = _step59.value;
            _error26.path.prepend(new PropertySegment(that, "path"));
            _context6.next = 8;
            return _error26;
          case 8:
            _context6.next = 3;
            break;
          case 10:
            _context6.next = 15;
            break;
          case 12:
            _context6.prev = 12;
            _context6.t0 = _context6["catch"](1);
            _iterator59.e(_context6.t0);
          case 15:
            _context6.prev = 15;
            _iterator59.f();
            return _context6.finish(15);
          case 18:
            if (!(that.contentType !== null)) {
              _context6.next = 37;
              break;
            }
            _iterator60 = _createForOfIteratorHelper(verifyContentType(that.contentType));
            _context6.prev = 20;
            _iterator60.s();
          case 22:
            if ((_step60 = _iterator60.n()).done) {
              _context6.next = 29;
              break;
            }
            error = _step60.value;
            error.path.prepend(new PropertySegment(that, "contentType"));
            _context6.next = 27;
            return error;
          case 27:
            _context6.next = 22;
            break;
          case 29:
            _context6.next = 34;
            break;
          case 31:
            _context6.prev = 31;
            _context6.t1 = _context6["catch"](20);
            _iterator60.e(_context6.t1);
          case 34:
            _context6.prev = 34;
            _iterator60.f();
            return _context6.finish(34);
          case 37:
          case "end":
            return _context6.stop();
        }
      }, transformResourceWithContext, null, [[1, 12, 15, 18], [20, 31, 34, 37]]);
    })
  }, {
    key: "transformSpecificAssetIdWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformSpecificAssetIdWithContext(that, context) {
      var _iterator61, _step61, _error29, _iterator62, _step62, _error30, _iterator63, _step63, error, supplementalSemanticIdsIndex, _iterator64, _step64, item, _iterator65, _step65, _error27, _iterator66, _step66, _error28;
      return _regeneratorRuntime().wrap(function transformSpecificAssetIdWithContext$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context7.next = 3;
              break;
            }
            _context7.next = 3;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 3:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context7.next = 6;
              break;
            }
            _context7.next = 6;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 6:
            if (!(that.externalSubjectId !== null) || that.externalSubjectId.type == ReferenceTypes.ExternalReference) {
              _context7.next = 9;
              break;
            }
            _context7.next = 9;
            return new VerificationError("Constraint AASd-133: External subject ID shall be " + "an external reference.");
          case 9:
            _iterator61 = _createForOfIteratorHelper(verifyLabelType(that.name));
            _context7.prev = 10;
            _iterator61.s();
          case 12:
            if ((_step61 = _iterator61.n()).done) {
              _context7.next = 19;
              break;
            }
            _error29 = _step61.value;
            _error29.path.prepend(new PropertySegment(that, "name"));
            _context7.next = 17;
            return _error29;
          case 17:
            _context7.next = 12;
            break;
          case 19:
            _context7.next = 24;
            break;
          case 21:
            _context7.prev = 21;
            _context7.t0 = _context7["catch"](10);
            _iterator61.e(_context7.t0);
          case 24:
            _context7.prev = 24;
            _iterator61.f();
            return _context7.finish(24);
          case 27:
            _iterator62 = _createForOfIteratorHelper(verifyIdentifier(that.value));
            _context7.prev = 28;
            _iterator62.s();
          case 30:
            if ((_step62 = _iterator62.n()).done) {
              _context7.next = 37;
              break;
            }
            _error30 = _step62.value;
            _error30.path.prepend(new PropertySegment(that, "value"));
            _context7.next = 35;
            return _error30;
          case 35:
            _context7.next = 30;
            break;
          case 37:
            _context7.next = 42;
            break;
          case 39:
            _context7.prev = 39;
            _context7.t1 = _context7["catch"](28);
            _iterator62.e(_context7.t1);
          case 42:
            _context7.prev = 42;
            _iterator62.f();
            return _context7.finish(42);
          case 45:
            if (!(context === true)) {
              _context7.next = 121;
              break;
            }
            if (!(that.semanticId !== null)) {
              _context7.next = 65;
              break;
            }
            _iterator63 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context7.prev = 48;
            _iterator63.s();
          case 50:
            if ((_step63 = _iterator63.n()).done) {
              _context7.next = 57;
              break;
            }
            error = _step63.value;
            error.path.prepend(new PropertySegment(that, "semanticId"));
            _context7.next = 55;
            return error;
          case 55:
            _context7.next = 50;
            break;
          case 57:
            _context7.next = 62;
            break;
          case 59:
            _context7.prev = 59;
            _context7.t2 = _context7["catch"](48);
            _iterator63.e(_context7.t2);
          case 62:
            _context7.prev = 62;
            _iterator63.f();
            return _context7.finish(62);
          case 65:
            if (!(that.supplementalSemanticIds !== null)) {
              _context7.next = 102;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator64 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context7.prev = 68;
            _iterator64.s();
          case 70:
            if ((_step64 = _iterator64.n()).done) {
              _context7.next = 94;
              break;
            }
            item = _step64.value;
            _iterator65 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context7.prev = 73;
            _iterator65.s();
          case 75:
            if ((_step65 = _iterator65.n()).done) {
              _context7.next = 83;
              break;
            }
            _error27 = _step65.value;
            _error27.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error27.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context7.next = 81;
            return _error27;
          case 81:
            _context7.next = 75;
            break;
          case 83:
            _context7.next = 88;
            break;
          case 85:
            _context7.prev = 85;
            _context7.t3 = _context7["catch"](73);
            _iterator65.e(_context7.t3);
          case 88:
            _context7.prev = 88;
            _iterator65.f();
            return _context7.finish(88);
          case 91:
            supplementalSemanticIdsIndex++;
          case 92:
            _context7.next = 70;
            break;
          case 94:
            _context7.next = 99;
            break;
          case 96:
            _context7.prev = 96;
            _context7.t4 = _context7["catch"](68);
            _iterator64.e(_context7.t4);
          case 99:
            _context7.prev = 99;
            _iterator64.f();
            return _context7.finish(99);
          case 102:
            if (!(that.externalSubjectId !== null)) {
              _context7.next = 121;
              break;
            }
            _iterator66 = _createForOfIteratorHelper(this.transformWithContext(that.externalSubjectId, context));
            _context7.prev = 104;
            _iterator66.s();
          case 106:
            if ((_step66 = _iterator66.n()).done) {
              _context7.next = 113;
              break;
            }
            _error28 = _step66.value;
            _error28.path.prepend(new PropertySegment(that, "externalSubjectId"));
            _context7.next = 111;
            return _error28;
          case 111:
            _context7.next = 106;
            break;
          case 113:
            _context7.next = 118;
            break;
          case 115:
            _context7.prev = 115;
            _context7.t5 = _context7["catch"](104);
            _iterator66.e(_context7.t5);
          case 118:
            _context7.prev = 118;
            _iterator66.f();
            return _context7.finish(118);
          case 121:
          case "end":
            return _context7.stop();
        }
      }, transformSpecificAssetIdWithContext, this, [[10, 21, 24, 27], [28, 39, 42, 45], [48, 59, 62, 65], [68, 96, 99, 102], [73, 85, 88, 91], [104, 115, 118, 121]]);
    })
  }, {
    key: "transformSubmodelWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformSubmodelWithContext(that, context) {
      var _iterator67, _step67, error, _iterator68, _step68, _error31, _iterator69, _step69, _error41, extensionsIndex, _iterator70, _step70, item, _iterator71, _step71, _error32, displayNameIndex, _iterator72, _step72, _item6, _iterator73, _step73, _error33, descriptionIndex, _iterator74, _step74, _item7, _iterator75, _step75, _error34, _iterator76, _step76, _error35, _iterator77, _step77, _error36, supplementalSemanticIdsIndex, _iterator78, _step78, _item8, _iterator79, _step79, _error37, qualifiersIndex, _iterator80, _step80, _item9, _iterator81, _step81, _error38, embeddedDataSpecificationsIndex, _iterator82, _step82, _item10, _iterator83, _step83, _error39, submodelElementsIndex, _iterator84, _step84, _item11, _iterator85, _step85, _error40;
      return _regeneratorRuntime().wrap(function transformSubmodelWithContext$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context8.next = 3;
              break;
            }
            _context8.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context8.next = 6;
              break;
            }
            _context8.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context8.next = 9;
              break;
            }
            _context8.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context8.next = 12;
              break;
            }
            _context8.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context8.next = 15;
              break;
            }
            _context8.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context8.next = 18;
              break;
            }
            _context8.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context8.next = 21;
              break;
            }
            _context8.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context8.next = 24;
              break;
            }
            _context8.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context8.next = 27;
              break;
            }
            _context8.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context8.next = 30;
              break;
            }
            _context8.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context8.next = 33;
              break;
            }
            _context8.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.submodelElements !== null) || that.submodelElements.length >= 1) {
              _context8.next = 36;
              break;
            }
            _context8.next = 36;
            return new VerificationError("Submodel elements must be either not set or have at least " + "one item.");
          case 36:
            if (!(that.submodelElements !== null) || every(map(that.submodelElements, function (item) {
              return item.idShort !== null;
            }))) {
              _context8.next = 39;
              break;
            }
            _context8.next = 39;
            return new VerificationError("ID-shorts need to be defined for all the items of submodel " + "elements according to AASd-117 (ID-short of Referables not " + "being a direct child of a Submodel element list shall be " + "specified).");
          case 39:
            if (!(that.submodelElements !== null) || idShortsAreUnique(that.submodelElements)) {
              _context8.next = 42;
              break;
            }
            _context8.next = 42;
            return new VerificationError("Constraint AASd-022: ID-short of non-identifiable " + "referables within the same name space shall be unique " + "(case-sensitive).");
          case 42:
            if (!(that.submodelElements !== null) || !(that.kindOrDefault() != ModellingKind.Template) || every(map(that.submodelElements, function (submodelElement) {
              return !(submodelElement.qualifiers !== null) || every(map(submodelElement.qualifiers, function (qualifier) {
                return qualifier.kindOrDefault() != QualifierKind.TemplateQualifier;
              }));
            }))) {
              _context8.next = 45;
              break;
            }
            _context8.next = 45;
            return new VerificationError("Constraint AASd-129: If any qualifier kind value of " + "a Submodel element qualifier (attribute qualifier inherited " + "via Qualifiable) is equal to Template Qualifier then " + "the submodel element shall be part of a submodel template, " + "i.e. a Submodel with submodel kind (attribute kind " + "inherited via Has-Kind) value is equal to Template.");
          case 45:
            if (!(that.qualifiers !== null) || !some(map(that.qualifiers, function (qualifier) {
              return qualifier.kindOrDefault() == QualifierKind.TemplateQualifier;
            })) || that.kindOrDefault() == ModellingKind.Template) {
              _context8.next = 48;
              break;
            }
            _context8.next = 48;
            return new VerificationError("Constraint AASd-119: If any qualifier kind value of " + "a qualifiable qualifier is equal to template qualifier and " + "the qualified element has kind then the qualified element " + "shall be of kind template.");
          case 48:
            if (!(that.category !== null)) {
              _context8.next = 67;
              break;
            }
            _iterator67 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context8.prev = 50;
            _iterator67.s();
          case 52:
            if ((_step67 = _iterator67.n()).done) {
              _context8.next = 59;
              break;
            }
            error = _step67.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context8.next = 57;
            return error;
          case 57:
            _context8.next = 52;
            break;
          case 59:
            _context8.next = 64;
            break;
          case 61:
            _context8.prev = 61;
            _context8.t0 = _context8["catch"](50);
            _iterator67.e(_context8.t0);
          case 64:
            _context8.prev = 64;
            _iterator67.f();
            return _context8.finish(64);
          case 67:
            if (!(that.idShort !== null)) {
              _context8.next = 86;
              break;
            }
            _iterator68 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context8.prev = 69;
            _iterator68.s();
          case 71:
            if ((_step68 = _iterator68.n()).done) {
              _context8.next = 78;
              break;
            }
            _error31 = _step68.value;
            _error31.path.prepend(new PropertySegment(that, "idShort"));
            _context8.next = 76;
            return _error31;
          case 76:
            _context8.next = 71;
            break;
          case 78:
            _context8.next = 83;
            break;
          case 80:
            _context8.prev = 80;
            _context8.t1 = _context8["catch"](69);
            _iterator68.e(_context8.t1);
          case 83:
            _context8.prev = 83;
            _iterator68.f();
            return _context8.finish(83);
          case 86:
            _iterator69 = _createForOfIteratorHelper(verifyIdentifier(that.id));
            _context8.prev = 87;
            _iterator69.s();
          case 89:
            if ((_step69 = _iterator69.n()).done) {
              _context8.next = 96;
              break;
            }
            _error41 = _step69.value;
            _error41.path.prepend(new PropertySegment(that, "id"));
            _context8.next = 94;
            return _error41;
          case 94:
            _context8.next = 89;
            break;
          case 96:
            _context8.next = 101;
            break;
          case 98:
            _context8.prev = 98;
            _context8.t2 = _context8["catch"](87);
            _iterator69.e(_context8.t2);
          case 101:
            _context8.prev = 101;
            _iterator69.f();
            return _context8.finish(101);
          case 104:
            if (!(context === true)) {
              _context8.next = 402;
              break;
            }
            if (!(that.extensions !== null)) {
              _context8.next = 142;
              break;
            }
            extensionsIndex = 0;
            _iterator70 = _createForOfIteratorHelper(that.extensions);
            _context8.prev = 108;
            _iterator70.s();
          case 110:
            if ((_step70 = _iterator70.n()).done) {
              _context8.next = 134;
              break;
            }
            item = _step70.value;
            _iterator71 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context8.prev = 113;
            _iterator71.s();
          case 115:
            if ((_step71 = _iterator71.n()).done) {
              _context8.next = 123;
              break;
            }
            _error32 = _step71.value;
            _error32.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error32.path.prepend(new PropertySegment(that, "extensions"));
            _context8.next = 121;
            return _error32;
          case 121:
            _context8.next = 115;
            break;
          case 123:
            _context8.next = 128;
            break;
          case 125:
            _context8.prev = 125;
            _context8.t3 = _context8["catch"](113);
            _iterator71.e(_context8.t3);
          case 128:
            _context8.prev = 128;
            _iterator71.f();
            return _context8.finish(128);
          case 131:
            extensionsIndex++;
          case 132:
            _context8.next = 110;
            break;
          case 134:
            _context8.next = 139;
            break;
          case 136:
            _context8.prev = 136;
            _context8.t4 = _context8["catch"](108);
            _iterator70.e(_context8.t4);
          case 139:
            _context8.prev = 139;
            _iterator70.f();
            return _context8.finish(139);
          case 142:
            if (!(that.displayName !== null)) {
              _context8.next = 179;
              break;
            }
            displayNameIndex = 0;
            _iterator72 = _createForOfIteratorHelper(that.displayName);
            _context8.prev = 145;
            _iterator72.s();
          case 147:
            if ((_step72 = _iterator72.n()).done) {
              _context8.next = 171;
              break;
            }
            _item6 = _step72.value;
            _iterator73 = _createForOfIteratorHelper(this.transformWithContext(_item6, context));
            _context8.prev = 150;
            _iterator73.s();
          case 152:
            if ((_step73 = _iterator73.n()).done) {
              _context8.next = 160;
              break;
            }
            _error33 = _step73.value;
            _error33.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error33.path.prepend(new PropertySegment(that, "displayName"));
            _context8.next = 158;
            return _error33;
          case 158:
            _context8.next = 152;
            break;
          case 160:
            _context8.next = 165;
            break;
          case 162:
            _context8.prev = 162;
            _context8.t5 = _context8["catch"](150);
            _iterator73.e(_context8.t5);
          case 165:
            _context8.prev = 165;
            _iterator73.f();
            return _context8.finish(165);
          case 168:
            displayNameIndex++;
          case 169:
            _context8.next = 147;
            break;
          case 171:
            _context8.next = 176;
            break;
          case 173:
            _context8.prev = 173;
            _context8.t6 = _context8["catch"](145);
            _iterator72.e(_context8.t6);
          case 176:
            _context8.prev = 176;
            _iterator72.f();
            return _context8.finish(176);
          case 179:
            if (!(that.description !== null)) {
              _context8.next = 216;
              break;
            }
            descriptionIndex = 0;
            _iterator74 = _createForOfIteratorHelper(that.description);
            _context8.prev = 182;
            _iterator74.s();
          case 184:
            if ((_step74 = _iterator74.n()).done) {
              _context8.next = 208;
              break;
            }
            _item7 = _step74.value;
            _iterator75 = _createForOfIteratorHelper(this.transformWithContext(_item7, context));
            _context8.prev = 187;
            _iterator75.s();
          case 189:
            if ((_step75 = _iterator75.n()).done) {
              _context8.next = 197;
              break;
            }
            _error34 = _step75.value;
            _error34.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error34.path.prepend(new PropertySegment(that, "description"));
            _context8.next = 195;
            return _error34;
          case 195:
            _context8.next = 189;
            break;
          case 197:
            _context8.next = 202;
            break;
          case 199:
            _context8.prev = 199;
            _context8.t7 = _context8["catch"](187);
            _iterator75.e(_context8.t7);
          case 202:
            _context8.prev = 202;
            _iterator75.f();
            return _context8.finish(202);
          case 205:
            descriptionIndex++;
          case 206:
            _context8.next = 184;
            break;
          case 208:
            _context8.next = 213;
            break;
          case 210:
            _context8.prev = 210;
            _context8.t8 = _context8["catch"](182);
            _iterator74.e(_context8.t8);
          case 213:
            _context8.prev = 213;
            _iterator74.f();
            return _context8.finish(213);
          case 216:
            if (!(that.administration !== null)) {
              _context8.next = 235;
              break;
            }
            _iterator76 = _createForOfIteratorHelper(this.transformWithContext(that.administration, context));
            _context8.prev = 218;
            _iterator76.s();
          case 220:
            if ((_step76 = _iterator76.n()).done) {
              _context8.next = 227;
              break;
            }
            _error35 = _step76.value;
            _error35.path.prepend(new PropertySegment(that, "administration"));
            _context8.next = 225;
            return _error35;
          case 225:
            _context8.next = 220;
            break;
          case 227:
            _context8.next = 232;
            break;
          case 229:
            _context8.prev = 229;
            _context8.t9 = _context8["catch"](218);
            _iterator76.e(_context8.t9);
          case 232:
            _context8.prev = 232;
            _iterator76.f();
            return _context8.finish(232);
          case 235:
            if (!(that.semanticId !== null)) {
              _context8.next = 254;
              break;
            }
            _iterator77 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context8.prev = 237;
            _iterator77.s();
          case 239:
            if ((_step77 = _iterator77.n()).done) {
              _context8.next = 246;
              break;
            }
            _error36 = _step77.value;
            _error36.path.prepend(new PropertySegment(that, "semanticId"));
            _context8.next = 244;
            return _error36;
          case 244:
            _context8.next = 239;
            break;
          case 246:
            _context8.next = 251;
            break;
          case 248:
            _context8.prev = 248;
            _context8.t10 = _context8["catch"](237);
            _iterator77.e(_context8.t10);
          case 251:
            _context8.prev = 251;
            _iterator77.f();
            return _context8.finish(251);
          case 254:
            if (!(that.supplementalSemanticIds !== null)) {
              _context8.next = 291;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator78 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context8.prev = 257;
            _iterator78.s();
          case 259:
            if ((_step78 = _iterator78.n()).done) {
              _context8.next = 283;
              break;
            }
            _item8 = _step78.value;
            _iterator79 = _createForOfIteratorHelper(this.transformWithContext(_item8, context));
            _context8.prev = 262;
            _iterator79.s();
          case 264:
            if ((_step79 = _iterator79.n()).done) {
              _context8.next = 272;
              break;
            }
            _error37 = _step79.value;
            _error37.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error37.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context8.next = 270;
            return _error37;
          case 270:
            _context8.next = 264;
            break;
          case 272:
            _context8.next = 277;
            break;
          case 274:
            _context8.prev = 274;
            _context8.t11 = _context8["catch"](262);
            _iterator79.e(_context8.t11);
          case 277:
            _context8.prev = 277;
            _iterator79.f();
            return _context8.finish(277);
          case 280:
            supplementalSemanticIdsIndex++;
          case 281:
            _context8.next = 259;
            break;
          case 283:
            _context8.next = 288;
            break;
          case 285:
            _context8.prev = 285;
            _context8.t12 = _context8["catch"](257);
            _iterator78.e(_context8.t12);
          case 288:
            _context8.prev = 288;
            _iterator78.f();
            return _context8.finish(288);
          case 291:
            if (!(that.qualifiers !== null)) {
              _context8.next = 328;
              break;
            }
            qualifiersIndex = 0;
            _iterator80 = _createForOfIteratorHelper(that.qualifiers);
            _context8.prev = 294;
            _iterator80.s();
          case 296:
            if ((_step80 = _iterator80.n()).done) {
              _context8.next = 320;
              break;
            }
            _item9 = _step80.value;
            _iterator81 = _createForOfIteratorHelper(this.transformWithContext(_item9, context));
            _context8.prev = 299;
            _iterator81.s();
          case 301:
            if ((_step81 = _iterator81.n()).done) {
              _context8.next = 309;
              break;
            }
            _error38 = _step81.value;
            _error38.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error38.path.prepend(new PropertySegment(that, "qualifiers"));
            _context8.next = 307;
            return _error38;
          case 307:
            _context8.next = 301;
            break;
          case 309:
            _context8.next = 314;
            break;
          case 311:
            _context8.prev = 311;
            _context8.t13 = _context8["catch"](299);
            _iterator81.e(_context8.t13);
          case 314:
            _context8.prev = 314;
            _iterator81.f();
            return _context8.finish(314);
          case 317:
            qualifiersIndex++;
          case 318:
            _context8.next = 296;
            break;
          case 320:
            _context8.next = 325;
            break;
          case 322:
            _context8.prev = 322;
            _context8.t14 = _context8["catch"](294);
            _iterator80.e(_context8.t14);
          case 325:
            _context8.prev = 325;
            _iterator80.f();
            return _context8.finish(325);
          case 328:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context8.next = 365;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator82 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context8.prev = 331;
            _iterator82.s();
          case 333:
            if ((_step82 = _iterator82.n()).done) {
              _context8.next = 357;
              break;
            }
            _item10 = _step82.value;
            _iterator83 = _createForOfIteratorHelper(this.transformWithContext(_item10, context));
            _context8.prev = 336;
            _iterator83.s();
          case 338:
            if ((_step83 = _iterator83.n()).done) {
              _context8.next = 346;
              break;
            }
            _error39 = _step83.value;
            _error39.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error39.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context8.next = 344;
            return _error39;
          case 344:
            _context8.next = 338;
            break;
          case 346:
            _context8.next = 351;
            break;
          case 348:
            _context8.prev = 348;
            _context8.t15 = _context8["catch"](336);
            _iterator83.e(_context8.t15);
          case 351:
            _context8.prev = 351;
            _iterator83.f();
            return _context8.finish(351);
          case 354:
            embeddedDataSpecificationsIndex++;
          case 355:
            _context8.next = 333;
            break;
          case 357:
            _context8.next = 362;
            break;
          case 359:
            _context8.prev = 359;
            _context8.t16 = _context8["catch"](331);
            _iterator82.e(_context8.t16);
          case 362:
            _context8.prev = 362;
            _iterator82.f();
            return _context8.finish(362);
          case 365:
            if (!(that.submodelElements !== null)) {
              _context8.next = 402;
              break;
            }
            submodelElementsIndex = 0;
            _iterator84 = _createForOfIteratorHelper(that.submodelElements);
            _context8.prev = 368;
            _iterator84.s();
          case 370:
            if ((_step84 = _iterator84.n()).done) {
              _context8.next = 394;
              break;
            }
            _item11 = _step84.value;
            _iterator85 = _createForOfIteratorHelper(this.transformWithContext(_item11, context));
            _context8.prev = 373;
            _iterator85.s();
          case 375:
            if ((_step85 = _iterator85.n()).done) {
              _context8.next = 383;
              break;
            }
            _error40 = _step85.value;
            _error40.path.prepend(new IndexSegment(that.submodelElements, submodelElementsIndex));
            _error40.path.prepend(new PropertySegment(that, "submodelElements"));
            _context8.next = 381;
            return _error40;
          case 381:
            _context8.next = 375;
            break;
          case 383:
            _context8.next = 388;
            break;
          case 385:
            _context8.prev = 385;
            _context8.t17 = _context8["catch"](373);
            _iterator85.e(_context8.t17);
          case 388:
            _context8.prev = 388;
            _iterator85.f();
            return _context8.finish(388);
          case 391:
            submodelElementsIndex++;
          case 392:
            _context8.next = 370;
            break;
          case 394:
            _context8.next = 399;
            break;
          case 396:
            _context8.prev = 396;
            _context8.t18 = _context8["catch"](368);
            _iterator84.e(_context8.t18);
          case 399:
            _context8.prev = 399;
            _iterator84.f();
            return _context8.finish(399);
          case 402:
          case "end":
            return _context8.stop();
        }
      }, transformSubmodelWithContext, this, [[50, 61, 64, 67], [69, 80, 83, 86], [87, 98, 101, 104], [108, 136, 139, 142], [113, 125, 128, 131], [145, 173, 176, 179], [150, 162, 165, 168], [182, 210, 213, 216], [187, 199, 202, 205], [218, 229, 232, 235], [237, 248, 251, 254], [257, 285, 288, 291], [262, 274, 277, 280], [294, 322, 325, 328], [299, 311, 314, 317], [331, 359, 362, 365], [336, 348, 351, 354], [368, 396, 399, 402], [373, 385, 388, 391]]);
    })
  }, {
    key: "transformRelationshipElementWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformRelationshipElementWithContext(that, context) {
      var _iterator86, _step86, error, _iterator87, _step87, _error42, extensionsIndex, _iterator88, _step88, item, _iterator89, _step89, _error43, displayNameIndex, _iterator90, _step90, _item12, _iterator91, _step91, _error44, descriptionIndex, _iterator92, _step92, _item13, _iterator93, _step93, _error45, _iterator94, _step94, _error46, supplementalSemanticIdsIndex, _iterator95, _step95, _item14, _iterator96, _step96, _error47, qualifiersIndex, _iterator97, _step97, _item15, _iterator98, _step98, _error48, embeddedDataSpecificationsIndex, _iterator99, _step99, _item16, _iterator100, _step100, _error49, _iterator101, _step101, _error50, _iterator102, _step102, _error51;
      return _regeneratorRuntime().wrap(function transformRelationshipElementWithContext$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context9.next = 3;
              break;
            }
            _context9.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context9.next = 6;
              break;
            }
            _context9.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context9.next = 9;
              break;
            }
            _context9.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context9.next = 12;
              break;
            }
            _context9.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context9.next = 15;
              break;
            }
            _context9.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context9.next = 18;
              break;
            }
            _context9.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context9.next = 21;
              break;
            }
            _context9.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context9.next = 24;
              break;
            }
            _context9.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context9.next = 27;
              break;
            }
            _context9.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context9.next = 30;
              break;
            }
            _context9.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context9.next = 33;
              break;
            }
            _context9.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null)) {
              _context9.next = 52;
              break;
            }
            _iterator86 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context9.prev = 35;
            _iterator86.s();
          case 37:
            if ((_step86 = _iterator86.n()).done) {
              _context9.next = 44;
              break;
            }
            error = _step86.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context9.next = 42;
            return error;
          case 42:
            _context9.next = 37;
            break;
          case 44:
            _context9.next = 49;
            break;
          case 46:
            _context9.prev = 46;
            _context9.t0 = _context9["catch"](35);
            _iterator86.e(_context9.t0);
          case 49:
            _context9.prev = 49;
            _iterator86.f();
            return _context9.finish(49);
          case 52:
            if (!(that.idShort !== null)) {
              _context9.next = 71;
              break;
            }
            _iterator87 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context9.prev = 54;
            _iterator87.s();
          case 56:
            if ((_step87 = _iterator87.n()).done) {
              _context9.next = 63;
              break;
            }
            _error42 = _step87.value;
            _error42.path.prepend(new PropertySegment(that, "idShort"));
            _context9.next = 61;
            return _error42;
          case 61:
            _context9.next = 56;
            break;
          case 63:
            _context9.next = 68;
            break;
          case 65:
            _context9.prev = 65;
            _context9.t1 = _context9["catch"](54);
            _iterator87.e(_context9.t1);
          case 68:
            _context9.prev = 68;
            _iterator87.f();
            return _context9.finish(68);
          case 71:
            if (!(context === true)) {
              _context9.next = 349;
              break;
            }
            if (!(that.extensions !== null)) {
              _context9.next = 109;
              break;
            }
            extensionsIndex = 0;
            _iterator88 = _createForOfIteratorHelper(that.extensions);
            _context9.prev = 75;
            _iterator88.s();
          case 77:
            if ((_step88 = _iterator88.n()).done) {
              _context9.next = 101;
              break;
            }
            item = _step88.value;
            _iterator89 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context9.prev = 80;
            _iterator89.s();
          case 82:
            if ((_step89 = _iterator89.n()).done) {
              _context9.next = 90;
              break;
            }
            _error43 = _step89.value;
            _error43.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error43.path.prepend(new PropertySegment(that, "extensions"));
            _context9.next = 88;
            return _error43;
          case 88:
            _context9.next = 82;
            break;
          case 90:
            _context9.next = 95;
            break;
          case 92:
            _context9.prev = 92;
            _context9.t2 = _context9["catch"](80);
            _iterator89.e(_context9.t2);
          case 95:
            _context9.prev = 95;
            _iterator89.f();
            return _context9.finish(95);
          case 98:
            extensionsIndex++;
          case 99:
            _context9.next = 77;
            break;
          case 101:
            _context9.next = 106;
            break;
          case 103:
            _context9.prev = 103;
            _context9.t3 = _context9["catch"](75);
            _iterator88.e(_context9.t3);
          case 106:
            _context9.prev = 106;
            _iterator88.f();
            return _context9.finish(106);
          case 109:
            if (!(that.displayName !== null)) {
              _context9.next = 146;
              break;
            }
            displayNameIndex = 0;
            _iterator90 = _createForOfIteratorHelper(that.displayName);
            _context9.prev = 112;
            _iterator90.s();
          case 114:
            if ((_step90 = _iterator90.n()).done) {
              _context9.next = 138;
              break;
            }
            _item12 = _step90.value;
            _iterator91 = _createForOfIteratorHelper(this.transformWithContext(_item12, context));
            _context9.prev = 117;
            _iterator91.s();
          case 119:
            if ((_step91 = _iterator91.n()).done) {
              _context9.next = 127;
              break;
            }
            _error44 = _step91.value;
            _error44.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error44.path.prepend(new PropertySegment(that, "displayName"));
            _context9.next = 125;
            return _error44;
          case 125:
            _context9.next = 119;
            break;
          case 127:
            _context9.next = 132;
            break;
          case 129:
            _context9.prev = 129;
            _context9.t4 = _context9["catch"](117);
            _iterator91.e(_context9.t4);
          case 132:
            _context9.prev = 132;
            _iterator91.f();
            return _context9.finish(132);
          case 135:
            displayNameIndex++;
          case 136:
            _context9.next = 114;
            break;
          case 138:
            _context9.next = 143;
            break;
          case 140:
            _context9.prev = 140;
            _context9.t5 = _context9["catch"](112);
            _iterator90.e(_context9.t5);
          case 143:
            _context9.prev = 143;
            _iterator90.f();
            return _context9.finish(143);
          case 146:
            if (!(that.description !== null)) {
              _context9.next = 183;
              break;
            }
            descriptionIndex = 0;
            _iterator92 = _createForOfIteratorHelper(that.description);
            _context9.prev = 149;
            _iterator92.s();
          case 151:
            if ((_step92 = _iterator92.n()).done) {
              _context9.next = 175;
              break;
            }
            _item13 = _step92.value;
            _iterator93 = _createForOfIteratorHelper(this.transformWithContext(_item13, context));
            _context9.prev = 154;
            _iterator93.s();
          case 156:
            if ((_step93 = _iterator93.n()).done) {
              _context9.next = 164;
              break;
            }
            _error45 = _step93.value;
            _error45.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error45.path.prepend(new PropertySegment(that, "description"));
            _context9.next = 162;
            return _error45;
          case 162:
            _context9.next = 156;
            break;
          case 164:
            _context9.next = 169;
            break;
          case 166:
            _context9.prev = 166;
            _context9.t6 = _context9["catch"](154);
            _iterator93.e(_context9.t6);
          case 169:
            _context9.prev = 169;
            _iterator93.f();
            return _context9.finish(169);
          case 172:
            descriptionIndex++;
          case 173:
            _context9.next = 151;
            break;
          case 175:
            _context9.next = 180;
            break;
          case 177:
            _context9.prev = 177;
            _context9.t7 = _context9["catch"](149);
            _iterator92.e(_context9.t7);
          case 180:
            _context9.prev = 180;
            _iterator92.f();
            return _context9.finish(180);
          case 183:
            if (!(that.semanticId !== null)) {
              _context9.next = 202;
              break;
            }
            _iterator94 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context9.prev = 185;
            _iterator94.s();
          case 187:
            if ((_step94 = _iterator94.n()).done) {
              _context9.next = 194;
              break;
            }
            _error46 = _step94.value;
            _error46.path.prepend(new PropertySegment(that, "semanticId"));
            _context9.next = 192;
            return _error46;
          case 192:
            _context9.next = 187;
            break;
          case 194:
            _context9.next = 199;
            break;
          case 196:
            _context9.prev = 196;
            _context9.t8 = _context9["catch"](185);
            _iterator94.e(_context9.t8);
          case 199:
            _context9.prev = 199;
            _iterator94.f();
            return _context9.finish(199);
          case 202:
            if (!(that.supplementalSemanticIds !== null)) {
              _context9.next = 239;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator95 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context9.prev = 205;
            _iterator95.s();
          case 207:
            if ((_step95 = _iterator95.n()).done) {
              _context9.next = 231;
              break;
            }
            _item14 = _step95.value;
            _iterator96 = _createForOfIteratorHelper(this.transformWithContext(_item14, context));
            _context9.prev = 210;
            _iterator96.s();
          case 212:
            if ((_step96 = _iterator96.n()).done) {
              _context9.next = 220;
              break;
            }
            _error47 = _step96.value;
            _error47.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error47.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context9.next = 218;
            return _error47;
          case 218:
            _context9.next = 212;
            break;
          case 220:
            _context9.next = 225;
            break;
          case 222:
            _context9.prev = 222;
            _context9.t9 = _context9["catch"](210);
            _iterator96.e(_context9.t9);
          case 225:
            _context9.prev = 225;
            _iterator96.f();
            return _context9.finish(225);
          case 228:
            supplementalSemanticIdsIndex++;
          case 229:
            _context9.next = 207;
            break;
          case 231:
            _context9.next = 236;
            break;
          case 233:
            _context9.prev = 233;
            _context9.t10 = _context9["catch"](205);
            _iterator95.e(_context9.t10);
          case 236:
            _context9.prev = 236;
            _iterator95.f();
            return _context9.finish(236);
          case 239:
            if (!(that.qualifiers !== null)) {
              _context9.next = 276;
              break;
            }
            qualifiersIndex = 0;
            _iterator97 = _createForOfIteratorHelper(that.qualifiers);
            _context9.prev = 242;
            _iterator97.s();
          case 244:
            if ((_step97 = _iterator97.n()).done) {
              _context9.next = 268;
              break;
            }
            _item15 = _step97.value;
            _iterator98 = _createForOfIteratorHelper(this.transformWithContext(_item15, context));
            _context9.prev = 247;
            _iterator98.s();
          case 249:
            if ((_step98 = _iterator98.n()).done) {
              _context9.next = 257;
              break;
            }
            _error48 = _step98.value;
            _error48.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error48.path.prepend(new PropertySegment(that, "qualifiers"));
            _context9.next = 255;
            return _error48;
          case 255:
            _context9.next = 249;
            break;
          case 257:
            _context9.next = 262;
            break;
          case 259:
            _context9.prev = 259;
            _context9.t11 = _context9["catch"](247);
            _iterator98.e(_context9.t11);
          case 262:
            _context9.prev = 262;
            _iterator98.f();
            return _context9.finish(262);
          case 265:
            qualifiersIndex++;
          case 266:
            _context9.next = 244;
            break;
          case 268:
            _context9.next = 273;
            break;
          case 270:
            _context9.prev = 270;
            _context9.t12 = _context9["catch"](242);
            _iterator97.e(_context9.t12);
          case 273:
            _context9.prev = 273;
            _iterator97.f();
            return _context9.finish(273);
          case 276:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context9.next = 313;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator99 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context9.prev = 279;
            _iterator99.s();
          case 281:
            if ((_step99 = _iterator99.n()).done) {
              _context9.next = 305;
              break;
            }
            _item16 = _step99.value;
            _iterator100 = _createForOfIteratorHelper(this.transformWithContext(_item16, context));
            _context9.prev = 284;
            _iterator100.s();
          case 286:
            if ((_step100 = _iterator100.n()).done) {
              _context9.next = 294;
              break;
            }
            _error49 = _step100.value;
            _error49.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error49.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context9.next = 292;
            return _error49;
          case 292:
            _context9.next = 286;
            break;
          case 294:
            _context9.next = 299;
            break;
          case 296:
            _context9.prev = 296;
            _context9.t13 = _context9["catch"](284);
            _iterator100.e(_context9.t13);
          case 299:
            _context9.prev = 299;
            _iterator100.f();
            return _context9.finish(299);
          case 302:
            embeddedDataSpecificationsIndex++;
          case 303:
            _context9.next = 281;
            break;
          case 305:
            _context9.next = 310;
            break;
          case 307:
            _context9.prev = 307;
            _context9.t14 = _context9["catch"](279);
            _iterator99.e(_context9.t14);
          case 310:
            _context9.prev = 310;
            _iterator99.f();
            return _context9.finish(310);
          case 313:
            _iterator101 = _createForOfIteratorHelper(this.transformWithContext(that.first, context));
            _context9.prev = 314;
            _iterator101.s();
          case 316:
            if ((_step101 = _iterator101.n()).done) {
              _context9.next = 323;
              break;
            }
            _error50 = _step101.value;
            _error50.path.prepend(new PropertySegment(that, "first"));
            _context9.next = 321;
            return _error50;
          case 321:
            _context9.next = 316;
            break;
          case 323:
            _context9.next = 328;
            break;
          case 325:
            _context9.prev = 325;
            _context9.t15 = _context9["catch"](314);
            _iterator101.e(_context9.t15);
          case 328:
            _context9.prev = 328;
            _iterator101.f();
            return _context9.finish(328);
          case 331:
            _iterator102 = _createForOfIteratorHelper(this.transformWithContext(that.second, context));
            _context9.prev = 332;
            _iterator102.s();
          case 334:
            if ((_step102 = _iterator102.n()).done) {
              _context9.next = 341;
              break;
            }
            _error51 = _step102.value;
            _error51.path.prepend(new PropertySegment(that, "second"));
            _context9.next = 339;
            return _error51;
          case 339:
            _context9.next = 334;
            break;
          case 341:
            _context9.next = 346;
            break;
          case 343:
            _context9.prev = 343;
            _context9.t16 = _context9["catch"](332);
            _iterator102.e(_context9.t16);
          case 346:
            _context9.prev = 346;
            _iterator102.f();
            return _context9.finish(346);
          case 349:
          case "end":
            return _context9.stop();
        }
      }, transformRelationshipElementWithContext, this, [[35, 46, 49, 52], [54, 65, 68, 71], [75, 103, 106, 109], [80, 92, 95, 98], [112, 140, 143, 146], [117, 129, 132, 135], [149, 177, 180, 183], [154, 166, 169, 172], [185, 196, 199, 202], [205, 233, 236, 239], [210, 222, 225, 228], [242, 270, 273, 276], [247, 259, 262, 265], [279, 307, 310, 313], [284, 296, 299, 302], [314, 325, 328, 331], [332, 343, 346, 349]]);
    })
  }, {
    key: "transformSubmodelElementListWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformSubmodelElementListWithContext(that, context) {
      var _iterator103, _step103, error, _iterator104, _step104, _error52, extensionsIndex, _iterator105, _step105, item, _iterator106, _step106, _error53, displayNameIndex, _iterator107, _step107, _item17, _iterator108, _step108, _error54, descriptionIndex, _iterator109, _step109, _item18, _iterator110, _step110, _error55, _iterator111, _step111, _error56, supplementalSemanticIdsIndex, _iterator112, _step112, _item19, _iterator113, _step113, _error57, qualifiersIndex, _iterator114, _step114, _item20, _iterator115, _step115, _error58, embeddedDataSpecificationsIndex, _iterator116, _step116, _item21, _iterator117, _step117, _error59, _iterator118, _step118, _error60, valueIndex, _iterator119, _step119, _item22, _iterator120, _step120, _error61;
      return _regeneratorRuntime().wrap(function transformSubmodelElementListWithContext$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context10.next = 3;
              break;
            }
            _context10.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context10.next = 6;
              break;
            }
            _context10.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context10.next = 9;
              break;
            }
            _context10.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context10.next = 12;
              break;
            }
            _context10.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context10.next = 15;
              break;
            }
            _context10.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context10.next = 18;
              break;
            }
            _context10.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context10.next = 21;
              break;
            }
            _context10.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context10.next = 24;
              break;
            }
            _context10.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context10.next = 27;
              break;
            }
            _context10.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context10.next = 30;
              break;
            }
            _context10.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context10.next = 33;
              break;
            }
            _context10.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.value !== null) || that.value.length >= 1) {
              _context10.next = 36;
              break;
            }
            _context10.next = 36;
            return new VerificationError("Value must be either not set or have at least one item.");
          case 36:
            if (!(that.value !== null && that.semanticIdListElement !== null) || every(map(that.value, function (child) {
              return !(child.semanticId !== null) || referenceKeyValuesEqual(child.semanticId, that.semanticIdListElement);
            }))) {
              _context10.next = 39;
              break;
            }
            _context10.next = 39;
            return new VerificationError("Constraint AASd-107: If a first level child element has " + "a semantic ID it shall be identical to semantic ID list " + "element.");
          case 39:
            if (!(that.value !== null) || submodelElementsHaveIdenticalSemanticIds(that.value)) {
              _context10.next = 42;
              break;
            }
            _context10.next = 42;
            return new VerificationError("Constraint AASd-114: If two first level child elements have " + "a semantic ID then they shall be identical.");
          case 42:
            if (!(that.value !== null) || every(map(that.value, function (element) {
              return submodelElementIsOfType(element, that.typeValueListElement);
            }))) {
              _context10.next = 45;
              break;
            }
            _context10.next = 45;
            return new VerificationError("Constraint AASd-108: All first level child elements shall " + "have the same submodel element type as specified in type " + "value list element.");
          case 45:
            if (!(that.value !== null && (that.typeValueListElement == AasSubmodelElements.Property || that.typeValueListElement == AasSubmodelElements.Range)) || that.valueTypeListElement !== null && propertiesOrRangesHaveValueType(that.value, that.valueTypeListElement)) {
              _context10.next = 48;
              break;
            }
            _context10.next = 48;
            return new VerificationError("Constraint AASd-109: If type value list element is equal to " + "Property or Range value type list element shall be set and " + "all first level child elements shall have the value type as " + "specified in value type list element.");
          case 48:
            if (!(that.value !== null) || every(map(that.value, function (element) {
              return element.idShort === null;
            }))) {
              _context10.next = 51;
              break;
            }
            _context10.next = 51;
            return new VerificationError("Constraint AASd-120: ID-short of submodel elements being " + "a direct child of a  Submodel element list shall not be " + "specified.");
          case 51:
            if (!(that.category !== null)) {
              _context10.next = 70;
              break;
            }
            _iterator103 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context10.prev = 53;
            _iterator103.s();
          case 55:
            if ((_step103 = _iterator103.n()).done) {
              _context10.next = 62;
              break;
            }
            error = _step103.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context10.next = 60;
            return error;
          case 60:
            _context10.next = 55;
            break;
          case 62:
            _context10.next = 67;
            break;
          case 64:
            _context10.prev = 64;
            _context10.t0 = _context10["catch"](53);
            _iterator103.e(_context10.t0);
          case 67:
            _context10.prev = 67;
            _iterator103.f();
            return _context10.finish(67);
          case 70:
            if (!(that.idShort !== null)) {
              _context10.next = 89;
              break;
            }
            _iterator104 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context10.prev = 72;
            _iterator104.s();
          case 74:
            if ((_step104 = _iterator104.n()).done) {
              _context10.next = 81;
              break;
            }
            _error52 = _step104.value;
            _error52.path.prepend(new PropertySegment(that, "idShort"));
            _context10.next = 79;
            return _error52;
          case 79:
            _context10.next = 74;
            break;
          case 81:
            _context10.next = 86;
            break;
          case 83:
            _context10.prev = 83;
            _context10.t1 = _context10["catch"](72);
            _iterator104.e(_context10.t1);
          case 86:
            _context10.prev = 86;
            _iterator104.f();
            return _context10.finish(86);
          case 89:
            if (!(context === true)) {
              _context10.next = 387;
              break;
            }
            if (!(that.extensions !== null)) {
              _context10.next = 127;
              break;
            }
            extensionsIndex = 0;
            _iterator105 = _createForOfIteratorHelper(that.extensions);
            _context10.prev = 93;
            _iterator105.s();
          case 95:
            if ((_step105 = _iterator105.n()).done) {
              _context10.next = 119;
              break;
            }
            item = _step105.value;
            _iterator106 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context10.prev = 98;
            _iterator106.s();
          case 100:
            if ((_step106 = _iterator106.n()).done) {
              _context10.next = 108;
              break;
            }
            _error53 = _step106.value;
            _error53.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error53.path.prepend(new PropertySegment(that, "extensions"));
            _context10.next = 106;
            return _error53;
          case 106:
            _context10.next = 100;
            break;
          case 108:
            _context10.next = 113;
            break;
          case 110:
            _context10.prev = 110;
            _context10.t2 = _context10["catch"](98);
            _iterator106.e(_context10.t2);
          case 113:
            _context10.prev = 113;
            _iterator106.f();
            return _context10.finish(113);
          case 116:
            extensionsIndex++;
          case 117:
            _context10.next = 95;
            break;
          case 119:
            _context10.next = 124;
            break;
          case 121:
            _context10.prev = 121;
            _context10.t3 = _context10["catch"](93);
            _iterator105.e(_context10.t3);
          case 124:
            _context10.prev = 124;
            _iterator105.f();
            return _context10.finish(124);
          case 127:
            if (!(that.displayName !== null)) {
              _context10.next = 164;
              break;
            }
            displayNameIndex = 0;
            _iterator107 = _createForOfIteratorHelper(that.displayName);
            _context10.prev = 130;
            _iterator107.s();
          case 132:
            if ((_step107 = _iterator107.n()).done) {
              _context10.next = 156;
              break;
            }
            _item17 = _step107.value;
            _iterator108 = _createForOfIteratorHelper(this.transformWithContext(_item17, context));
            _context10.prev = 135;
            _iterator108.s();
          case 137:
            if ((_step108 = _iterator108.n()).done) {
              _context10.next = 145;
              break;
            }
            _error54 = _step108.value;
            _error54.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error54.path.prepend(new PropertySegment(that, "displayName"));
            _context10.next = 143;
            return _error54;
          case 143:
            _context10.next = 137;
            break;
          case 145:
            _context10.next = 150;
            break;
          case 147:
            _context10.prev = 147;
            _context10.t4 = _context10["catch"](135);
            _iterator108.e(_context10.t4);
          case 150:
            _context10.prev = 150;
            _iterator108.f();
            return _context10.finish(150);
          case 153:
            displayNameIndex++;
          case 154:
            _context10.next = 132;
            break;
          case 156:
            _context10.next = 161;
            break;
          case 158:
            _context10.prev = 158;
            _context10.t5 = _context10["catch"](130);
            _iterator107.e(_context10.t5);
          case 161:
            _context10.prev = 161;
            _iterator107.f();
            return _context10.finish(161);
          case 164:
            if (!(that.description !== null)) {
              _context10.next = 201;
              break;
            }
            descriptionIndex = 0;
            _iterator109 = _createForOfIteratorHelper(that.description);
            _context10.prev = 167;
            _iterator109.s();
          case 169:
            if ((_step109 = _iterator109.n()).done) {
              _context10.next = 193;
              break;
            }
            _item18 = _step109.value;
            _iterator110 = _createForOfIteratorHelper(this.transformWithContext(_item18, context));
            _context10.prev = 172;
            _iterator110.s();
          case 174:
            if ((_step110 = _iterator110.n()).done) {
              _context10.next = 182;
              break;
            }
            _error55 = _step110.value;
            _error55.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error55.path.prepend(new PropertySegment(that, "description"));
            _context10.next = 180;
            return _error55;
          case 180:
            _context10.next = 174;
            break;
          case 182:
            _context10.next = 187;
            break;
          case 184:
            _context10.prev = 184;
            _context10.t6 = _context10["catch"](172);
            _iterator110.e(_context10.t6);
          case 187:
            _context10.prev = 187;
            _iterator110.f();
            return _context10.finish(187);
          case 190:
            descriptionIndex++;
          case 191:
            _context10.next = 169;
            break;
          case 193:
            _context10.next = 198;
            break;
          case 195:
            _context10.prev = 195;
            _context10.t7 = _context10["catch"](167);
            _iterator109.e(_context10.t7);
          case 198:
            _context10.prev = 198;
            _iterator109.f();
            return _context10.finish(198);
          case 201:
            if (!(that.semanticId !== null)) {
              _context10.next = 220;
              break;
            }
            _iterator111 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context10.prev = 203;
            _iterator111.s();
          case 205:
            if ((_step111 = _iterator111.n()).done) {
              _context10.next = 212;
              break;
            }
            _error56 = _step111.value;
            _error56.path.prepend(new PropertySegment(that, "semanticId"));
            _context10.next = 210;
            return _error56;
          case 210:
            _context10.next = 205;
            break;
          case 212:
            _context10.next = 217;
            break;
          case 214:
            _context10.prev = 214;
            _context10.t8 = _context10["catch"](203);
            _iterator111.e(_context10.t8);
          case 217:
            _context10.prev = 217;
            _iterator111.f();
            return _context10.finish(217);
          case 220:
            if (!(that.supplementalSemanticIds !== null)) {
              _context10.next = 257;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator112 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context10.prev = 223;
            _iterator112.s();
          case 225:
            if ((_step112 = _iterator112.n()).done) {
              _context10.next = 249;
              break;
            }
            _item19 = _step112.value;
            _iterator113 = _createForOfIteratorHelper(this.transformWithContext(_item19, context));
            _context10.prev = 228;
            _iterator113.s();
          case 230:
            if ((_step113 = _iterator113.n()).done) {
              _context10.next = 238;
              break;
            }
            _error57 = _step113.value;
            _error57.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error57.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context10.next = 236;
            return _error57;
          case 236:
            _context10.next = 230;
            break;
          case 238:
            _context10.next = 243;
            break;
          case 240:
            _context10.prev = 240;
            _context10.t9 = _context10["catch"](228);
            _iterator113.e(_context10.t9);
          case 243:
            _context10.prev = 243;
            _iterator113.f();
            return _context10.finish(243);
          case 246:
            supplementalSemanticIdsIndex++;
          case 247:
            _context10.next = 225;
            break;
          case 249:
            _context10.next = 254;
            break;
          case 251:
            _context10.prev = 251;
            _context10.t10 = _context10["catch"](223);
            _iterator112.e(_context10.t10);
          case 254:
            _context10.prev = 254;
            _iterator112.f();
            return _context10.finish(254);
          case 257:
            if (!(that.qualifiers !== null)) {
              _context10.next = 294;
              break;
            }
            qualifiersIndex = 0;
            _iterator114 = _createForOfIteratorHelper(that.qualifiers);
            _context10.prev = 260;
            _iterator114.s();
          case 262:
            if ((_step114 = _iterator114.n()).done) {
              _context10.next = 286;
              break;
            }
            _item20 = _step114.value;
            _iterator115 = _createForOfIteratorHelper(this.transformWithContext(_item20, context));
            _context10.prev = 265;
            _iterator115.s();
          case 267:
            if ((_step115 = _iterator115.n()).done) {
              _context10.next = 275;
              break;
            }
            _error58 = _step115.value;
            _error58.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error58.path.prepend(new PropertySegment(that, "qualifiers"));
            _context10.next = 273;
            return _error58;
          case 273:
            _context10.next = 267;
            break;
          case 275:
            _context10.next = 280;
            break;
          case 277:
            _context10.prev = 277;
            _context10.t11 = _context10["catch"](265);
            _iterator115.e(_context10.t11);
          case 280:
            _context10.prev = 280;
            _iterator115.f();
            return _context10.finish(280);
          case 283:
            qualifiersIndex++;
          case 284:
            _context10.next = 262;
            break;
          case 286:
            _context10.next = 291;
            break;
          case 288:
            _context10.prev = 288;
            _context10.t12 = _context10["catch"](260);
            _iterator114.e(_context10.t12);
          case 291:
            _context10.prev = 291;
            _iterator114.f();
            return _context10.finish(291);
          case 294:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context10.next = 331;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator116 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context10.prev = 297;
            _iterator116.s();
          case 299:
            if ((_step116 = _iterator116.n()).done) {
              _context10.next = 323;
              break;
            }
            _item21 = _step116.value;
            _iterator117 = _createForOfIteratorHelper(this.transformWithContext(_item21, context));
            _context10.prev = 302;
            _iterator117.s();
          case 304:
            if ((_step117 = _iterator117.n()).done) {
              _context10.next = 312;
              break;
            }
            _error59 = _step117.value;
            _error59.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error59.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context10.next = 310;
            return _error59;
          case 310:
            _context10.next = 304;
            break;
          case 312:
            _context10.next = 317;
            break;
          case 314:
            _context10.prev = 314;
            _context10.t13 = _context10["catch"](302);
            _iterator117.e(_context10.t13);
          case 317:
            _context10.prev = 317;
            _iterator117.f();
            return _context10.finish(317);
          case 320:
            embeddedDataSpecificationsIndex++;
          case 321:
            _context10.next = 299;
            break;
          case 323:
            _context10.next = 328;
            break;
          case 325:
            _context10.prev = 325;
            _context10.t14 = _context10["catch"](297);
            _iterator116.e(_context10.t14);
          case 328:
            _context10.prev = 328;
            _iterator116.f();
            return _context10.finish(328);
          case 331:
            if (!(that.semanticIdListElement !== null)) {
              _context10.next = 350;
              break;
            }
            _iterator118 = _createForOfIteratorHelper(this.transformWithContext(that.semanticIdListElement, context));
            _context10.prev = 333;
            _iterator118.s();
          case 335:
            if ((_step118 = _iterator118.n()).done) {
              _context10.next = 342;
              break;
            }
            _error60 = _step118.value;
            _error60.path.prepend(new PropertySegment(that, "semanticIdListElement"));
            _context10.next = 340;
            return _error60;
          case 340:
            _context10.next = 335;
            break;
          case 342:
            _context10.next = 347;
            break;
          case 344:
            _context10.prev = 344;
            _context10.t15 = _context10["catch"](333);
            _iterator118.e(_context10.t15);
          case 347:
            _context10.prev = 347;
            _iterator118.f();
            return _context10.finish(347);
          case 350:
            if (!(that.value !== null)) {
              _context10.next = 387;
              break;
            }
            valueIndex = 0;
            _iterator119 = _createForOfIteratorHelper(that.value);
            _context10.prev = 353;
            _iterator119.s();
          case 355:
            if ((_step119 = _iterator119.n()).done) {
              _context10.next = 379;
              break;
            }
            _item22 = _step119.value;
            _iterator120 = _createForOfIteratorHelper(this.transformWithContext(_item22, context));
            _context10.prev = 358;
            _iterator120.s();
          case 360:
            if ((_step120 = _iterator120.n()).done) {
              _context10.next = 368;
              break;
            }
            _error61 = _step120.value;
            _error61.path.prepend(new IndexSegment(that.value, valueIndex));
            _error61.path.prepend(new PropertySegment(that, "value"));
            _context10.next = 366;
            return _error61;
          case 366:
            _context10.next = 360;
            break;
          case 368:
            _context10.next = 373;
            break;
          case 370:
            _context10.prev = 370;
            _context10.t16 = _context10["catch"](358);
            _iterator120.e(_context10.t16);
          case 373:
            _context10.prev = 373;
            _iterator120.f();
            return _context10.finish(373);
          case 376:
            valueIndex++;
          case 377:
            _context10.next = 355;
            break;
          case 379:
            _context10.next = 384;
            break;
          case 381:
            _context10.prev = 381;
            _context10.t17 = _context10["catch"](353);
            _iterator119.e(_context10.t17);
          case 384:
            _context10.prev = 384;
            _iterator119.f();
            return _context10.finish(384);
          case 387:
          case "end":
            return _context10.stop();
        }
      }, transformSubmodelElementListWithContext, this, [[53, 64, 67, 70], [72, 83, 86, 89], [93, 121, 124, 127], [98, 110, 113, 116], [130, 158, 161, 164], [135, 147, 150, 153], [167, 195, 198, 201], [172, 184, 187, 190], [203, 214, 217, 220], [223, 251, 254, 257], [228, 240, 243, 246], [260, 288, 291, 294], [265, 277, 280, 283], [297, 325, 328, 331], [302, 314, 317, 320], [333, 344, 347, 350], [353, 381, 384, 387], [358, 370, 373, 376]]);
    })
  }, {
    key: "transformSubmodelElementCollectionWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformSubmodelElementCollectionWithContext(that, context) {
      var _iterator121, _step121, error, _iterator122, _step122, _error62, extensionsIndex, _iterator123, _step123, item, _iterator124, _step124, _error63, displayNameIndex, _iterator125, _step125, _item23, _iterator126, _step126, _error64, descriptionIndex, _iterator127, _step127, _item24, _iterator128, _step128, _error65, _iterator129, _step129, _error66, supplementalSemanticIdsIndex, _iterator130, _step130, _item25, _iterator131, _step131, _error67, qualifiersIndex, _iterator132, _step132, _item26, _iterator133, _step133, _error68, embeddedDataSpecificationsIndex, _iterator134, _step134, _item27, _iterator135, _step135, _error69, valueIndex, _iterator136, _step136, _item28, _iterator137, _step137, _error70;
      return _regeneratorRuntime().wrap(function transformSubmodelElementCollectionWithContext$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context11.next = 3;
              break;
            }
            _context11.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context11.next = 6;
              break;
            }
            _context11.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context11.next = 9;
              break;
            }
            _context11.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context11.next = 12;
              break;
            }
            _context11.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context11.next = 15;
              break;
            }
            _context11.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context11.next = 18;
              break;
            }
            _context11.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context11.next = 21;
              break;
            }
            _context11.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context11.next = 24;
              break;
            }
            _context11.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context11.next = 27;
              break;
            }
            _context11.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context11.next = 30;
              break;
            }
            _context11.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context11.next = 33;
              break;
            }
            _context11.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.value !== null) || that.value.length >= 1) {
              _context11.next = 36;
              break;
            }
            _context11.next = 36;
            return new VerificationError("Value must be either not set or have at least one item.");
          case 36:
            if (!(that.value !== null) || every(map(that.value, function (item) {
              return item.idShort !== null;
            }))) {
              _context11.next = 39;
              break;
            }
            _context11.next = 39;
            return new VerificationError("ID-shorts need to be defined for all the items of value " + "according to AASd-117 (ID-short of Referables not being " + "a direct child of a Submodel element list shall be " + "specified).");
          case 39:
            if (!(that.value !== null) || idShortsAreUnique(that.value)) {
              _context11.next = 42;
              break;
            }
            _context11.next = 42;
            return new VerificationError("ID-shorts of the value must be unique.");
          case 42:
            if (!(that.category !== null)) {
              _context11.next = 61;
              break;
            }
            _iterator121 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context11.prev = 44;
            _iterator121.s();
          case 46:
            if ((_step121 = _iterator121.n()).done) {
              _context11.next = 53;
              break;
            }
            error = _step121.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context11.next = 51;
            return error;
          case 51:
            _context11.next = 46;
            break;
          case 53:
            _context11.next = 58;
            break;
          case 55:
            _context11.prev = 55;
            _context11.t0 = _context11["catch"](44);
            _iterator121.e(_context11.t0);
          case 58:
            _context11.prev = 58;
            _iterator121.f();
            return _context11.finish(58);
          case 61:
            if (!(that.idShort !== null)) {
              _context11.next = 80;
              break;
            }
            _iterator122 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context11.prev = 63;
            _iterator122.s();
          case 65:
            if ((_step122 = _iterator122.n()).done) {
              _context11.next = 72;
              break;
            }
            _error62 = _step122.value;
            _error62.path.prepend(new PropertySegment(that, "idShort"));
            _context11.next = 70;
            return _error62;
          case 70:
            _context11.next = 65;
            break;
          case 72:
            _context11.next = 77;
            break;
          case 74:
            _context11.prev = 74;
            _context11.t1 = _context11["catch"](63);
            _iterator122.e(_context11.t1);
          case 77:
            _context11.prev = 77;
            _iterator122.f();
            return _context11.finish(77);
          case 80:
            if (!(context === true)) {
              _context11.next = 359;
              break;
            }
            if (!(that.extensions !== null)) {
              _context11.next = 118;
              break;
            }
            extensionsIndex = 0;
            _iterator123 = _createForOfIteratorHelper(that.extensions);
            _context11.prev = 84;
            _iterator123.s();
          case 86:
            if ((_step123 = _iterator123.n()).done) {
              _context11.next = 110;
              break;
            }
            item = _step123.value;
            _iterator124 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context11.prev = 89;
            _iterator124.s();
          case 91:
            if ((_step124 = _iterator124.n()).done) {
              _context11.next = 99;
              break;
            }
            _error63 = _step124.value;
            _error63.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error63.path.prepend(new PropertySegment(that, "extensions"));
            _context11.next = 97;
            return _error63;
          case 97:
            _context11.next = 91;
            break;
          case 99:
            _context11.next = 104;
            break;
          case 101:
            _context11.prev = 101;
            _context11.t2 = _context11["catch"](89);
            _iterator124.e(_context11.t2);
          case 104:
            _context11.prev = 104;
            _iterator124.f();
            return _context11.finish(104);
          case 107:
            extensionsIndex++;
          case 108:
            _context11.next = 86;
            break;
          case 110:
            _context11.next = 115;
            break;
          case 112:
            _context11.prev = 112;
            _context11.t3 = _context11["catch"](84);
            _iterator123.e(_context11.t3);
          case 115:
            _context11.prev = 115;
            _iterator123.f();
            return _context11.finish(115);
          case 118:
            if (!(that.displayName !== null)) {
              _context11.next = 155;
              break;
            }
            displayNameIndex = 0;
            _iterator125 = _createForOfIteratorHelper(that.displayName);
            _context11.prev = 121;
            _iterator125.s();
          case 123:
            if ((_step125 = _iterator125.n()).done) {
              _context11.next = 147;
              break;
            }
            _item23 = _step125.value;
            _iterator126 = _createForOfIteratorHelper(this.transformWithContext(_item23, context));
            _context11.prev = 126;
            _iterator126.s();
          case 128:
            if ((_step126 = _iterator126.n()).done) {
              _context11.next = 136;
              break;
            }
            _error64 = _step126.value;
            _error64.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error64.path.prepend(new PropertySegment(that, "displayName"));
            _context11.next = 134;
            return _error64;
          case 134:
            _context11.next = 128;
            break;
          case 136:
            _context11.next = 141;
            break;
          case 138:
            _context11.prev = 138;
            _context11.t4 = _context11["catch"](126);
            _iterator126.e(_context11.t4);
          case 141:
            _context11.prev = 141;
            _iterator126.f();
            return _context11.finish(141);
          case 144:
            displayNameIndex++;
          case 145:
            _context11.next = 123;
            break;
          case 147:
            _context11.next = 152;
            break;
          case 149:
            _context11.prev = 149;
            _context11.t5 = _context11["catch"](121);
            _iterator125.e(_context11.t5);
          case 152:
            _context11.prev = 152;
            _iterator125.f();
            return _context11.finish(152);
          case 155:
            if (!(that.description !== null)) {
              _context11.next = 192;
              break;
            }
            descriptionIndex = 0;
            _iterator127 = _createForOfIteratorHelper(that.description);
            _context11.prev = 158;
            _iterator127.s();
          case 160:
            if ((_step127 = _iterator127.n()).done) {
              _context11.next = 184;
              break;
            }
            _item24 = _step127.value;
            _iterator128 = _createForOfIteratorHelper(this.transformWithContext(_item24, context));
            _context11.prev = 163;
            _iterator128.s();
          case 165:
            if ((_step128 = _iterator128.n()).done) {
              _context11.next = 173;
              break;
            }
            _error65 = _step128.value;
            _error65.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error65.path.prepend(new PropertySegment(that, "description"));
            _context11.next = 171;
            return _error65;
          case 171:
            _context11.next = 165;
            break;
          case 173:
            _context11.next = 178;
            break;
          case 175:
            _context11.prev = 175;
            _context11.t6 = _context11["catch"](163);
            _iterator128.e(_context11.t6);
          case 178:
            _context11.prev = 178;
            _iterator128.f();
            return _context11.finish(178);
          case 181:
            descriptionIndex++;
          case 182:
            _context11.next = 160;
            break;
          case 184:
            _context11.next = 189;
            break;
          case 186:
            _context11.prev = 186;
            _context11.t7 = _context11["catch"](158);
            _iterator127.e(_context11.t7);
          case 189:
            _context11.prev = 189;
            _iterator127.f();
            return _context11.finish(189);
          case 192:
            if (!(that.semanticId !== null)) {
              _context11.next = 211;
              break;
            }
            _iterator129 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context11.prev = 194;
            _iterator129.s();
          case 196:
            if ((_step129 = _iterator129.n()).done) {
              _context11.next = 203;
              break;
            }
            _error66 = _step129.value;
            _error66.path.prepend(new PropertySegment(that, "semanticId"));
            _context11.next = 201;
            return _error66;
          case 201:
            _context11.next = 196;
            break;
          case 203:
            _context11.next = 208;
            break;
          case 205:
            _context11.prev = 205;
            _context11.t8 = _context11["catch"](194);
            _iterator129.e(_context11.t8);
          case 208:
            _context11.prev = 208;
            _iterator129.f();
            return _context11.finish(208);
          case 211:
            if (!(that.supplementalSemanticIds !== null)) {
              _context11.next = 248;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator130 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context11.prev = 214;
            _iterator130.s();
          case 216:
            if ((_step130 = _iterator130.n()).done) {
              _context11.next = 240;
              break;
            }
            _item25 = _step130.value;
            _iterator131 = _createForOfIteratorHelper(this.transformWithContext(_item25, context));
            _context11.prev = 219;
            _iterator131.s();
          case 221:
            if ((_step131 = _iterator131.n()).done) {
              _context11.next = 229;
              break;
            }
            _error67 = _step131.value;
            _error67.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error67.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context11.next = 227;
            return _error67;
          case 227:
            _context11.next = 221;
            break;
          case 229:
            _context11.next = 234;
            break;
          case 231:
            _context11.prev = 231;
            _context11.t9 = _context11["catch"](219);
            _iterator131.e(_context11.t9);
          case 234:
            _context11.prev = 234;
            _iterator131.f();
            return _context11.finish(234);
          case 237:
            supplementalSemanticIdsIndex++;
          case 238:
            _context11.next = 216;
            break;
          case 240:
            _context11.next = 245;
            break;
          case 242:
            _context11.prev = 242;
            _context11.t10 = _context11["catch"](214);
            _iterator130.e(_context11.t10);
          case 245:
            _context11.prev = 245;
            _iterator130.f();
            return _context11.finish(245);
          case 248:
            if (!(that.qualifiers !== null)) {
              _context11.next = 285;
              break;
            }
            qualifiersIndex = 0;
            _iterator132 = _createForOfIteratorHelper(that.qualifiers);
            _context11.prev = 251;
            _iterator132.s();
          case 253:
            if ((_step132 = _iterator132.n()).done) {
              _context11.next = 277;
              break;
            }
            _item26 = _step132.value;
            _iterator133 = _createForOfIteratorHelper(this.transformWithContext(_item26, context));
            _context11.prev = 256;
            _iterator133.s();
          case 258:
            if ((_step133 = _iterator133.n()).done) {
              _context11.next = 266;
              break;
            }
            _error68 = _step133.value;
            _error68.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error68.path.prepend(new PropertySegment(that, "qualifiers"));
            _context11.next = 264;
            return _error68;
          case 264:
            _context11.next = 258;
            break;
          case 266:
            _context11.next = 271;
            break;
          case 268:
            _context11.prev = 268;
            _context11.t11 = _context11["catch"](256);
            _iterator133.e(_context11.t11);
          case 271:
            _context11.prev = 271;
            _iterator133.f();
            return _context11.finish(271);
          case 274:
            qualifiersIndex++;
          case 275:
            _context11.next = 253;
            break;
          case 277:
            _context11.next = 282;
            break;
          case 279:
            _context11.prev = 279;
            _context11.t12 = _context11["catch"](251);
            _iterator132.e(_context11.t12);
          case 282:
            _context11.prev = 282;
            _iterator132.f();
            return _context11.finish(282);
          case 285:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context11.next = 322;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator134 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context11.prev = 288;
            _iterator134.s();
          case 290:
            if ((_step134 = _iterator134.n()).done) {
              _context11.next = 314;
              break;
            }
            _item27 = _step134.value;
            _iterator135 = _createForOfIteratorHelper(this.transformWithContext(_item27, context));
            _context11.prev = 293;
            _iterator135.s();
          case 295:
            if ((_step135 = _iterator135.n()).done) {
              _context11.next = 303;
              break;
            }
            _error69 = _step135.value;
            _error69.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error69.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context11.next = 301;
            return _error69;
          case 301:
            _context11.next = 295;
            break;
          case 303:
            _context11.next = 308;
            break;
          case 305:
            _context11.prev = 305;
            _context11.t13 = _context11["catch"](293);
            _iterator135.e(_context11.t13);
          case 308:
            _context11.prev = 308;
            _iterator135.f();
            return _context11.finish(308);
          case 311:
            embeddedDataSpecificationsIndex++;
          case 312:
            _context11.next = 290;
            break;
          case 314:
            _context11.next = 319;
            break;
          case 316:
            _context11.prev = 316;
            _context11.t14 = _context11["catch"](288);
            _iterator134.e(_context11.t14);
          case 319:
            _context11.prev = 319;
            _iterator134.f();
            return _context11.finish(319);
          case 322:
            if (!(that.value !== null)) {
              _context11.next = 359;
              break;
            }
            valueIndex = 0;
            _iterator136 = _createForOfIteratorHelper(that.value);
            _context11.prev = 325;
            _iterator136.s();
          case 327:
            if ((_step136 = _iterator136.n()).done) {
              _context11.next = 351;
              break;
            }
            _item28 = _step136.value;
            _iterator137 = _createForOfIteratorHelper(this.transformWithContext(_item28, context));
            _context11.prev = 330;
            _iterator137.s();
          case 332:
            if ((_step137 = _iterator137.n()).done) {
              _context11.next = 340;
              break;
            }
            _error70 = _step137.value;
            _error70.path.prepend(new IndexSegment(that.value, valueIndex));
            _error70.path.prepend(new PropertySegment(that, "value"));
            _context11.next = 338;
            return _error70;
          case 338:
            _context11.next = 332;
            break;
          case 340:
            _context11.next = 345;
            break;
          case 342:
            _context11.prev = 342;
            _context11.t15 = _context11["catch"](330);
            _iterator137.e(_context11.t15);
          case 345:
            _context11.prev = 345;
            _iterator137.f();
            return _context11.finish(345);
          case 348:
            valueIndex++;
          case 349:
            _context11.next = 327;
            break;
          case 351:
            _context11.next = 356;
            break;
          case 353:
            _context11.prev = 353;
            _context11.t16 = _context11["catch"](325);
            _iterator136.e(_context11.t16);
          case 356:
            _context11.prev = 356;
            _iterator136.f();
            return _context11.finish(356);
          case 359:
          case "end":
            return _context11.stop();
        }
      }, transformSubmodelElementCollectionWithContext, this, [[44, 55, 58, 61], [63, 74, 77, 80], [84, 112, 115, 118], [89, 101, 104, 107], [121, 149, 152, 155], [126, 138, 141, 144], [158, 186, 189, 192], [163, 175, 178, 181], [194, 205, 208, 211], [214, 242, 245, 248], [219, 231, 234, 237], [251, 279, 282, 285], [256, 268, 271, 274], [288, 316, 319, 322], [293, 305, 308, 311], [325, 353, 356, 359], [330, 342, 345, 348]]);
    })
  }, {
    key: "transformPropertyWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformPropertyWithContext(that, context) {
      var _iterator138, _step138, error, _iterator139, _step139, _error71, _iterator140, _step140, _error72, extensionsIndex, _iterator141, _step141, item, _iterator142, _step142, _error73, displayNameIndex, _iterator143, _step143, _item29, _iterator144, _step144, _error74, descriptionIndex, _iterator145, _step145, _item30, _iterator146, _step146, _error75, _iterator147, _step147, _error76, supplementalSemanticIdsIndex, _iterator148, _step148, _item31, _iterator149, _step149, _error77, qualifiersIndex, _iterator150, _step150, _item32, _iterator151, _step151, _error78, embeddedDataSpecificationsIndex, _iterator152, _step152, _item33, _iterator153, _step153, _error79, _iterator154, _step154, _error80;
      return _regeneratorRuntime().wrap(function transformPropertyWithContext$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context12.next = 3;
              break;
            }
            _context12.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context12.next = 6;
              break;
            }
            _context12.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context12.next = 9;
              break;
            }
            _context12.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context12.next = 12;
              break;
            }
            _context12.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context12.next = 15;
              break;
            }
            _context12.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context12.next = 18;
              break;
            }
            _context12.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context12.next = 21;
              break;
            }
            _context12.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context12.next = 24;
              break;
            }
            _context12.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context12.next = 27;
              break;
            }
            _context12.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context12.next = 30;
              break;
            }
            _context12.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context12.next = 33;
              break;
            }
            _context12.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context12.next = 36;
              break;
            }
            _context12.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.value !== null) || valueConsistentWithXsdType(that.value, that.valueType)) {
              _context12.next = 39;
              break;
            }
            _context12.next = 39;
            return new VerificationError("Value must be consistent with the value type.");
          case 39:
            if (!(that.category !== null)) {
              _context12.next = 58;
              break;
            }
            _iterator138 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context12.prev = 41;
            _iterator138.s();
          case 43:
            if ((_step138 = _iterator138.n()).done) {
              _context12.next = 50;
              break;
            }
            error = _step138.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context12.next = 48;
            return error;
          case 48:
            _context12.next = 43;
            break;
          case 50:
            _context12.next = 55;
            break;
          case 52:
            _context12.prev = 52;
            _context12.t0 = _context12["catch"](41);
            _iterator138.e(_context12.t0);
          case 55:
            _context12.prev = 55;
            _iterator138.f();
            return _context12.finish(55);
          case 58:
            if (!(that.idShort !== null)) {
              _context12.next = 77;
              break;
            }
            _iterator139 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context12.prev = 60;
            _iterator139.s();
          case 62:
            if ((_step139 = _iterator139.n()).done) {
              _context12.next = 69;
              break;
            }
            _error71 = _step139.value;
            _error71.path.prepend(new PropertySegment(that, "idShort"));
            _context12.next = 67;
            return _error71;
          case 67:
            _context12.next = 62;
            break;
          case 69:
            _context12.next = 74;
            break;
          case 71:
            _context12.prev = 71;
            _context12.t1 = _context12["catch"](60);
            _iterator139.e(_context12.t1);
          case 74:
            _context12.prev = 74;
            _iterator139.f();
            return _context12.finish(74);
          case 77:
            if (!(that.value !== null)) {
              _context12.next = 96;
              break;
            }
            _iterator140 = _createForOfIteratorHelper(verifyValueDataType(that.value));
            _context12.prev = 79;
            _iterator140.s();
          case 81:
            if ((_step140 = _iterator140.n()).done) {
              _context12.next = 88;
              break;
            }
            _error72 = _step140.value;
            _error72.path.prepend(new PropertySegment(that, "value"));
            _context12.next = 86;
            return _error72;
          case 86:
            _context12.next = 81;
            break;
          case 88:
            _context12.next = 93;
            break;
          case 90:
            _context12.prev = 90;
            _context12.t2 = _context12["catch"](79);
            _iterator140.e(_context12.t2);
          case 93:
            _context12.prev = 93;
            _iterator140.f();
            return _context12.finish(93);
          case 96:
            if (!(context === true)) {
              _context12.next = 357;
              break;
            }
            if (!(that.extensions !== null)) {
              _context12.next = 134;
              break;
            }
            extensionsIndex = 0;
            _iterator141 = _createForOfIteratorHelper(that.extensions);
            _context12.prev = 100;
            _iterator141.s();
          case 102:
            if ((_step141 = _iterator141.n()).done) {
              _context12.next = 126;
              break;
            }
            item = _step141.value;
            _iterator142 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context12.prev = 105;
            _iterator142.s();
          case 107:
            if ((_step142 = _iterator142.n()).done) {
              _context12.next = 115;
              break;
            }
            _error73 = _step142.value;
            _error73.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error73.path.prepend(new PropertySegment(that, "extensions"));
            _context12.next = 113;
            return _error73;
          case 113:
            _context12.next = 107;
            break;
          case 115:
            _context12.next = 120;
            break;
          case 117:
            _context12.prev = 117;
            _context12.t3 = _context12["catch"](105);
            _iterator142.e(_context12.t3);
          case 120:
            _context12.prev = 120;
            _iterator142.f();
            return _context12.finish(120);
          case 123:
            extensionsIndex++;
          case 124:
            _context12.next = 102;
            break;
          case 126:
            _context12.next = 131;
            break;
          case 128:
            _context12.prev = 128;
            _context12.t4 = _context12["catch"](100);
            _iterator141.e(_context12.t4);
          case 131:
            _context12.prev = 131;
            _iterator141.f();
            return _context12.finish(131);
          case 134:
            if (!(that.displayName !== null)) {
              _context12.next = 171;
              break;
            }
            displayNameIndex = 0;
            _iterator143 = _createForOfIteratorHelper(that.displayName);
            _context12.prev = 137;
            _iterator143.s();
          case 139:
            if ((_step143 = _iterator143.n()).done) {
              _context12.next = 163;
              break;
            }
            _item29 = _step143.value;
            _iterator144 = _createForOfIteratorHelper(this.transformWithContext(_item29, context));
            _context12.prev = 142;
            _iterator144.s();
          case 144:
            if ((_step144 = _iterator144.n()).done) {
              _context12.next = 152;
              break;
            }
            _error74 = _step144.value;
            _error74.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error74.path.prepend(new PropertySegment(that, "displayName"));
            _context12.next = 150;
            return _error74;
          case 150:
            _context12.next = 144;
            break;
          case 152:
            _context12.next = 157;
            break;
          case 154:
            _context12.prev = 154;
            _context12.t5 = _context12["catch"](142);
            _iterator144.e(_context12.t5);
          case 157:
            _context12.prev = 157;
            _iterator144.f();
            return _context12.finish(157);
          case 160:
            displayNameIndex++;
          case 161:
            _context12.next = 139;
            break;
          case 163:
            _context12.next = 168;
            break;
          case 165:
            _context12.prev = 165;
            _context12.t6 = _context12["catch"](137);
            _iterator143.e(_context12.t6);
          case 168:
            _context12.prev = 168;
            _iterator143.f();
            return _context12.finish(168);
          case 171:
            if (!(that.description !== null)) {
              _context12.next = 208;
              break;
            }
            descriptionIndex = 0;
            _iterator145 = _createForOfIteratorHelper(that.description);
            _context12.prev = 174;
            _iterator145.s();
          case 176:
            if ((_step145 = _iterator145.n()).done) {
              _context12.next = 200;
              break;
            }
            _item30 = _step145.value;
            _iterator146 = _createForOfIteratorHelper(this.transformWithContext(_item30, context));
            _context12.prev = 179;
            _iterator146.s();
          case 181:
            if ((_step146 = _iterator146.n()).done) {
              _context12.next = 189;
              break;
            }
            _error75 = _step146.value;
            _error75.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error75.path.prepend(new PropertySegment(that, "description"));
            _context12.next = 187;
            return _error75;
          case 187:
            _context12.next = 181;
            break;
          case 189:
            _context12.next = 194;
            break;
          case 191:
            _context12.prev = 191;
            _context12.t7 = _context12["catch"](179);
            _iterator146.e(_context12.t7);
          case 194:
            _context12.prev = 194;
            _iterator146.f();
            return _context12.finish(194);
          case 197:
            descriptionIndex++;
          case 198:
            _context12.next = 176;
            break;
          case 200:
            _context12.next = 205;
            break;
          case 202:
            _context12.prev = 202;
            _context12.t8 = _context12["catch"](174);
            _iterator145.e(_context12.t8);
          case 205:
            _context12.prev = 205;
            _iterator145.f();
            return _context12.finish(205);
          case 208:
            if (!(that.semanticId !== null)) {
              _context12.next = 227;
              break;
            }
            _iterator147 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context12.prev = 210;
            _iterator147.s();
          case 212:
            if ((_step147 = _iterator147.n()).done) {
              _context12.next = 219;
              break;
            }
            _error76 = _step147.value;
            _error76.path.prepend(new PropertySegment(that, "semanticId"));
            _context12.next = 217;
            return _error76;
          case 217:
            _context12.next = 212;
            break;
          case 219:
            _context12.next = 224;
            break;
          case 221:
            _context12.prev = 221;
            _context12.t9 = _context12["catch"](210);
            _iterator147.e(_context12.t9);
          case 224:
            _context12.prev = 224;
            _iterator147.f();
            return _context12.finish(224);
          case 227:
            if (!(that.supplementalSemanticIds !== null)) {
              _context12.next = 264;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator148 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context12.prev = 230;
            _iterator148.s();
          case 232:
            if ((_step148 = _iterator148.n()).done) {
              _context12.next = 256;
              break;
            }
            _item31 = _step148.value;
            _iterator149 = _createForOfIteratorHelper(this.transformWithContext(_item31, context));
            _context12.prev = 235;
            _iterator149.s();
          case 237:
            if ((_step149 = _iterator149.n()).done) {
              _context12.next = 245;
              break;
            }
            _error77 = _step149.value;
            _error77.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error77.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context12.next = 243;
            return _error77;
          case 243:
            _context12.next = 237;
            break;
          case 245:
            _context12.next = 250;
            break;
          case 247:
            _context12.prev = 247;
            _context12.t10 = _context12["catch"](235);
            _iterator149.e(_context12.t10);
          case 250:
            _context12.prev = 250;
            _iterator149.f();
            return _context12.finish(250);
          case 253:
            supplementalSemanticIdsIndex++;
          case 254:
            _context12.next = 232;
            break;
          case 256:
            _context12.next = 261;
            break;
          case 258:
            _context12.prev = 258;
            _context12.t11 = _context12["catch"](230);
            _iterator148.e(_context12.t11);
          case 261:
            _context12.prev = 261;
            _iterator148.f();
            return _context12.finish(261);
          case 264:
            if (!(that.qualifiers !== null)) {
              _context12.next = 301;
              break;
            }
            qualifiersIndex = 0;
            _iterator150 = _createForOfIteratorHelper(that.qualifiers);
            _context12.prev = 267;
            _iterator150.s();
          case 269:
            if ((_step150 = _iterator150.n()).done) {
              _context12.next = 293;
              break;
            }
            _item32 = _step150.value;
            _iterator151 = _createForOfIteratorHelper(this.transformWithContext(_item32, context));
            _context12.prev = 272;
            _iterator151.s();
          case 274:
            if ((_step151 = _iterator151.n()).done) {
              _context12.next = 282;
              break;
            }
            _error78 = _step151.value;
            _error78.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error78.path.prepend(new PropertySegment(that, "qualifiers"));
            _context12.next = 280;
            return _error78;
          case 280:
            _context12.next = 274;
            break;
          case 282:
            _context12.next = 287;
            break;
          case 284:
            _context12.prev = 284;
            _context12.t12 = _context12["catch"](272);
            _iterator151.e(_context12.t12);
          case 287:
            _context12.prev = 287;
            _iterator151.f();
            return _context12.finish(287);
          case 290:
            qualifiersIndex++;
          case 291:
            _context12.next = 269;
            break;
          case 293:
            _context12.next = 298;
            break;
          case 295:
            _context12.prev = 295;
            _context12.t13 = _context12["catch"](267);
            _iterator150.e(_context12.t13);
          case 298:
            _context12.prev = 298;
            _iterator150.f();
            return _context12.finish(298);
          case 301:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context12.next = 338;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator152 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context12.prev = 304;
            _iterator152.s();
          case 306:
            if ((_step152 = _iterator152.n()).done) {
              _context12.next = 330;
              break;
            }
            _item33 = _step152.value;
            _iterator153 = _createForOfIteratorHelper(this.transformWithContext(_item33, context));
            _context12.prev = 309;
            _iterator153.s();
          case 311:
            if ((_step153 = _iterator153.n()).done) {
              _context12.next = 319;
              break;
            }
            _error79 = _step153.value;
            _error79.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error79.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context12.next = 317;
            return _error79;
          case 317:
            _context12.next = 311;
            break;
          case 319:
            _context12.next = 324;
            break;
          case 321:
            _context12.prev = 321;
            _context12.t14 = _context12["catch"](309);
            _iterator153.e(_context12.t14);
          case 324:
            _context12.prev = 324;
            _iterator153.f();
            return _context12.finish(324);
          case 327:
            embeddedDataSpecificationsIndex++;
          case 328:
            _context12.next = 306;
            break;
          case 330:
            _context12.next = 335;
            break;
          case 332:
            _context12.prev = 332;
            _context12.t15 = _context12["catch"](304);
            _iterator152.e(_context12.t15);
          case 335:
            _context12.prev = 335;
            _iterator152.f();
            return _context12.finish(335);
          case 338:
            if (!(that.valueId !== null)) {
              _context12.next = 357;
              break;
            }
            _iterator154 = _createForOfIteratorHelper(this.transformWithContext(that.valueId, context));
            _context12.prev = 340;
            _iterator154.s();
          case 342:
            if ((_step154 = _iterator154.n()).done) {
              _context12.next = 349;
              break;
            }
            _error80 = _step154.value;
            _error80.path.prepend(new PropertySegment(that, "valueId"));
            _context12.next = 347;
            return _error80;
          case 347:
            _context12.next = 342;
            break;
          case 349:
            _context12.next = 354;
            break;
          case 351:
            _context12.prev = 351;
            _context12.t16 = _context12["catch"](340);
            _iterator154.e(_context12.t16);
          case 354:
            _context12.prev = 354;
            _iterator154.f();
            return _context12.finish(354);
          case 357:
          case "end":
            return _context12.stop();
        }
      }, transformPropertyWithContext, this, [[41, 52, 55, 58], [60, 71, 74, 77], [79, 90, 93, 96], [100, 128, 131, 134], [105, 117, 120, 123], [137, 165, 168, 171], [142, 154, 157, 160], [174, 202, 205, 208], [179, 191, 194, 197], [210, 221, 224, 227], [230, 258, 261, 264], [235, 247, 250, 253], [267, 295, 298, 301], [272, 284, 287, 290], [304, 332, 335, 338], [309, 321, 324, 327], [340, 351, 354, 357]]);
    })
  }, {
    key: "transformMultiLanguagePropertyWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformMultiLanguagePropertyWithContext(that, context) {
      var _iterator155, _step155, error, _iterator156, _step156, _error81, extensionsIndex, _iterator157, _step157, item, _iterator158, _step158, _error82, displayNameIndex, _iterator159, _step159, _item34, _iterator160, _step160, _error83, descriptionIndex, _iterator161, _step161, _item35, _iterator162, _step162, _error84, _iterator163, _step163, _error85, supplementalSemanticIdsIndex, _iterator164, _step164, _item36, _iterator165, _step165, _error86, qualifiersIndex, _iterator166, _step166, _item37, _iterator167, _step167, _error87, embeddedDataSpecificationsIndex, _iterator168, _step168, _item38, _iterator169, _step169, _error88, valueIndex, _iterator170, _step170, _item39, _iterator171, _step171, _error89, _iterator172, _step172, _error90;
      return _regeneratorRuntime().wrap(function transformMultiLanguagePropertyWithContext$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context13.next = 3;
              break;
            }
            _context13.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context13.next = 6;
              break;
            }
            _context13.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context13.next = 9;
              break;
            }
            _context13.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context13.next = 12;
              break;
            }
            _context13.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context13.next = 15;
              break;
            }
            _context13.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context13.next = 18;
              break;
            }
            _context13.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context13.next = 21;
              break;
            }
            _context13.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context13.next = 24;
              break;
            }
            _context13.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context13.next = 27;
              break;
            }
            _context13.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context13.next = 30;
              break;
            }
            _context13.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context13.next = 33;
              break;
            }
            _context13.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context13.next = 36;
              break;
            }
            _context13.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.value !== null) || langStringsHaveUniqueLanguages(that.value)) {
              _context13.next = 39;
              break;
            }
            _context13.next = 39;
            return new VerificationError("Value must specify unique languages.");
          case 39:
            if (!(that.value !== null) || that.value.length >= 1) {
              _context13.next = 42;
              break;
            }
            _context13.next = 42;
            return new VerificationError("Value must be either not set or have at least one item.");
          case 42:
            if (!(that.category !== null)) {
              _context13.next = 61;
              break;
            }
            _iterator155 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context13.prev = 44;
            _iterator155.s();
          case 46:
            if ((_step155 = _iterator155.n()).done) {
              _context13.next = 53;
              break;
            }
            error = _step155.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context13.next = 51;
            return error;
          case 51:
            _context13.next = 46;
            break;
          case 53:
            _context13.next = 58;
            break;
          case 55:
            _context13.prev = 55;
            _context13.t0 = _context13["catch"](44);
            _iterator155.e(_context13.t0);
          case 58:
            _context13.prev = 58;
            _iterator155.f();
            return _context13.finish(58);
          case 61:
            if (!(that.idShort !== null)) {
              _context13.next = 80;
              break;
            }
            _iterator156 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context13.prev = 63;
            _iterator156.s();
          case 65:
            if ((_step156 = _iterator156.n()).done) {
              _context13.next = 72;
              break;
            }
            _error81 = _step156.value;
            _error81.path.prepend(new PropertySegment(that, "idShort"));
            _context13.next = 70;
            return _error81;
          case 70:
            _context13.next = 65;
            break;
          case 72:
            _context13.next = 77;
            break;
          case 74:
            _context13.prev = 74;
            _context13.t1 = _context13["catch"](63);
            _iterator156.e(_context13.t1);
          case 77:
            _context13.prev = 77;
            _iterator156.f();
            return _context13.finish(77);
          case 80:
            if (!(context === true)) {
              _context13.next = 378;
              break;
            }
            if (!(that.extensions !== null)) {
              _context13.next = 118;
              break;
            }
            extensionsIndex = 0;
            _iterator157 = _createForOfIteratorHelper(that.extensions);
            _context13.prev = 84;
            _iterator157.s();
          case 86:
            if ((_step157 = _iterator157.n()).done) {
              _context13.next = 110;
              break;
            }
            item = _step157.value;
            _iterator158 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context13.prev = 89;
            _iterator158.s();
          case 91:
            if ((_step158 = _iterator158.n()).done) {
              _context13.next = 99;
              break;
            }
            _error82 = _step158.value;
            _error82.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error82.path.prepend(new PropertySegment(that, "extensions"));
            _context13.next = 97;
            return _error82;
          case 97:
            _context13.next = 91;
            break;
          case 99:
            _context13.next = 104;
            break;
          case 101:
            _context13.prev = 101;
            _context13.t2 = _context13["catch"](89);
            _iterator158.e(_context13.t2);
          case 104:
            _context13.prev = 104;
            _iterator158.f();
            return _context13.finish(104);
          case 107:
            extensionsIndex++;
          case 108:
            _context13.next = 86;
            break;
          case 110:
            _context13.next = 115;
            break;
          case 112:
            _context13.prev = 112;
            _context13.t3 = _context13["catch"](84);
            _iterator157.e(_context13.t3);
          case 115:
            _context13.prev = 115;
            _iterator157.f();
            return _context13.finish(115);
          case 118:
            if (!(that.displayName !== null)) {
              _context13.next = 155;
              break;
            }
            displayNameIndex = 0;
            _iterator159 = _createForOfIteratorHelper(that.displayName);
            _context13.prev = 121;
            _iterator159.s();
          case 123:
            if ((_step159 = _iterator159.n()).done) {
              _context13.next = 147;
              break;
            }
            _item34 = _step159.value;
            _iterator160 = _createForOfIteratorHelper(this.transformWithContext(_item34, context));
            _context13.prev = 126;
            _iterator160.s();
          case 128:
            if ((_step160 = _iterator160.n()).done) {
              _context13.next = 136;
              break;
            }
            _error83 = _step160.value;
            _error83.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error83.path.prepend(new PropertySegment(that, "displayName"));
            _context13.next = 134;
            return _error83;
          case 134:
            _context13.next = 128;
            break;
          case 136:
            _context13.next = 141;
            break;
          case 138:
            _context13.prev = 138;
            _context13.t4 = _context13["catch"](126);
            _iterator160.e(_context13.t4);
          case 141:
            _context13.prev = 141;
            _iterator160.f();
            return _context13.finish(141);
          case 144:
            displayNameIndex++;
          case 145:
            _context13.next = 123;
            break;
          case 147:
            _context13.next = 152;
            break;
          case 149:
            _context13.prev = 149;
            _context13.t5 = _context13["catch"](121);
            _iterator159.e(_context13.t5);
          case 152:
            _context13.prev = 152;
            _iterator159.f();
            return _context13.finish(152);
          case 155:
            if (!(that.description !== null)) {
              _context13.next = 192;
              break;
            }
            descriptionIndex = 0;
            _iterator161 = _createForOfIteratorHelper(that.description);
            _context13.prev = 158;
            _iterator161.s();
          case 160:
            if ((_step161 = _iterator161.n()).done) {
              _context13.next = 184;
              break;
            }
            _item35 = _step161.value;
            _iterator162 = _createForOfIteratorHelper(this.transformWithContext(_item35, context));
            _context13.prev = 163;
            _iterator162.s();
          case 165:
            if ((_step162 = _iterator162.n()).done) {
              _context13.next = 173;
              break;
            }
            _error84 = _step162.value;
            _error84.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error84.path.prepend(new PropertySegment(that, "description"));
            _context13.next = 171;
            return _error84;
          case 171:
            _context13.next = 165;
            break;
          case 173:
            _context13.next = 178;
            break;
          case 175:
            _context13.prev = 175;
            _context13.t6 = _context13["catch"](163);
            _iterator162.e(_context13.t6);
          case 178:
            _context13.prev = 178;
            _iterator162.f();
            return _context13.finish(178);
          case 181:
            descriptionIndex++;
          case 182:
            _context13.next = 160;
            break;
          case 184:
            _context13.next = 189;
            break;
          case 186:
            _context13.prev = 186;
            _context13.t7 = _context13["catch"](158);
            _iterator161.e(_context13.t7);
          case 189:
            _context13.prev = 189;
            _iterator161.f();
            return _context13.finish(189);
          case 192:
            if (!(that.semanticId !== null)) {
              _context13.next = 211;
              break;
            }
            _iterator163 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context13.prev = 194;
            _iterator163.s();
          case 196:
            if ((_step163 = _iterator163.n()).done) {
              _context13.next = 203;
              break;
            }
            _error85 = _step163.value;
            _error85.path.prepend(new PropertySegment(that, "semanticId"));
            _context13.next = 201;
            return _error85;
          case 201:
            _context13.next = 196;
            break;
          case 203:
            _context13.next = 208;
            break;
          case 205:
            _context13.prev = 205;
            _context13.t8 = _context13["catch"](194);
            _iterator163.e(_context13.t8);
          case 208:
            _context13.prev = 208;
            _iterator163.f();
            return _context13.finish(208);
          case 211:
            if (!(that.supplementalSemanticIds !== null)) {
              _context13.next = 248;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator164 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context13.prev = 214;
            _iterator164.s();
          case 216:
            if ((_step164 = _iterator164.n()).done) {
              _context13.next = 240;
              break;
            }
            _item36 = _step164.value;
            _iterator165 = _createForOfIteratorHelper(this.transformWithContext(_item36, context));
            _context13.prev = 219;
            _iterator165.s();
          case 221:
            if ((_step165 = _iterator165.n()).done) {
              _context13.next = 229;
              break;
            }
            _error86 = _step165.value;
            _error86.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error86.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context13.next = 227;
            return _error86;
          case 227:
            _context13.next = 221;
            break;
          case 229:
            _context13.next = 234;
            break;
          case 231:
            _context13.prev = 231;
            _context13.t9 = _context13["catch"](219);
            _iterator165.e(_context13.t9);
          case 234:
            _context13.prev = 234;
            _iterator165.f();
            return _context13.finish(234);
          case 237:
            supplementalSemanticIdsIndex++;
          case 238:
            _context13.next = 216;
            break;
          case 240:
            _context13.next = 245;
            break;
          case 242:
            _context13.prev = 242;
            _context13.t10 = _context13["catch"](214);
            _iterator164.e(_context13.t10);
          case 245:
            _context13.prev = 245;
            _iterator164.f();
            return _context13.finish(245);
          case 248:
            if (!(that.qualifiers !== null)) {
              _context13.next = 285;
              break;
            }
            qualifiersIndex = 0;
            _iterator166 = _createForOfIteratorHelper(that.qualifiers);
            _context13.prev = 251;
            _iterator166.s();
          case 253:
            if ((_step166 = _iterator166.n()).done) {
              _context13.next = 277;
              break;
            }
            _item37 = _step166.value;
            _iterator167 = _createForOfIteratorHelper(this.transformWithContext(_item37, context));
            _context13.prev = 256;
            _iterator167.s();
          case 258:
            if ((_step167 = _iterator167.n()).done) {
              _context13.next = 266;
              break;
            }
            _error87 = _step167.value;
            _error87.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error87.path.prepend(new PropertySegment(that, "qualifiers"));
            _context13.next = 264;
            return _error87;
          case 264:
            _context13.next = 258;
            break;
          case 266:
            _context13.next = 271;
            break;
          case 268:
            _context13.prev = 268;
            _context13.t11 = _context13["catch"](256);
            _iterator167.e(_context13.t11);
          case 271:
            _context13.prev = 271;
            _iterator167.f();
            return _context13.finish(271);
          case 274:
            qualifiersIndex++;
          case 275:
            _context13.next = 253;
            break;
          case 277:
            _context13.next = 282;
            break;
          case 279:
            _context13.prev = 279;
            _context13.t12 = _context13["catch"](251);
            _iterator166.e(_context13.t12);
          case 282:
            _context13.prev = 282;
            _iterator166.f();
            return _context13.finish(282);
          case 285:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context13.next = 322;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator168 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context13.prev = 288;
            _iterator168.s();
          case 290:
            if ((_step168 = _iterator168.n()).done) {
              _context13.next = 314;
              break;
            }
            _item38 = _step168.value;
            _iterator169 = _createForOfIteratorHelper(this.transformWithContext(_item38, context));
            _context13.prev = 293;
            _iterator169.s();
          case 295:
            if ((_step169 = _iterator169.n()).done) {
              _context13.next = 303;
              break;
            }
            _error88 = _step169.value;
            _error88.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error88.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context13.next = 301;
            return _error88;
          case 301:
            _context13.next = 295;
            break;
          case 303:
            _context13.next = 308;
            break;
          case 305:
            _context13.prev = 305;
            _context13.t13 = _context13["catch"](293);
            _iterator169.e(_context13.t13);
          case 308:
            _context13.prev = 308;
            _iterator169.f();
            return _context13.finish(308);
          case 311:
            embeddedDataSpecificationsIndex++;
          case 312:
            _context13.next = 290;
            break;
          case 314:
            _context13.next = 319;
            break;
          case 316:
            _context13.prev = 316;
            _context13.t14 = _context13["catch"](288);
            _iterator168.e(_context13.t14);
          case 319:
            _context13.prev = 319;
            _iterator168.f();
            return _context13.finish(319);
          case 322:
            if (!(that.value !== null)) {
              _context13.next = 359;
              break;
            }
            valueIndex = 0;
            _iterator170 = _createForOfIteratorHelper(that.value);
            _context13.prev = 325;
            _iterator170.s();
          case 327:
            if ((_step170 = _iterator170.n()).done) {
              _context13.next = 351;
              break;
            }
            _item39 = _step170.value;
            _iterator171 = _createForOfIteratorHelper(this.transformWithContext(_item39, context));
            _context13.prev = 330;
            _iterator171.s();
          case 332:
            if ((_step171 = _iterator171.n()).done) {
              _context13.next = 340;
              break;
            }
            _error89 = _step171.value;
            _error89.path.prepend(new IndexSegment(that.value, valueIndex));
            _error89.path.prepend(new PropertySegment(that, "value"));
            _context13.next = 338;
            return _error89;
          case 338:
            _context13.next = 332;
            break;
          case 340:
            _context13.next = 345;
            break;
          case 342:
            _context13.prev = 342;
            _context13.t15 = _context13["catch"](330);
            _iterator171.e(_context13.t15);
          case 345:
            _context13.prev = 345;
            _iterator171.f();
            return _context13.finish(345);
          case 348:
            valueIndex++;
          case 349:
            _context13.next = 327;
            break;
          case 351:
            _context13.next = 356;
            break;
          case 353:
            _context13.prev = 353;
            _context13.t16 = _context13["catch"](325);
            _iterator170.e(_context13.t16);
          case 356:
            _context13.prev = 356;
            _iterator170.f();
            return _context13.finish(356);
          case 359:
            if (!(that.valueId !== null)) {
              _context13.next = 378;
              break;
            }
            _iterator172 = _createForOfIteratorHelper(this.transformWithContext(that.valueId, context));
            _context13.prev = 361;
            _iterator172.s();
          case 363:
            if ((_step172 = _iterator172.n()).done) {
              _context13.next = 370;
              break;
            }
            _error90 = _step172.value;
            _error90.path.prepend(new PropertySegment(that, "valueId"));
            _context13.next = 368;
            return _error90;
          case 368:
            _context13.next = 363;
            break;
          case 370:
            _context13.next = 375;
            break;
          case 372:
            _context13.prev = 372;
            _context13.t17 = _context13["catch"](361);
            _iterator172.e(_context13.t17);
          case 375:
            _context13.prev = 375;
            _iterator172.f();
            return _context13.finish(375);
          case 378:
          case "end":
            return _context13.stop();
        }
      }, transformMultiLanguagePropertyWithContext, this, [[44, 55, 58, 61], [63, 74, 77, 80], [84, 112, 115, 118], [89, 101, 104, 107], [121, 149, 152, 155], [126, 138, 141, 144], [158, 186, 189, 192], [163, 175, 178, 181], [194, 205, 208, 211], [214, 242, 245, 248], [219, 231, 234, 237], [251, 279, 282, 285], [256, 268, 271, 274], [288, 316, 319, 322], [293, 305, 308, 311], [325, 353, 356, 359], [330, 342, 345, 348], [361, 372, 375, 378]]);
    })
  }, {
    key: "transformRangeWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformRangeWithContext(that, context) {
      var _iterator173, _step173, error, _iterator174, _step174, _error91, _iterator175, _step175, _error92, _iterator176, _step176, _error93, extensionsIndex, _iterator177, _step177, item, _iterator178, _step178, _error94, displayNameIndex, _iterator179, _step179, _item40, _iterator180, _step180, _error95, descriptionIndex, _iterator181, _step181, _item41, _iterator182, _step182, _error96, _iterator183, _step183, _error97, supplementalSemanticIdsIndex, _iterator184, _step184, _item42, _iterator185, _step185, _error98, qualifiersIndex, _iterator186, _step186, _item43, _iterator187, _step187, _error99, embeddedDataSpecificationsIndex, _iterator188, _step188, _item44, _iterator189, _step189, _error100;
      return _regeneratorRuntime().wrap(function transformRangeWithContext$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context14.next = 3;
              break;
            }
            _context14.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context14.next = 6;
              break;
            }
            _context14.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context14.next = 9;
              break;
            }
            _context14.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context14.next = 12;
              break;
            }
            _context14.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context14.next = 15;
              break;
            }
            _context14.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context14.next = 18;
              break;
            }
            _context14.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context14.next = 21;
              break;
            }
            _context14.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context14.next = 24;
              break;
            }
            _context14.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context14.next = 27;
              break;
            }
            _context14.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context14.next = 30;
              break;
            }
            _context14.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context14.next = 33;
              break;
            }
            _context14.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context14.next = 36;
              break;
            }
            _context14.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.max !== null) || valueConsistentWithXsdType(that.max, that.valueType)) {
              _context14.next = 39;
              break;
            }
            _context14.next = 39;
            return new VerificationError("Max must be consistent with the value type.");
          case 39:
            if (!(that.min !== null) || valueConsistentWithXsdType(that.min, that.valueType)) {
              _context14.next = 42;
              break;
            }
            _context14.next = 42;
            return new VerificationError("Min must be consistent with the value type.");
          case 42:
            if (!(that.category !== null)) {
              _context14.next = 61;
              break;
            }
            _iterator173 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context14.prev = 44;
            _iterator173.s();
          case 46:
            if ((_step173 = _iterator173.n()).done) {
              _context14.next = 53;
              break;
            }
            error = _step173.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context14.next = 51;
            return error;
          case 51:
            _context14.next = 46;
            break;
          case 53:
            _context14.next = 58;
            break;
          case 55:
            _context14.prev = 55;
            _context14.t0 = _context14["catch"](44);
            _iterator173.e(_context14.t0);
          case 58:
            _context14.prev = 58;
            _iterator173.f();
            return _context14.finish(58);
          case 61:
            if (!(that.idShort !== null)) {
              _context14.next = 80;
              break;
            }
            _iterator174 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context14.prev = 63;
            _iterator174.s();
          case 65:
            if ((_step174 = _iterator174.n()).done) {
              _context14.next = 72;
              break;
            }
            _error91 = _step174.value;
            _error91.path.prepend(new PropertySegment(that, "idShort"));
            _context14.next = 70;
            return _error91;
          case 70:
            _context14.next = 65;
            break;
          case 72:
            _context14.next = 77;
            break;
          case 74:
            _context14.prev = 74;
            _context14.t1 = _context14["catch"](63);
            _iterator174.e(_context14.t1);
          case 77:
            _context14.prev = 77;
            _iterator174.f();
            return _context14.finish(77);
          case 80:
            if (!(that.min !== null)) {
              _context14.next = 99;
              break;
            }
            _iterator175 = _createForOfIteratorHelper(verifyValueDataType(that.min));
            _context14.prev = 82;
            _iterator175.s();
          case 84:
            if ((_step175 = _iterator175.n()).done) {
              _context14.next = 91;
              break;
            }
            _error92 = _step175.value;
            _error92.path.prepend(new PropertySegment(that, "min"));
            _context14.next = 89;
            return _error92;
          case 89:
            _context14.next = 84;
            break;
          case 91:
            _context14.next = 96;
            break;
          case 93:
            _context14.prev = 93;
            _context14.t2 = _context14["catch"](82);
            _iterator175.e(_context14.t2);
          case 96:
            _context14.prev = 96;
            _iterator175.f();
            return _context14.finish(96);
          case 99:
            if (!(that.max !== null)) {
              _context14.next = 118;
              break;
            }
            _iterator176 = _createForOfIteratorHelper(verifyValueDataType(that.max));
            _context14.prev = 101;
            _iterator176.s();
          case 103:
            if ((_step176 = _iterator176.n()).done) {
              _context14.next = 110;
              break;
            }
            _error93 = _step176.value;
            _error93.path.prepend(new PropertySegment(that, "max"));
            _context14.next = 108;
            return _error93;
          case 108:
            _context14.next = 103;
            break;
          case 110:
            _context14.next = 115;
            break;
          case 112:
            _context14.prev = 112;
            _context14.t3 = _context14["catch"](101);
            _iterator176.e(_context14.t3);
          case 115:
            _context14.prev = 115;
            _iterator176.f();
            return _context14.finish(115);
          case 118:
            if (!(context === true)) {
              _context14.next = 360;
              break;
            }
            if (!(that.extensions !== null)) {
              _context14.next = 156;
              break;
            }
            extensionsIndex = 0;
            _iterator177 = _createForOfIteratorHelper(that.extensions);
            _context14.prev = 122;
            _iterator177.s();
          case 124:
            if ((_step177 = _iterator177.n()).done) {
              _context14.next = 148;
              break;
            }
            item = _step177.value;
            _iterator178 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context14.prev = 127;
            _iterator178.s();
          case 129:
            if ((_step178 = _iterator178.n()).done) {
              _context14.next = 137;
              break;
            }
            _error94 = _step178.value;
            _error94.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error94.path.prepend(new PropertySegment(that, "extensions"));
            _context14.next = 135;
            return _error94;
          case 135:
            _context14.next = 129;
            break;
          case 137:
            _context14.next = 142;
            break;
          case 139:
            _context14.prev = 139;
            _context14.t4 = _context14["catch"](127);
            _iterator178.e(_context14.t4);
          case 142:
            _context14.prev = 142;
            _iterator178.f();
            return _context14.finish(142);
          case 145:
            extensionsIndex++;
          case 146:
            _context14.next = 124;
            break;
          case 148:
            _context14.next = 153;
            break;
          case 150:
            _context14.prev = 150;
            _context14.t5 = _context14["catch"](122);
            _iterator177.e(_context14.t5);
          case 153:
            _context14.prev = 153;
            _iterator177.f();
            return _context14.finish(153);
          case 156:
            if (!(that.displayName !== null)) {
              _context14.next = 193;
              break;
            }
            displayNameIndex = 0;
            _iterator179 = _createForOfIteratorHelper(that.displayName);
            _context14.prev = 159;
            _iterator179.s();
          case 161:
            if ((_step179 = _iterator179.n()).done) {
              _context14.next = 185;
              break;
            }
            _item40 = _step179.value;
            _iterator180 = _createForOfIteratorHelper(this.transformWithContext(_item40, context));
            _context14.prev = 164;
            _iterator180.s();
          case 166:
            if ((_step180 = _iterator180.n()).done) {
              _context14.next = 174;
              break;
            }
            _error95 = _step180.value;
            _error95.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error95.path.prepend(new PropertySegment(that, "displayName"));
            _context14.next = 172;
            return _error95;
          case 172:
            _context14.next = 166;
            break;
          case 174:
            _context14.next = 179;
            break;
          case 176:
            _context14.prev = 176;
            _context14.t6 = _context14["catch"](164);
            _iterator180.e(_context14.t6);
          case 179:
            _context14.prev = 179;
            _iterator180.f();
            return _context14.finish(179);
          case 182:
            displayNameIndex++;
          case 183:
            _context14.next = 161;
            break;
          case 185:
            _context14.next = 190;
            break;
          case 187:
            _context14.prev = 187;
            _context14.t7 = _context14["catch"](159);
            _iterator179.e(_context14.t7);
          case 190:
            _context14.prev = 190;
            _iterator179.f();
            return _context14.finish(190);
          case 193:
            if (!(that.description !== null)) {
              _context14.next = 230;
              break;
            }
            descriptionIndex = 0;
            _iterator181 = _createForOfIteratorHelper(that.description);
            _context14.prev = 196;
            _iterator181.s();
          case 198:
            if ((_step181 = _iterator181.n()).done) {
              _context14.next = 222;
              break;
            }
            _item41 = _step181.value;
            _iterator182 = _createForOfIteratorHelper(this.transformWithContext(_item41, context));
            _context14.prev = 201;
            _iterator182.s();
          case 203:
            if ((_step182 = _iterator182.n()).done) {
              _context14.next = 211;
              break;
            }
            _error96 = _step182.value;
            _error96.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error96.path.prepend(new PropertySegment(that, "description"));
            _context14.next = 209;
            return _error96;
          case 209:
            _context14.next = 203;
            break;
          case 211:
            _context14.next = 216;
            break;
          case 213:
            _context14.prev = 213;
            _context14.t8 = _context14["catch"](201);
            _iterator182.e(_context14.t8);
          case 216:
            _context14.prev = 216;
            _iterator182.f();
            return _context14.finish(216);
          case 219:
            descriptionIndex++;
          case 220:
            _context14.next = 198;
            break;
          case 222:
            _context14.next = 227;
            break;
          case 224:
            _context14.prev = 224;
            _context14.t9 = _context14["catch"](196);
            _iterator181.e(_context14.t9);
          case 227:
            _context14.prev = 227;
            _iterator181.f();
            return _context14.finish(227);
          case 230:
            if (!(that.semanticId !== null)) {
              _context14.next = 249;
              break;
            }
            _iterator183 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context14.prev = 232;
            _iterator183.s();
          case 234:
            if ((_step183 = _iterator183.n()).done) {
              _context14.next = 241;
              break;
            }
            _error97 = _step183.value;
            _error97.path.prepend(new PropertySegment(that, "semanticId"));
            _context14.next = 239;
            return _error97;
          case 239:
            _context14.next = 234;
            break;
          case 241:
            _context14.next = 246;
            break;
          case 243:
            _context14.prev = 243;
            _context14.t10 = _context14["catch"](232);
            _iterator183.e(_context14.t10);
          case 246:
            _context14.prev = 246;
            _iterator183.f();
            return _context14.finish(246);
          case 249:
            if (!(that.supplementalSemanticIds !== null)) {
              _context14.next = 286;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator184 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context14.prev = 252;
            _iterator184.s();
          case 254:
            if ((_step184 = _iterator184.n()).done) {
              _context14.next = 278;
              break;
            }
            _item42 = _step184.value;
            _iterator185 = _createForOfIteratorHelper(this.transformWithContext(_item42, context));
            _context14.prev = 257;
            _iterator185.s();
          case 259:
            if ((_step185 = _iterator185.n()).done) {
              _context14.next = 267;
              break;
            }
            _error98 = _step185.value;
            _error98.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error98.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context14.next = 265;
            return _error98;
          case 265:
            _context14.next = 259;
            break;
          case 267:
            _context14.next = 272;
            break;
          case 269:
            _context14.prev = 269;
            _context14.t11 = _context14["catch"](257);
            _iterator185.e(_context14.t11);
          case 272:
            _context14.prev = 272;
            _iterator185.f();
            return _context14.finish(272);
          case 275:
            supplementalSemanticIdsIndex++;
          case 276:
            _context14.next = 254;
            break;
          case 278:
            _context14.next = 283;
            break;
          case 280:
            _context14.prev = 280;
            _context14.t12 = _context14["catch"](252);
            _iterator184.e(_context14.t12);
          case 283:
            _context14.prev = 283;
            _iterator184.f();
            return _context14.finish(283);
          case 286:
            if (!(that.qualifiers !== null)) {
              _context14.next = 323;
              break;
            }
            qualifiersIndex = 0;
            _iterator186 = _createForOfIteratorHelper(that.qualifiers);
            _context14.prev = 289;
            _iterator186.s();
          case 291:
            if ((_step186 = _iterator186.n()).done) {
              _context14.next = 315;
              break;
            }
            _item43 = _step186.value;
            _iterator187 = _createForOfIteratorHelper(this.transformWithContext(_item43, context));
            _context14.prev = 294;
            _iterator187.s();
          case 296:
            if ((_step187 = _iterator187.n()).done) {
              _context14.next = 304;
              break;
            }
            _error99 = _step187.value;
            _error99.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error99.path.prepend(new PropertySegment(that, "qualifiers"));
            _context14.next = 302;
            return _error99;
          case 302:
            _context14.next = 296;
            break;
          case 304:
            _context14.next = 309;
            break;
          case 306:
            _context14.prev = 306;
            _context14.t13 = _context14["catch"](294);
            _iterator187.e(_context14.t13);
          case 309:
            _context14.prev = 309;
            _iterator187.f();
            return _context14.finish(309);
          case 312:
            qualifiersIndex++;
          case 313:
            _context14.next = 291;
            break;
          case 315:
            _context14.next = 320;
            break;
          case 317:
            _context14.prev = 317;
            _context14.t14 = _context14["catch"](289);
            _iterator186.e(_context14.t14);
          case 320:
            _context14.prev = 320;
            _iterator186.f();
            return _context14.finish(320);
          case 323:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context14.next = 360;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator188 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context14.prev = 326;
            _iterator188.s();
          case 328:
            if ((_step188 = _iterator188.n()).done) {
              _context14.next = 352;
              break;
            }
            _item44 = _step188.value;
            _iterator189 = _createForOfIteratorHelper(this.transformWithContext(_item44, context));
            _context14.prev = 331;
            _iterator189.s();
          case 333:
            if ((_step189 = _iterator189.n()).done) {
              _context14.next = 341;
              break;
            }
            _error100 = _step189.value;
            _error100.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error100.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context14.next = 339;
            return _error100;
          case 339:
            _context14.next = 333;
            break;
          case 341:
            _context14.next = 346;
            break;
          case 343:
            _context14.prev = 343;
            _context14.t15 = _context14["catch"](331);
            _iterator189.e(_context14.t15);
          case 346:
            _context14.prev = 346;
            _iterator189.f();
            return _context14.finish(346);
          case 349:
            embeddedDataSpecificationsIndex++;
          case 350:
            _context14.next = 328;
            break;
          case 352:
            _context14.next = 357;
            break;
          case 354:
            _context14.prev = 354;
            _context14.t16 = _context14["catch"](326);
            _iterator188.e(_context14.t16);
          case 357:
            _context14.prev = 357;
            _iterator188.f();
            return _context14.finish(357);
          case 360:
          case "end":
            return _context14.stop();
        }
      }, transformRangeWithContext, this, [[44, 55, 58, 61], [63, 74, 77, 80], [82, 93, 96, 99], [101, 112, 115, 118], [122, 150, 153, 156], [127, 139, 142, 145], [159, 187, 190, 193], [164, 176, 179, 182], [196, 224, 227, 230], [201, 213, 216, 219], [232, 243, 246, 249], [252, 280, 283, 286], [257, 269, 272, 275], [289, 317, 320, 323], [294, 306, 309, 312], [326, 354, 357, 360], [331, 343, 346, 349]]);
    })
  }, {
    key: "transformReferenceElementWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformReferenceElementWithContext(that, context) {
      var _iterator190, _step190, error, _iterator191, _step191, _error101, extensionsIndex, _iterator192, _step192, item, _iterator193, _step193, _error102, displayNameIndex, _iterator194, _step194, _item45, _iterator195, _step195, _error103, descriptionIndex, _iterator196, _step196, _item46, _iterator197, _step197, _error104, _iterator198, _step198, _error105, supplementalSemanticIdsIndex, _iterator199, _step199, _item47, _iterator200, _step200, _error106, qualifiersIndex, _iterator201, _step201, _item48, _iterator202, _step202, _error107, embeddedDataSpecificationsIndex, _iterator203, _step203, _item49, _iterator204, _step204, _error108, _iterator205, _step205, _error109;
      return _regeneratorRuntime().wrap(function transformReferenceElementWithContext$(_context15) {
        while (1) switch (_context15.prev = _context15.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context15.next = 3;
              break;
            }
            _context15.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context15.next = 6;
              break;
            }
            _context15.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context15.next = 9;
              break;
            }
            _context15.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context15.next = 12;
              break;
            }
            _context15.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context15.next = 15;
              break;
            }
            _context15.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context15.next = 18;
              break;
            }
            _context15.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context15.next = 21;
              break;
            }
            _context15.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context15.next = 24;
              break;
            }
            _context15.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context15.next = 27;
              break;
            }
            _context15.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context15.next = 30;
              break;
            }
            _context15.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context15.next = 33;
              break;
            }
            _context15.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context15.next = 36;
              break;
            }
            _context15.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.category !== null)) {
              _context15.next = 55;
              break;
            }
            _iterator190 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context15.prev = 38;
            _iterator190.s();
          case 40:
            if ((_step190 = _iterator190.n()).done) {
              _context15.next = 47;
              break;
            }
            error = _step190.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context15.next = 45;
            return error;
          case 45:
            _context15.next = 40;
            break;
          case 47:
            _context15.next = 52;
            break;
          case 49:
            _context15.prev = 49;
            _context15.t0 = _context15["catch"](38);
            _iterator190.e(_context15.t0);
          case 52:
            _context15.prev = 52;
            _iterator190.f();
            return _context15.finish(52);
          case 55:
            if (!(that.idShort !== null)) {
              _context15.next = 74;
              break;
            }
            _iterator191 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context15.prev = 57;
            _iterator191.s();
          case 59:
            if ((_step191 = _iterator191.n()).done) {
              _context15.next = 66;
              break;
            }
            _error101 = _step191.value;
            _error101.path.prepend(new PropertySegment(that, "idShort"));
            _context15.next = 64;
            return _error101;
          case 64:
            _context15.next = 59;
            break;
          case 66:
            _context15.next = 71;
            break;
          case 68:
            _context15.prev = 68;
            _context15.t1 = _context15["catch"](57);
            _iterator191.e(_context15.t1);
          case 71:
            _context15.prev = 71;
            _iterator191.f();
            return _context15.finish(71);
          case 74:
            if (!(context === true)) {
              _context15.next = 335;
              break;
            }
            if (!(that.extensions !== null)) {
              _context15.next = 112;
              break;
            }
            extensionsIndex = 0;
            _iterator192 = _createForOfIteratorHelper(that.extensions);
            _context15.prev = 78;
            _iterator192.s();
          case 80:
            if ((_step192 = _iterator192.n()).done) {
              _context15.next = 104;
              break;
            }
            item = _step192.value;
            _iterator193 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context15.prev = 83;
            _iterator193.s();
          case 85:
            if ((_step193 = _iterator193.n()).done) {
              _context15.next = 93;
              break;
            }
            _error102 = _step193.value;
            _error102.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error102.path.prepend(new PropertySegment(that, "extensions"));
            _context15.next = 91;
            return _error102;
          case 91:
            _context15.next = 85;
            break;
          case 93:
            _context15.next = 98;
            break;
          case 95:
            _context15.prev = 95;
            _context15.t2 = _context15["catch"](83);
            _iterator193.e(_context15.t2);
          case 98:
            _context15.prev = 98;
            _iterator193.f();
            return _context15.finish(98);
          case 101:
            extensionsIndex++;
          case 102:
            _context15.next = 80;
            break;
          case 104:
            _context15.next = 109;
            break;
          case 106:
            _context15.prev = 106;
            _context15.t3 = _context15["catch"](78);
            _iterator192.e(_context15.t3);
          case 109:
            _context15.prev = 109;
            _iterator192.f();
            return _context15.finish(109);
          case 112:
            if (!(that.displayName !== null)) {
              _context15.next = 149;
              break;
            }
            displayNameIndex = 0;
            _iterator194 = _createForOfIteratorHelper(that.displayName);
            _context15.prev = 115;
            _iterator194.s();
          case 117:
            if ((_step194 = _iterator194.n()).done) {
              _context15.next = 141;
              break;
            }
            _item45 = _step194.value;
            _iterator195 = _createForOfIteratorHelper(this.transformWithContext(_item45, context));
            _context15.prev = 120;
            _iterator195.s();
          case 122:
            if ((_step195 = _iterator195.n()).done) {
              _context15.next = 130;
              break;
            }
            _error103 = _step195.value;
            _error103.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error103.path.prepend(new PropertySegment(that, "displayName"));
            _context15.next = 128;
            return _error103;
          case 128:
            _context15.next = 122;
            break;
          case 130:
            _context15.next = 135;
            break;
          case 132:
            _context15.prev = 132;
            _context15.t4 = _context15["catch"](120);
            _iterator195.e(_context15.t4);
          case 135:
            _context15.prev = 135;
            _iterator195.f();
            return _context15.finish(135);
          case 138:
            displayNameIndex++;
          case 139:
            _context15.next = 117;
            break;
          case 141:
            _context15.next = 146;
            break;
          case 143:
            _context15.prev = 143;
            _context15.t5 = _context15["catch"](115);
            _iterator194.e(_context15.t5);
          case 146:
            _context15.prev = 146;
            _iterator194.f();
            return _context15.finish(146);
          case 149:
            if (!(that.description !== null)) {
              _context15.next = 186;
              break;
            }
            descriptionIndex = 0;
            _iterator196 = _createForOfIteratorHelper(that.description);
            _context15.prev = 152;
            _iterator196.s();
          case 154:
            if ((_step196 = _iterator196.n()).done) {
              _context15.next = 178;
              break;
            }
            _item46 = _step196.value;
            _iterator197 = _createForOfIteratorHelper(this.transformWithContext(_item46, context));
            _context15.prev = 157;
            _iterator197.s();
          case 159:
            if ((_step197 = _iterator197.n()).done) {
              _context15.next = 167;
              break;
            }
            _error104 = _step197.value;
            _error104.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error104.path.prepend(new PropertySegment(that, "description"));
            _context15.next = 165;
            return _error104;
          case 165:
            _context15.next = 159;
            break;
          case 167:
            _context15.next = 172;
            break;
          case 169:
            _context15.prev = 169;
            _context15.t6 = _context15["catch"](157);
            _iterator197.e(_context15.t6);
          case 172:
            _context15.prev = 172;
            _iterator197.f();
            return _context15.finish(172);
          case 175:
            descriptionIndex++;
          case 176:
            _context15.next = 154;
            break;
          case 178:
            _context15.next = 183;
            break;
          case 180:
            _context15.prev = 180;
            _context15.t7 = _context15["catch"](152);
            _iterator196.e(_context15.t7);
          case 183:
            _context15.prev = 183;
            _iterator196.f();
            return _context15.finish(183);
          case 186:
            if (!(that.semanticId !== null)) {
              _context15.next = 205;
              break;
            }
            _iterator198 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context15.prev = 188;
            _iterator198.s();
          case 190:
            if ((_step198 = _iterator198.n()).done) {
              _context15.next = 197;
              break;
            }
            _error105 = _step198.value;
            _error105.path.prepend(new PropertySegment(that, "semanticId"));
            _context15.next = 195;
            return _error105;
          case 195:
            _context15.next = 190;
            break;
          case 197:
            _context15.next = 202;
            break;
          case 199:
            _context15.prev = 199;
            _context15.t8 = _context15["catch"](188);
            _iterator198.e(_context15.t8);
          case 202:
            _context15.prev = 202;
            _iterator198.f();
            return _context15.finish(202);
          case 205:
            if (!(that.supplementalSemanticIds !== null)) {
              _context15.next = 242;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator199 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context15.prev = 208;
            _iterator199.s();
          case 210:
            if ((_step199 = _iterator199.n()).done) {
              _context15.next = 234;
              break;
            }
            _item47 = _step199.value;
            _iterator200 = _createForOfIteratorHelper(this.transformWithContext(_item47, context));
            _context15.prev = 213;
            _iterator200.s();
          case 215:
            if ((_step200 = _iterator200.n()).done) {
              _context15.next = 223;
              break;
            }
            _error106 = _step200.value;
            _error106.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error106.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context15.next = 221;
            return _error106;
          case 221:
            _context15.next = 215;
            break;
          case 223:
            _context15.next = 228;
            break;
          case 225:
            _context15.prev = 225;
            _context15.t9 = _context15["catch"](213);
            _iterator200.e(_context15.t9);
          case 228:
            _context15.prev = 228;
            _iterator200.f();
            return _context15.finish(228);
          case 231:
            supplementalSemanticIdsIndex++;
          case 232:
            _context15.next = 210;
            break;
          case 234:
            _context15.next = 239;
            break;
          case 236:
            _context15.prev = 236;
            _context15.t10 = _context15["catch"](208);
            _iterator199.e(_context15.t10);
          case 239:
            _context15.prev = 239;
            _iterator199.f();
            return _context15.finish(239);
          case 242:
            if (!(that.qualifiers !== null)) {
              _context15.next = 279;
              break;
            }
            qualifiersIndex = 0;
            _iterator201 = _createForOfIteratorHelper(that.qualifiers);
            _context15.prev = 245;
            _iterator201.s();
          case 247:
            if ((_step201 = _iterator201.n()).done) {
              _context15.next = 271;
              break;
            }
            _item48 = _step201.value;
            _iterator202 = _createForOfIteratorHelper(this.transformWithContext(_item48, context));
            _context15.prev = 250;
            _iterator202.s();
          case 252:
            if ((_step202 = _iterator202.n()).done) {
              _context15.next = 260;
              break;
            }
            _error107 = _step202.value;
            _error107.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error107.path.prepend(new PropertySegment(that, "qualifiers"));
            _context15.next = 258;
            return _error107;
          case 258:
            _context15.next = 252;
            break;
          case 260:
            _context15.next = 265;
            break;
          case 262:
            _context15.prev = 262;
            _context15.t11 = _context15["catch"](250);
            _iterator202.e(_context15.t11);
          case 265:
            _context15.prev = 265;
            _iterator202.f();
            return _context15.finish(265);
          case 268:
            qualifiersIndex++;
          case 269:
            _context15.next = 247;
            break;
          case 271:
            _context15.next = 276;
            break;
          case 273:
            _context15.prev = 273;
            _context15.t12 = _context15["catch"](245);
            _iterator201.e(_context15.t12);
          case 276:
            _context15.prev = 276;
            _iterator201.f();
            return _context15.finish(276);
          case 279:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context15.next = 316;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator203 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context15.prev = 282;
            _iterator203.s();
          case 284:
            if ((_step203 = _iterator203.n()).done) {
              _context15.next = 308;
              break;
            }
            _item49 = _step203.value;
            _iterator204 = _createForOfIteratorHelper(this.transformWithContext(_item49, context));
            _context15.prev = 287;
            _iterator204.s();
          case 289:
            if ((_step204 = _iterator204.n()).done) {
              _context15.next = 297;
              break;
            }
            _error108 = _step204.value;
            _error108.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error108.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context15.next = 295;
            return _error108;
          case 295:
            _context15.next = 289;
            break;
          case 297:
            _context15.next = 302;
            break;
          case 299:
            _context15.prev = 299;
            _context15.t13 = _context15["catch"](287);
            _iterator204.e(_context15.t13);
          case 302:
            _context15.prev = 302;
            _iterator204.f();
            return _context15.finish(302);
          case 305:
            embeddedDataSpecificationsIndex++;
          case 306:
            _context15.next = 284;
            break;
          case 308:
            _context15.next = 313;
            break;
          case 310:
            _context15.prev = 310;
            _context15.t14 = _context15["catch"](282);
            _iterator203.e(_context15.t14);
          case 313:
            _context15.prev = 313;
            _iterator203.f();
            return _context15.finish(313);
          case 316:
            if (!(that.value !== null)) {
              _context15.next = 335;
              break;
            }
            _iterator205 = _createForOfIteratorHelper(this.transformWithContext(that.value, context));
            _context15.prev = 318;
            _iterator205.s();
          case 320:
            if ((_step205 = _iterator205.n()).done) {
              _context15.next = 327;
              break;
            }
            _error109 = _step205.value;
            _error109.path.prepend(new PropertySegment(that, "value"));
            _context15.next = 325;
            return _error109;
          case 325:
            _context15.next = 320;
            break;
          case 327:
            _context15.next = 332;
            break;
          case 329:
            _context15.prev = 329;
            _context15.t15 = _context15["catch"](318);
            _iterator205.e(_context15.t15);
          case 332:
            _context15.prev = 332;
            _iterator205.f();
            return _context15.finish(332);
          case 335:
          case "end":
            return _context15.stop();
        }
      }, transformReferenceElementWithContext, this, [[38, 49, 52, 55], [57, 68, 71, 74], [78, 106, 109, 112], [83, 95, 98, 101], [115, 143, 146, 149], [120, 132, 135, 138], [152, 180, 183, 186], [157, 169, 172, 175], [188, 199, 202, 205], [208, 236, 239, 242], [213, 225, 228, 231], [245, 273, 276, 279], [250, 262, 265, 268], [282, 310, 313, 316], [287, 299, 302, 305], [318, 329, 332, 335]]);
    })
  }, {
    key: "transformBlobWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformBlobWithContext(that, context) {
      var _iterator206, _step206, error, _iterator207, _step207, _error110, _iterator208, _step208, _error111, _iterator209, _step209, _error119, extensionsIndex, _iterator210, _step210, item, _iterator211, _step211, _error112, displayNameIndex, _iterator212, _step212, _item50, _iterator213, _step213, _error113, descriptionIndex, _iterator214, _step214, _item51, _iterator215, _step215, _error114, _iterator216, _step216, _error115, supplementalSemanticIdsIndex, _iterator217, _step217, _item52, _iterator218, _step218, _error116, qualifiersIndex, _iterator219, _step219, _item53, _iterator220, _step220, _error117, embeddedDataSpecificationsIndex, _iterator221, _step221, _item54, _iterator222, _step222, _error118;
      return _regeneratorRuntime().wrap(function transformBlobWithContext$(_context16) {
        while (1) switch (_context16.prev = _context16.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context16.next = 3;
              break;
            }
            _context16.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context16.next = 6;
              break;
            }
            _context16.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context16.next = 9;
              break;
            }
            _context16.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context16.next = 12;
              break;
            }
            _context16.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context16.next = 15;
              break;
            }
            _context16.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context16.next = 18;
              break;
            }
            _context16.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context16.next = 21;
              break;
            }
            _context16.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context16.next = 24;
              break;
            }
            _context16.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context16.next = 27;
              break;
            }
            _context16.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context16.next = 30;
              break;
            }
            _context16.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context16.next = 33;
              break;
            }
            _context16.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context16.next = 36;
              break;
            }
            _context16.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.category !== null)) {
              _context16.next = 55;
              break;
            }
            _iterator206 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context16.prev = 38;
            _iterator206.s();
          case 40:
            if ((_step206 = _iterator206.n()).done) {
              _context16.next = 47;
              break;
            }
            error = _step206.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context16.next = 45;
            return error;
          case 45:
            _context16.next = 40;
            break;
          case 47:
            _context16.next = 52;
            break;
          case 49:
            _context16.prev = 49;
            _context16.t0 = _context16["catch"](38);
            _iterator206.e(_context16.t0);
          case 52:
            _context16.prev = 52;
            _iterator206.f();
            return _context16.finish(52);
          case 55:
            if (!(that.idShort !== null)) {
              _context16.next = 74;
              break;
            }
            _iterator207 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context16.prev = 57;
            _iterator207.s();
          case 59:
            if ((_step207 = _iterator207.n()).done) {
              _context16.next = 66;
              break;
            }
            _error110 = _step207.value;
            _error110.path.prepend(new PropertySegment(that, "idShort"));
            _context16.next = 64;
            return _error110;
          case 64:
            _context16.next = 59;
            break;
          case 66:
            _context16.next = 71;
            break;
          case 68:
            _context16.prev = 68;
            _context16.t1 = _context16["catch"](57);
            _iterator207.e(_context16.t1);
          case 71:
            _context16.prev = 71;
            _iterator207.f();
            return _context16.finish(71);
          case 74:
            if (!(that.value !== null)) {
              _context16.next = 93;
              break;
            }
            _iterator208 = _createForOfIteratorHelper(verifyBlobType(that.value));
            _context16.prev = 76;
            _iterator208.s();
          case 78:
            if ((_step208 = _iterator208.n()).done) {
              _context16.next = 85;
              break;
            }
            _error111 = _step208.value;
            _error111.path.prepend(new PropertySegment(that, "value"));
            _context16.next = 83;
            return _error111;
          case 83:
            _context16.next = 78;
            break;
          case 85:
            _context16.next = 90;
            break;
          case 87:
            _context16.prev = 87;
            _context16.t2 = _context16["catch"](76);
            _iterator208.e(_context16.t2);
          case 90:
            _context16.prev = 90;
            _iterator208.f();
            return _context16.finish(90);
          case 93:
            _iterator209 = _createForOfIteratorHelper(verifyContentType(that.contentType));
            _context16.prev = 94;
            _iterator209.s();
          case 96:
            if ((_step209 = _iterator209.n()).done) {
              _context16.next = 103;
              break;
            }
            _error119 = _step209.value;
            _error119.path.prepend(new PropertySegment(that, "contentType"));
            _context16.next = 101;
            return _error119;
          case 101:
            _context16.next = 96;
            break;
          case 103:
            _context16.next = 108;
            break;
          case 105:
            _context16.prev = 105;
            _context16.t3 = _context16["catch"](94);
            _iterator209.e(_context16.t3);
          case 108:
            _context16.prev = 108;
            _iterator209.f();
            return _context16.finish(108);
          case 111:
            if (!(context === true)) {
              _context16.next = 353;
              break;
            }
            if (!(that.extensions !== null)) {
              _context16.next = 149;
              break;
            }
            extensionsIndex = 0;
            _iterator210 = _createForOfIteratorHelper(that.extensions);
            _context16.prev = 115;
            _iterator210.s();
          case 117:
            if ((_step210 = _iterator210.n()).done) {
              _context16.next = 141;
              break;
            }
            item = _step210.value;
            _iterator211 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context16.prev = 120;
            _iterator211.s();
          case 122:
            if ((_step211 = _iterator211.n()).done) {
              _context16.next = 130;
              break;
            }
            _error112 = _step211.value;
            _error112.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error112.path.prepend(new PropertySegment(that, "extensions"));
            _context16.next = 128;
            return _error112;
          case 128:
            _context16.next = 122;
            break;
          case 130:
            _context16.next = 135;
            break;
          case 132:
            _context16.prev = 132;
            _context16.t4 = _context16["catch"](120);
            _iterator211.e(_context16.t4);
          case 135:
            _context16.prev = 135;
            _iterator211.f();
            return _context16.finish(135);
          case 138:
            extensionsIndex++;
          case 139:
            _context16.next = 117;
            break;
          case 141:
            _context16.next = 146;
            break;
          case 143:
            _context16.prev = 143;
            _context16.t5 = _context16["catch"](115);
            _iterator210.e(_context16.t5);
          case 146:
            _context16.prev = 146;
            _iterator210.f();
            return _context16.finish(146);
          case 149:
            if (!(that.displayName !== null)) {
              _context16.next = 186;
              break;
            }
            displayNameIndex = 0;
            _iterator212 = _createForOfIteratorHelper(that.displayName);
            _context16.prev = 152;
            _iterator212.s();
          case 154:
            if ((_step212 = _iterator212.n()).done) {
              _context16.next = 178;
              break;
            }
            _item50 = _step212.value;
            _iterator213 = _createForOfIteratorHelper(this.transformWithContext(_item50, context));
            _context16.prev = 157;
            _iterator213.s();
          case 159:
            if ((_step213 = _iterator213.n()).done) {
              _context16.next = 167;
              break;
            }
            _error113 = _step213.value;
            _error113.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error113.path.prepend(new PropertySegment(that, "displayName"));
            _context16.next = 165;
            return _error113;
          case 165:
            _context16.next = 159;
            break;
          case 167:
            _context16.next = 172;
            break;
          case 169:
            _context16.prev = 169;
            _context16.t6 = _context16["catch"](157);
            _iterator213.e(_context16.t6);
          case 172:
            _context16.prev = 172;
            _iterator213.f();
            return _context16.finish(172);
          case 175:
            displayNameIndex++;
          case 176:
            _context16.next = 154;
            break;
          case 178:
            _context16.next = 183;
            break;
          case 180:
            _context16.prev = 180;
            _context16.t7 = _context16["catch"](152);
            _iterator212.e(_context16.t7);
          case 183:
            _context16.prev = 183;
            _iterator212.f();
            return _context16.finish(183);
          case 186:
            if (!(that.description !== null)) {
              _context16.next = 223;
              break;
            }
            descriptionIndex = 0;
            _iterator214 = _createForOfIteratorHelper(that.description);
            _context16.prev = 189;
            _iterator214.s();
          case 191:
            if ((_step214 = _iterator214.n()).done) {
              _context16.next = 215;
              break;
            }
            _item51 = _step214.value;
            _iterator215 = _createForOfIteratorHelper(this.transformWithContext(_item51, context));
            _context16.prev = 194;
            _iterator215.s();
          case 196:
            if ((_step215 = _iterator215.n()).done) {
              _context16.next = 204;
              break;
            }
            _error114 = _step215.value;
            _error114.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error114.path.prepend(new PropertySegment(that, "description"));
            _context16.next = 202;
            return _error114;
          case 202:
            _context16.next = 196;
            break;
          case 204:
            _context16.next = 209;
            break;
          case 206:
            _context16.prev = 206;
            _context16.t8 = _context16["catch"](194);
            _iterator215.e(_context16.t8);
          case 209:
            _context16.prev = 209;
            _iterator215.f();
            return _context16.finish(209);
          case 212:
            descriptionIndex++;
          case 213:
            _context16.next = 191;
            break;
          case 215:
            _context16.next = 220;
            break;
          case 217:
            _context16.prev = 217;
            _context16.t9 = _context16["catch"](189);
            _iterator214.e(_context16.t9);
          case 220:
            _context16.prev = 220;
            _iterator214.f();
            return _context16.finish(220);
          case 223:
            if (!(that.semanticId !== null)) {
              _context16.next = 242;
              break;
            }
            _iterator216 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context16.prev = 225;
            _iterator216.s();
          case 227:
            if ((_step216 = _iterator216.n()).done) {
              _context16.next = 234;
              break;
            }
            _error115 = _step216.value;
            _error115.path.prepend(new PropertySegment(that, "semanticId"));
            _context16.next = 232;
            return _error115;
          case 232:
            _context16.next = 227;
            break;
          case 234:
            _context16.next = 239;
            break;
          case 236:
            _context16.prev = 236;
            _context16.t10 = _context16["catch"](225);
            _iterator216.e(_context16.t10);
          case 239:
            _context16.prev = 239;
            _iterator216.f();
            return _context16.finish(239);
          case 242:
            if (!(that.supplementalSemanticIds !== null)) {
              _context16.next = 279;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator217 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context16.prev = 245;
            _iterator217.s();
          case 247:
            if ((_step217 = _iterator217.n()).done) {
              _context16.next = 271;
              break;
            }
            _item52 = _step217.value;
            _iterator218 = _createForOfIteratorHelper(this.transformWithContext(_item52, context));
            _context16.prev = 250;
            _iterator218.s();
          case 252:
            if ((_step218 = _iterator218.n()).done) {
              _context16.next = 260;
              break;
            }
            _error116 = _step218.value;
            _error116.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error116.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context16.next = 258;
            return _error116;
          case 258:
            _context16.next = 252;
            break;
          case 260:
            _context16.next = 265;
            break;
          case 262:
            _context16.prev = 262;
            _context16.t11 = _context16["catch"](250);
            _iterator218.e(_context16.t11);
          case 265:
            _context16.prev = 265;
            _iterator218.f();
            return _context16.finish(265);
          case 268:
            supplementalSemanticIdsIndex++;
          case 269:
            _context16.next = 247;
            break;
          case 271:
            _context16.next = 276;
            break;
          case 273:
            _context16.prev = 273;
            _context16.t12 = _context16["catch"](245);
            _iterator217.e(_context16.t12);
          case 276:
            _context16.prev = 276;
            _iterator217.f();
            return _context16.finish(276);
          case 279:
            if (!(that.qualifiers !== null)) {
              _context16.next = 316;
              break;
            }
            qualifiersIndex = 0;
            _iterator219 = _createForOfIteratorHelper(that.qualifiers);
            _context16.prev = 282;
            _iterator219.s();
          case 284:
            if ((_step219 = _iterator219.n()).done) {
              _context16.next = 308;
              break;
            }
            _item53 = _step219.value;
            _iterator220 = _createForOfIteratorHelper(this.transformWithContext(_item53, context));
            _context16.prev = 287;
            _iterator220.s();
          case 289:
            if ((_step220 = _iterator220.n()).done) {
              _context16.next = 297;
              break;
            }
            _error117 = _step220.value;
            _error117.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error117.path.prepend(new PropertySegment(that, "qualifiers"));
            _context16.next = 295;
            return _error117;
          case 295:
            _context16.next = 289;
            break;
          case 297:
            _context16.next = 302;
            break;
          case 299:
            _context16.prev = 299;
            _context16.t13 = _context16["catch"](287);
            _iterator220.e(_context16.t13);
          case 302:
            _context16.prev = 302;
            _iterator220.f();
            return _context16.finish(302);
          case 305:
            qualifiersIndex++;
          case 306:
            _context16.next = 284;
            break;
          case 308:
            _context16.next = 313;
            break;
          case 310:
            _context16.prev = 310;
            _context16.t14 = _context16["catch"](282);
            _iterator219.e(_context16.t14);
          case 313:
            _context16.prev = 313;
            _iterator219.f();
            return _context16.finish(313);
          case 316:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context16.next = 353;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator221 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context16.prev = 319;
            _iterator221.s();
          case 321:
            if ((_step221 = _iterator221.n()).done) {
              _context16.next = 345;
              break;
            }
            _item54 = _step221.value;
            _iterator222 = _createForOfIteratorHelper(this.transformWithContext(_item54, context));
            _context16.prev = 324;
            _iterator222.s();
          case 326:
            if ((_step222 = _iterator222.n()).done) {
              _context16.next = 334;
              break;
            }
            _error118 = _step222.value;
            _error118.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error118.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context16.next = 332;
            return _error118;
          case 332:
            _context16.next = 326;
            break;
          case 334:
            _context16.next = 339;
            break;
          case 336:
            _context16.prev = 336;
            _context16.t15 = _context16["catch"](324);
            _iterator222.e(_context16.t15);
          case 339:
            _context16.prev = 339;
            _iterator222.f();
            return _context16.finish(339);
          case 342:
            embeddedDataSpecificationsIndex++;
          case 343:
            _context16.next = 321;
            break;
          case 345:
            _context16.next = 350;
            break;
          case 347:
            _context16.prev = 347;
            _context16.t16 = _context16["catch"](319);
            _iterator221.e(_context16.t16);
          case 350:
            _context16.prev = 350;
            _iterator221.f();
            return _context16.finish(350);
          case 353:
          case "end":
            return _context16.stop();
        }
      }, transformBlobWithContext, this, [[38, 49, 52, 55], [57, 68, 71, 74], [76, 87, 90, 93], [94, 105, 108, 111], [115, 143, 146, 149], [120, 132, 135, 138], [152, 180, 183, 186], [157, 169, 172, 175], [189, 217, 220, 223], [194, 206, 209, 212], [225, 236, 239, 242], [245, 273, 276, 279], [250, 262, 265, 268], [282, 310, 313, 316], [287, 299, 302, 305], [319, 347, 350, 353], [324, 336, 339, 342]]);
    })
  }, {
    key: "transformFileWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformFileWithContext(that, context) {
      var _iterator223, _step223, error, _iterator224, _step224, _error120, _iterator225, _step225, _error121, _iterator226, _step226, _error129, extensionsIndex, _iterator227, _step227, item, _iterator228, _step228, _error122, displayNameIndex, _iterator229, _step229, _item55, _iterator230, _step230, _error123, descriptionIndex, _iterator231, _step231, _item56, _iterator232, _step232, _error124, _iterator233, _step233, _error125, supplementalSemanticIdsIndex, _iterator234, _step234, _item57, _iterator235, _step235, _error126, qualifiersIndex, _iterator236, _step236, _item58, _iterator237, _step237, _error127, embeddedDataSpecificationsIndex, _iterator238, _step238, _item59, _iterator239, _step239, _error128;
      return _regeneratorRuntime().wrap(function transformFileWithContext$(_context17) {
        while (1) switch (_context17.prev = _context17.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context17.next = 3;
              break;
            }
            _context17.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context17.next = 6;
              break;
            }
            _context17.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context17.next = 9;
              break;
            }
            _context17.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context17.next = 12;
              break;
            }
            _context17.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context17.next = 15;
              break;
            }
            _context17.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context17.next = 18;
              break;
            }
            _context17.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context17.next = 21;
              break;
            }
            _context17.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context17.next = 24;
              break;
            }
            _context17.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context17.next = 27;
              break;
            }
            _context17.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context17.next = 30;
              break;
            }
            _context17.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context17.next = 33;
              break;
            }
            _context17.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null) || VALID_CATEGORIES_FOR_DATA_ELEMENT.has(that.category)) {
              _context17.next = 36;
              break;
            }
            _context17.next = 36;
            return new VerificationError("Constraint AASd-090: For data elements category shall be " + "one of the following values: CONSTANT, PARAMETER or " + "VARIABLE.");
          case 36:
            if (!(that.category !== null)) {
              _context17.next = 55;
              break;
            }
            _iterator223 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context17.prev = 38;
            _iterator223.s();
          case 40:
            if ((_step223 = _iterator223.n()).done) {
              _context17.next = 47;
              break;
            }
            error = _step223.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context17.next = 45;
            return error;
          case 45:
            _context17.next = 40;
            break;
          case 47:
            _context17.next = 52;
            break;
          case 49:
            _context17.prev = 49;
            _context17.t0 = _context17["catch"](38);
            _iterator223.e(_context17.t0);
          case 52:
            _context17.prev = 52;
            _iterator223.f();
            return _context17.finish(52);
          case 55:
            if (!(that.idShort !== null)) {
              _context17.next = 74;
              break;
            }
            _iterator224 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context17.prev = 57;
            _iterator224.s();
          case 59:
            if ((_step224 = _iterator224.n()).done) {
              _context17.next = 66;
              break;
            }
            _error120 = _step224.value;
            _error120.path.prepend(new PropertySegment(that, "idShort"));
            _context17.next = 64;
            return _error120;
          case 64:
            _context17.next = 59;
            break;
          case 66:
            _context17.next = 71;
            break;
          case 68:
            _context17.prev = 68;
            _context17.t1 = _context17["catch"](57);
            _iterator224.e(_context17.t1);
          case 71:
            _context17.prev = 71;
            _iterator224.f();
            return _context17.finish(71);
          case 74:
            if (!(that.value !== null)) {
              _context17.next = 93;
              break;
            }
            _iterator225 = _createForOfIteratorHelper(verifyPathType(that.value));
            _context17.prev = 76;
            _iterator225.s();
          case 78:
            if ((_step225 = _iterator225.n()).done) {
              _context17.next = 85;
              break;
            }
            _error121 = _step225.value;
            _error121.path.prepend(new PropertySegment(that, "value"));
            _context17.next = 83;
            return _error121;
          case 83:
            _context17.next = 78;
            break;
          case 85:
            _context17.next = 90;
            break;
          case 87:
            _context17.prev = 87;
            _context17.t2 = _context17["catch"](76);
            _iterator225.e(_context17.t2);
          case 90:
            _context17.prev = 90;
            _iterator225.f();
            return _context17.finish(90);
          case 93:
            _iterator226 = _createForOfIteratorHelper(verifyContentType(that.contentType));
            _context17.prev = 94;
            _iterator226.s();
          case 96:
            if ((_step226 = _iterator226.n()).done) {
              _context17.next = 103;
              break;
            }
            _error129 = _step226.value;
            _error129.path.prepend(new PropertySegment(that, "contentType"));
            _context17.next = 101;
            return _error129;
          case 101:
            _context17.next = 96;
            break;
          case 103:
            _context17.next = 108;
            break;
          case 105:
            _context17.prev = 105;
            _context17.t3 = _context17["catch"](94);
            _iterator226.e(_context17.t3);
          case 108:
            _context17.prev = 108;
            _iterator226.f();
            return _context17.finish(108);
          case 111:
            if (!(context === true)) {
              _context17.next = 353;
              break;
            }
            if (!(that.extensions !== null)) {
              _context17.next = 149;
              break;
            }
            extensionsIndex = 0;
            _iterator227 = _createForOfIteratorHelper(that.extensions);
            _context17.prev = 115;
            _iterator227.s();
          case 117:
            if ((_step227 = _iterator227.n()).done) {
              _context17.next = 141;
              break;
            }
            item = _step227.value;
            _iterator228 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context17.prev = 120;
            _iterator228.s();
          case 122:
            if ((_step228 = _iterator228.n()).done) {
              _context17.next = 130;
              break;
            }
            _error122 = _step228.value;
            _error122.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error122.path.prepend(new PropertySegment(that, "extensions"));
            _context17.next = 128;
            return _error122;
          case 128:
            _context17.next = 122;
            break;
          case 130:
            _context17.next = 135;
            break;
          case 132:
            _context17.prev = 132;
            _context17.t4 = _context17["catch"](120);
            _iterator228.e(_context17.t4);
          case 135:
            _context17.prev = 135;
            _iterator228.f();
            return _context17.finish(135);
          case 138:
            extensionsIndex++;
          case 139:
            _context17.next = 117;
            break;
          case 141:
            _context17.next = 146;
            break;
          case 143:
            _context17.prev = 143;
            _context17.t5 = _context17["catch"](115);
            _iterator227.e(_context17.t5);
          case 146:
            _context17.prev = 146;
            _iterator227.f();
            return _context17.finish(146);
          case 149:
            if (!(that.displayName !== null)) {
              _context17.next = 186;
              break;
            }
            displayNameIndex = 0;
            _iterator229 = _createForOfIteratorHelper(that.displayName);
            _context17.prev = 152;
            _iterator229.s();
          case 154:
            if ((_step229 = _iterator229.n()).done) {
              _context17.next = 178;
              break;
            }
            _item55 = _step229.value;
            _iterator230 = _createForOfIteratorHelper(this.transformWithContext(_item55, context));
            _context17.prev = 157;
            _iterator230.s();
          case 159:
            if ((_step230 = _iterator230.n()).done) {
              _context17.next = 167;
              break;
            }
            _error123 = _step230.value;
            _error123.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error123.path.prepend(new PropertySegment(that, "displayName"));
            _context17.next = 165;
            return _error123;
          case 165:
            _context17.next = 159;
            break;
          case 167:
            _context17.next = 172;
            break;
          case 169:
            _context17.prev = 169;
            _context17.t6 = _context17["catch"](157);
            _iterator230.e(_context17.t6);
          case 172:
            _context17.prev = 172;
            _iterator230.f();
            return _context17.finish(172);
          case 175:
            displayNameIndex++;
          case 176:
            _context17.next = 154;
            break;
          case 178:
            _context17.next = 183;
            break;
          case 180:
            _context17.prev = 180;
            _context17.t7 = _context17["catch"](152);
            _iterator229.e(_context17.t7);
          case 183:
            _context17.prev = 183;
            _iterator229.f();
            return _context17.finish(183);
          case 186:
            if (!(that.description !== null)) {
              _context17.next = 223;
              break;
            }
            descriptionIndex = 0;
            _iterator231 = _createForOfIteratorHelper(that.description);
            _context17.prev = 189;
            _iterator231.s();
          case 191:
            if ((_step231 = _iterator231.n()).done) {
              _context17.next = 215;
              break;
            }
            _item56 = _step231.value;
            _iterator232 = _createForOfIteratorHelper(this.transformWithContext(_item56, context));
            _context17.prev = 194;
            _iterator232.s();
          case 196:
            if ((_step232 = _iterator232.n()).done) {
              _context17.next = 204;
              break;
            }
            _error124 = _step232.value;
            _error124.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error124.path.prepend(new PropertySegment(that, "description"));
            _context17.next = 202;
            return _error124;
          case 202:
            _context17.next = 196;
            break;
          case 204:
            _context17.next = 209;
            break;
          case 206:
            _context17.prev = 206;
            _context17.t8 = _context17["catch"](194);
            _iterator232.e(_context17.t8);
          case 209:
            _context17.prev = 209;
            _iterator232.f();
            return _context17.finish(209);
          case 212:
            descriptionIndex++;
          case 213:
            _context17.next = 191;
            break;
          case 215:
            _context17.next = 220;
            break;
          case 217:
            _context17.prev = 217;
            _context17.t9 = _context17["catch"](189);
            _iterator231.e(_context17.t9);
          case 220:
            _context17.prev = 220;
            _iterator231.f();
            return _context17.finish(220);
          case 223:
            if (!(that.semanticId !== null)) {
              _context17.next = 242;
              break;
            }
            _iterator233 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context17.prev = 225;
            _iterator233.s();
          case 227:
            if ((_step233 = _iterator233.n()).done) {
              _context17.next = 234;
              break;
            }
            _error125 = _step233.value;
            _error125.path.prepend(new PropertySegment(that, "semanticId"));
            _context17.next = 232;
            return _error125;
          case 232:
            _context17.next = 227;
            break;
          case 234:
            _context17.next = 239;
            break;
          case 236:
            _context17.prev = 236;
            _context17.t10 = _context17["catch"](225);
            _iterator233.e(_context17.t10);
          case 239:
            _context17.prev = 239;
            _iterator233.f();
            return _context17.finish(239);
          case 242:
            if (!(that.supplementalSemanticIds !== null)) {
              _context17.next = 279;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator234 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context17.prev = 245;
            _iterator234.s();
          case 247:
            if ((_step234 = _iterator234.n()).done) {
              _context17.next = 271;
              break;
            }
            _item57 = _step234.value;
            _iterator235 = _createForOfIteratorHelper(this.transformWithContext(_item57, context));
            _context17.prev = 250;
            _iterator235.s();
          case 252:
            if ((_step235 = _iterator235.n()).done) {
              _context17.next = 260;
              break;
            }
            _error126 = _step235.value;
            _error126.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error126.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context17.next = 258;
            return _error126;
          case 258:
            _context17.next = 252;
            break;
          case 260:
            _context17.next = 265;
            break;
          case 262:
            _context17.prev = 262;
            _context17.t11 = _context17["catch"](250);
            _iterator235.e(_context17.t11);
          case 265:
            _context17.prev = 265;
            _iterator235.f();
            return _context17.finish(265);
          case 268:
            supplementalSemanticIdsIndex++;
          case 269:
            _context17.next = 247;
            break;
          case 271:
            _context17.next = 276;
            break;
          case 273:
            _context17.prev = 273;
            _context17.t12 = _context17["catch"](245);
            _iterator234.e(_context17.t12);
          case 276:
            _context17.prev = 276;
            _iterator234.f();
            return _context17.finish(276);
          case 279:
            if (!(that.qualifiers !== null)) {
              _context17.next = 316;
              break;
            }
            qualifiersIndex = 0;
            _iterator236 = _createForOfIteratorHelper(that.qualifiers);
            _context17.prev = 282;
            _iterator236.s();
          case 284:
            if ((_step236 = _iterator236.n()).done) {
              _context17.next = 308;
              break;
            }
            _item58 = _step236.value;
            _iterator237 = _createForOfIteratorHelper(this.transformWithContext(_item58, context));
            _context17.prev = 287;
            _iterator237.s();
          case 289:
            if ((_step237 = _iterator237.n()).done) {
              _context17.next = 297;
              break;
            }
            _error127 = _step237.value;
            _error127.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error127.path.prepend(new PropertySegment(that, "qualifiers"));
            _context17.next = 295;
            return _error127;
          case 295:
            _context17.next = 289;
            break;
          case 297:
            _context17.next = 302;
            break;
          case 299:
            _context17.prev = 299;
            _context17.t13 = _context17["catch"](287);
            _iterator237.e(_context17.t13);
          case 302:
            _context17.prev = 302;
            _iterator237.f();
            return _context17.finish(302);
          case 305:
            qualifiersIndex++;
          case 306:
            _context17.next = 284;
            break;
          case 308:
            _context17.next = 313;
            break;
          case 310:
            _context17.prev = 310;
            _context17.t14 = _context17["catch"](282);
            _iterator236.e(_context17.t14);
          case 313:
            _context17.prev = 313;
            _iterator236.f();
            return _context17.finish(313);
          case 316:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context17.next = 353;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator238 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context17.prev = 319;
            _iterator238.s();
          case 321:
            if ((_step238 = _iterator238.n()).done) {
              _context17.next = 345;
              break;
            }
            _item59 = _step238.value;
            _iterator239 = _createForOfIteratorHelper(this.transformWithContext(_item59, context));
            _context17.prev = 324;
            _iterator239.s();
          case 326:
            if ((_step239 = _iterator239.n()).done) {
              _context17.next = 334;
              break;
            }
            _error128 = _step239.value;
            _error128.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error128.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context17.next = 332;
            return _error128;
          case 332:
            _context17.next = 326;
            break;
          case 334:
            _context17.next = 339;
            break;
          case 336:
            _context17.prev = 336;
            _context17.t15 = _context17["catch"](324);
            _iterator239.e(_context17.t15);
          case 339:
            _context17.prev = 339;
            _iterator239.f();
            return _context17.finish(339);
          case 342:
            embeddedDataSpecificationsIndex++;
          case 343:
            _context17.next = 321;
            break;
          case 345:
            _context17.next = 350;
            break;
          case 347:
            _context17.prev = 347;
            _context17.t16 = _context17["catch"](319);
            _iterator238.e(_context17.t16);
          case 350:
            _context17.prev = 350;
            _iterator238.f();
            return _context17.finish(350);
          case 353:
          case "end":
            return _context17.stop();
        }
      }, transformFileWithContext, this, [[38, 49, 52, 55], [57, 68, 71, 74], [76, 87, 90, 93], [94, 105, 108, 111], [115, 143, 146, 149], [120, 132, 135, 138], [152, 180, 183, 186], [157, 169, 172, 175], [189, 217, 220, 223], [194, 206, 209, 212], [225, 236, 239, 242], [245, 273, 276, 279], [250, 262, 265, 268], [282, 310, 313, 316], [287, 299, 302, 305], [319, 347, 350, 353], [324, 336, 339, 342]]);
    })
  }, {
    key: "transformAnnotatedRelationshipElementWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformAnnotatedRelationshipElementWithContext(that, context) {
      var _iterator240, _step240, error, _iterator241, _step241, _error130, extensionsIndex, _iterator242, _step242, item, _iterator243, _step243, _error131, displayNameIndex, _iterator244, _step244, _item60, _iterator245, _step245, _error132, descriptionIndex, _iterator246, _step246, _item61, _iterator247, _step247, _error133, _iterator248, _step248, _error134, supplementalSemanticIdsIndex, _iterator249, _step249, _item62, _iterator250, _step250, _error135, qualifiersIndex, _iterator251, _step251, _item63, _iterator252, _step252, _error136, embeddedDataSpecificationsIndex, _iterator253, _step253, _item64, _iterator254, _step254, _error137, _iterator255, _step255, _error139, _iterator256, _step256, _error140, annotationsIndex, _iterator257, _step257, _item65, _iterator258, _step258, _error138;
      return _regeneratorRuntime().wrap(function transformAnnotatedRelationshipElementWithContext$(_context18) {
        while (1) switch (_context18.prev = _context18.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context18.next = 3;
              break;
            }
            _context18.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context18.next = 6;
              break;
            }
            _context18.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context18.next = 9;
              break;
            }
            _context18.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context18.next = 12;
              break;
            }
            _context18.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context18.next = 15;
              break;
            }
            _context18.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context18.next = 18;
              break;
            }
            _context18.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context18.next = 21;
              break;
            }
            _context18.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context18.next = 24;
              break;
            }
            _context18.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context18.next = 27;
              break;
            }
            _context18.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context18.next = 30;
              break;
            }
            _context18.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context18.next = 33;
              break;
            }
            _context18.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.annotations !== null) || that.annotations.length >= 1) {
              _context18.next = 36;
              break;
            }
            _context18.next = 36;
            return new VerificationError("Annotations must be either not set or have at least one " + "item.");
          case 36:
            if (!(that.annotations !== null) || every(map(that.annotations, function (item) {
              return item.idShort !== null;
            }))) {
              _context18.next = 39;
              break;
            }
            _context18.next = 39;
            return new VerificationError("ID-shorts need to be defined for all the items of " + "annotations according to AASd-117 (ID-short of Referables " + "not being a direct child of a Submodel element list shall " + "be specified).");
          case 39:
            if (!(that.category !== null)) {
              _context18.next = 58;
              break;
            }
            _iterator240 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context18.prev = 41;
            _iterator240.s();
          case 43:
            if ((_step240 = _iterator240.n()).done) {
              _context18.next = 50;
              break;
            }
            error = _step240.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context18.next = 48;
            return error;
          case 48:
            _context18.next = 43;
            break;
          case 50:
            _context18.next = 55;
            break;
          case 52:
            _context18.prev = 52;
            _context18.t0 = _context18["catch"](41);
            _iterator240.e(_context18.t0);
          case 55:
            _context18.prev = 55;
            _iterator240.f();
            return _context18.finish(55);
          case 58:
            if (!(that.idShort !== null)) {
              _context18.next = 77;
              break;
            }
            _iterator241 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context18.prev = 60;
            _iterator241.s();
          case 62:
            if ((_step241 = _iterator241.n()).done) {
              _context18.next = 69;
              break;
            }
            _error130 = _step241.value;
            _error130.path.prepend(new PropertySegment(that, "idShort"));
            _context18.next = 67;
            return _error130;
          case 67:
            _context18.next = 62;
            break;
          case 69:
            _context18.next = 74;
            break;
          case 71:
            _context18.prev = 71;
            _context18.t1 = _context18["catch"](60);
            _iterator241.e(_context18.t1);
          case 74:
            _context18.prev = 74;
            _iterator241.f();
            return _context18.finish(74);
          case 77:
            if (!(context === true)) {
              _context18.next = 392;
              break;
            }
            if (!(that.extensions !== null)) {
              _context18.next = 115;
              break;
            }
            extensionsIndex = 0;
            _iterator242 = _createForOfIteratorHelper(that.extensions);
            _context18.prev = 81;
            _iterator242.s();
          case 83:
            if ((_step242 = _iterator242.n()).done) {
              _context18.next = 107;
              break;
            }
            item = _step242.value;
            _iterator243 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context18.prev = 86;
            _iterator243.s();
          case 88:
            if ((_step243 = _iterator243.n()).done) {
              _context18.next = 96;
              break;
            }
            _error131 = _step243.value;
            _error131.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error131.path.prepend(new PropertySegment(that, "extensions"));
            _context18.next = 94;
            return _error131;
          case 94:
            _context18.next = 88;
            break;
          case 96:
            _context18.next = 101;
            break;
          case 98:
            _context18.prev = 98;
            _context18.t2 = _context18["catch"](86);
            _iterator243.e(_context18.t2);
          case 101:
            _context18.prev = 101;
            _iterator243.f();
            return _context18.finish(101);
          case 104:
            extensionsIndex++;
          case 105:
            _context18.next = 83;
            break;
          case 107:
            _context18.next = 112;
            break;
          case 109:
            _context18.prev = 109;
            _context18.t3 = _context18["catch"](81);
            _iterator242.e(_context18.t3);
          case 112:
            _context18.prev = 112;
            _iterator242.f();
            return _context18.finish(112);
          case 115:
            if (!(that.displayName !== null)) {
              _context18.next = 152;
              break;
            }
            displayNameIndex = 0;
            _iterator244 = _createForOfIteratorHelper(that.displayName);
            _context18.prev = 118;
            _iterator244.s();
          case 120:
            if ((_step244 = _iterator244.n()).done) {
              _context18.next = 144;
              break;
            }
            _item60 = _step244.value;
            _iterator245 = _createForOfIteratorHelper(this.transformWithContext(_item60, context));
            _context18.prev = 123;
            _iterator245.s();
          case 125:
            if ((_step245 = _iterator245.n()).done) {
              _context18.next = 133;
              break;
            }
            _error132 = _step245.value;
            _error132.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error132.path.prepend(new PropertySegment(that, "displayName"));
            _context18.next = 131;
            return _error132;
          case 131:
            _context18.next = 125;
            break;
          case 133:
            _context18.next = 138;
            break;
          case 135:
            _context18.prev = 135;
            _context18.t4 = _context18["catch"](123);
            _iterator245.e(_context18.t4);
          case 138:
            _context18.prev = 138;
            _iterator245.f();
            return _context18.finish(138);
          case 141:
            displayNameIndex++;
          case 142:
            _context18.next = 120;
            break;
          case 144:
            _context18.next = 149;
            break;
          case 146:
            _context18.prev = 146;
            _context18.t5 = _context18["catch"](118);
            _iterator244.e(_context18.t5);
          case 149:
            _context18.prev = 149;
            _iterator244.f();
            return _context18.finish(149);
          case 152:
            if (!(that.description !== null)) {
              _context18.next = 189;
              break;
            }
            descriptionIndex = 0;
            _iterator246 = _createForOfIteratorHelper(that.description);
            _context18.prev = 155;
            _iterator246.s();
          case 157:
            if ((_step246 = _iterator246.n()).done) {
              _context18.next = 181;
              break;
            }
            _item61 = _step246.value;
            _iterator247 = _createForOfIteratorHelper(this.transformWithContext(_item61, context));
            _context18.prev = 160;
            _iterator247.s();
          case 162:
            if ((_step247 = _iterator247.n()).done) {
              _context18.next = 170;
              break;
            }
            _error133 = _step247.value;
            _error133.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error133.path.prepend(new PropertySegment(that, "description"));
            _context18.next = 168;
            return _error133;
          case 168:
            _context18.next = 162;
            break;
          case 170:
            _context18.next = 175;
            break;
          case 172:
            _context18.prev = 172;
            _context18.t6 = _context18["catch"](160);
            _iterator247.e(_context18.t6);
          case 175:
            _context18.prev = 175;
            _iterator247.f();
            return _context18.finish(175);
          case 178:
            descriptionIndex++;
          case 179:
            _context18.next = 157;
            break;
          case 181:
            _context18.next = 186;
            break;
          case 183:
            _context18.prev = 183;
            _context18.t7 = _context18["catch"](155);
            _iterator246.e(_context18.t7);
          case 186:
            _context18.prev = 186;
            _iterator246.f();
            return _context18.finish(186);
          case 189:
            if (!(that.semanticId !== null)) {
              _context18.next = 208;
              break;
            }
            _iterator248 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context18.prev = 191;
            _iterator248.s();
          case 193:
            if ((_step248 = _iterator248.n()).done) {
              _context18.next = 200;
              break;
            }
            _error134 = _step248.value;
            _error134.path.prepend(new PropertySegment(that, "semanticId"));
            _context18.next = 198;
            return _error134;
          case 198:
            _context18.next = 193;
            break;
          case 200:
            _context18.next = 205;
            break;
          case 202:
            _context18.prev = 202;
            _context18.t8 = _context18["catch"](191);
            _iterator248.e(_context18.t8);
          case 205:
            _context18.prev = 205;
            _iterator248.f();
            return _context18.finish(205);
          case 208:
            if (!(that.supplementalSemanticIds !== null)) {
              _context18.next = 245;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator249 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context18.prev = 211;
            _iterator249.s();
          case 213:
            if ((_step249 = _iterator249.n()).done) {
              _context18.next = 237;
              break;
            }
            _item62 = _step249.value;
            _iterator250 = _createForOfIteratorHelper(this.transformWithContext(_item62, context));
            _context18.prev = 216;
            _iterator250.s();
          case 218:
            if ((_step250 = _iterator250.n()).done) {
              _context18.next = 226;
              break;
            }
            _error135 = _step250.value;
            _error135.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error135.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context18.next = 224;
            return _error135;
          case 224:
            _context18.next = 218;
            break;
          case 226:
            _context18.next = 231;
            break;
          case 228:
            _context18.prev = 228;
            _context18.t9 = _context18["catch"](216);
            _iterator250.e(_context18.t9);
          case 231:
            _context18.prev = 231;
            _iterator250.f();
            return _context18.finish(231);
          case 234:
            supplementalSemanticIdsIndex++;
          case 235:
            _context18.next = 213;
            break;
          case 237:
            _context18.next = 242;
            break;
          case 239:
            _context18.prev = 239;
            _context18.t10 = _context18["catch"](211);
            _iterator249.e(_context18.t10);
          case 242:
            _context18.prev = 242;
            _iterator249.f();
            return _context18.finish(242);
          case 245:
            if (!(that.qualifiers !== null)) {
              _context18.next = 282;
              break;
            }
            qualifiersIndex = 0;
            _iterator251 = _createForOfIteratorHelper(that.qualifiers);
            _context18.prev = 248;
            _iterator251.s();
          case 250:
            if ((_step251 = _iterator251.n()).done) {
              _context18.next = 274;
              break;
            }
            _item63 = _step251.value;
            _iterator252 = _createForOfIteratorHelper(this.transformWithContext(_item63, context));
            _context18.prev = 253;
            _iterator252.s();
          case 255:
            if ((_step252 = _iterator252.n()).done) {
              _context18.next = 263;
              break;
            }
            _error136 = _step252.value;
            _error136.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error136.path.prepend(new PropertySegment(that, "qualifiers"));
            _context18.next = 261;
            return _error136;
          case 261:
            _context18.next = 255;
            break;
          case 263:
            _context18.next = 268;
            break;
          case 265:
            _context18.prev = 265;
            _context18.t11 = _context18["catch"](253);
            _iterator252.e(_context18.t11);
          case 268:
            _context18.prev = 268;
            _iterator252.f();
            return _context18.finish(268);
          case 271:
            qualifiersIndex++;
          case 272:
            _context18.next = 250;
            break;
          case 274:
            _context18.next = 279;
            break;
          case 276:
            _context18.prev = 276;
            _context18.t12 = _context18["catch"](248);
            _iterator251.e(_context18.t12);
          case 279:
            _context18.prev = 279;
            _iterator251.f();
            return _context18.finish(279);
          case 282:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context18.next = 319;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator253 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context18.prev = 285;
            _iterator253.s();
          case 287:
            if ((_step253 = _iterator253.n()).done) {
              _context18.next = 311;
              break;
            }
            _item64 = _step253.value;
            _iterator254 = _createForOfIteratorHelper(this.transformWithContext(_item64, context));
            _context18.prev = 290;
            _iterator254.s();
          case 292:
            if ((_step254 = _iterator254.n()).done) {
              _context18.next = 300;
              break;
            }
            _error137 = _step254.value;
            _error137.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error137.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context18.next = 298;
            return _error137;
          case 298:
            _context18.next = 292;
            break;
          case 300:
            _context18.next = 305;
            break;
          case 302:
            _context18.prev = 302;
            _context18.t13 = _context18["catch"](290);
            _iterator254.e(_context18.t13);
          case 305:
            _context18.prev = 305;
            _iterator254.f();
            return _context18.finish(305);
          case 308:
            embeddedDataSpecificationsIndex++;
          case 309:
            _context18.next = 287;
            break;
          case 311:
            _context18.next = 316;
            break;
          case 313:
            _context18.prev = 313;
            _context18.t14 = _context18["catch"](285);
            _iterator253.e(_context18.t14);
          case 316:
            _context18.prev = 316;
            _iterator253.f();
            return _context18.finish(316);
          case 319:
            _iterator255 = _createForOfIteratorHelper(this.transformWithContext(that.first, context));
            _context18.prev = 320;
            _iterator255.s();
          case 322:
            if ((_step255 = _iterator255.n()).done) {
              _context18.next = 329;
              break;
            }
            _error139 = _step255.value;
            _error139.path.prepend(new PropertySegment(that, "first"));
            _context18.next = 327;
            return _error139;
          case 327:
            _context18.next = 322;
            break;
          case 329:
            _context18.next = 334;
            break;
          case 331:
            _context18.prev = 331;
            _context18.t15 = _context18["catch"](320);
            _iterator255.e(_context18.t15);
          case 334:
            _context18.prev = 334;
            _iterator255.f();
            return _context18.finish(334);
          case 337:
            _iterator256 = _createForOfIteratorHelper(this.transformWithContext(that.second, context));
            _context18.prev = 338;
            _iterator256.s();
          case 340:
            if ((_step256 = _iterator256.n()).done) {
              _context18.next = 347;
              break;
            }
            _error140 = _step256.value;
            _error140.path.prepend(new PropertySegment(that, "second"));
            _context18.next = 345;
            return _error140;
          case 345:
            _context18.next = 340;
            break;
          case 347:
            _context18.next = 352;
            break;
          case 349:
            _context18.prev = 349;
            _context18.t16 = _context18["catch"](338);
            _iterator256.e(_context18.t16);
          case 352:
            _context18.prev = 352;
            _iterator256.f();
            return _context18.finish(352);
          case 355:
            if (!(that.annotations !== null)) {
              _context18.next = 392;
              break;
            }
            annotationsIndex = 0;
            _iterator257 = _createForOfIteratorHelper(that.annotations);
            _context18.prev = 358;
            _iterator257.s();
          case 360:
            if ((_step257 = _iterator257.n()).done) {
              _context18.next = 384;
              break;
            }
            _item65 = _step257.value;
            _iterator258 = _createForOfIteratorHelper(this.transformWithContext(_item65, context));
            _context18.prev = 363;
            _iterator258.s();
          case 365:
            if ((_step258 = _iterator258.n()).done) {
              _context18.next = 373;
              break;
            }
            _error138 = _step258.value;
            _error138.path.prepend(new IndexSegment(that.annotations, annotationsIndex));
            _error138.path.prepend(new PropertySegment(that, "annotations"));
            _context18.next = 371;
            return _error138;
          case 371:
            _context18.next = 365;
            break;
          case 373:
            _context18.next = 378;
            break;
          case 375:
            _context18.prev = 375;
            _context18.t17 = _context18["catch"](363);
            _iterator258.e(_context18.t17);
          case 378:
            _context18.prev = 378;
            _iterator258.f();
            return _context18.finish(378);
          case 381:
            annotationsIndex++;
          case 382:
            _context18.next = 360;
            break;
          case 384:
            _context18.next = 389;
            break;
          case 386:
            _context18.prev = 386;
            _context18.t18 = _context18["catch"](358);
            _iterator257.e(_context18.t18);
          case 389:
            _context18.prev = 389;
            _iterator257.f();
            return _context18.finish(389);
          case 392:
          case "end":
            return _context18.stop();
        }
      }, transformAnnotatedRelationshipElementWithContext, this, [[41, 52, 55, 58], [60, 71, 74, 77], [81, 109, 112, 115], [86, 98, 101, 104], [118, 146, 149, 152], [123, 135, 138, 141], [155, 183, 186, 189], [160, 172, 175, 178], [191, 202, 205, 208], [211, 239, 242, 245], [216, 228, 231, 234], [248, 276, 279, 282], [253, 265, 268, 271], [285, 313, 316, 319], [290, 302, 305, 308], [320, 331, 334, 337], [338, 349, 352, 355], [358, 386, 389, 392], [363, 375, 378, 381]]);
    })
  }, {
    key: "transformEntityWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformEntityWithContext(that, context) {
      var _iterator259, _step259, error, _iterator260, _step260, _error141, _iterator261, _step261, _error142, extensionsIndex, _iterator262, _step262, item, _iterator263, _step263, _error143, displayNameIndex, _iterator264, _step264, _item66, _iterator265, _step265, _error144, descriptionIndex, _iterator266, _step266, _item67, _iterator267, _step267, _error145, _iterator268, _step268, _error146, supplementalSemanticIdsIndex, _iterator269, _step269, _item68, _iterator270, _step270, _error147, qualifiersIndex, _iterator271, _step271, _item69, _iterator272, _step272, _error148, embeddedDataSpecificationsIndex, _iterator273, _step273, _item70, _iterator274, _step274, _error149, statementsIndex, _iterator275, _step275, _item71, _iterator276, _step276, _error150, specificAssetIdsIndex, _iterator277, _step277, _item72, _iterator278, _step278, _error151;
      return _regeneratorRuntime().wrap(function transformEntityWithContext$(_context19) {
        while (1) switch (_context19.prev = _context19.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context19.next = 3;
              break;
            }
            _context19.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context19.next = 6;
              break;
            }
            _context19.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context19.next = 9;
              break;
            }
            _context19.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context19.next = 12;
              break;
            }
            _context19.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context19.next = 15;
              break;
            }
            _context19.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context19.next = 18;
              break;
            }
            _context19.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context19.next = 21;
              break;
            }
            _context19.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context19.next = 24;
              break;
            }
            _context19.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context19.next = 27;
              break;
            }
            _context19.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context19.next = 30;
              break;
            }
            _context19.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context19.next = 33;
              break;
            }
            _context19.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.statements !== null) || that.statements.length >= 1) {
              _context19.next = 36;
              break;
            }
            _context19.next = 36;
            return new VerificationError("Statements must be either not set or have at least one item.");
          case 36:
            if (!(that.statements !== null) || every(map(that.statements, function (item) {
              return item.idShort !== null;
            }))) {
              _context19.next = 39;
              break;
            }
            _context19.next = 39;
            return new VerificationError("ID-shorts need to be defined for all the items of " + "statements according to AASd-117 (ID-short of Referables " + "not being a direct child of a Submodel element list shall " + "be specified).");
          case 39:
            if (that.entityType == EntityType.SelfManagedEntity && (that.globalAssetId !== null && that.specificAssetIds === null || that.globalAssetId === null && that.specificAssetIds !== null && that.specificAssetIds.length >= 1) || that.entityType != EntityType.SelfManagedEntity && that.globalAssetId === null && that.specificAssetIds === null) {
              _context19.next = 42;
              break;
            }
            _context19.next = 42;
            return new VerificationError("Constraint AASd-014: Either the attribute global asset ID " + "or specific asset ID must be set if entity type is set to " + "self-managed entity. They are not existing otherwise.");
          case 42:
            if (!(that.specificAssetIds !== null) || that.specificAssetIds.length >= 1) {
              _context19.next = 45;
              break;
            }
            _context19.next = 45;
            return new VerificationError("Specific asset IDs must be either not set or have at least " + "one item.");
          case 45:
            if (!(that.category !== null)) {
              _context19.next = 64;
              break;
            }
            _iterator259 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context19.prev = 47;
            _iterator259.s();
          case 49:
            if ((_step259 = _iterator259.n()).done) {
              _context19.next = 56;
              break;
            }
            error = _step259.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context19.next = 54;
            return error;
          case 54:
            _context19.next = 49;
            break;
          case 56:
            _context19.next = 61;
            break;
          case 58:
            _context19.prev = 58;
            _context19.t0 = _context19["catch"](47);
            _iterator259.e(_context19.t0);
          case 61:
            _context19.prev = 61;
            _iterator259.f();
            return _context19.finish(61);
          case 64:
            if (!(that.idShort !== null)) {
              _context19.next = 83;
              break;
            }
            _iterator260 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context19.prev = 66;
            _iterator260.s();
          case 68:
            if ((_step260 = _iterator260.n()).done) {
              _context19.next = 75;
              break;
            }
            _error141 = _step260.value;
            _error141.path.prepend(new PropertySegment(that, "idShort"));
            _context19.next = 73;
            return _error141;
          case 73:
            _context19.next = 68;
            break;
          case 75:
            _context19.next = 80;
            break;
          case 77:
            _context19.prev = 77;
            _context19.t1 = _context19["catch"](66);
            _iterator260.e(_context19.t1);
          case 80:
            _context19.prev = 80;
            _iterator260.f();
            return _context19.finish(80);
          case 83:
            if (!(that.globalAssetId !== null)) {
              _context19.next = 102;
              break;
            }
            _iterator261 = _createForOfIteratorHelper(verifyIdentifier(that.globalAssetId));
            _context19.prev = 85;
            _iterator261.s();
          case 87:
            if ((_step261 = _iterator261.n()).done) {
              _context19.next = 94;
              break;
            }
            _error142 = _step261.value;
            _error142.path.prepend(new PropertySegment(that, "globalAssetId"));
            _context19.next = 92;
            return _error142;
          case 92:
            _context19.next = 87;
            break;
          case 94:
            _context19.next = 99;
            break;
          case 96:
            _context19.prev = 96;
            _context19.t2 = _context19["catch"](85);
            _iterator261.e(_context19.t2);
          case 99:
            _context19.prev = 99;
            _iterator261.f();
            return _context19.finish(99);
          case 102:
            if (!(context === true)) {
              _context19.next = 418;
              break;
            }
            if (!(that.extensions !== null)) {
              _context19.next = 140;
              break;
            }
            extensionsIndex = 0;
            _iterator262 = _createForOfIteratorHelper(that.extensions);
            _context19.prev = 106;
            _iterator262.s();
          case 108:
            if ((_step262 = _iterator262.n()).done) {
              _context19.next = 132;
              break;
            }
            item = _step262.value;
            _iterator263 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context19.prev = 111;
            _iterator263.s();
          case 113:
            if ((_step263 = _iterator263.n()).done) {
              _context19.next = 121;
              break;
            }
            _error143 = _step263.value;
            _error143.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error143.path.prepend(new PropertySegment(that, "extensions"));
            _context19.next = 119;
            return _error143;
          case 119:
            _context19.next = 113;
            break;
          case 121:
            _context19.next = 126;
            break;
          case 123:
            _context19.prev = 123;
            _context19.t3 = _context19["catch"](111);
            _iterator263.e(_context19.t3);
          case 126:
            _context19.prev = 126;
            _iterator263.f();
            return _context19.finish(126);
          case 129:
            extensionsIndex++;
          case 130:
            _context19.next = 108;
            break;
          case 132:
            _context19.next = 137;
            break;
          case 134:
            _context19.prev = 134;
            _context19.t4 = _context19["catch"](106);
            _iterator262.e(_context19.t4);
          case 137:
            _context19.prev = 137;
            _iterator262.f();
            return _context19.finish(137);
          case 140:
            if (!(that.displayName !== null)) {
              _context19.next = 177;
              break;
            }
            displayNameIndex = 0;
            _iterator264 = _createForOfIteratorHelper(that.displayName);
            _context19.prev = 143;
            _iterator264.s();
          case 145:
            if ((_step264 = _iterator264.n()).done) {
              _context19.next = 169;
              break;
            }
            _item66 = _step264.value;
            _iterator265 = _createForOfIteratorHelper(this.transformWithContext(_item66, context));
            _context19.prev = 148;
            _iterator265.s();
          case 150:
            if ((_step265 = _iterator265.n()).done) {
              _context19.next = 158;
              break;
            }
            _error144 = _step265.value;
            _error144.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error144.path.prepend(new PropertySegment(that, "displayName"));
            _context19.next = 156;
            return _error144;
          case 156:
            _context19.next = 150;
            break;
          case 158:
            _context19.next = 163;
            break;
          case 160:
            _context19.prev = 160;
            _context19.t5 = _context19["catch"](148);
            _iterator265.e(_context19.t5);
          case 163:
            _context19.prev = 163;
            _iterator265.f();
            return _context19.finish(163);
          case 166:
            displayNameIndex++;
          case 167:
            _context19.next = 145;
            break;
          case 169:
            _context19.next = 174;
            break;
          case 171:
            _context19.prev = 171;
            _context19.t6 = _context19["catch"](143);
            _iterator264.e(_context19.t6);
          case 174:
            _context19.prev = 174;
            _iterator264.f();
            return _context19.finish(174);
          case 177:
            if (!(that.description !== null)) {
              _context19.next = 214;
              break;
            }
            descriptionIndex = 0;
            _iterator266 = _createForOfIteratorHelper(that.description);
            _context19.prev = 180;
            _iterator266.s();
          case 182:
            if ((_step266 = _iterator266.n()).done) {
              _context19.next = 206;
              break;
            }
            _item67 = _step266.value;
            _iterator267 = _createForOfIteratorHelper(this.transformWithContext(_item67, context));
            _context19.prev = 185;
            _iterator267.s();
          case 187:
            if ((_step267 = _iterator267.n()).done) {
              _context19.next = 195;
              break;
            }
            _error145 = _step267.value;
            _error145.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error145.path.prepend(new PropertySegment(that, "description"));
            _context19.next = 193;
            return _error145;
          case 193:
            _context19.next = 187;
            break;
          case 195:
            _context19.next = 200;
            break;
          case 197:
            _context19.prev = 197;
            _context19.t7 = _context19["catch"](185);
            _iterator267.e(_context19.t7);
          case 200:
            _context19.prev = 200;
            _iterator267.f();
            return _context19.finish(200);
          case 203:
            descriptionIndex++;
          case 204:
            _context19.next = 182;
            break;
          case 206:
            _context19.next = 211;
            break;
          case 208:
            _context19.prev = 208;
            _context19.t8 = _context19["catch"](180);
            _iterator266.e(_context19.t8);
          case 211:
            _context19.prev = 211;
            _iterator266.f();
            return _context19.finish(211);
          case 214:
            if (!(that.semanticId !== null)) {
              _context19.next = 233;
              break;
            }
            _iterator268 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context19.prev = 216;
            _iterator268.s();
          case 218:
            if ((_step268 = _iterator268.n()).done) {
              _context19.next = 225;
              break;
            }
            _error146 = _step268.value;
            _error146.path.prepend(new PropertySegment(that, "semanticId"));
            _context19.next = 223;
            return _error146;
          case 223:
            _context19.next = 218;
            break;
          case 225:
            _context19.next = 230;
            break;
          case 227:
            _context19.prev = 227;
            _context19.t9 = _context19["catch"](216);
            _iterator268.e(_context19.t9);
          case 230:
            _context19.prev = 230;
            _iterator268.f();
            return _context19.finish(230);
          case 233:
            if (!(that.supplementalSemanticIds !== null)) {
              _context19.next = 270;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator269 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context19.prev = 236;
            _iterator269.s();
          case 238:
            if ((_step269 = _iterator269.n()).done) {
              _context19.next = 262;
              break;
            }
            _item68 = _step269.value;
            _iterator270 = _createForOfIteratorHelper(this.transformWithContext(_item68, context));
            _context19.prev = 241;
            _iterator270.s();
          case 243:
            if ((_step270 = _iterator270.n()).done) {
              _context19.next = 251;
              break;
            }
            _error147 = _step270.value;
            _error147.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error147.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context19.next = 249;
            return _error147;
          case 249:
            _context19.next = 243;
            break;
          case 251:
            _context19.next = 256;
            break;
          case 253:
            _context19.prev = 253;
            _context19.t10 = _context19["catch"](241);
            _iterator270.e(_context19.t10);
          case 256:
            _context19.prev = 256;
            _iterator270.f();
            return _context19.finish(256);
          case 259:
            supplementalSemanticIdsIndex++;
          case 260:
            _context19.next = 238;
            break;
          case 262:
            _context19.next = 267;
            break;
          case 264:
            _context19.prev = 264;
            _context19.t11 = _context19["catch"](236);
            _iterator269.e(_context19.t11);
          case 267:
            _context19.prev = 267;
            _iterator269.f();
            return _context19.finish(267);
          case 270:
            if (!(that.qualifiers !== null)) {
              _context19.next = 307;
              break;
            }
            qualifiersIndex = 0;
            _iterator271 = _createForOfIteratorHelper(that.qualifiers);
            _context19.prev = 273;
            _iterator271.s();
          case 275:
            if ((_step271 = _iterator271.n()).done) {
              _context19.next = 299;
              break;
            }
            _item69 = _step271.value;
            _iterator272 = _createForOfIteratorHelper(this.transformWithContext(_item69, context));
            _context19.prev = 278;
            _iterator272.s();
          case 280:
            if ((_step272 = _iterator272.n()).done) {
              _context19.next = 288;
              break;
            }
            _error148 = _step272.value;
            _error148.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error148.path.prepend(new PropertySegment(that, "qualifiers"));
            _context19.next = 286;
            return _error148;
          case 286:
            _context19.next = 280;
            break;
          case 288:
            _context19.next = 293;
            break;
          case 290:
            _context19.prev = 290;
            _context19.t12 = _context19["catch"](278);
            _iterator272.e(_context19.t12);
          case 293:
            _context19.prev = 293;
            _iterator272.f();
            return _context19.finish(293);
          case 296:
            qualifiersIndex++;
          case 297:
            _context19.next = 275;
            break;
          case 299:
            _context19.next = 304;
            break;
          case 301:
            _context19.prev = 301;
            _context19.t13 = _context19["catch"](273);
            _iterator271.e(_context19.t13);
          case 304:
            _context19.prev = 304;
            _iterator271.f();
            return _context19.finish(304);
          case 307:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context19.next = 344;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator273 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context19.prev = 310;
            _iterator273.s();
          case 312:
            if ((_step273 = _iterator273.n()).done) {
              _context19.next = 336;
              break;
            }
            _item70 = _step273.value;
            _iterator274 = _createForOfIteratorHelper(this.transformWithContext(_item70, context));
            _context19.prev = 315;
            _iterator274.s();
          case 317:
            if ((_step274 = _iterator274.n()).done) {
              _context19.next = 325;
              break;
            }
            _error149 = _step274.value;
            _error149.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error149.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context19.next = 323;
            return _error149;
          case 323:
            _context19.next = 317;
            break;
          case 325:
            _context19.next = 330;
            break;
          case 327:
            _context19.prev = 327;
            _context19.t14 = _context19["catch"](315);
            _iterator274.e(_context19.t14);
          case 330:
            _context19.prev = 330;
            _iterator274.f();
            return _context19.finish(330);
          case 333:
            embeddedDataSpecificationsIndex++;
          case 334:
            _context19.next = 312;
            break;
          case 336:
            _context19.next = 341;
            break;
          case 338:
            _context19.prev = 338;
            _context19.t15 = _context19["catch"](310);
            _iterator273.e(_context19.t15);
          case 341:
            _context19.prev = 341;
            _iterator273.f();
            return _context19.finish(341);
          case 344:
            if (!(that.statements !== null)) {
              _context19.next = 381;
              break;
            }
            statementsIndex = 0;
            _iterator275 = _createForOfIteratorHelper(that.statements);
            _context19.prev = 347;
            _iterator275.s();
          case 349:
            if ((_step275 = _iterator275.n()).done) {
              _context19.next = 373;
              break;
            }
            _item71 = _step275.value;
            _iterator276 = _createForOfIteratorHelper(this.transformWithContext(_item71, context));
            _context19.prev = 352;
            _iterator276.s();
          case 354:
            if ((_step276 = _iterator276.n()).done) {
              _context19.next = 362;
              break;
            }
            _error150 = _step276.value;
            _error150.path.prepend(new IndexSegment(that.statements, statementsIndex));
            _error150.path.prepend(new PropertySegment(that, "statements"));
            _context19.next = 360;
            return _error150;
          case 360:
            _context19.next = 354;
            break;
          case 362:
            _context19.next = 367;
            break;
          case 364:
            _context19.prev = 364;
            _context19.t16 = _context19["catch"](352);
            _iterator276.e(_context19.t16);
          case 367:
            _context19.prev = 367;
            _iterator276.f();
            return _context19.finish(367);
          case 370:
            statementsIndex++;
          case 371:
            _context19.next = 349;
            break;
          case 373:
            _context19.next = 378;
            break;
          case 375:
            _context19.prev = 375;
            _context19.t17 = _context19["catch"](347);
            _iterator275.e(_context19.t17);
          case 378:
            _context19.prev = 378;
            _iterator275.f();
            return _context19.finish(378);
          case 381:
            if (!(that.specificAssetIds !== null)) {
              _context19.next = 418;
              break;
            }
            specificAssetIdsIndex = 0;
            _iterator277 = _createForOfIteratorHelper(that.specificAssetIds);
            _context19.prev = 384;
            _iterator277.s();
          case 386:
            if ((_step277 = _iterator277.n()).done) {
              _context19.next = 410;
              break;
            }
            _item72 = _step277.value;
            _iterator278 = _createForOfIteratorHelper(this.transformWithContext(_item72, context));
            _context19.prev = 389;
            _iterator278.s();
          case 391:
            if ((_step278 = _iterator278.n()).done) {
              _context19.next = 399;
              break;
            }
            _error151 = _step278.value;
            _error151.path.prepend(new IndexSegment(that.specificAssetIds, specificAssetIdsIndex));
            _error151.path.prepend(new PropertySegment(that, "specificAssetIds"));
            _context19.next = 397;
            return _error151;
          case 397:
            _context19.next = 391;
            break;
          case 399:
            _context19.next = 404;
            break;
          case 401:
            _context19.prev = 401;
            _context19.t18 = _context19["catch"](389);
            _iterator278.e(_context19.t18);
          case 404:
            _context19.prev = 404;
            _iterator278.f();
            return _context19.finish(404);
          case 407:
            specificAssetIdsIndex++;
          case 408:
            _context19.next = 386;
            break;
          case 410:
            _context19.next = 415;
            break;
          case 412:
            _context19.prev = 412;
            _context19.t19 = _context19["catch"](384);
            _iterator277.e(_context19.t19);
          case 415:
            _context19.prev = 415;
            _iterator277.f();
            return _context19.finish(415);
          case 418:
          case "end":
            return _context19.stop();
        }
      }, transformEntityWithContext, this, [[47, 58, 61, 64], [66, 77, 80, 83], [85, 96, 99, 102], [106, 134, 137, 140], [111, 123, 126, 129], [143, 171, 174, 177], [148, 160, 163, 166], [180, 208, 211, 214], [185, 197, 200, 203], [216, 227, 230, 233], [236, 264, 267, 270], [241, 253, 256, 259], [273, 301, 304, 307], [278, 290, 293, 296], [310, 338, 341, 344], [315, 327, 330, 333], [347, 375, 378, 381], [352, 364, 367, 370], [384, 412, 415, 418], [389, 401, 404, 407]]);
    })
  }, {
    key: "transformEventPayloadWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformEventPayloadWithContext(that, context) {
      var _iterator279, _step279, error, _iterator280, _step280, _error158, _iterator281, _step281, _error152, _iterator282, _step282, _error156, _iterator283, _step283, _error153, _iterator284, _step284, _error157, _iterator285, _step285, _error154, _iterator286, _step286, _error155;
      return _regeneratorRuntime().wrap(function transformEventPayloadWithContext$(_context20) {
        while (1) switch (_context20.prev = _context20.next) {
          case 0:
            if (isModelReferenceTo(that.source, KeyTypes.EventElement) || isModelReferenceTo(that.source, KeyTypes.BasicEventElement)) {
              _context20.next = 3;
              break;
            }
            _context20.next = 3;
            return new VerificationError("Source must be a model reference to an Event element.");
          case 3:
            if (isModelReferenceToReferable(that.observableReference)) {
              _context20.next = 6;
              break;
            }
            _context20.next = 6;
            return new VerificationError("Observable reference must be a model reference to " + "a referable.");
          case 6:
            if (!(that.topic !== null)) {
              _context20.next = 25;
              break;
            }
            _iterator279 = _createForOfIteratorHelper(verifyMessageTopicType(that.topic));
            _context20.prev = 8;
            _iterator279.s();
          case 10:
            if ((_step279 = _iterator279.n()).done) {
              _context20.next = 17;
              break;
            }
            error = _step279.value;
            error.path.prepend(new PropertySegment(that, "topic"));
            _context20.next = 15;
            return error;
          case 15:
            _context20.next = 10;
            break;
          case 17:
            _context20.next = 22;
            break;
          case 19:
            _context20.prev = 19;
            _context20.t0 = _context20["catch"](8);
            _iterator279.e(_context20.t0);
          case 22:
            _context20.prev = 22;
            _iterator279.f();
            return _context20.finish(22);
          case 25:
            _iterator280 = _createForOfIteratorHelper(verifyDateTimeUtc(that.timeStamp));
            _context20.prev = 26;
            _iterator280.s();
          case 28:
            if ((_step280 = _iterator280.n()).done) {
              _context20.next = 35;
              break;
            }
            _error158 = _step280.value;
            _error158.path.prepend(new PropertySegment(that, "timeStamp"));
            _context20.next = 33;
            return _error158;
          case 33:
            _context20.next = 28;
            break;
          case 35:
            _context20.next = 40;
            break;
          case 37:
            _context20.prev = 37;
            _context20.t1 = _context20["catch"](26);
            _iterator280.e(_context20.t1);
          case 40:
            _context20.prev = 40;
            _iterator280.f();
            return _context20.finish(40);
          case 43:
            if (!(that.payload !== null)) {
              _context20.next = 62;
              break;
            }
            _iterator281 = _createForOfIteratorHelper(verifyBlobType(that.payload));
            _context20.prev = 45;
            _iterator281.s();
          case 47:
            if ((_step281 = _iterator281.n()).done) {
              _context20.next = 54;
              break;
            }
            _error152 = _step281.value;
            _error152.path.prepend(new PropertySegment(that, "payload"));
            _context20.next = 52;
            return _error152;
          case 52:
            _context20.next = 47;
            break;
          case 54:
            _context20.next = 59;
            break;
          case 56:
            _context20.prev = 56;
            _context20.t2 = _context20["catch"](45);
            _iterator281.e(_context20.t2);
          case 59:
            _context20.prev = 59;
            _iterator281.f();
            return _context20.finish(59);
          case 62:
            if (!(context === true)) {
              _context20.next = 156;
              break;
            }
            _iterator282 = _createForOfIteratorHelper(this.transformWithContext(that.source, context));
            _context20.prev = 64;
            _iterator282.s();
          case 66:
            if ((_step282 = _iterator282.n()).done) {
              _context20.next = 73;
              break;
            }
            _error156 = _step282.value;
            _error156.path.prepend(new PropertySegment(that, "source"));
            _context20.next = 71;
            return _error156;
          case 71:
            _context20.next = 66;
            break;
          case 73:
            _context20.next = 78;
            break;
          case 75:
            _context20.prev = 75;
            _context20.t3 = _context20["catch"](64);
            _iterator282.e(_context20.t3);
          case 78:
            _context20.prev = 78;
            _iterator282.f();
            return _context20.finish(78);
          case 81:
            if (!(that.sourceSemanticId !== null)) {
              _context20.next = 100;
              break;
            }
            _iterator283 = _createForOfIteratorHelper(this.transformWithContext(that.sourceSemanticId, context));
            _context20.prev = 83;
            _iterator283.s();
          case 85:
            if ((_step283 = _iterator283.n()).done) {
              _context20.next = 92;
              break;
            }
            _error153 = _step283.value;
            _error153.path.prepend(new PropertySegment(that, "sourceSemanticId"));
            _context20.next = 90;
            return _error153;
          case 90:
            _context20.next = 85;
            break;
          case 92:
            _context20.next = 97;
            break;
          case 94:
            _context20.prev = 94;
            _context20.t4 = _context20["catch"](83);
            _iterator283.e(_context20.t4);
          case 97:
            _context20.prev = 97;
            _iterator283.f();
            return _context20.finish(97);
          case 100:
            _iterator284 = _createForOfIteratorHelper(this.transformWithContext(that.observableReference, context));
            _context20.prev = 101;
            _iterator284.s();
          case 103:
            if ((_step284 = _iterator284.n()).done) {
              _context20.next = 110;
              break;
            }
            _error157 = _step284.value;
            _error157.path.prepend(new PropertySegment(that, "observableReference"));
            _context20.next = 108;
            return _error157;
          case 108:
            _context20.next = 103;
            break;
          case 110:
            _context20.next = 115;
            break;
          case 112:
            _context20.prev = 112;
            _context20.t5 = _context20["catch"](101);
            _iterator284.e(_context20.t5);
          case 115:
            _context20.prev = 115;
            _iterator284.f();
            return _context20.finish(115);
          case 118:
            if (!(that.observableSemanticId !== null)) {
              _context20.next = 137;
              break;
            }
            _iterator285 = _createForOfIteratorHelper(this.transformWithContext(that.observableSemanticId, context));
            _context20.prev = 120;
            _iterator285.s();
          case 122:
            if ((_step285 = _iterator285.n()).done) {
              _context20.next = 129;
              break;
            }
            _error154 = _step285.value;
            _error154.path.prepend(new PropertySegment(that, "observableSemanticId"));
            _context20.next = 127;
            return _error154;
          case 127:
            _context20.next = 122;
            break;
          case 129:
            _context20.next = 134;
            break;
          case 131:
            _context20.prev = 131;
            _context20.t6 = _context20["catch"](120);
            _iterator285.e(_context20.t6);
          case 134:
            _context20.prev = 134;
            _iterator285.f();
            return _context20.finish(134);
          case 137:
            if (!(that.subjectId !== null)) {
              _context20.next = 156;
              break;
            }
            _iterator286 = _createForOfIteratorHelper(this.transformWithContext(that.subjectId, context));
            _context20.prev = 139;
            _iterator286.s();
          case 141:
            if ((_step286 = _iterator286.n()).done) {
              _context20.next = 148;
              break;
            }
            _error155 = _step286.value;
            _error155.path.prepend(new PropertySegment(that, "subjectId"));
            _context20.next = 146;
            return _error155;
          case 146:
            _context20.next = 141;
            break;
          case 148:
            _context20.next = 153;
            break;
          case 150:
            _context20.prev = 150;
            _context20.t7 = _context20["catch"](139);
            _iterator286.e(_context20.t7);
          case 153:
            _context20.prev = 153;
            _iterator286.f();
            return _context20.finish(153);
          case 156:
          case "end":
            return _context20.stop();
        }
      }, transformEventPayloadWithContext, this, [[8, 19, 22, 25], [26, 37, 40, 43], [45, 56, 59, 62], [64, 75, 78, 81], [83, 94, 97, 100], [101, 112, 115, 118], [120, 131, 134, 137], [139, 150, 153, 156]]);
    })
  }, {
    key: "transformBasicEventElementWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformBasicEventElementWithContext(that, context) {
      var _iterator287, _step287, error, _iterator288, _step288, _error159, _iterator289, _step289, _error160, _iterator290, _step290, _error161, _iterator291, _step291, _error162, _iterator292, _step292, _error163, extensionsIndex, _iterator293, _step293, item, _iterator294, _step294, _error164, displayNameIndex, _iterator295, _step295, _item73, _iterator296, _step296, _error165, descriptionIndex, _iterator297, _step297, _item74, _iterator298, _step298, _error166, _iterator299, _step299, _error167, supplementalSemanticIdsIndex, _iterator300, _step300, _item75, _iterator301, _step301, _error168, qualifiersIndex, _iterator302, _step302, _item76, _iterator303, _step303, _error169, embeddedDataSpecificationsIndex, _iterator304, _step304, _item77, _iterator305, _step305, _error170, _iterator306, _step306, _error172, _iterator307, _step307, _error171;
      return _regeneratorRuntime().wrap(function transformBasicEventElementWithContext$(_context21) {
        while (1) switch (_context21.prev = _context21.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context21.next = 3;
              break;
            }
            _context21.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context21.next = 6;
              break;
            }
            _context21.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context21.next = 9;
              break;
            }
            _context21.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context21.next = 12;
              break;
            }
            _context21.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context21.next = 15;
              break;
            }
            _context21.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context21.next = 18;
              break;
            }
            _context21.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context21.next = 21;
              break;
            }
            _context21.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context21.next = 24;
              break;
            }
            _context21.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context21.next = 27;
              break;
            }
            _context21.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context21.next = 30;
              break;
            }
            _context21.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context21.next = 33;
              break;
            }
            _context21.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.direction == Direction.Input) || that.maxInterval === null) {
              _context21.next = 36;
              break;
            }
            _context21.next = 36;
            return new VerificationError("Max. interval is not applicable for input direction.");
          case 36:
            if (isModelReferenceToReferable(that.observed)) {
              _context21.next = 39;
              break;
            }
            _context21.next = 39;
            return new VerificationError("Observed must be a model reference to a referable.");
          case 39:
            if (!(that.messageBroker !== null) || isModelReferenceToReferable(that.messageBroker)) {
              _context21.next = 42;
              break;
            }
            _context21.next = 42;
            return new VerificationError("Message broker must be a model reference to a referable.");
          case 42:
            if (!(that.category !== null)) {
              _context21.next = 61;
              break;
            }
            _iterator287 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context21.prev = 44;
            _iterator287.s();
          case 46:
            if ((_step287 = _iterator287.n()).done) {
              _context21.next = 53;
              break;
            }
            error = _step287.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context21.next = 51;
            return error;
          case 51:
            _context21.next = 46;
            break;
          case 53:
            _context21.next = 58;
            break;
          case 55:
            _context21.prev = 55;
            _context21.t0 = _context21["catch"](44);
            _iterator287.e(_context21.t0);
          case 58:
            _context21.prev = 58;
            _iterator287.f();
            return _context21.finish(58);
          case 61:
            if (!(that.idShort !== null)) {
              _context21.next = 80;
              break;
            }
            _iterator288 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context21.prev = 63;
            _iterator288.s();
          case 65:
            if ((_step288 = _iterator288.n()).done) {
              _context21.next = 72;
              break;
            }
            _error159 = _step288.value;
            _error159.path.prepend(new PropertySegment(that, "idShort"));
            _context21.next = 70;
            return _error159;
          case 70:
            _context21.next = 65;
            break;
          case 72:
            _context21.next = 77;
            break;
          case 74:
            _context21.prev = 74;
            _context21.t1 = _context21["catch"](63);
            _iterator288.e(_context21.t1);
          case 77:
            _context21.prev = 77;
            _iterator288.f();
            return _context21.finish(77);
          case 80:
            if (!(that.messageTopic !== null)) {
              _context21.next = 99;
              break;
            }
            _iterator289 = _createForOfIteratorHelper(verifyMessageTopicType(that.messageTopic));
            _context21.prev = 82;
            _iterator289.s();
          case 84:
            if ((_step289 = _iterator289.n()).done) {
              _context21.next = 91;
              break;
            }
            _error160 = _step289.value;
            _error160.path.prepend(new PropertySegment(that, "messageTopic"));
            _context21.next = 89;
            return _error160;
          case 89:
            _context21.next = 84;
            break;
          case 91:
            _context21.next = 96;
            break;
          case 93:
            _context21.prev = 93;
            _context21.t2 = _context21["catch"](82);
            _iterator289.e(_context21.t2);
          case 96:
            _context21.prev = 96;
            _iterator289.f();
            return _context21.finish(96);
          case 99:
            if (!(that.lastUpdate !== null)) {
              _context21.next = 118;
              break;
            }
            _iterator290 = _createForOfIteratorHelper(verifyDateTimeUtc(that.lastUpdate));
            _context21.prev = 101;
            _iterator290.s();
          case 103:
            if ((_step290 = _iterator290.n()).done) {
              _context21.next = 110;
              break;
            }
            _error161 = _step290.value;
            _error161.path.prepend(new PropertySegment(that, "lastUpdate"));
            _context21.next = 108;
            return _error161;
          case 108:
            _context21.next = 103;
            break;
          case 110:
            _context21.next = 115;
            break;
          case 112:
            _context21.prev = 112;
            _context21.t3 = _context21["catch"](101);
            _iterator290.e(_context21.t3);
          case 115:
            _context21.prev = 115;
            _iterator290.f();
            return _context21.finish(115);
          case 118:
            if (!(that.minInterval !== null)) {
              _context21.next = 137;
              break;
            }
            _iterator291 = _createForOfIteratorHelper(verifyDuration(that.minInterval));
            _context21.prev = 120;
            _iterator291.s();
          case 122:
            if ((_step291 = _iterator291.n()).done) {
              _context21.next = 129;
              break;
            }
            _error162 = _step291.value;
            _error162.path.prepend(new PropertySegment(that, "minInterval"));
            _context21.next = 127;
            return _error162;
          case 127:
            _context21.next = 122;
            break;
          case 129:
            _context21.next = 134;
            break;
          case 131:
            _context21.prev = 131;
            _context21.t4 = _context21["catch"](120);
            _iterator291.e(_context21.t4);
          case 134:
            _context21.prev = 134;
            _iterator291.f();
            return _context21.finish(134);
          case 137:
            if (!(that.maxInterval !== null)) {
              _context21.next = 156;
              break;
            }
            _iterator292 = _createForOfIteratorHelper(verifyDuration(that.maxInterval));
            _context21.prev = 139;
            _iterator292.s();
          case 141:
            if ((_step292 = _iterator292.n()).done) {
              _context21.next = 148;
              break;
            }
            _error163 = _step292.value;
            _error163.path.prepend(new PropertySegment(that, "maxInterval"));
            _context21.next = 146;
            return _error163;
          case 146:
            _context21.next = 141;
            break;
          case 148:
            _context21.next = 153;
            break;
          case 150:
            _context21.prev = 150;
            _context21.t5 = _context21["catch"](139);
            _iterator292.e(_context21.t5);
          case 153:
            _context21.prev = 153;
            _iterator292.f();
            return _context21.finish(153);
          case 156:
            if (!(context === true)) {
              _context21.next = 435;
              break;
            }
            if (!(that.extensions !== null)) {
              _context21.next = 194;
              break;
            }
            extensionsIndex = 0;
            _iterator293 = _createForOfIteratorHelper(that.extensions);
            _context21.prev = 160;
            _iterator293.s();
          case 162:
            if ((_step293 = _iterator293.n()).done) {
              _context21.next = 186;
              break;
            }
            item = _step293.value;
            _iterator294 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context21.prev = 165;
            _iterator294.s();
          case 167:
            if ((_step294 = _iterator294.n()).done) {
              _context21.next = 175;
              break;
            }
            _error164 = _step294.value;
            _error164.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error164.path.prepend(new PropertySegment(that, "extensions"));
            _context21.next = 173;
            return _error164;
          case 173:
            _context21.next = 167;
            break;
          case 175:
            _context21.next = 180;
            break;
          case 177:
            _context21.prev = 177;
            _context21.t6 = _context21["catch"](165);
            _iterator294.e(_context21.t6);
          case 180:
            _context21.prev = 180;
            _iterator294.f();
            return _context21.finish(180);
          case 183:
            extensionsIndex++;
          case 184:
            _context21.next = 162;
            break;
          case 186:
            _context21.next = 191;
            break;
          case 188:
            _context21.prev = 188;
            _context21.t7 = _context21["catch"](160);
            _iterator293.e(_context21.t7);
          case 191:
            _context21.prev = 191;
            _iterator293.f();
            return _context21.finish(191);
          case 194:
            if (!(that.displayName !== null)) {
              _context21.next = 231;
              break;
            }
            displayNameIndex = 0;
            _iterator295 = _createForOfIteratorHelper(that.displayName);
            _context21.prev = 197;
            _iterator295.s();
          case 199:
            if ((_step295 = _iterator295.n()).done) {
              _context21.next = 223;
              break;
            }
            _item73 = _step295.value;
            _iterator296 = _createForOfIteratorHelper(this.transformWithContext(_item73, context));
            _context21.prev = 202;
            _iterator296.s();
          case 204:
            if ((_step296 = _iterator296.n()).done) {
              _context21.next = 212;
              break;
            }
            _error165 = _step296.value;
            _error165.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error165.path.prepend(new PropertySegment(that, "displayName"));
            _context21.next = 210;
            return _error165;
          case 210:
            _context21.next = 204;
            break;
          case 212:
            _context21.next = 217;
            break;
          case 214:
            _context21.prev = 214;
            _context21.t8 = _context21["catch"](202);
            _iterator296.e(_context21.t8);
          case 217:
            _context21.prev = 217;
            _iterator296.f();
            return _context21.finish(217);
          case 220:
            displayNameIndex++;
          case 221:
            _context21.next = 199;
            break;
          case 223:
            _context21.next = 228;
            break;
          case 225:
            _context21.prev = 225;
            _context21.t9 = _context21["catch"](197);
            _iterator295.e(_context21.t9);
          case 228:
            _context21.prev = 228;
            _iterator295.f();
            return _context21.finish(228);
          case 231:
            if (!(that.description !== null)) {
              _context21.next = 268;
              break;
            }
            descriptionIndex = 0;
            _iterator297 = _createForOfIteratorHelper(that.description);
            _context21.prev = 234;
            _iterator297.s();
          case 236:
            if ((_step297 = _iterator297.n()).done) {
              _context21.next = 260;
              break;
            }
            _item74 = _step297.value;
            _iterator298 = _createForOfIteratorHelper(this.transformWithContext(_item74, context));
            _context21.prev = 239;
            _iterator298.s();
          case 241:
            if ((_step298 = _iterator298.n()).done) {
              _context21.next = 249;
              break;
            }
            _error166 = _step298.value;
            _error166.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error166.path.prepend(new PropertySegment(that, "description"));
            _context21.next = 247;
            return _error166;
          case 247:
            _context21.next = 241;
            break;
          case 249:
            _context21.next = 254;
            break;
          case 251:
            _context21.prev = 251;
            _context21.t10 = _context21["catch"](239);
            _iterator298.e(_context21.t10);
          case 254:
            _context21.prev = 254;
            _iterator298.f();
            return _context21.finish(254);
          case 257:
            descriptionIndex++;
          case 258:
            _context21.next = 236;
            break;
          case 260:
            _context21.next = 265;
            break;
          case 262:
            _context21.prev = 262;
            _context21.t11 = _context21["catch"](234);
            _iterator297.e(_context21.t11);
          case 265:
            _context21.prev = 265;
            _iterator297.f();
            return _context21.finish(265);
          case 268:
            if (!(that.semanticId !== null)) {
              _context21.next = 287;
              break;
            }
            _iterator299 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context21.prev = 270;
            _iterator299.s();
          case 272:
            if ((_step299 = _iterator299.n()).done) {
              _context21.next = 279;
              break;
            }
            _error167 = _step299.value;
            _error167.path.prepend(new PropertySegment(that, "semanticId"));
            _context21.next = 277;
            return _error167;
          case 277:
            _context21.next = 272;
            break;
          case 279:
            _context21.next = 284;
            break;
          case 281:
            _context21.prev = 281;
            _context21.t12 = _context21["catch"](270);
            _iterator299.e(_context21.t12);
          case 284:
            _context21.prev = 284;
            _iterator299.f();
            return _context21.finish(284);
          case 287:
            if (!(that.supplementalSemanticIds !== null)) {
              _context21.next = 324;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator300 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context21.prev = 290;
            _iterator300.s();
          case 292:
            if ((_step300 = _iterator300.n()).done) {
              _context21.next = 316;
              break;
            }
            _item75 = _step300.value;
            _iterator301 = _createForOfIteratorHelper(this.transformWithContext(_item75, context));
            _context21.prev = 295;
            _iterator301.s();
          case 297:
            if ((_step301 = _iterator301.n()).done) {
              _context21.next = 305;
              break;
            }
            _error168 = _step301.value;
            _error168.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error168.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context21.next = 303;
            return _error168;
          case 303:
            _context21.next = 297;
            break;
          case 305:
            _context21.next = 310;
            break;
          case 307:
            _context21.prev = 307;
            _context21.t13 = _context21["catch"](295);
            _iterator301.e(_context21.t13);
          case 310:
            _context21.prev = 310;
            _iterator301.f();
            return _context21.finish(310);
          case 313:
            supplementalSemanticIdsIndex++;
          case 314:
            _context21.next = 292;
            break;
          case 316:
            _context21.next = 321;
            break;
          case 318:
            _context21.prev = 318;
            _context21.t14 = _context21["catch"](290);
            _iterator300.e(_context21.t14);
          case 321:
            _context21.prev = 321;
            _iterator300.f();
            return _context21.finish(321);
          case 324:
            if (!(that.qualifiers !== null)) {
              _context21.next = 361;
              break;
            }
            qualifiersIndex = 0;
            _iterator302 = _createForOfIteratorHelper(that.qualifiers);
            _context21.prev = 327;
            _iterator302.s();
          case 329:
            if ((_step302 = _iterator302.n()).done) {
              _context21.next = 353;
              break;
            }
            _item76 = _step302.value;
            _iterator303 = _createForOfIteratorHelper(this.transformWithContext(_item76, context));
            _context21.prev = 332;
            _iterator303.s();
          case 334:
            if ((_step303 = _iterator303.n()).done) {
              _context21.next = 342;
              break;
            }
            _error169 = _step303.value;
            _error169.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error169.path.prepend(new PropertySegment(that, "qualifiers"));
            _context21.next = 340;
            return _error169;
          case 340:
            _context21.next = 334;
            break;
          case 342:
            _context21.next = 347;
            break;
          case 344:
            _context21.prev = 344;
            _context21.t15 = _context21["catch"](332);
            _iterator303.e(_context21.t15);
          case 347:
            _context21.prev = 347;
            _iterator303.f();
            return _context21.finish(347);
          case 350:
            qualifiersIndex++;
          case 351:
            _context21.next = 329;
            break;
          case 353:
            _context21.next = 358;
            break;
          case 355:
            _context21.prev = 355;
            _context21.t16 = _context21["catch"](327);
            _iterator302.e(_context21.t16);
          case 358:
            _context21.prev = 358;
            _iterator302.f();
            return _context21.finish(358);
          case 361:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context21.next = 398;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator304 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context21.prev = 364;
            _iterator304.s();
          case 366:
            if ((_step304 = _iterator304.n()).done) {
              _context21.next = 390;
              break;
            }
            _item77 = _step304.value;
            _iterator305 = _createForOfIteratorHelper(this.transformWithContext(_item77, context));
            _context21.prev = 369;
            _iterator305.s();
          case 371:
            if ((_step305 = _iterator305.n()).done) {
              _context21.next = 379;
              break;
            }
            _error170 = _step305.value;
            _error170.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error170.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context21.next = 377;
            return _error170;
          case 377:
            _context21.next = 371;
            break;
          case 379:
            _context21.next = 384;
            break;
          case 381:
            _context21.prev = 381;
            _context21.t17 = _context21["catch"](369);
            _iterator305.e(_context21.t17);
          case 384:
            _context21.prev = 384;
            _iterator305.f();
            return _context21.finish(384);
          case 387:
            embeddedDataSpecificationsIndex++;
          case 388:
            _context21.next = 366;
            break;
          case 390:
            _context21.next = 395;
            break;
          case 392:
            _context21.prev = 392;
            _context21.t18 = _context21["catch"](364);
            _iterator304.e(_context21.t18);
          case 395:
            _context21.prev = 395;
            _iterator304.f();
            return _context21.finish(395);
          case 398:
            _iterator306 = _createForOfIteratorHelper(this.transformWithContext(that.observed, context));
            _context21.prev = 399;
            _iterator306.s();
          case 401:
            if ((_step306 = _iterator306.n()).done) {
              _context21.next = 408;
              break;
            }
            _error172 = _step306.value;
            _error172.path.prepend(new PropertySegment(that, "observed"));
            _context21.next = 406;
            return _error172;
          case 406:
            _context21.next = 401;
            break;
          case 408:
            _context21.next = 413;
            break;
          case 410:
            _context21.prev = 410;
            _context21.t19 = _context21["catch"](399);
            _iterator306.e(_context21.t19);
          case 413:
            _context21.prev = 413;
            _iterator306.f();
            return _context21.finish(413);
          case 416:
            if (!(that.messageBroker !== null)) {
              _context21.next = 435;
              break;
            }
            _iterator307 = _createForOfIteratorHelper(this.transformWithContext(that.messageBroker, context));
            _context21.prev = 418;
            _iterator307.s();
          case 420:
            if ((_step307 = _iterator307.n()).done) {
              _context21.next = 427;
              break;
            }
            _error171 = _step307.value;
            _error171.path.prepend(new PropertySegment(that, "messageBroker"));
            _context21.next = 425;
            return _error171;
          case 425:
            _context21.next = 420;
            break;
          case 427:
            _context21.next = 432;
            break;
          case 429:
            _context21.prev = 429;
            _context21.t20 = _context21["catch"](418);
            _iterator307.e(_context21.t20);
          case 432:
            _context21.prev = 432;
            _iterator307.f();
            return _context21.finish(432);
          case 435:
          case "end":
            return _context21.stop();
        }
      }, transformBasicEventElementWithContext, this, [[44, 55, 58, 61], [63, 74, 77, 80], [82, 93, 96, 99], [101, 112, 115, 118], [120, 131, 134, 137], [139, 150, 153, 156], [160, 188, 191, 194], [165, 177, 180, 183], [197, 225, 228, 231], [202, 214, 217, 220], [234, 262, 265, 268], [239, 251, 254, 257], [270, 281, 284, 287], [290, 318, 321, 324], [295, 307, 310, 313], [327, 355, 358, 361], [332, 344, 347, 350], [364, 392, 395, 398], [369, 381, 384, 387], [399, 410, 413, 416], [418, 429, 432, 435]]);
    })
  }, {
    key: "transformOperationWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformOperationWithContext(that, context) {
      var _iterator308, _step308, error, _iterator309, _step309, _error173, extensionsIndex, _iterator310, _step310, item, _iterator311, _step311, _error174, displayNameIndex, _iterator312, _step312, _item78, _iterator313, _step313, _error175, descriptionIndex, _iterator314, _step314, _item79, _iterator315, _step315, _error176, _iterator316, _step316, _error177, supplementalSemanticIdsIndex, _iterator317, _step317, _item80, _iterator318, _step318, _error178, qualifiersIndex, _iterator319, _step319, _item81, _iterator320, _step320, _error179, embeddedDataSpecificationsIndex, _iterator321, _step321, _item82, _iterator322, _step322, _error180, inputVariablesIndex, _iterator323, _step323, _item83, _iterator324, _step324, _error181, outputVariablesIndex, _iterator325, _step325, _item84, _iterator326, _step326, _error182, inoutputVariablesIndex, _iterator327, _step327, _item85, _iterator328, _step328, _error183;
      return _regeneratorRuntime().wrap(function transformOperationWithContext$(_context22) {
        while (1) switch (_context22.prev = _context22.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context22.next = 3;
              break;
            }
            _context22.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context22.next = 6;
              break;
            }
            _context22.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context22.next = 9;
              break;
            }
            _context22.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context22.next = 12;
              break;
            }
            _context22.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context22.next = 15;
              break;
            }
            _context22.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context22.next = 18;
              break;
            }
            _context22.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context22.next = 21;
              break;
            }
            _context22.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context22.next = 24;
              break;
            }
            _context22.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context22.next = 27;
              break;
            }
            _context22.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context22.next = 30;
              break;
            }
            _context22.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context22.next = 33;
              break;
            }
            _context22.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (idShortsOfVariablesAreUnique(that.inputVariables, that.outputVariables, that.inoutputVariables)) {
              _context22.next = 36;
              break;
            }
            _context22.next = 36;
            return new VerificationError("Constraint AASd-134: For an Operation the ID-short of all " + "values of input, output and in/output variables.");
          case 36:
            if (!(that.inputVariables !== null) || that.inputVariables.length >= 1) {
              _context22.next = 39;
              break;
            }
            _context22.next = 39;
            return new VerificationError("Input variables must be either not set or have at least one " + "item.");
          case 39:
            if (!(that.outputVariables !== null) || that.outputVariables.length >= 1) {
              _context22.next = 42;
              break;
            }
            _context22.next = 42;
            return new VerificationError("Output variables must be either not set or have at least " + "one item.");
          case 42:
            if (!(that.inoutputVariables !== null) || that.inoutputVariables.length >= 1) {
              _context22.next = 45;
              break;
            }
            _context22.next = 45;
            return new VerificationError("Inoutput variables must be either not set or have at least " + "one item.");
          case 45:
            if (!(that.category !== null)) {
              _context22.next = 64;
              break;
            }
            _iterator308 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context22.prev = 47;
            _iterator308.s();
          case 49:
            if ((_step308 = _iterator308.n()).done) {
              _context22.next = 56;
              break;
            }
            error = _step308.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context22.next = 54;
            return error;
          case 54:
            _context22.next = 49;
            break;
          case 56:
            _context22.next = 61;
            break;
          case 58:
            _context22.prev = 58;
            _context22.t0 = _context22["catch"](47);
            _iterator308.e(_context22.t0);
          case 61:
            _context22.prev = 61;
            _iterator308.f();
            return _context22.finish(61);
          case 64:
            if (!(that.idShort !== null)) {
              _context22.next = 83;
              break;
            }
            _iterator309 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context22.prev = 66;
            _iterator309.s();
          case 68:
            if ((_step309 = _iterator309.n()).done) {
              _context22.next = 75;
              break;
            }
            _error173 = _step309.value;
            _error173.path.prepend(new PropertySegment(that, "idShort"));
            _context22.next = 73;
            return _error173;
          case 73:
            _context22.next = 68;
            break;
          case 75:
            _context22.next = 80;
            break;
          case 77:
            _context22.prev = 77;
            _context22.t1 = _context22["catch"](66);
            _iterator309.e(_context22.t1);
          case 80:
            _context22.prev = 80;
            _iterator309.f();
            return _context22.finish(80);
          case 83:
            if (!(context === true)) {
              _context22.next = 436;
              break;
            }
            if (!(that.extensions !== null)) {
              _context22.next = 121;
              break;
            }
            extensionsIndex = 0;
            _iterator310 = _createForOfIteratorHelper(that.extensions);
            _context22.prev = 87;
            _iterator310.s();
          case 89:
            if ((_step310 = _iterator310.n()).done) {
              _context22.next = 113;
              break;
            }
            item = _step310.value;
            _iterator311 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context22.prev = 92;
            _iterator311.s();
          case 94:
            if ((_step311 = _iterator311.n()).done) {
              _context22.next = 102;
              break;
            }
            _error174 = _step311.value;
            _error174.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error174.path.prepend(new PropertySegment(that, "extensions"));
            _context22.next = 100;
            return _error174;
          case 100:
            _context22.next = 94;
            break;
          case 102:
            _context22.next = 107;
            break;
          case 104:
            _context22.prev = 104;
            _context22.t2 = _context22["catch"](92);
            _iterator311.e(_context22.t2);
          case 107:
            _context22.prev = 107;
            _iterator311.f();
            return _context22.finish(107);
          case 110:
            extensionsIndex++;
          case 111:
            _context22.next = 89;
            break;
          case 113:
            _context22.next = 118;
            break;
          case 115:
            _context22.prev = 115;
            _context22.t3 = _context22["catch"](87);
            _iterator310.e(_context22.t3);
          case 118:
            _context22.prev = 118;
            _iterator310.f();
            return _context22.finish(118);
          case 121:
            if (!(that.displayName !== null)) {
              _context22.next = 158;
              break;
            }
            displayNameIndex = 0;
            _iterator312 = _createForOfIteratorHelper(that.displayName);
            _context22.prev = 124;
            _iterator312.s();
          case 126:
            if ((_step312 = _iterator312.n()).done) {
              _context22.next = 150;
              break;
            }
            _item78 = _step312.value;
            _iterator313 = _createForOfIteratorHelper(this.transformWithContext(_item78, context));
            _context22.prev = 129;
            _iterator313.s();
          case 131:
            if ((_step313 = _iterator313.n()).done) {
              _context22.next = 139;
              break;
            }
            _error175 = _step313.value;
            _error175.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error175.path.prepend(new PropertySegment(that, "displayName"));
            _context22.next = 137;
            return _error175;
          case 137:
            _context22.next = 131;
            break;
          case 139:
            _context22.next = 144;
            break;
          case 141:
            _context22.prev = 141;
            _context22.t4 = _context22["catch"](129);
            _iterator313.e(_context22.t4);
          case 144:
            _context22.prev = 144;
            _iterator313.f();
            return _context22.finish(144);
          case 147:
            displayNameIndex++;
          case 148:
            _context22.next = 126;
            break;
          case 150:
            _context22.next = 155;
            break;
          case 152:
            _context22.prev = 152;
            _context22.t5 = _context22["catch"](124);
            _iterator312.e(_context22.t5);
          case 155:
            _context22.prev = 155;
            _iterator312.f();
            return _context22.finish(155);
          case 158:
            if (!(that.description !== null)) {
              _context22.next = 195;
              break;
            }
            descriptionIndex = 0;
            _iterator314 = _createForOfIteratorHelper(that.description);
            _context22.prev = 161;
            _iterator314.s();
          case 163:
            if ((_step314 = _iterator314.n()).done) {
              _context22.next = 187;
              break;
            }
            _item79 = _step314.value;
            _iterator315 = _createForOfIteratorHelper(this.transformWithContext(_item79, context));
            _context22.prev = 166;
            _iterator315.s();
          case 168:
            if ((_step315 = _iterator315.n()).done) {
              _context22.next = 176;
              break;
            }
            _error176 = _step315.value;
            _error176.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error176.path.prepend(new PropertySegment(that, "description"));
            _context22.next = 174;
            return _error176;
          case 174:
            _context22.next = 168;
            break;
          case 176:
            _context22.next = 181;
            break;
          case 178:
            _context22.prev = 178;
            _context22.t6 = _context22["catch"](166);
            _iterator315.e(_context22.t6);
          case 181:
            _context22.prev = 181;
            _iterator315.f();
            return _context22.finish(181);
          case 184:
            descriptionIndex++;
          case 185:
            _context22.next = 163;
            break;
          case 187:
            _context22.next = 192;
            break;
          case 189:
            _context22.prev = 189;
            _context22.t7 = _context22["catch"](161);
            _iterator314.e(_context22.t7);
          case 192:
            _context22.prev = 192;
            _iterator314.f();
            return _context22.finish(192);
          case 195:
            if (!(that.semanticId !== null)) {
              _context22.next = 214;
              break;
            }
            _iterator316 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context22.prev = 197;
            _iterator316.s();
          case 199:
            if ((_step316 = _iterator316.n()).done) {
              _context22.next = 206;
              break;
            }
            _error177 = _step316.value;
            _error177.path.prepend(new PropertySegment(that, "semanticId"));
            _context22.next = 204;
            return _error177;
          case 204:
            _context22.next = 199;
            break;
          case 206:
            _context22.next = 211;
            break;
          case 208:
            _context22.prev = 208;
            _context22.t8 = _context22["catch"](197);
            _iterator316.e(_context22.t8);
          case 211:
            _context22.prev = 211;
            _iterator316.f();
            return _context22.finish(211);
          case 214:
            if (!(that.supplementalSemanticIds !== null)) {
              _context22.next = 251;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator317 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context22.prev = 217;
            _iterator317.s();
          case 219:
            if ((_step317 = _iterator317.n()).done) {
              _context22.next = 243;
              break;
            }
            _item80 = _step317.value;
            _iterator318 = _createForOfIteratorHelper(this.transformWithContext(_item80, context));
            _context22.prev = 222;
            _iterator318.s();
          case 224:
            if ((_step318 = _iterator318.n()).done) {
              _context22.next = 232;
              break;
            }
            _error178 = _step318.value;
            _error178.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error178.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context22.next = 230;
            return _error178;
          case 230:
            _context22.next = 224;
            break;
          case 232:
            _context22.next = 237;
            break;
          case 234:
            _context22.prev = 234;
            _context22.t9 = _context22["catch"](222);
            _iterator318.e(_context22.t9);
          case 237:
            _context22.prev = 237;
            _iterator318.f();
            return _context22.finish(237);
          case 240:
            supplementalSemanticIdsIndex++;
          case 241:
            _context22.next = 219;
            break;
          case 243:
            _context22.next = 248;
            break;
          case 245:
            _context22.prev = 245;
            _context22.t10 = _context22["catch"](217);
            _iterator317.e(_context22.t10);
          case 248:
            _context22.prev = 248;
            _iterator317.f();
            return _context22.finish(248);
          case 251:
            if (!(that.qualifiers !== null)) {
              _context22.next = 288;
              break;
            }
            qualifiersIndex = 0;
            _iterator319 = _createForOfIteratorHelper(that.qualifiers);
            _context22.prev = 254;
            _iterator319.s();
          case 256:
            if ((_step319 = _iterator319.n()).done) {
              _context22.next = 280;
              break;
            }
            _item81 = _step319.value;
            _iterator320 = _createForOfIteratorHelper(this.transformWithContext(_item81, context));
            _context22.prev = 259;
            _iterator320.s();
          case 261:
            if ((_step320 = _iterator320.n()).done) {
              _context22.next = 269;
              break;
            }
            _error179 = _step320.value;
            _error179.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error179.path.prepend(new PropertySegment(that, "qualifiers"));
            _context22.next = 267;
            return _error179;
          case 267:
            _context22.next = 261;
            break;
          case 269:
            _context22.next = 274;
            break;
          case 271:
            _context22.prev = 271;
            _context22.t11 = _context22["catch"](259);
            _iterator320.e(_context22.t11);
          case 274:
            _context22.prev = 274;
            _iterator320.f();
            return _context22.finish(274);
          case 277:
            qualifiersIndex++;
          case 278:
            _context22.next = 256;
            break;
          case 280:
            _context22.next = 285;
            break;
          case 282:
            _context22.prev = 282;
            _context22.t12 = _context22["catch"](254);
            _iterator319.e(_context22.t12);
          case 285:
            _context22.prev = 285;
            _iterator319.f();
            return _context22.finish(285);
          case 288:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context22.next = 325;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator321 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context22.prev = 291;
            _iterator321.s();
          case 293:
            if ((_step321 = _iterator321.n()).done) {
              _context22.next = 317;
              break;
            }
            _item82 = _step321.value;
            _iterator322 = _createForOfIteratorHelper(this.transformWithContext(_item82, context));
            _context22.prev = 296;
            _iterator322.s();
          case 298:
            if ((_step322 = _iterator322.n()).done) {
              _context22.next = 306;
              break;
            }
            _error180 = _step322.value;
            _error180.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error180.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context22.next = 304;
            return _error180;
          case 304:
            _context22.next = 298;
            break;
          case 306:
            _context22.next = 311;
            break;
          case 308:
            _context22.prev = 308;
            _context22.t13 = _context22["catch"](296);
            _iterator322.e(_context22.t13);
          case 311:
            _context22.prev = 311;
            _iterator322.f();
            return _context22.finish(311);
          case 314:
            embeddedDataSpecificationsIndex++;
          case 315:
            _context22.next = 293;
            break;
          case 317:
            _context22.next = 322;
            break;
          case 319:
            _context22.prev = 319;
            _context22.t14 = _context22["catch"](291);
            _iterator321.e(_context22.t14);
          case 322:
            _context22.prev = 322;
            _iterator321.f();
            return _context22.finish(322);
          case 325:
            if (!(that.inputVariables !== null)) {
              _context22.next = 362;
              break;
            }
            inputVariablesIndex = 0;
            _iterator323 = _createForOfIteratorHelper(that.inputVariables);
            _context22.prev = 328;
            _iterator323.s();
          case 330:
            if ((_step323 = _iterator323.n()).done) {
              _context22.next = 354;
              break;
            }
            _item83 = _step323.value;
            _iterator324 = _createForOfIteratorHelper(this.transformWithContext(_item83, context));
            _context22.prev = 333;
            _iterator324.s();
          case 335:
            if ((_step324 = _iterator324.n()).done) {
              _context22.next = 343;
              break;
            }
            _error181 = _step324.value;
            _error181.path.prepend(new IndexSegment(that.inputVariables, inputVariablesIndex));
            _error181.path.prepend(new PropertySegment(that, "inputVariables"));
            _context22.next = 341;
            return _error181;
          case 341:
            _context22.next = 335;
            break;
          case 343:
            _context22.next = 348;
            break;
          case 345:
            _context22.prev = 345;
            _context22.t15 = _context22["catch"](333);
            _iterator324.e(_context22.t15);
          case 348:
            _context22.prev = 348;
            _iterator324.f();
            return _context22.finish(348);
          case 351:
            inputVariablesIndex++;
          case 352:
            _context22.next = 330;
            break;
          case 354:
            _context22.next = 359;
            break;
          case 356:
            _context22.prev = 356;
            _context22.t16 = _context22["catch"](328);
            _iterator323.e(_context22.t16);
          case 359:
            _context22.prev = 359;
            _iterator323.f();
            return _context22.finish(359);
          case 362:
            if (!(that.outputVariables !== null)) {
              _context22.next = 399;
              break;
            }
            outputVariablesIndex = 0;
            _iterator325 = _createForOfIteratorHelper(that.outputVariables);
            _context22.prev = 365;
            _iterator325.s();
          case 367:
            if ((_step325 = _iterator325.n()).done) {
              _context22.next = 391;
              break;
            }
            _item84 = _step325.value;
            _iterator326 = _createForOfIteratorHelper(this.transformWithContext(_item84, context));
            _context22.prev = 370;
            _iterator326.s();
          case 372:
            if ((_step326 = _iterator326.n()).done) {
              _context22.next = 380;
              break;
            }
            _error182 = _step326.value;
            _error182.path.prepend(new IndexSegment(that.outputVariables, outputVariablesIndex));
            _error182.path.prepend(new PropertySegment(that, "outputVariables"));
            _context22.next = 378;
            return _error182;
          case 378:
            _context22.next = 372;
            break;
          case 380:
            _context22.next = 385;
            break;
          case 382:
            _context22.prev = 382;
            _context22.t17 = _context22["catch"](370);
            _iterator326.e(_context22.t17);
          case 385:
            _context22.prev = 385;
            _iterator326.f();
            return _context22.finish(385);
          case 388:
            outputVariablesIndex++;
          case 389:
            _context22.next = 367;
            break;
          case 391:
            _context22.next = 396;
            break;
          case 393:
            _context22.prev = 393;
            _context22.t18 = _context22["catch"](365);
            _iterator325.e(_context22.t18);
          case 396:
            _context22.prev = 396;
            _iterator325.f();
            return _context22.finish(396);
          case 399:
            if (!(that.inoutputVariables !== null)) {
              _context22.next = 436;
              break;
            }
            inoutputVariablesIndex = 0;
            _iterator327 = _createForOfIteratorHelper(that.inoutputVariables);
            _context22.prev = 402;
            _iterator327.s();
          case 404:
            if ((_step327 = _iterator327.n()).done) {
              _context22.next = 428;
              break;
            }
            _item85 = _step327.value;
            _iterator328 = _createForOfIteratorHelper(this.transformWithContext(_item85, context));
            _context22.prev = 407;
            _iterator328.s();
          case 409:
            if ((_step328 = _iterator328.n()).done) {
              _context22.next = 417;
              break;
            }
            _error183 = _step328.value;
            _error183.path.prepend(new IndexSegment(that.inoutputVariables, inoutputVariablesIndex));
            _error183.path.prepend(new PropertySegment(that, "inoutputVariables"));
            _context22.next = 415;
            return _error183;
          case 415:
            _context22.next = 409;
            break;
          case 417:
            _context22.next = 422;
            break;
          case 419:
            _context22.prev = 419;
            _context22.t19 = _context22["catch"](407);
            _iterator328.e(_context22.t19);
          case 422:
            _context22.prev = 422;
            _iterator328.f();
            return _context22.finish(422);
          case 425:
            inoutputVariablesIndex++;
          case 426:
            _context22.next = 404;
            break;
          case 428:
            _context22.next = 433;
            break;
          case 430:
            _context22.prev = 430;
            _context22.t20 = _context22["catch"](402);
            _iterator327.e(_context22.t20);
          case 433:
            _context22.prev = 433;
            _iterator327.f();
            return _context22.finish(433);
          case 436:
          case "end":
            return _context22.stop();
        }
      }, transformOperationWithContext, this, [[47, 58, 61, 64], [66, 77, 80, 83], [87, 115, 118, 121], [92, 104, 107, 110], [124, 152, 155, 158], [129, 141, 144, 147], [161, 189, 192, 195], [166, 178, 181, 184], [197, 208, 211, 214], [217, 245, 248, 251], [222, 234, 237, 240], [254, 282, 285, 288], [259, 271, 274, 277], [291, 319, 322, 325], [296, 308, 311, 314], [328, 356, 359, 362], [333, 345, 348, 351], [365, 393, 396, 399], [370, 382, 385, 388], [402, 430, 433, 436], [407, 419, 422, 425]]);
    })
  }, {
    key: "transformOperationVariableWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformOperationVariableWithContext(that, context) {
      var _iterator329, _step329, error;
      return _regeneratorRuntime().wrap(function transformOperationVariableWithContext$(_context23) {
        while (1) switch (_context23.prev = _context23.next) {
          case 0:
            if (that.value.idShort !== null) {
              _context23.next = 3;
              break;
            }
            _context23.next = 3;
            return new VerificationError("Value must have the ID-short specified according to " + "Constraint AASd-117 (ID-short of Referables not being " + "a direct child of a Submodel element list shall be " + "specified).");
          case 3:
            if (!(context === true)) {
              _context23.next = 22;
              break;
            }
            _iterator329 = _createForOfIteratorHelper(this.transformWithContext(that.value, context));
            _context23.prev = 5;
            _iterator329.s();
          case 7:
            if ((_step329 = _iterator329.n()).done) {
              _context23.next = 14;
              break;
            }
            error = _step329.value;
            error.path.prepend(new PropertySegment(that, "value"));
            _context23.next = 12;
            return error;
          case 12:
            _context23.next = 7;
            break;
          case 14:
            _context23.next = 19;
            break;
          case 16:
            _context23.prev = 16;
            _context23.t0 = _context23["catch"](5);
            _iterator329.e(_context23.t0);
          case 19:
            _context23.prev = 19;
            _iterator329.f();
            return _context23.finish(19);
          case 22:
          case "end":
            return _context23.stop();
        }
      }, transformOperationVariableWithContext, this, [[5, 16, 19, 22]]);
    })
  }, {
    key: "transformCapabilityWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformCapabilityWithContext(that, context) {
      var _iterator330, _step330, error, _iterator331, _step331, _error184, extensionsIndex, _iterator332, _step332, item, _iterator333, _step333, _error185, displayNameIndex, _iterator334, _step334, _item86, _iterator335, _step335, _error186, descriptionIndex, _iterator336, _step336, _item87, _iterator337, _step337, _error187, _iterator338, _step338, _error188, supplementalSemanticIdsIndex, _iterator339, _step339, _item88, _iterator340, _step340, _error189, qualifiersIndex, _iterator341, _step341, _item89, _iterator342, _step342, _error190, embeddedDataSpecificationsIndex, _iterator343, _step343, _item90, _iterator344, _step344, _error191;
      return _regeneratorRuntime().wrap(function transformCapabilityWithContext$(_context24) {
        while (1) switch (_context24.prev = _context24.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context24.next = 3;
              break;
            }
            _context24.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context24.next = 6;
              break;
            }
            _context24.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context24.next = 9;
              break;
            }
            _context24.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context24.next = 12;
              break;
            }
            _context24.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context24.next = 15;
              break;
            }
            _context24.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context24.next = 18;
              break;
            }
            _context24.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.supplementalSemanticIds !== null) || that.supplementalSemanticIds.length >= 1) {
              _context24.next = 21;
              break;
            }
            _context24.next = 21;
            return new VerificationError("Supplemental semantic IDs must be either not set or have at " + "least one item.");
          case 21:
            if (!(that.supplementalSemanticIds !== null) || that.semanticId !== null) {
              _context24.next = 24;
              break;
            }
            _context24.next = 24;
            return new VerificationError("Constraint AASd-118: If there are supplemental semantic IDs " + "defined then there shall be also a main semantic ID.");
          case 24:
            if (!(that.qualifiers !== null) || that.qualifiers.length >= 1) {
              _context24.next = 27;
              break;
            }
            _context24.next = 27;
            return new VerificationError("Qualifiers must be either not set or have at least one item.");
          case 27:
            if (!(that.qualifiers !== null) || qualifierTypesAreUnique(that.qualifiers)) {
              _context24.next = 30;
              break;
            }
            _context24.next = 30;
            return new VerificationError("Constraint AASd-021: Every qualifiable can only have one " + "qualifier with the same type.");
          case 30:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context24.next = 33;
              break;
            }
            _context24.next = 33;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 33:
            if (!(that.category !== null)) {
              _context24.next = 52;
              break;
            }
            _iterator330 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context24.prev = 35;
            _iterator330.s();
          case 37:
            if ((_step330 = _iterator330.n()).done) {
              _context24.next = 44;
              break;
            }
            error = _step330.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context24.next = 42;
            return error;
          case 42:
            _context24.next = 37;
            break;
          case 44:
            _context24.next = 49;
            break;
          case 46:
            _context24.prev = 46;
            _context24.t0 = _context24["catch"](35);
            _iterator330.e(_context24.t0);
          case 49:
            _context24.prev = 49;
            _iterator330.f();
            return _context24.finish(49);
          case 52:
            if (!(that.idShort !== null)) {
              _context24.next = 71;
              break;
            }
            _iterator331 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context24.prev = 54;
            _iterator331.s();
          case 56:
            if ((_step331 = _iterator331.n()).done) {
              _context24.next = 63;
              break;
            }
            _error184 = _step331.value;
            _error184.path.prepend(new PropertySegment(that, "idShort"));
            _context24.next = 61;
            return _error184;
          case 61:
            _context24.next = 56;
            break;
          case 63:
            _context24.next = 68;
            break;
          case 65:
            _context24.prev = 65;
            _context24.t1 = _context24["catch"](54);
            _iterator331.e(_context24.t1);
          case 68:
            _context24.prev = 68;
            _iterator331.f();
            return _context24.finish(68);
          case 71:
            if (!(context === true)) {
              _context24.next = 313;
              break;
            }
            if (!(that.extensions !== null)) {
              _context24.next = 109;
              break;
            }
            extensionsIndex = 0;
            _iterator332 = _createForOfIteratorHelper(that.extensions);
            _context24.prev = 75;
            _iterator332.s();
          case 77:
            if ((_step332 = _iterator332.n()).done) {
              _context24.next = 101;
              break;
            }
            item = _step332.value;
            _iterator333 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context24.prev = 80;
            _iterator333.s();
          case 82:
            if ((_step333 = _iterator333.n()).done) {
              _context24.next = 90;
              break;
            }
            _error185 = _step333.value;
            _error185.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error185.path.prepend(new PropertySegment(that, "extensions"));
            _context24.next = 88;
            return _error185;
          case 88:
            _context24.next = 82;
            break;
          case 90:
            _context24.next = 95;
            break;
          case 92:
            _context24.prev = 92;
            _context24.t2 = _context24["catch"](80);
            _iterator333.e(_context24.t2);
          case 95:
            _context24.prev = 95;
            _iterator333.f();
            return _context24.finish(95);
          case 98:
            extensionsIndex++;
          case 99:
            _context24.next = 77;
            break;
          case 101:
            _context24.next = 106;
            break;
          case 103:
            _context24.prev = 103;
            _context24.t3 = _context24["catch"](75);
            _iterator332.e(_context24.t3);
          case 106:
            _context24.prev = 106;
            _iterator332.f();
            return _context24.finish(106);
          case 109:
            if (!(that.displayName !== null)) {
              _context24.next = 146;
              break;
            }
            displayNameIndex = 0;
            _iterator334 = _createForOfIteratorHelper(that.displayName);
            _context24.prev = 112;
            _iterator334.s();
          case 114:
            if ((_step334 = _iterator334.n()).done) {
              _context24.next = 138;
              break;
            }
            _item86 = _step334.value;
            _iterator335 = _createForOfIteratorHelper(this.transformWithContext(_item86, context));
            _context24.prev = 117;
            _iterator335.s();
          case 119:
            if ((_step335 = _iterator335.n()).done) {
              _context24.next = 127;
              break;
            }
            _error186 = _step335.value;
            _error186.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error186.path.prepend(new PropertySegment(that, "displayName"));
            _context24.next = 125;
            return _error186;
          case 125:
            _context24.next = 119;
            break;
          case 127:
            _context24.next = 132;
            break;
          case 129:
            _context24.prev = 129;
            _context24.t4 = _context24["catch"](117);
            _iterator335.e(_context24.t4);
          case 132:
            _context24.prev = 132;
            _iterator335.f();
            return _context24.finish(132);
          case 135:
            displayNameIndex++;
          case 136:
            _context24.next = 114;
            break;
          case 138:
            _context24.next = 143;
            break;
          case 140:
            _context24.prev = 140;
            _context24.t5 = _context24["catch"](112);
            _iterator334.e(_context24.t5);
          case 143:
            _context24.prev = 143;
            _iterator334.f();
            return _context24.finish(143);
          case 146:
            if (!(that.description !== null)) {
              _context24.next = 183;
              break;
            }
            descriptionIndex = 0;
            _iterator336 = _createForOfIteratorHelper(that.description);
            _context24.prev = 149;
            _iterator336.s();
          case 151:
            if ((_step336 = _iterator336.n()).done) {
              _context24.next = 175;
              break;
            }
            _item87 = _step336.value;
            _iterator337 = _createForOfIteratorHelper(this.transformWithContext(_item87, context));
            _context24.prev = 154;
            _iterator337.s();
          case 156:
            if ((_step337 = _iterator337.n()).done) {
              _context24.next = 164;
              break;
            }
            _error187 = _step337.value;
            _error187.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error187.path.prepend(new PropertySegment(that, "description"));
            _context24.next = 162;
            return _error187;
          case 162:
            _context24.next = 156;
            break;
          case 164:
            _context24.next = 169;
            break;
          case 166:
            _context24.prev = 166;
            _context24.t6 = _context24["catch"](154);
            _iterator337.e(_context24.t6);
          case 169:
            _context24.prev = 169;
            _iterator337.f();
            return _context24.finish(169);
          case 172:
            descriptionIndex++;
          case 173:
            _context24.next = 151;
            break;
          case 175:
            _context24.next = 180;
            break;
          case 177:
            _context24.prev = 177;
            _context24.t7 = _context24["catch"](149);
            _iterator336.e(_context24.t7);
          case 180:
            _context24.prev = 180;
            _iterator336.f();
            return _context24.finish(180);
          case 183:
            if (!(that.semanticId !== null)) {
              _context24.next = 202;
              break;
            }
            _iterator338 = _createForOfIteratorHelper(this.transformWithContext(that.semanticId, context));
            _context24.prev = 185;
            _iterator338.s();
          case 187:
            if ((_step338 = _iterator338.n()).done) {
              _context24.next = 194;
              break;
            }
            _error188 = _step338.value;
            _error188.path.prepend(new PropertySegment(that, "semanticId"));
            _context24.next = 192;
            return _error188;
          case 192:
            _context24.next = 187;
            break;
          case 194:
            _context24.next = 199;
            break;
          case 196:
            _context24.prev = 196;
            _context24.t8 = _context24["catch"](185);
            _iterator338.e(_context24.t8);
          case 199:
            _context24.prev = 199;
            _iterator338.f();
            return _context24.finish(199);
          case 202:
            if (!(that.supplementalSemanticIds !== null)) {
              _context24.next = 239;
              break;
            }
            supplementalSemanticIdsIndex = 0;
            _iterator339 = _createForOfIteratorHelper(that.supplementalSemanticIds);
            _context24.prev = 205;
            _iterator339.s();
          case 207:
            if ((_step339 = _iterator339.n()).done) {
              _context24.next = 231;
              break;
            }
            _item88 = _step339.value;
            _iterator340 = _createForOfIteratorHelper(this.transformWithContext(_item88, context));
            _context24.prev = 210;
            _iterator340.s();
          case 212:
            if ((_step340 = _iterator340.n()).done) {
              _context24.next = 220;
              break;
            }
            _error189 = _step340.value;
            _error189.path.prepend(new IndexSegment(that.supplementalSemanticIds, supplementalSemanticIdsIndex));
            _error189.path.prepend(new PropertySegment(that, "supplementalSemanticIds"));
            _context24.next = 218;
            return _error189;
          case 218:
            _context24.next = 212;
            break;
          case 220:
            _context24.next = 225;
            break;
          case 222:
            _context24.prev = 222;
            _context24.t9 = _context24["catch"](210);
            _iterator340.e(_context24.t9);
          case 225:
            _context24.prev = 225;
            _iterator340.f();
            return _context24.finish(225);
          case 228:
            supplementalSemanticIdsIndex++;
          case 229:
            _context24.next = 207;
            break;
          case 231:
            _context24.next = 236;
            break;
          case 233:
            _context24.prev = 233;
            _context24.t10 = _context24["catch"](205);
            _iterator339.e(_context24.t10);
          case 236:
            _context24.prev = 236;
            _iterator339.f();
            return _context24.finish(236);
          case 239:
            if (!(that.qualifiers !== null)) {
              _context24.next = 276;
              break;
            }
            qualifiersIndex = 0;
            _iterator341 = _createForOfIteratorHelper(that.qualifiers);
            _context24.prev = 242;
            _iterator341.s();
          case 244:
            if ((_step341 = _iterator341.n()).done) {
              _context24.next = 268;
              break;
            }
            _item89 = _step341.value;
            _iterator342 = _createForOfIteratorHelper(this.transformWithContext(_item89, context));
            _context24.prev = 247;
            _iterator342.s();
          case 249:
            if ((_step342 = _iterator342.n()).done) {
              _context24.next = 257;
              break;
            }
            _error190 = _step342.value;
            _error190.path.prepend(new IndexSegment(that.qualifiers, qualifiersIndex));
            _error190.path.prepend(new PropertySegment(that, "qualifiers"));
            _context24.next = 255;
            return _error190;
          case 255:
            _context24.next = 249;
            break;
          case 257:
            _context24.next = 262;
            break;
          case 259:
            _context24.prev = 259;
            _context24.t11 = _context24["catch"](247);
            _iterator342.e(_context24.t11);
          case 262:
            _context24.prev = 262;
            _iterator342.f();
            return _context24.finish(262);
          case 265:
            qualifiersIndex++;
          case 266:
            _context24.next = 244;
            break;
          case 268:
            _context24.next = 273;
            break;
          case 270:
            _context24.prev = 270;
            _context24.t12 = _context24["catch"](242);
            _iterator341.e(_context24.t12);
          case 273:
            _context24.prev = 273;
            _iterator341.f();
            return _context24.finish(273);
          case 276:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context24.next = 313;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator343 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context24.prev = 279;
            _iterator343.s();
          case 281:
            if ((_step343 = _iterator343.n()).done) {
              _context24.next = 305;
              break;
            }
            _item90 = _step343.value;
            _iterator344 = _createForOfIteratorHelper(this.transformWithContext(_item90, context));
            _context24.prev = 284;
            _iterator344.s();
          case 286:
            if ((_step344 = _iterator344.n()).done) {
              _context24.next = 294;
              break;
            }
            _error191 = _step344.value;
            _error191.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error191.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context24.next = 292;
            return _error191;
          case 292:
            _context24.next = 286;
            break;
          case 294:
            _context24.next = 299;
            break;
          case 296:
            _context24.prev = 296;
            _context24.t13 = _context24["catch"](284);
            _iterator344.e(_context24.t13);
          case 299:
            _context24.prev = 299;
            _iterator344.f();
            return _context24.finish(299);
          case 302:
            embeddedDataSpecificationsIndex++;
          case 303:
            _context24.next = 281;
            break;
          case 305:
            _context24.next = 310;
            break;
          case 307:
            _context24.prev = 307;
            _context24.t14 = _context24["catch"](279);
            _iterator343.e(_context24.t14);
          case 310:
            _context24.prev = 310;
            _iterator343.f();
            return _context24.finish(310);
          case 313:
          case "end":
            return _context24.stop();
        }
      }, transformCapabilityWithContext, this, [[35, 46, 49, 52], [54, 65, 68, 71], [75, 103, 106, 109], [80, 92, 95, 98], [112, 140, 143, 146], [117, 129, 132, 135], [149, 177, 180, 183], [154, 166, 169, 172], [185, 196, 199, 202], [205, 233, 236, 239], [210, 222, 225, 228], [242, 270, 273, 276], [247, 259, 262, 265], [279, 307, 310, 313], [284, 296, 299, 302]]);
    })
  }, {
    key: "transformConceptDescriptionWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformConceptDescriptionWithContext(that, context) {
      var _iterator345, _step345, error, _iterator346, _step346, _error192, _iterator347, _step347, _error199, extensionsIndex, _iterator348, _step348, item, _iterator349, _step349, _error193, displayNameIndex, _iterator350, _step350, _item91, _iterator351, _step351, _error194, descriptionIndex, _iterator352, _step352, _item92, _iterator353, _step353, _error195, _iterator354, _step354, _error196, embeddedDataSpecificationsIndex, _iterator355, _step355, _item93, _iterator356, _step356, _error197, isCaseOfIndex, _iterator357, _step357, _item94, _iterator358, _step358, _error198;
      return _regeneratorRuntime().wrap(function transformConceptDescriptionWithContext$(_context25) {
        while (1) switch (_context25.prev = _context25.next) {
          case 0:
            if (!(that.extensions !== null) || that.extensions.length >= 1) {
              _context25.next = 3;
              break;
            }
            _context25.next = 3;
            return new VerificationError("Extensions must be either not set or have at least one item.");
          case 3:
            if (!(that.extensions !== null) || extensionNamesAreUnique(that.extensions)) {
              _context25.next = 6;
              break;
            }
            _context25.next = 6;
            return new VerificationError("Constraint AASd-077: The name of an extension within " + "Has-Extensions needs to be unique.");
          case 6:
            if (!(that.description !== null) || that.description.length >= 1) {
              _context25.next = 9;
              break;
            }
            _context25.next = 9;
            return new VerificationError("Description must be either not set or have at least one " + "item.");
          case 9:
            if (!(that.description !== null) || langStringsHaveUniqueLanguages(that.description)) {
              _context25.next = 12;
              break;
            }
            _context25.next = 12;
            return new VerificationError("Description must specify unique languages.");
          case 12:
            if (!(that.displayName !== null) || that.displayName.length >= 1) {
              _context25.next = 15;
              break;
            }
            _context25.next = 15;
            return new VerificationError("Display name must be either not set or have at least one " + "item.");
          case 15:
            if (!(that.displayName !== null) || langStringsHaveUniqueLanguages(that.displayName)) {
              _context25.next = 18;
              break;
            }
            _context25.next = 18;
            return new VerificationError("Display name must specify unique languages.");
          case 18:
            if (!(that.embeddedDataSpecifications !== null) || that.embeddedDataSpecifications.length >= 1) {
              _context25.next = 21;
              break;
            }
            _context25.next = 21;
            return new VerificationError("Embedded data specifications must be either not set or have " + "at least one item.");
          case 21:
            if (!(that.isCaseOf !== null) || that.isCaseOf.length >= 1) {
              _context25.next = 24;
              break;
            }
            _context25.next = 24;
            return new VerificationError("Is-case-of must be either not set or have at least one item.");
          case 24:
            if (!(that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish(that.embeddedDataSpecifications) || dataSpecificationIec61360sHaveValue(that.embeddedDataSpecifications)) {
              _context25.next = 27;
              break;
            }
            _context25.next = 27;
            return new VerificationError("Constraint AASc-3a-008: For a concept description using " + "data specification template IEC 61360, the definition is " + "mandatory and shall be defined at least in English. " + "Exception: The concept description describes a value.");
          case 27:
            if (!(that.category !== null && that.category == "QUALIFIER_TYPE" && that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sHaveDataType(that.embeddedDataSpecifications)) {
              _context25.next = 30;
              break;
            }
            _context25.next = 30;
            return new VerificationError("Constraint AASc-3a-007: For a concept description with " + "category QUALIFIER_TYPE using data specification IEC 61360, " + "the data type of the data specification is mandatory and " + "shall be defined.");
          case 30:
            if (!(that.category !== null && that.category == "DOCUMENT" && that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sForDocumentHaveAppropriateDataType(that.embeddedDataSpecifications)) {
              _context25.next = 33;
              break;
            }
            _context25.next = 33;
            return new VerificationError("Constraint AASc-3a-006: For a concept description with " + "category DOCUMENT using data specification IEC 61360, " + "the data type of the data specification shall be one of: " + "FILE, BLOB, HTML.");
          case 33:
            if (!(that.category !== null && that.category == "REFERENCE" && that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sForReferenceHaveAppropriateDataType(that.embeddedDataSpecifications)) {
              _context25.next = 36;
              break;
            }
            _context25.next = 36;
            return new VerificationError("Constraint AASc-3a-005: For a concept description with " + "category REFERENCE using data specification IEC 61360, " + "the data type of the data specification shall be one of: " + "STRING, IRI, IRDI.");
          case 36:
            if (!(that.category !== null && (that.category == "PROPERTY" || that.category == "VALUE") && that.embeddedDataSpecifications !== null) || dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType(that.embeddedDataSpecifications)) {
              _context25.next = 39;
              break;
            }
            _context25.next = 39;
            return new VerificationError("Constraint AASc-3a-004: For a concept description with " + "category PROPERTY or VALUE using data specification IEC " + "61360, the data type of the data specification is mandatory " + "and shall be one of: DATE, STRING, STRING_TRANSLATABLE, " + "INTEGER_MEASURE, INTEGER_COUNT, INTEGER_CURRENCY, " + "REAL_MEASURE, REAL_COUNT, REAL_CURRENCY, BOOLEAN, RATIONAL, " + "RATIONAL_MEASURE, TIME, TIMESTAMP.");
          case 39:
            if (!(that.category !== null)) {
              _context25.next = 58;
              break;
            }
            _iterator345 = _createForOfIteratorHelper(verifyNameType(that.category));
            _context25.prev = 41;
            _iterator345.s();
          case 43:
            if ((_step345 = _iterator345.n()).done) {
              _context25.next = 50;
              break;
            }
            error = _step345.value;
            error.path.prepend(new PropertySegment(that, "category"));
            _context25.next = 48;
            return error;
          case 48:
            _context25.next = 43;
            break;
          case 50:
            _context25.next = 55;
            break;
          case 52:
            _context25.prev = 52;
            _context25.t0 = _context25["catch"](41);
            _iterator345.e(_context25.t0);
          case 55:
            _context25.prev = 55;
            _iterator345.f();
            return _context25.finish(55);
          case 58:
            if (!(that.idShort !== null)) {
              _context25.next = 77;
              break;
            }
            _iterator346 = _createForOfIteratorHelper(verifyIdShortType(that.idShort));
            _context25.prev = 60;
            _iterator346.s();
          case 62:
            if ((_step346 = _iterator346.n()).done) {
              _context25.next = 69;
              break;
            }
            _error192 = _step346.value;
            _error192.path.prepend(new PropertySegment(that, "idShort"));
            _context25.next = 67;
            return _error192;
          case 67:
            _context25.next = 62;
            break;
          case 69:
            _context25.next = 74;
            break;
          case 71:
            _context25.prev = 71;
            _context25.t1 = _context25["catch"](60);
            _iterator346.e(_context25.t1);
          case 74:
            _context25.prev = 74;
            _iterator346.f();
            return _context25.finish(74);
          case 77:
            _iterator347 = _createForOfIteratorHelper(verifyIdentifier(that.id));
            _context25.prev = 78;
            _iterator347.s();
          case 80:
            if ((_step347 = _iterator347.n()).done) {
              _context25.next = 87;
              break;
            }
            _error199 = _step347.value;
            _error199.path.prepend(new PropertySegment(that, "id"));
            _context25.next = 85;
            return _error199;
          case 85:
            _context25.next = 80;
            break;
          case 87:
            _context25.next = 92;
            break;
          case 89:
            _context25.prev = 89;
            _context25.t2 = _context25["catch"](78);
            _iterator347.e(_context25.t2);
          case 92:
            _context25.prev = 92;
            _iterator347.f();
            return _context25.finish(92);
          case 95:
            if (!(context === true)) {
              _context25.next = 300;
              break;
            }
            if (!(that.extensions !== null)) {
              _context25.next = 133;
              break;
            }
            extensionsIndex = 0;
            _iterator348 = _createForOfIteratorHelper(that.extensions);
            _context25.prev = 99;
            _iterator348.s();
          case 101:
            if ((_step348 = _iterator348.n()).done) {
              _context25.next = 125;
              break;
            }
            item = _step348.value;
            _iterator349 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context25.prev = 104;
            _iterator349.s();
          case 106:
            if ((_step349 = _iterator349.n()).done) {
              _context25.next = 114;
              break;
            }
            _error193 = _step349.value;
            _error193.path.prepend(new IndexSegment(that.extensions, extensionsIndex));
            _error193.path.prepend(new PropertySegment(that, "extensions"));
            _context25.next = 112;
            return _error193;
          case 112:
            _context25.next = 106;
            break;
          case 114:
            _context25.next = 119;
            break;
          case 116:
            _context25.prev = 116;
            _context25.t3 = _context25["catch"](104);
            _iterator349.e(_context25.t3);
          case 119:
            _context25.prev = 119;
            _iterator349.f();
            return _context25.finish(119);
          case 122:
            extensionsIndex++;
          case 123:
            _context25.next = 101;
            break;
          case 125:
            _context25.next = 130;
            break;
          case 127:
            _context25.prev = 127;
            _context25.t4 = _context25["catch"](99);
            _iterator348.e(_context25.t4);
          case 130:
            _context25.prev = 130;
            _iterator348.f();
            return _context25.finish(130);
          case 133:
            if (!(that.displayName !== null)) {
              _context25.next = 170;
              break;
            }
            displayNameIndex = 0;
            _iterator350 = _createForOfIteratorHelper(that.displayName);
            _context25.prev = 136;
            _iterator350.s();
          case 138:
            if ((_step350 = _iterator350.n()).done) {
              _context25.next = 162;
              break;
            }
            _item91 = _step350.value;
            _iterator351 = _createForOfIteratorHelper(this.transformWithContext(_item91, context));
            _context25.prev = 141;
            _iterator351.s();
          case 143:
            if ((_step351 = _iterator351.n()).done) {
              _context25.next = 151;
              break;
            }
            _error194 = _step351.value;
            _error194.path.prepend(new IndexSegment(that.displayName, displayNameIndex));
            _error194.path.prepend(new PropertySegment(that, "displayName"));
            _context25.next = 149;
            return _error194;
          case 149:
            _context25.next = 143;
            break;
          case 151:
            _context25.next = 156;
            break;
          case 153:
            _context25.prev = 153;
            _context25.t5 = _context25["catch"](141);
            _iterator351.e(_context25.t5);
          case 156:
            _context25.prev = 156;
            _iterator351.f();
            return _context25.finish(156);
          case 159:
            displayNameIndex++;
          case 160:
            _context25.next = 138;
            break;
          case 162:
            _context25.next = 167;
            break;
          case 164:
            _context25.prev = 164;
            _context25.t6 = _context25["catch"](136);
            _iterator350.e(_context25.t6);
          case 167:
            _context25.prev = 167;
            _iterator350.f();
            return _context25.finish(167);
          case 170:
            if (!(that.description !== null)) {
              _context25.next = 207;
              break;
            }
            descriptionIndex = 0;
            _iterator352 = _createForOfIteratorHelper(that.description);
            _context25.prev = 173;
            _iterator352.s();
          case 175:
            if ((_step352 = _iterator352.n()).done) {
              _context25.next = 199;
              break;
            }
            _item92 = _step352.value;
            _iterator353 = _createForOfIteratorHelper(this.transformWithContext(_item92, context));
            _context25.prev = 178;
            _iterator353.s();
          case 180:
            if ((_step353 = _iterator353.n()).done) {
              _context25.next = 188;
              break;
            }
            _error195 = _step353.value;
            _error195.path.prepend(new IndexSegment(that.description, descriptionIndex));
            _error195.path.prepend(new PropertySegment(that, "description"));
            _context25.next = 186;
            return _error195;
          case 186:
            _context25.next = 180;
            break;
          case 188:
            _context25.next = 193;
            break;
          case 190:
            _context25.prev = 190;
            _context25.t7 = _context25["catch"](178);
            _iterator353.e(_context25.t7);
          case 193:
            _context25.prev = 193;
            _iterator353.f();
            return _context25.finish(193);
          case 196:
            descriptionIndex++;
          case 197:
            _context25.next = 175;
            break;
          case 199:
            _context25.next = 204;
            break;
          case 201:
            _context25.prev = 201;
            _context25.t8 = _context25["catch"](173);
            _iterator352.e(_context25.t8);
          case 204:
            _context25.prev = 204;
            _iterator352.f();
            return _context25.finish(204);
          case 207:
            if (!(that.administration !== null)) {
              _context25.next = 226;
              break;
            }
            _iterator354 = _createForOfIteratorHelper(this.transformWithContext(that.administration, context));
            _context25.prev = 209;
            _iterator354.s();
          case 211:
            if ((_step354 = _iterator354.n()).done) {
              _context25.next = 218;
              break;
            }
            _error196 = _step354.value;
            _error196.path.prepend(new PropertySegment(that, "administration"));
            _context25.next = 216;
            return _error196;
          case 216:
            _context25.next = 211;
            break;
          case 218:
            _context25.next = 223;
            break;
          case 220:
            _context25.prev = 220;
            _context25.t9 = _context25["catch"](209);
            _iterator354.e(_context25.t9);
          case 223:
            _context25.prev = 223;
            _iterator354.f();
            return _context25.finish(223);
          case 226:
            if (!(that.embeddedDataSpecifications !== null)) {
              _context25.next = 263;
              break;
            }
            embeddedDataSpecificationsIndex = 0;
            _iterator355 = _createForOfIteratorHelper(that.embeddedDataSpecifications);
            _context25.prev = 229;
            _iterator355.s();
          case 231:
            if ((_step355 = _iterator355.n()).done) {
              _context25.next = 255;
              break;
            }
            _item93 = _step355.value;
            _iterator356 = _createForOfIteratorHelper(this.transformWithContext(_item93, context));
            _context25.prev = 234;
            _iterator356.s();
          case 236:
            if ((_step356 = _iterator356.n()).done) {
              _context25.next = 244;
              break;
            }
            _error197 = _step356.value;
            _error197.path.prepend(new IndexSegment(that.embeddedDataSpecifications, embeddedDataSpecificationsIndex));
            _error197.path.prepend(new PropertySegment(that, "embeddedDataSpecifications"));
            _context25.next = 242;
            return _error197;
          case 242:
            _context25.next = 236;
            break;
          case 244:
            _context25.next = 249;
            break;
          case 246:
            _context25.prev = 246;
            _context25.t10 = _context25["catch"](234);
            _iterator356.e(_context25.t10);
          case 249:
            _context25.prev = 249;
            _iterator356.f();
            return _context25.finish(249);
          case 252:
            embeddedDataSpecificationsIndex++;
          case 253:
            _context25.next = 231;
            break;
          case 255:
            _context25.next = 260;
            break;
          case 257:
            _context25.prev = 257;
            _context25.t11 = _context25["catch"](229);
            _iterator355.e(_context25.t11);
          case 260:
            _context25.prev = 260;
            _iterator355.f();
            return _context25.finish(260);
          case 263:
            if (!(that.isCaseOf !== null)) {
              _context25.next = 300;
              break;
            }
            isCaseOfIndex = 0;
            _iterator357 = _createForOfIteratorHelper(that.isCaseOf);
            _context25.prev = 266;
            _iterator357.s();
          case 268:
            if ((_step357 = _iterator357.n()).done) {
              _context25.next = 292;
              break;
            }
            _item94 = _step357.value;
            _iterator358 = _createForOfIteratorHelper(this.transformWithContext(_item94, context));
            _context25.prev = 271;
            _iterator358.s();
          case 273:
            if ((_step358 = _iterator358.n()).done) {
              _context25.next = 281;
              break;
            }
            _error198 = _step358.value;
            _error198.path.prepend(new IndexSegment(that.isCaseOf, isCaseOfIndex));
            _error198.path.prepend(new PropertySegment(that, "isCaseOf"));
            _context25.next = 279;
            return _error198;
          case 279:
            _context25.next = 273;
            break;
          case 281:
            _context25.next = 286;
            break;
          case 283:
            _context25.prev = 283;
            _context25.t12 = _context25["catch"](271);
            _iterator358.e(_context25.t12);
          case 286:
            _context25.prev = 286;
            _iterator358.f();
            return _context25.finish(286);
          case 289:
            isCaseOfIndex++;
          case 290:
            _context25.next = 268;
            break;
          case 292:
            _context25.next = 297;
            break;
          case 294:
            _context25.prev = 294;
            _context25.t13 = _context25["catch"](266);
            _iterator357.e(_context25.t13);
          case 297:
            _context25.prev = 297;
            _iterator357.f();
            return _context25.finish(297);
          case 300:
          case "end":
            return _context25.stop();
        }
      }, transformConceptDescriptionWithContext, this, [[41, 52, 55, 58], [60, 71, 74, 77], [78, 89, 92, 95], [99, 127, 130, 133], [104, 116, 119, 122], [136, 164, 167, 170], [141, 153, 156, 159], [173, 201, 204, 207], [178, 190, 193, 196], [209, 220, 223, 226], [229, 257, 260, 263], [234, 246, 249, 252], [266, 294, 297, 300], [271, 283, 286, 289]]);
    })
  }, {
    key: "transformReferenceWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformReferenceWithContext(that, context) {
      var _iterator359, _step359, error, keysIndex, _iterator360, _step360, item, _iterator361, _step361, _error200;
      return _regeneratorRuntime().wrap(function transformReferenceWithContext$(_context26) {
        while (1) switch (_context26.prev = _context26.next) {
          case 0:
            if (that.keys.length >= 1) {
              _context26.next = 3;
              break;
            }
            _context26.next = 3;
            return new VerificationError("Keys must contain at least one item.");
          case 3:
            if (!(that.keys.length >= 1) || GLOBALLY_IDENTIFIABLES.has(at(that.keys, 0).type)) {
              _context26.next = 6;
              break;
            }
            _context26.next = 6;
            return new VerificationError("Constraint AASd-121: For References the value of type of " + "the first key of keys shall be one of Globally " + "Identifiables.");
          case 6:
            if (!(that.type == ReferenceTypes.ExternalReference && that.keys.length >= 1) || GENERIC_GLOBALLY_IDENTIFIABLES.has(at(that.keys, 0).type)) {
              _context26.next = 9;
              break;
            }
            _context26.next = 9;
            return new VerificationError("Constraint AASd-122: For external references the value of " + "type of the first key of keys shall be one of Generic " + "Globally Identifiables.");
          case 9:
            if (!(that.type == ReferenceTypes.ModelReference && that.keys.length >= 1) || AAS_IDENTIFIABLES.has(at(that.keys, 0).type)) {
              _context26.next = 12;
              break;
            }
            _context26.next = 12;
            return new VerificationError("Constraint AASd-123: For model references the value of type " + "of the first key of keys shall be one of AAS identifiables.");
          case 12:
            if (!(that.type == ReferenceTypes.ExternalReference && that.keys.length >= 1) || GENERIC_GLOBALLY_IDENTIFIABLES.has(at(that.keys, -1).type) || GENERIC_FRAGMENT_KEYS.has(at(that.keys, -1).type)) {
              _context26.next = 15;
              break;
            }
            _context26.next = 15;
            return new VerificationError("Constraint AASd-124: For external references the last key " + "of keys shall be either one of Generic Globally " + "Identifiables or one of Generic Fragment Keys.");
          case 15:
            if (!(that.type == ReferenceTypes.ModelReference && that.keys.length > 1) || every(map(range(1, that.keys.length), function (i) {
              return FRAGMENT_KEYS.has(at(that.keys, i).type);
            }))) {
              _context26.next = 18;
              break;
            }
            _context26.next = 18;
            return new VerificationError("Constraint AASd-125: For model references with more than " + "one key in keys the value of type of each of the keys " + "following the first key of keys shall be one of Fragment " + "Keys.");
          case 18:
            if (!(that.type == ReferenceTypes.ModelReference && that.keys.length > 1) || every(map(range(0, that.keys.length - 1), function (i) {
              return !GENERIC_FRAGMENT_KEYS.has(at(that.keys, i).type);
            }))) {
              _context26.next = 21;
              break;
            }
            _context26.next = 21;
            return new VerificationError("Constraint AASd-126: For model references with more than " + "one key in keys the value of type of the last key in " + "the reference key chain may be one of Generic Fragment Keys " + "or no key at all shall have a value out of Generic Fragment " + "Keys.");
          case 21:
            if (!(that.type == ReferenceTypes.ModelReference && that.keys.length > 1 && at(that.keys, -1).type == KeyTypes.FragmentReference) || at(that.keys, -2).type == KeyTypes.File || at(that.keys, -2).type == KeyTypes.Blob) {
              _context26.next = 24;
              break;
            }
            _context26.next = 24;
            return new VerificationError("Constraint AASd-127: For model references, with more than " + "one key in keys a key with type Fragment Reference shall be " + "preceded by a key with type File or Blob.");
          case 24:
            if (!(that.type == ReferenceTypes.ModelReference && that.keys.length > 2) || every(map(range(0, that.keys.length - 1), function (i) {
              return !(at(that.keys, i).type == KeyTypes.SubmodelElementList) || matchesXsPositiveInteger(at(that.keys, i + 1).value);
            }))) {
              _context26.next = 27;
              break;
            }
            _context26.next = 27;
            return new VerificationError("Constraint AASd-128: For model references, the value of " + "a key preceded by a key with type Submodel element list is " + "an integer number denoting the position in the array of " + "the submodel element list.");
          case 27:
            if (!(context === true)) {
              _context26.next = 83;
              break;
            }
            if (!(that.referredSemanticId !== null)) {
              _context26.next = 47;
              break;
            }
            _iterator359 = _createForOfIteratorHelper(this.transformWithContext(that.referredSemanticId, context));
            _context26.prev = 30;
            _iterator359.s();
          case 32:
            if ((_step359 = _iterator359.n()).done) {
              _context26.next = 39;
              break;
            }
            error = _step359.value;
            error.path.prepend(new PropertySegment(that, "referredSemanticId"));
            _context26.next = 37;
            return error;
          case 37:
            _context26.next = 32;
            break;
          case 39:
            _context26.next = 44;
            break;
          case 41:
            _context26.prev = 41;
            _context26.t0 = _context26["catch"](30);
            _iterator359.e(_context26.t0);
          case 44:
            _context26.prev = 44;
            _iterator359.f();
            return _context26.finish(44);
          case 47:
            keysIndex = 0;
            _iterator360 = _createForOfIteratorHelper(that.keys);
            _context26.prev = 49;
            _iterator360.s();
          case 51:
            if ((_step360 = _iterator360.n()).done) {
              _context26.next = 75;
              break;
            }
            item = _step360.value;
            _iterator361 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context26.prev = 54;
            _iterator361.s();
          case 56:
            if ((_step361 = _iterator361.n()).done) {
              _context26.next = 64;
              break;
            }
            _error200 = _step361.value;
            _error200.path.prepend(new IndexSegment(that.keys, keysIndex));
            _error200.path.prepend(new PropertySegment(that, "keys"));
            _context26.next = 62;
            return _error200;
          case 62:
            _context26.next = 56;
            break;
          case 64:
            _context26.next = 69;
            break;
          case 66:
            _context26.prev = 66;
            _context26.t1 = _context26["catch"](54);
            _iterator361.e(_context26.t1);
          case 69:
            _context26.prev = 69;
            _iterator361.f();
            return _context26.finish(69);
          case 72:
            keysIndex++;
          case 73:
            _context26.next = 51;
            break;
          case 75:
            _context26.next = 80;
            break;
          case 77:
            _context26.prev = 77;
            _context26.t2 = _context26["catch"](49);
            _iterator360.e(_context26.t2);
          case 80:
            _context26.prev = 80;
            _iterator360.f();
            return _context26.finish(80);
          case 83:
          case "end":
            return _context26.stop();
        }
      }, transformReferenceWithContext, this, [[30, 41, 44, 47], [49, 77, 80, 83], [54, 66, 69, 72]]);
    })
  }, {
    key: "transformKeyWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformKeyWithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator362, _step362, error;
      return _regeneratorRuntime().wrap(function transformKeyWithContext$(_context27) {
        while (1) switch (_context27.prev = _context27.next) {
          case 0:
            _iterator362 = _createForOfIteratorHelper(verifyIdentifier(that.value));
            _context27.prev = 1;
            _iterator362.s();
          case 3:
            if ((_step362 = _iterator362.n()).done) {
              _context27.next = 10;
              break;
            }
            error = _step362.value;
            error.path.prepend(new PropertySegment(that, "value"));
            _context27.next = 8;
            return error;
          case 8:
            _context27.next = 3;
            break;
          case 10:
            _context27.next = 15;
            break;
          case 12:
            _context27.prev = 12;
            _context27.t0 = _context27["catch"](1);
            _iterator362.e(_context27.t0);
          case 15:
            _context27.prev = 15;
            _iterator362.f();
            return _context27.finish(15);
          case 18:
          case "end":
            return _context27.stop();
        }
      }, transformKeyWithContext, null, [[1, 12, 15, 18]]);
    })
  }, {
    key: "transformLangStringNameTypeWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringNameTypeWithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator363, _step363, error, _iterator364, _step364, _error201;
      return _regeneratorRuntime().wrap(function transformLangStringNameTypeWithContext$(_context28) {
        while (1) switch (_context28.prev = _context28.next) {
          case 0:
            if (that.text.length <= 128) {
              _context28.next = 3;
              break;
            }
            _context28.next = 3;
            return new VerificationError("String shall have a maximum length of 128 characters.");
          case 3:
            _iterator363 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context28.prev = 4;
            _iterator363.s();
          case 6:
            if ((_step363 = _iterator363.n()).done) {
              _context28.next = 13;
              break;
            }
            error = _step363.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context28.next = 11;
            return error;
          case 11:
            _context28.next = 6;
            break;
          case 13:
            _context28.next = 18;
            break;
          case 15:
            _context28.prev = 15;
            _context28.t0 = _context28["catch"](4);
            _iterator363.e(_context28.t0);
          case 18:
            _context28.prev = 18;
            _iterator363.f();
            return _context28.finish(18);
          case 21:
            _iterator364 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context28.prev = 22;
            _iterator364.s();
          case 24:
            if ((_step364 = _iterator364.n()).done) {
              _context28.next = 31;
              break;
            }
            _error201 = _step364.value;
            _error201.path.prepend(new PropertySegment(that, "text"));
            _context28.next = 29;
            return _error201;
          case 29:
            _context28.next = 24;
            break;
          case 31:
            _context28.next = 36;
            break;
          case 33:
            _context28.prev = 33;
            _context28.t1 = _context28["catch"](22);
            _iterator364.e(_context28.t1);
          case 36:
            _context28.prev = 36;
            _iterator364.f();
            return _context28.finish(36);
          case 39:
          case "end":
            return _context28.stop();
        }
      }, transformLangStringNameTypeWithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformLangStringTextTypeWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringTextTypeWithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator365, _step365, error, _iterator366, _step366, _error202;
      return _regeneratorRuntime().wrap(function transformLangStringTextTypeWithContext$(_context29) {
        while (1) switch (_context29.prev = _context29.next) {
          case 0:
            if (that.text.length <= 1023) {
              _context29.next = 3;
              break;
            }
            _context29.next = 3;
            return new VerificationError("String shall have a maximum length of 1023 characters.");
          case 3:
            _iterator365 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context29.prev = 4;
            _iterator365.s();
          case 6:
            if ((_step365 = _iterator365.n()).done) {
              _context29.next = 13;
              break;
            }
            error = _step365.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context29.next = 11;
            return error;
          case 11:
            _context29.next = 6;
            break;
          case 13:
            _context29.next = 18;
            break;
          case 15:
            _context29.prev = 15;
            _context29.t0 = _context29["catch"](4);
            _iterator365.e(_context29.t0);
          case 18:
            _context29.prev = 18;
            _iterator365.f();
            return _context29.finish(18);
          case 21:
            _iterator366 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context29.prev = 22;
            _iterator366.s();
          case 24:
            if ((_step366 = _iterator366.n()).done) {
              _context29.next = 31;
              break;
            }
            _error202 = _step366.value;
            _error202.path.prepend(new PropertySegment(that, "text"));
            _context29.next = 29;
            return _error202;
          case 29:
            _context29.next = 24;
            break;
          case 31:
            _context29.next = 36;
            break;
          case 33:
            _context29.prev = 33;
            _context29.t1 = _context29["catch"](22);
            _iterator366.e(_context29.t1);
          case 36:
            _context29.prev = 36;
            _iterator366.f();
            return _context29.finish(36);
          case 39:
          case "end":
            return _context29.stop();
        }
      }, transformLangStringTextTypeWithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformEnvironmentWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformEnvironmentWithContext(that, context) {
      var assetAdministrationShellsIndex, _iterator367, _step367, item, _iterator368, _step368, error, submodelsIndex, _iterator369, _step369, _item95, _iterator370, _step370, _error203, conceptDescriptionsIndex, _iterator371, _step371, _item96, _iterator372, _step372, _error204;
      return _regeneratorRuntime().wrap(function transformEnvironmentWithContext$(_context30) {
        while (1) switch (_context30.prev = _context30.next) {
          case 0:
            if (!(that.conceptDescriptions !== null) || that.conceptDescriptions.length >= 1) {
              _context30.next = 3;
              break;
            }
            _context30.next = 3;
            return new VerificationError("Concept descriptions must be either not set or have at " + "least one item.");
          case 3:
            if (!(that.submodels !== null) || that.submodels.length >= 1) {
              _context30.next = 6;
              break;
            }
            _context30.next = 6;
            return new VerificationError("Submodels must be either not set or have at least one item.");
          case 6:
            if (!(that.assetAdministrationShells !== null) || that.assetAdministrationShells.length >= 1) {
              _context30.next = 9;
              break;
            }
            _context30.next = 9;
            return new VerificationError("Asset administration shells must be either not set or have " + "at least one item.");
          case 9:
            if (!(context === true)) {
              _context30.next = 121;
              break;
            }
            if (!(that.assetAdministrationShells !== null)) {
              _context30.next = 47;
              break;
            }
            assetAdministrationShellsIndex = 0;
            _iterator367 = _createForOfIteratorHelper(that.assetAdministrationShells);
            _context30.prev = 13;
            _iterator367.s();
          case 15:
            if ((_step367 = _iterator367.n()).done) {
              _context30.next = 39;
              break;
            }
            item = _step367.value;
            _iterator368 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context30.prev = 18;
            _iterator368.s();
          case 20:
            if ((_step368 = _iterator368.n()).done) {
              _context30.next = 28;
              break;
            }
            error = _step368.value;
            error.path.prepend(new IndexSegment(that.assetAdministrationShells, assetAdministrationShellsIndex));
            error.path.prepend(new PropertySegment(that, "assetAdministrationShells"));
            _context30.next = 26;
            return error;
          case 26:
            _context30.next = 20;
            break;
          case 28:
            _context30.next = 33;
            break;
          case 30:
            _context30.prev = 30;
            _context30.t0 = _context30["catch"](18);
            _iterator368.e(_context30.t0);
          case 33:
            _context30.prev = 33;
            _iterator368.f();
            return _context30.finish(33);
          case 36:
            assetAdministrationShellsIndex++;
          case 37:
            _context30.next = 15;
            break;
          case 39:
            _context30.next = 44;
            break;
          case 41:
            _context30.prev = 41;
            _context30.t1 = _context30["catch"](13);
            _iterator367.e(_context30.t1);
          case 44:
            _context30.prev = 44;
            _iterator367.f();
            return _context30.finish(44);
          case 47:
            if (!(that.submodels !== null)) {
              _context30.next = 84;
              break;
            }
            submodelsIndex = 0;
            _iterator369 = _createForOfIteratorHelper(that.submodels);
            _context30.prev = 50;
            _iterator369.s();
          case 52:
            if ((_step369 = _iterator369.n()).done) {
              _context30.next = 76;
              break;
            }
            _item95 = _step369.value;
            _iterator370 = _createForOfIteratorHelper(this.transformWithContext(_item95, context));
            _context30.prev = 55;
            _iterator370.s();
          case 57:
            if ((_step370 = _iterator370.n()).done) {
              _context30.next = 65;
              break;
            }
            _error203 = _step370.value;
            _error203.path.prepend(new IndexSegment(that.submodels, submodelsIndex));
            _error203.path.prepend(new PropertySegment(that, "submodels"));
            _context30.next = 63;
            return _error203;
          case 63:
            _context30.next = 57;
            break;
          case 65:
            _context30.next = 70;
            break;
          case 67:
            _context30.prev = 67;
            _context30.t2 = _context30["catch"](55);
            _iterator370.e(_context30.t2);
          case 70:
            _context30.prev = 70;
            _iterator370.f();
            return _context30.finish(70);
          case 73:
            submodelsIndex++;
          case 74:
            _context30.next = 52;
            break;
          case 76:
            _context30.next = 81;
            break;
          case 78:
            _context30.prev = 78;
            _context30.t3 = _context30["catch"](50);
            _iterator369.e(_context30.t3);
          case 81:
            _context30.prev = 81;
            _iterator369.f();
            return _context30.finish(81);
          case 84:
            if (!(that.conceptDescriptions !== null)) {
              _context30.next = 121;
              break;
            }
            conceptDescriptionsIndex = 0;
            _iterator371 = _createForOfIteratorHelper(that.conceptDescriptions);
            _context30.prev = 87;
            _iterator371.s();
          case 89:
            if ((_step371 = _iterator371.n()).done) {
              _context30.next = 113;
              break;
            }
            _item96 = _step371.value;
            _iterator372 = _createForOfIteratorHelper(this.transformWithContext(_item96, context));
            _context30.prev = 92;
            _iterator372.s();
          case 94:
            if ((_step372 = _iterator372.n()).done) {
              _context30.next = 102;
              break;
            }
            _error204 = _step372.value;
            _error204.path.prepend(new IndexSegment(that.conceptDescriptions, conceptDescriptionsIndex));
            _error204.path.prepend(new PropertySegment(that, "conceptDescriptions"));
            _context30.next = 100;
            return _error204;
          case 100:
            _context30.next = 94;
            break;
          case 102:
            _context30.next = 107;
            break;
          case 104:
            _context30.prev = 104;
            _context30.t4 = _context30["catch"](92);
            _iterator372.e(_context30.t4);
          case 107:
            _context30.prev = 107;
            _iterator372.f();
            return _context30.finish(107);
          case 110:
            conceptDescriptionsIndex++;
          case 111:
            _context30.next = 89;
            break;
          case 113:
            _context30.next = 118;
            break;
          case 115:
            _context30.prev = 115;
            _context30.t5 = _context30["catch"](87);
            _iterator371.e(_context30.t5);
          case 118:
            _context30.prev = 118;
            _iterator371.f();
            return _context30.finish(118);
          case 121:
          case "end":
            return _context30.stop();
        }
      }, transformEnvironmentWithContext, this, [[13, 41, 44, 47], [18, 30, 33, 36], [50, 78, 81, 84], [55, 67, 70, 73], [87, 115, 118, 121], [92, 104, 107, 110]]);
    })
  }, {
    key: "transformEmbeddedDataSpecificationWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformEmbeddedDataSpecificationWithContext(that, context) {
      var _iterator373, _step373, error, _iterator374, _step374, _error205;
      return _regeneratorRuntime().wrap(function transformEmbeddedDataSpecificationWithContext$(_context31) {
        while (1) switch (_context31.prev = _context31.next) {
          case 0:
            if (!(context === true)) {
              _context31.next = 37;
              break;
            }
            _iterator373 = _createForOfIteratorHelper(this.transformWithContext(that.dataSpecification, context));
            _context31.prev = 2;
            _iterator373.s();
          case 4:
            if ((_step373 = _iterator373.n()).done) {
              _context31.next = 11;
              break;
            }
            error = _step373.value;
            error.path.prepend(new PropertySegment(that, "dataSpecification"));
            _context31.next = 9;
            return error;
          case 9:
            _context31.next = 4;
            break;
          case 11:
            _context31.next = 16;
            break;
          case 13:
            _context31.prev = 13;
            _context31.t0 = _context31["catch"](2);
            _iterator373.e(_context31.t0);
          case 16:
            _context31.prev = 16;
            _iterator373.f();
            return _context31.finish(16);
          case 19:
            _iterator374 = _createForOfIteratorHelper(this.transformWithContext(that.dataSpecificationContent, context));
            _context31.prev = 20;
            _iterator374.s();
          case 22:
            if ((_step374 = _iterator374.n()).done) {
              _context31.next = 29;
              break;
            }
            _error205 = _step374.value;
            _error205.path.prepend(new PropertySegment(that, "dataSpecificationContent"));
            _context31.next = 27;
            return _error205;
          case 27:
            _context31.next = 22;
            break;
          case 29:
            _context31.next = 34;
            break;
          case 31:
            _context31.prev = 31;
            _context31.t1 = _context31["catch"](20);
            _iterator374.e(_context31.t1);
          case 34:
            _context31.prev = 34;
            _iterator374.f();
            return _context31.finish(34);
          case 37:
          case "end":
            return _context31.stop();
        }
      }, transformEmbeddedDataSpecificationWithContext, this, [[2, 13, 16, 19], [20, 31, 34, 37]]);
    })
  }, {
    key: "transformLevelTypeWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLevelTypeWithContext(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      return _regeneratorRuntime().wrap(function transformLevelTypeWithContext$(_context32) {
        while (1) switch (_context32.prev = _context32.next) {
          case 0:
          case "end":
            return _context32.stop();
        }
      }, transformLevelTypeWithContext);
    })
  }, {
    key: "transformValueReferencePairWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformValueReferencePairWithContext(that, context) {
      var _iterator375, _step375, _error206, _iterator376, _step376, error;
      return _regeneratorRuntime().wrap(function transformValueReferencePairWithContext$(_context33) {
        while (1) switch (_context33.prev = _context33.next) {
          case 0:
            _iterator375 = _createForOfIteratorHelper(verifyValueTypeIec61360(that.value));
            _context33.prev = 1;
            _iterator375.s();
          case 3:
            if ((_step375 = _iterator375.n()).done) {
              _context33.next = 10;
              break;
            }
            _error206 = _step375.value;
            _error206.path.prepend(new PropertySegment(that, "value"));
            _context33.next = 8;
            return _error206;
          case 8:
            _context33.next = 3;
            break;
          case 10:
            _context33.next = 15;
            break;
          case 12:
            _context33.prev = 12;
            _context33.t0 = _context33["catch"](1);
            _iterator375.e(_context33.t0);
          case 15:
            _context33.prev = 15;
            _iterator375.f();
            return _context33.finish(15);
          case 18:
            if (!(context === true)) {
              _context33.next = 37;
              break;
            }
            _iterator376 = _createForOfIteratorHelper(this.transformWithContext(that.valueId, context));
            _context33.prev = 20;
            _iterator376.s();
          case 22:
            if ((_step376 = _iterator376.n()).done) {
              _context33.next = 29;
              break;
            }
            error = _step376.value;
            error.path.prepend(new PropertySegment(that, "valueId"));
            _context33.next = 27;
            return error;
          case 27:
            _context33.next = 22;
            break;
          case 29:
            _context33.next = 34;
            break;
          case 31:
            _context33.prev = 31;
            _context33.t1 = _context33["catch"](20);
            _iterator376.e(_context33.t1);
          case 34:
            _context33.prev = 34;
            _iterator376.f();
            return _context33.finish(34);
          case 37:
          case "end":
            return _context33.stop();
        }
      }, transformValueReferencePairWithContext, this, [[1, 12, 15, 18], [20, 31, 34, 37]]);
    })
  }, {
    key: "transformValueListWithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformValueListWithContext(that, context) {
      var valueReferencePairsIndex, _iterator377, _step377, item, _iterator378, _step378, error;
      return _regeneratorRuntime().wrap(function transformValueListWithContext$(_context34) {
        while (1) switch (_context34.prev = _context34.next) {
          case 0:
            if (that.valueReferencePairs.length >= 1) {
              _context34.next = 3;
              break;
            }
            _context34.next = 3;
            return new VerificationError("Value reference pair types must contain at least one item.");
          case 3:
            if (!(context === true)) {
              _context34.next = 40;
              break;
            }
            valueReferencePairsIndex = 0;
            _iterator377 = _createForOfIteratorHelper(that.valueReferencePairs);
            _context34.prev = 6;
            _iterator377.s();
          case 8:
            if ((_step377 = _iterator377.n()).done) {
              _context34.next = 32;
              break;
            }
            item = _step377.value;
            _iterator378 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context34.prev = 11;
            _iterator378.s();
          case 13:
            if ((_step378 = _iterator378.n()).done) {
              _context34.next = 21;
              break;
            }
            error = _step378.value;
            error.path.prepend(new IndexSegment(that.valueReferencePairs, valueReferencePairsIndex));
            error.path.prepend(new PropertySegment(that, "valueReferencePairs"));
            _context34.next = 19;
            return error;
          case 19:
            _context34.next = 13;
            break;
          case 21:
            _context34.next = 26;
            break;
          case 23:
            _context34.prev = 23;
            _context34.t0 = _context34["catch"](11);
            _iterator378.e(_context34.t0);
          case 26:
            _context34.prev = 26;
            _iterator378.f();
            return _context34.finish(26);
          case 29:
            valueReferencePairsIndex++;
          case 30:
            _context34.next = 8;
            break;
          case 32:
            _context34.next = 37;
            break;
          case 34:
            _context34.prev = 34;
            _context34.t1 = _context34["catch"](6);
            _iterator377.e(_context34.t1);
          case 37:
            _context34.prev = 37;
            _iterator377.f();
            return _context34.finish(37);
          case 40:
          case "end":
            return _context34.stop();
        }
      }, transformValueListWithContext, this, [[6, 34, 37, 40], [11, 23, 26, 29]]);
    })
  }, {
    key: "transformLangStringPreferredNameTypeIec61360WithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringPreferredNameTypeIec61360WithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator379, _step379, error, _iterator380, _step380, _error207;
      return _regeneratorRuntime().wrap(function transformLangStringPreferredNameTypeIec61360WithContext$(_context35) {
        while (1) switch (_context35.prev = _context35.next) {
          case 0:
            if (that.text.length <= 255) {
              _context35.next = 3;
              break;
            }
            _context35.next = 3;
            return new VerificationError("String shall have a maximum length of 255 characters.");
          case 3:
            _iterator379 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context35.prev = 4;
            _iterator379.s();
          case 6:
            if ((_step379 = _iterator379.n()).done) {
              _context35.next = 13;
              break;
            }
            error = _step379.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context35.next = 11;
            return error;
          case 11:
            _context35.next = 6;
            break;
          case 13:
            _context35.next = 18;
            break;
          case 15:
            _context35.prev = 15;
            _context35.t0 = _context35["catch"](4);
            _iterator379.e(_context35.t0);
          case 18:
            _context35.prev = 18;
            _iterator379.f();
            return _context35.finish(18);
          case 21:
            _iterator380 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context35.prev = 22;
            _iterator380.s();
          case 24:
            if ((_step380 = _iterator380.n()).done) {
              _context35.next = 31;
              break;
            }
            _error207 = _step380.value;
            _error207.path.prepend(new PropertySegment(that, "text"));
            _context35.next = 29;
            return _error207;
          case 29:
            _context35.next = 24;
            break;
          case 31:
            _context35.next = 36;
            break;
          case 33:
            _context35.prev = 33;
            _context35.t1 = _context35["catch"](22);
            _iterator380.e(_context35.t1);
          case 36:
            _context35.prev = 36;
            _iterator380.f();
            return _context35.finish(36);
          case 39:
          case "end":
            return _context35.stop();
        }
      }, transformLangStringPreferredNameTypeIec61360WithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformLangStringShortNameTypeIec61360WithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringShortNameTypeIec61360WithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator381, _step381, error, _iterator382, _step382, _error208;
      return _regeneratorRuntime().wrap(function transformLangStringShortNameTypeIec61360WithContext$(_context36) {
        while (1) switch (_context36.prev = _context36.next) {
          case 0:
            if (that.text.length <= 18) {
              _context36.next = 3;
              break;
            }
            _context36.next = 3;
            return new VerificationError("String shall have a maximum length of 18 characters.");
          case 3:
            _iterator381 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context36.prev = 4;
            _iterator381.s();
          case 6:
            if ((_step381 = _iterator381.n()).done) {
              _context36.next = 13;
              break;
            }
            error = _step381.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context36.next = 11;
            return error;
          case 11:
            _context36.next = 6;
            break;
          case 13:
            _context36.next = 18;
            break;
          case 15:
            _context36.prev = 15;
            _context36.t0 = _context36["catch"](4);
            _iterator381.e(_context36.t0);
          case 18:
            _context36.prev = 18;
            _iterator381.f();
            return _context36.finish(18);
          case 21:
            _iterator382 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context36.prev = 22;
            _iterator382.s();
          case 24:
            if ((_step382 = _iterator382.n()).done) {
              _context36.next = 31;
              break;
            }
            _error208 = _step382.value;
            _error208.path.prepend(new PropertySegment(that, "text"));
            _context36.next = 29;
            return _error208;
          case 29:
            _context36.next = 24;
            break;
          case 31:
            _context36.next = 36;
            break;
          case 33:
            _context36.prev = 33;
            _context36.t1 = _context36["catch"](22);
            _iterator382.e(_context36.t1);
          case 36:
            _context36.prev = 36;
            _iterator382.f();
            return _context36.finish(36);
          case 39:
          case "end":
            return _context36.stop();
        }
      }, transformLangStringShortNameTypeIec61360WithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformLangStringDefinitionTypeIec61360WithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformLangStringDefinitionTypeIec61360WithContext(that,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context) {
      var _iterator383, _step383, error, _iterator384, _step384, _error209;
      return _regeneratorRuntime().wrap(function transformLangStringDefinitionTypeIec61360WithContext$(_context37) {
        while (1) switch (_context37.prev = _context37.next) {
          case 0:
            if (that.text.length <= 1023) {
              _context37.next = 3;
              break;
            }
            _context37.next = 3;
            return new VerificationError("String shall have a maximum length of 1023 characters.");
          case 3:
            _iterator383 = _createForOfIteratorHelper(verifyBcp47LanguageTag(that.language));
            _context37.prev = 4;
            _iterator383.s();
          case 6:
            if ((_step383 = _iterator383.n()).done) {
              _context37.next = 13;
              break;
            }
            error = _step383.value;
            error.path.prepend(new PropertySegment(that, "language"));
            _context37.next = 11;
            return error;
          case 11:
            _context37.next = 6;
            break;
          case 13:
            _context37.next = 18;
            break;
          case 15:
            _context37.prev = 15;
            _context37.t0 = _context37["catch"](4);
            _iterator383.e(_context37.t0);
          case 18:
            _context37.prev = 18;
            _iterator383.f();
            return _context37.finish(18);
          case 21:
            _iterator384 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.text));
            _context37.prev = 22;
            _iterator384.s();
          case 24:
            if ((_step384 = _iterator384.n()).done) {
              _context37.next = 31;
              break;
            }
            _error209 = _step384.value;
            _error209.path.prepend(new PropertySegment(that, "text"));
            _context37.next = 29;
            return _error209;
          case 29:
            _context37.next = 24;
            break;
          case 31:
            _context37.next = 36;
            break;
          case 33:
            _context37.prev = 33;
            _context37.t1 = _context37["catch"](22);
            _iterator384.e(_context37.t1);
          case 36:
            _context37.prev = 36;
            _iterator384.f();
            return _context37.finish(36);
          case 39:
          case "end":
            return _context37.stop();
        }
      }, transformLangStringDefinitionTypeIec61360WithContext, null, [[4, 15, 18, 21], [22, 33, 36, 39]]);
    })
  }, {
    key: "transformDataSpecificationIec61360WithContext",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function transformDataSpecificationIec61360WithContext(that, context) {
      var _iterator385, _step385, error, _iterator386, _step386, _error210, _iterator387, _step387, _error211, _iterator388, _step388, _error212, _iterator389, _step389, _error213, preferredNameIndex, _iterator390, _step390, _item98, _iterator398, _step398, _error219, shortNameIndex, _iterator391, _step391, item, _iterator392, _step392, _error214, _iterator393, _step393, _error215, definitionIndex, _iterator394, _step394, _item97, _iterator395, _step395, _error216, _iterator396, _step396, _error217, _iterator397, _step397, _error218;
      return _regeneratorRuntime().wrap(function transformDataSpecificationIec61360WithContext$(_context38) {
        while (1) switch (_context38.prev = _context38.next) {
          case 0:
            if (!(that.value !== null && that.valueList !== null)) {
              _context38.next = 3;
              break;
            }
            _context38.next = 3;
            return new VerificationError("Constraint AASc-3a-010: If value is not empty then value " + "list shall be empty and vice versa.");
          case 3:
            if (!(that.dataType !== null && IEC_61360_DATA_TYPES_WITH_UNIT.has(that.dataType)) || that.unit !== null || that.unitId !== null) {
              _context38.next = 6;
              break;
            }
            _context38.next = 6;
            return new VerificationError("Constraint AASc-3a-009: If data type is a an integer, real " + "or rational with a measure or currency, unit or unit ID " + "shall be defined.");
          case 6:
            if (!(that.definition !== null) || that.definition.length >= 1) {
              _context38.next = 9;
              break;
            }
            _context38.next = 9;
            return new VerificationError("Definition must be either not set or have at least one item.");
          case 9:
            if (!(that.definition !== null) || langStringsHaveUniqueLanguages(that.definition)) {
              _context38.next = 12;
              break;
            }
            _context38.next = 12;
            return new VerificationError("Definition must specify unique languages.");
          case 12:
            if (!(that.shortName !== null) || that.shortName.length >= 1) {
              _context38.next = 15;
              break;
            }
            _context38.next = 15;
            return new VerificationError("Short name must be either not set or have at least one item.");
          case 15:
            if (!(that.shortName !== null) || langStringsHaveUniqueLanguages(that.shortName)) {
              _context38.next = 18;
              break;
            }
            _context38.next = 18;
            return new VerificationError("Short name must specify unique languages.");
          case 18:
            if (that.preferredName.length >= 1) {
              _context38.next = 21;
              break;
            }
            _context38.next = 21;
            return new VerificationError("Preferred name must have at least one item.");
          case 21:
            if (langStringsHaveUniqueLanguages(that.preferredName)) {
              _context38.next = 24;
              break;
            }
            _context38.next = 24;
            return new VerificationError("Preferred name must specify unique languages.");
          case 24:
            if (some(map(that.preferredName, function (langString) {
              return isBcp47ForEnglish(langString.language);
            }))) {
              _context38.next = 27;
              break;
            }
            _context38.next = 27;
            return new VerificationError("Constraint AASc-002: preferred name shall be provided at " + "least in English.");
          case 27:
            if (!(that.unit !== null)) {
              _context38.next = 46;
              break;
            }
            _iterator385 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.unit));
            _context38.prev = 29;
            _iterator385.s();
          case 31:
            if ((_step385 = _iterator385.n()).done) {
              _context38.next = 38;
              break;
            }
            error = _step385.value;
            error.path.prepend(new PropertySegment(that, "unit"));
            _context38.next = 36;
            return error;
          case 36:
            _context38.next = 31;
            break;
          case 38:
            _context38.next = 43;
            break;
          case 40:
            _context38.prev = 40;
            _context38.t0 = _context38["catch"](29);
            _iterator385.e(_context38.t0);
          case 43:
            _context38.prev = 43;
            _iterator385.f();
            return _context38.finish(43);
          case 46:
            if (!(that.sourceOfDefinition !== null)) {
              _context38.next = 65;
              break;
            }
            _iterator386 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.sourceOfDefinition));
            _context38.prev = 48;
            _iterator386.s();
          case 50:
            if ((_step386 = _iterator386.n()).done) {
              _context38.next = 57;
              break;
            }
            _error210 = _step386.value;
            _error210.path.prepend(new PropertySegment(that, "sourceOfDefinition"));
            _context38.next = 55;
            return _error210;
          case 55:
            _context38.next = 50;
            break;
          case 57:
            _context38.next = 62;
            break;
          case 59:
            _context38.prev = 59;
            _context38.t1 = _context38["catch"](48);
            _iterator386.e(_context38.t1);
          case 62:
            _context38.prev = 62;
            _iterator386.f();
            return _context38.finish(62);
          case 65:
            if (!(that.symbol !== null)) {
              _context38.next = 84;
              break;
            }
            _iterator387 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.symbol));
            _context38.prev = 67;
            _iterator387.s();
          case 69:
            if ((_step387 = _iterator387.n()).done) {
              _context38.next = 76;
              break;
            }
            _error211 = _step387.value;
            _error211.path.prepend(new PropertySegment(that, "symbol"));
            _context38.next = 74;
            return _error211;
          case 74:
            _context38.next = 69;
            break;
          case 76:
            _context38.next = 81;
            break;
          case 78:
            _context38.prev = 78;
            _context38.t2 = _context38["catch"](67);
            _iterator387.e(_context38.t2);
          case 81:
            _context38.prev = 81;
            _iterator387.f();
            return _context38.finish(81);
          case 84:
            if (!(that.valueFormat !== null)) {
              _context38.next = 103;
              break;
            }
            _iterator388 = _createForOfIteratorHelper(verifyNonEmptyXmlSerializableString(that.valueFormat));
            _context38.prev = 86;
            _iterator388.s();
          case 88:
            if ((_step388 = _iterator388.n()).done) {
              _context38.next = 95;
              break;
            }
            _error212 = _step388.value;
            _error212.path.prepend(new PropertySegment(that, "valueFormat"));
            _context38.next = 93;
            return _error212;
          case 93:
            _context38.next = 88;
            break;
          case 95:
            _context38.next = 100;
            break;
          case 97:
            _context38.prev = 97;
            _context38.t3 = _context38["catch"](86);
            _iterator388.e(_context38.t3);
          case 100:
            _context38.prev = 100;
            _iterator388.f();
            return _context38.finish(100);
          case 103:
            if (!(that.value !== null)) {
              _context38.next = 122;
              break;
            }
            _iterator389 = _createForOfIteratorHelper(verifyValueTypeIec61360(that.value));
            _context38.prev = 105;
            _iterator389.s();
          case 107:
            if ((_step389 = _iterator389.n()).done) {
              _context38.next = 114;
              break;
            }
            _error213 = _step389.value;
            _error213.path.prepend(new PropertySegment(that, "value"));
            _context38.next = 112;
            return _error213;
          case 112:
            _context38.next = 107;
            break;
          case 114:
            _context38.next = 119;
            break;
          case 116:
            _context38.prev = 116;
            _context38.t4 = _context38["catch"](105);
            _iterator389.e(_context38.t4);
          case 119:
            _context38.prev = 119;
            _iterator389.f();
            return _context38.finish(119);
          case 122:
            if (!(context === true)) {
              _context38.next = 290;
              break;
            }
            preferredNameIndex = 0;
            _iterator390 = _createForOfIteratorHelper(that.preferredName);
            _context38.prev = 125;
            _iterator390.s();
          case 127:
            if ((_step390 = _iterator390.n()).done) {
              _context38.next = 151;
              break;
            }
            _item98 = _step390.value;
            _iterator398 = _createForOfIteratorHelper(this.transformWithContext(_item98, context));
            _context38.prev = 130;
            _iterator398.s();
          case 132:
            if ((_step398 = _iterator398.n()).done) {
              _context38.next = 140;
              break;
            }
            _error219 = _step398.value;
            _error219.path.prepend(new IndexSegment(that.preferredName, preferredNameIndex));
            _error219.path.prepend(new PropertySegment(that, "preferredName"));
            _context38.next = 138;
            return _error219;
          case 138:
            _context38.next = 132;
            break;
          case 140:
            _context38.next = 145;
            break;
          case 142:
            _context38.prev = 142;
            _context38.t5 = _context38["catch"](130);
            _iterator398.e(_context38.t5);
          case 145:
            _context38.prev = 145;
            _iterator398.f();
            return _context38.finish(145);
          case 148:
            preferredNameIndex++;
          case 149:
            _context38.next = 127;
            break;
          case 151:
            _context38.next = 156;
            break;
          case 153:
            _context38.prev = 153;
            _context38.t6 = _context38["catch"](125);
            _iterator390.e(_context38.t6);
          case 156:
            _context38.prev = 156;
            _iterator390.f();
            return _context38.finish(156);
          case 159:
            if (!(that.shortName !== null)) {
              _context38.next = 196;
              break;
            }
            shortNameIndex = 0;
            _iterator391 = _createForOfIteratorHelper(that.shortName);
            _context38.prev = 162;
            _iterator391.s();
          case 164:
            if ((_step391 = _iterator391.n()).done) {
              _context38.next = 188;
              break;
            }
            item = _step391.value;
            _iterator392 = _createForOfIteratorHelper(this.transformWithContext(item, context));
            _context38.prev = 167;
            _iterator392.s();
          case 169:
            if ((_step392 = _iterator392.n()).done) {
              _context38.next = 177;
              break;
            }
            _error214 = _step392.value;
            _error214.path.prepend(new IndexSegment(that.shortName, shortNameIndex));
            _error214.path.prepend(new PropertySegment(that, "shortName"));
            _context38.next = 175;
            return _error214;
          case 175:
            _context38.next = 169;
            break;
          case 177:
            _context38.next = 182;
            break;
          case 179:
            _context38.prev = 179;
            _context38.t7 = _context38["catch"](167);
            _iterator392.e(_context38.t7);
          case 182:
            _context38.prev = 182;
            _iterator392.f();
            return _context38.finish(182);
          case 185:
            shortNameIndex++;
          case 186:
            _context38.next = 164;
            break;
          case 188:
            _context38.next = 193;
            break;
          case 190:
            _context38.prev = 190;
            _context38.t8 = _context38["catch"](162);
            _iterator391.e(_context38.t8);
          case 193:
            _context38.prev = 193;
            _iterator391.f();
            return _context38.finish(193);
          case 196:
            if (!(that.unitId !== null)) {
              _context38.next = 215;
              break;
            }
            _iterator393 = _createForOfIteratorHelper(this.transformWithContext(that.unitId, context));
            _context38.prev = 198;
            _iterator393.s();
          case 200:
            if ((_step393 = _iterator393.n()).done) {
              _context38.next = 207;
              break;
            }
            _error215 = _step393.value;
            _error215.path.prepend(new PropertySegment(that, "unitId"));
            _context38.next = 205;
            return _error215;
          case 205:
            _context38.next = 200;
            break;
          case 207:
            _context38.next = 212;
            break;
          case 209:
            _context38.prev = 209;
            _context38.t9 = _context38["catch"](198);
            _iterator393.e(_context38.t9);
          case 212:
            _context38.prev = 212;
            _iterator393.f();
            return _context38.finish(212);
          case 215:
            if (!(that.definition !== null)) {
              _context38.next = 252;
              break;
            }
            definitionIndex = 0;
            _iterator394 = _createForOfIteratorHelper(that.definition);
            _context38.prev = 218;
            _iterator394.s();
          case 220:
            if ((_step394 = _iterator394.n()).done) {
              _context38.next = 244;
              break;
            }
            _item97 = _step394.value;
            _iterator395 = _createForOfIteratorHelper(this.transformWithContext(_item97, context));
            _context38.prev = 223;
            _iterator395.s();
          case 225:
            if ((_step395 = _iterator395.n()).done) {
              _context38.next = 233;
              break;
            }
            _error216 = _step395.value;
            _error216.path.prepend(new IndexSegment(that.definition, definitionIndex));
            _error216.path.prepend(new PropertySegment(that, "definition"));
            _context38.next = 231;
            return _error216;
          case 231:
            _context38.next = 225;
            break;
          case 233:
            _context38.next = 238;
            break;
          case 235:
            _context38.prev = 235;
            _context38.t10 = _context38["catch"](223);
            _iterator395.e(_context38.t10);
          case 238:
            _context38.prev = 238;
            _iterator395.f();
            return _context38.finish(238);
          case 241:
            definitionIndex++;
          case 242:
            _context38.next = 220;
            break;
          case 244:
            _context38.next = 249;
            break;
          case 246:
            _context38.prev = 246;
            _context38.t11 = _context38["catch"](218);
            _iterator394.e(_context38.t11);
          case 249:
            _context38.prev = 249;
            _iterator394.f();
            return _context38.finish(249);
          case 252:
            if (!(that.valueList !== null)) {
              _context38.next = 271;
              break;
            }
            _iterator396 = _createForOfIteratorHelper(this.transformWithContext(that.valueList, context));
            _context38.prev = 254;
            _iterator396.s();
          case 256:
            if ((_step396 = _iterator396.n()).done) {
              _context38.next = 263;
              break;
            }
            _error217 = _step396.value;
            _error217.path.prepend(new PropertySegment(that, "valueList"));
            _context38.next = 261;
            return _error217;
          case 261:
            _context38.next = 256;
            break;
          case 263:
            _context38.next = 268;
            break;
          case 265:
            _context38.prev = 265;
            _context38.t12 = _context38["catch"](254);
            _iterator396.e(_context38.t12);
          case 268:
            _context38.prev = 268;
            _iterator396.f();
            return _context38.finish(268);
          case 271:
            if (!(that.levelType !== null)) {
              _context38.next = 290;
              break;
            }
            _iterator397 = _createForOfIteratorHelper(this.transformWithContext(that.levelType, context));
            _context38.prev = 273;
            _iterator397.s();
          case 275:
            if ((_step397 = _iterator397.n()).done) {
              _context38.next = 282;
              break;
            }
            _error218 = _step397.value;
            _error218.path.prepend(new PropertySegment(that, "levelType"));
            _context38.next = 280;
            return _error218;
          case 280:
            _context38.next = 275;
            break;
          case 282:
            _context38.next = 287;
            break;
          case 284:
            _context38.prev = 284;
            _context38.t13 = _context38["catch"](273);
            _iterator397.e(_context38.t13);
          case 287:
            _context38.prev = 287;
            _iterator397.f();
            return _context38.finish(287);
          case 290:
          case "end":
            return _context38.stop();
        }
      }, transformDataSpecificationIec61360WithContext, this, [[29, 40, 43, 46], [48, 59, 62, 65], [67, 78, 81, 84], [86, 97, 100, 103], [105, 116, 119, 122], [125, 153, 156, 159], [130, 142, 145, 148], [162, 190, 193, 196], [167, 179, 182, 185], [198, 209, 212, 215], [218, 246, 249, 252], [223, 235, 238, 241], [254, 265, 268, 271], [273, 284, 287, 290]]);
    })
  }]);
  return Verifier;
}(AbstractTransformerWithContext);
var VERIFIER = new Verifier();

/**
 * Verify the constraints of `that`.
 *
 * @param that - instance to be verified
 * @param recurse - if set, continue the verification recursively
 * @returns a stream of verification errors
 */
function verify(that) {
  var recurse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context39) {
      while (1) switch (_context39.prev = _context39.next) {
        case 0:
          return _context39.delegateYield(VERIFIER.transformWithContext(that, recurse), "t0", 1);
        case 1:
        case "end":
          return _context39.stop();
      }
    }, _callee);
  })();
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyNonEmptyXmlSerializableString(that) {
  return _regeneratorRuntime().wrap(function verifyNonEmptyXmlSerializableString$(_context40) {
    while (1) switch (_context40.prev = _context40.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context40.next = 3;
          break;
        }
        _context40.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context40.next = 6;
          break;
        }
        _context40.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
      case "end":
        return _context40.stop();
    }
  }, _marked);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyDateTimeUtc(that) {
  return _regeneratorRuntime().wrap(function verifyDateTimeUtc$(_context41) {
    while (1) switch (_context41.prev = _context41.next) {
      case 0:
        if (matchesXsDateTimeUtc(that)) {
          _context41.next = 3;
          break;
        }
        _context41.next = 3;
        return new VerificationError("The value must match the pattern of xs:dateTime with " + "the time zone fixed to UTC.");
      case 3:
        if (isXsDateTimeUtc(that)) {
          _context41.next = 6;
          break;
        }
        _context41.next = 6;
        return new VerificationError("The value must represent a valid xs:dateTime with the time " + "zone fixed to UTC.");
      case 6:
      case "end":
        return _context41.stop();
    }
  }, _marked2);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyDuration(that) {
  return _regeneratorRuntime().wrap(function verifyDuration$(_context42) {
    while (1) switch (_context42.prev = _context42.next) {
      case 0:
        if (matchesXsDuration(that)) {
          _context42.next = 3;
          break;
        }
        _context42.next = 3;
        return new VerificationError("The value must match the pattern of xs:duration.");
      case 3:
      case "end":
        return _context42.stop();
    }
  }, _marked3);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyBlobType(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
that) {
  return _regeneratorRuntime().wrap(function verifyBlobType$(_context43) {
    while (1) switch (_context43.prev = _context43.next) {
      case 0:
      case "end":
        return _context43.stop();
    }
  }, _marked4);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyIdentifier(that) {
  return _regeneratorRuntime().wrap(function verifyIdentifier$(_context44) {
    while (1) switch (_context44.prev = _context44.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context44.next = 3;
          break;
        }
        _context44.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context44.next = 6;
          break;
        }
        _context44.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 2000) {
          _context44.next = 9;
          break;
        }
        _context44.next = 9;
        return new VerificationError("Identifier shall have a maximum length of 2000 characters.");
      case 9:
      case "end":
        return _context44.stop();
    }
  }, _marked5);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyValueTypeIec61360(that) {
  return _regeneratorRuntime().wrap(function verifyValueTypeIec61360$(_context45) {
    while (1) switch (_context45.prev = _context45.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context45.next = 3;
          break;
        }
        _context45.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context45.next = 6;
          break;
        }
        _context45.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 2000) {
          _context45.next = 9;
          break;
        }
        _context45.next = 9;
        return new VerificationError("Value type IEC 61360 shall have a maximum length of 2000 " + "characters.");
      case 9:
      case "end":
        return _context45.stop();
    }
  }, _marked6);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyNameType(that) {
  return _regeneratorRuntime().wrap(function verifyNameType$(_context46) {
    while (1) switch (_context46.prev = _context46.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context46.next = 3;
          break;
        }
        _context46.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context46.next = 6;
          break;
        }
        _context46.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 128) {
          _context46.next = 9;
          break;
        }
        _context46.next = 9;
        return new VerificationError("Name type shall have a maximum length of 128 characters.");
      case 9:
      case "end":
        return _context46.stop();
    }
  }, _marked7);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyVersionType(that) {
  return _regeneratorRuntime().wrap(function verifyVersionType$(_context47) {
    while (1) switch (_context47.prev = _context47.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context47.next = 3;
          break;
        }
        _context47.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context47.next = 6;
          break;
        }
        _context47.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (matchesVersionType(that)) {
          _context47.next = 9;
          break;
        }
        _context47.next = 9;
        return new VerificationError("Version type shall match the version pattern.");
      case 9:
        if (that.length <= 4) {
          _context47.next = 12;
          break;
        }
        _context47.next = 12;
        return new VerificationError("Version type shall have a maximum length of 4 characters.");
      case 12:
      case "end":
        return _context47.stop();
    }
  }, _marked8);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyRevisionType(that) {
  return _regeneratorRuntime().wrap(function verifyRevisionType$(_context48) {
    while (1) switch (_context48.prev = _context48.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context48.next = 3;
          break;
        }
        _context48.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context48.next = 6;
          break;
        }
        _context48.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (matchesRevisionType(that)) {
          _context48.next = 9;
          break;
        }
        _context48.next = 9;
        return new VerificationError("Revision type shall match the revision pattern.");
      case 9:
        if (that.length <= 4) {
          _context48.next = 12;
          break;
        }
        _context48.next = 12;
        return new VerificationError("Revision type shall have a maximum length of 4 characters.");
      case 12:
      case "end":
        return _context48.stop();
    }
  }, _marked9);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyLabelType(that) {
  return _regeneratorRuntime().wrap(function verifyLabelType$(_context49) {
    while (1) switch (_context49.prev = _context49.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context49.next = 3;
          break;
        }
        _context49.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context49.next = 6;
          break;
        }
        _context49.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 64) {
          _context49.next = 9;
          break;
        }
        _context49.next = 9;
        return new VerificationError("Label type shall have a maximum length of 64 characters.");
      case 9:
      case "end":
        return _context49.stop();
    }
  }, _marked10);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyMessageTopicType(that) {
  return _regeneratorRuntime().wrap(function verifyMessageTopicType$(_context50) {
    while (1) switch (_context50.prev = _context50.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context50.next = 3;
          break;
        }
        _context50.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context50.next = 6;
          break;
        }
        _context50.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 255) {
          _context50.next = 9;
          break;
        }
        _context50.next = 9;
        return new VerificationError("Message topic type shall have a maximum length of 255 " + "characters.");
      case 9:
      case "end":
        return _context50.stop();
    }
  }, _marked11);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyBcp47LanguageTag(that) {
  return _regeneratorRuntime().wrap(function verifyBcp47LanguageTag$(_context51) {
    while (1) switch (_context51.prev = _context51.next) {
      case 0:
        if (matchesBcp47(that)) {
          _context51.next = 3;
          break;
        }
        _context51.next = 3;
        return new VerificationError("The value must represent a value language tag conformant to " + "BCP 47.");
      case 3:
      case "end":
        return _context51.stop();
    }
  }, _marked12);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyContentType(that) {
  return _regeneratorRuntime().wrap(function verifyContentType$(_context52) {
    while (1) switch (_context52.prev = _context52.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context52.next = 3;
          break;
        }
        _context52.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context52.next = 6;
          break;
        }
        _context52.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 100) {
          _context52.next = 9;
          break;
        }
        _context52.next = 9;
        return new VerificationError("Content type shall have a maximum length of 100 characters.");
      case 9:
        if (matchesMimeType(that)) {
          _context52.next = 12;
          break;
        }
        _context52.next = 12;
        return new VerificationError("The value must represent a valid content MIME type " + "according to RFC 2046.");
      case 12:
      case "end":
        return _context52.stop();
    }
  }, _marked13);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyPathType(that) {
  return _regeneratorRuntime().wrap(function verifyPathType$(_context53) {
    while (1) switch (_context53.prev = _context53.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context53.next = 3;
          break;
        }
        _context53.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context53.next = 6;
          break;
        }
        _context53.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 2000) {
          _context53.next = 9;
          break;
        }
        _context53.next = 9;
        return new VerificationError("Identifier shall have a maximum length of 2000 characters.");
      case 9:
        if (matchesRfc8089Path(that)) {
          _context53.next = 12;
          break;
        }
        _context53.next = 12;
        return new VerificationError("The value must represent a valid file URI scheme according " + "to RFC 8089.");
      case 12:
      case "end":
        return _context53.stop();
    }
  }, _marked14);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyQualifierType(that) {
  return _regeneratorRuntime().wrap(function verifyQualifierType$(_context54) {
    while (1) switch (_context54.prev = _context54.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context54.next = 3;
          break;
        }
        _context54.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context54.next = 6;
          break;
        }
        _context54.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 128) {
          _context54.next = 9;
          break;
        }
        _context54.next = 9;
        return new VerificationError("Name type shall have a maximum length of 128 characters.");
      case 9:
      case "end":
        return _context54.stop();
    }
  }, _marked15);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyValueDataType(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
that) {
  return _regeneratorRuntime().wrap(function verifyValueDataType$(_context55) {
    while (1) switch (_context55.prev = _context55.next) {
      case 0:
      case "end":
        return _context55.stop();
    }
  }, _marked16);
}

/**
 * Verify the constraints of `that` value.
 *
 * @param that - to be verified
 * @returns errors, if any
 */
function verifyIdShortType(that) {
  return _regeneratorRuntime().wrap(function verifyIdShortType$(_context56) {
    while (1) switch (_context56.prev = _context56.next) {
      case 0:
        if (matchesXmlSerializableString(that)) {
          _context56.next = 3;
          break;
        }
        _context56.next = 3;
        return new VerificationError("Constraint AASd-130: An attribute with data type 'string' " + "shall consist of these characters only: " + "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$.");
      case 3:
        if (that.length >= 1) {
          _context56.next = 6;
          break;
        }
        _context56.next = 6;
        return new VerificationError("The value must not be empty.");
      case 6:
        if (that.length <= 128) {
          _context56.next = 9;
          break;
        }
        _context56.next = 9;
        return new VerificationError("Name type shall have a maximum length of 128 characters.");
      case 9:
        if (matchesIdShort(that)) {
          _context56.next = 12;
          break;
        }
        _context56.next = 12;
        return new VerificationError("ID-short of Referables shall only feature letters, digits, " + "underscore (``_``); starting mandatory with a letter. " + "*I.e.* ``[a-zA-Z][a-zA-Z0-9_]*``.");
      case 12:
      case "end":
        return _context56.stop();
    }
  }, _marked17);
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

var verification = /*#__PURE__*/Object.freeze({
  __proto__: null,
  IndexSegment: IndexSegment,
  Path: Path,
  PropertySegment: PropertySegment,
  VerificationError: VerificationError,
  dataSpecificationIec61360sForDocumentHaveAppropriateDataType: dataSpecificationIec61360sForDocumentHaveAppropriateDataType,
  dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType: dataSpecificationIec61360sForPropertyOrValueHaveAppropriateDataType,
  dataSpecificationIec61360sForReferenceHaveAppropriateDataType: dataSpecificationIec61360sForReferenceHaveAppropriateDataType,
  dataSpecificationIec61360sHaveDataType: dataSpecificationIec61360sHaveDataType,
  dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish: dataSpecificationIec61360sHaveDefinitionAtLeastInEnglish,
  dataSpecificationIec61360sHaveValue: dataSpecificationIec61360sHaveValue,
  extensionNamesAreUnique: extensionNamesAreUnique,
  idShortsAreUnique: idShortsAreUnique,
  idShortsOfVariablesAreUnique: idShortsOfVariablesAreUnique,
  isBcp47ForEnglish: isBcp47ForEnglish,
  isLeapYear: isLeapYear,
  isModelReferenceTo: isModelReferenceTo,
  isModelReferenceToReferable: isModelReferenceToReferable,
  isXsByte: isXsByte,
  isXsDate: isXsDate,
  isXsDateTime: isXsDateTime,
  isXsDateTimeUtc: isXsDateTimeUtc,
  isXsDouble: isXsDouble,
  isXsFloat: isXsFloat,
  isXsGMonthDay: isXsGMonthDay,
  isXsInt: isXsInt,
  isXsLong: isXsLong,
  isXsShort: isXsShort,
  isXsUnsignedByte: isXsUnsignedByte,
  isXsUnsignedInt: isXsUnsignedInt,
  isXsUnsignedLong: isXsUnsignedLong,
  isXsUnsignedShort: isXsUnsignedShort,
  langStringsHaveUniqueLanguages: langStringsHaveUniqueLanguages,
  matchesBcp47: matchesBcp47,
  matchesIdShort: matchesIdShort,
  matchesMimeType: matchesMimeType,
  matchesRevisionType: matchesRevisionType,
  matchesRfc8089Path: matchesRfc8089Path,
  matchesVersionType: matchesVersionType,
  matchesXmlSerializableString: matchesXmlSerializableString,
  matchesXsAnyUri: matchesXsAnyUri,
  matchesXsBase64Binary: matchesXsBase64Binary,
  matchesXsBoolean: matchesXsBoolean,
  matchesXsByte: matchesXsByte,
  matchesXsDate: matchesXsDate,
  matchesXsDateTime: matchesXsDateTime,
  matchesXsDateTimeUtc: matchesXsDateTimeUtc,
  matchesXsDecimal: matchesXsDecimal,
  matchesXsDouble: matchesXsDouble,
  matchesXsDuration: matchesXsDuration,
  matchesXsFloat: matchesXsFloat,
  matchesXsGDay: matchesXsGDay,
  matchesXsGMonth: matchesXsGMonth,
  matchesXsGMonthDay: matchesXsGMonthDay,
  matchesXsGYear: matchesXsGYear,
  matchesXsGYearMonth: matchesXsGYearMonth,
  matchesXsHexBinary: matchesXsHexBinary,
  matchesXsInt: matchesXsInt,
  matchesXsInteger: matchesXsInteger,
  matchesXsLong: matchesXsLong,
  matchesXsNegativeInteger: matchesXsNegativeInteger,
  matchesXsNonNegativeInteger: matchesXsNonNegativeInteger,
  matchesXsNonPositiveInteger: matchesXsNonPositiveInteger,
  matchesXsPositiveInteger: matchesXsPositiveInteger,
  matchesXsShort: matchesXsShort,
  matchesXsString: matchesXsString,
  matchesXsTime: matchesXsTime,
  matchesXsUnsignedByte: matchesXsUnsignedByte,
  matchesXsUnsignedInt: matchesXsUnsignedInt,
  matchesXsUnsignedLong: matchesXsUnsignedLong,
  matchesXsUnsignedShort: matchesXsUnsignedShort,
  propertiesOrRangesHaveValueType: propertiesOrRangesHaveValueType,
  qualifierTypesAreUnique: qualifierTypesAreUnique,
  referenceKeyValuesEqual: referenceKeyValuesEqual,
  submodelElementIsOfType: submodelElementIsOfType,
  submodelElementsHaveIdenticalSemanticIds: submodelElementsHaveIdenticalSemanticIds,
  valueConsistentWithXsdType: valueConsistentWithXsdType,
  verify: verify,
  verifyBcp47LanguageTag: verifyBcp47LanguageTag,
  verifyBlobType: verifyBlobType,
  verifyContentType: verifyContentType,
  verifyDateTimeUtc: verifyDateTimeUtc,
  verifyDuration: verifyDuration,
  verifyIdShortType: verifyIdShortType,
  verifyIdentifier: verifyIdentifier,
  verifyLabelType: verifyLabelType,
  verifyMessageTopicType: verifyMessageTopicType,
  verifyNameType: verifyNameType,
  verifyNonEmptyXmlSerializableString: verifyNonEmptyXmlSerializableString,
  verifyPathType: verifyPathType,
  verifyQualifierType: verifyQualifierType,
  verifyRevisionType: verifyRevisionType,
  verifyValueDataType: verifyValueDataType,
  verifyValueTypeIec61360: verifyValueTypeIec61360,
  verifyVersionType: verifyVersionType
});

export { common, constants, jsonization, stringification, types, verification };
//# sourceMappingURL=bundle.esm.js.map
